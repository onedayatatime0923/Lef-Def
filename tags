!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APinDiffArea	def/def/defiPinCap.cpp	/^int defiPin::APinDiffArea(int i) const {$/;"	f	class:defiPin
APinDiffAreaAllocated_	def/def/defiPinCap.hpp	/^  int APinDiffAreaAllocated_;$/;"	m	class:defiPin
APinDiffAreaLayer	def/def/defiPinCap.cpp	/^const char* defiPin::APinDiffAreaLayer(int i) const {$/;"	f	class:defiPin
APinDiffAreaLayer_	def/def/defiPinCap.hpp	/^  char** APinDiffAreaLayer_;             \/\/ 5.4 Layer$/;"	m	class:defiPin
APinDiffArea_	def/def/defiPinCap.hpp	/^  int* APinDiffArea_;                    \/\/ 5.4 AntennaPinDiffArea$/;"	m	class:defiPin
APinGateArea	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::APinGateArea(int i) const {$/;"	f	class:defiPinAntennaModel
APinGateAreaAllocated_	def/def/defiPinCap.hpp	/^  int APinGateAreaAllocated_;$/;"	m	class:defiPinAntennaModel
APinGateAreaLayer	def/def/defiPinCap.cpp	/^const char* defiPinAntennaModel::APinGateAreaLayer(int i) const {$/;"	f	class:defiPinAntennaModel
APinGateAreaLayer_	def/def/defiPinCap.hpp	/^  char** APinGateAreaLayer_;             \/\/ 5.4 Layer$/;"	m	class:defiPinAntennaModel
APinGateArea_	def/def/defiPinCap.hpp	/^  int* APinGateArea_;                    \/\/ 5.4 AntennaPinGateArea$/;"	m	class:defiPinAntennaModel
APinMaxAreaCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::APinMaxAreaCar(int i) const {$/;"	f	class:defiPinAntennaModel
APinMaxAreaCarAllocated_	def/def/defiPinCap.hpp	/^  int APinMaxAreaCarAllocated_;$/;"	m	class:defiPinAntennaModel
APinMaxAreaCarLayer	def/def/defiPinCap.cpp	/^const char* defiPinAntennaModel::APinMaxAreaCarLayer(int i) const {$/;"	f	class:defiPinAntennaModel
APinMaxAreaCarLayer_	def/def/defiPinCap.hpp	/^  char** APinMaxAreaCarLayer_;           \/\/ 5.4 Layer$/;"	m	class:defiPinAntennaModel
APinMaxAreaCar_	def/def/defiPinCap.hpp	/^  int* APinMaxAreaCar_;                  \/\/ 5.4 AntennaPinMaxAreaCar$/;"	m	class:defiPinAntennaModel
APinMaxCutCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::APinMaxCutCar(int i) const {$/;"	f	class:defiPinAntennaModel
APinMaxCutCarAllocated_	def/def/defiPinCap.hpp	/^  int APinMaxCutCarAllocated_;$/;"	m	class:defiPinAntennaModel
APinMaxCutCarLayer	def/def/defiPinCap.cpp	/^const char* defiPinAntennaModel::APinMaxCutCarLayer(int i) const {$/;"	f	class:defiPinAntennaModel
APinMaxCutCarLayer_	def/def/defiPinCap.hpp	/^  char** APinMaxCutCarLayer_;            \/\/ 5.4 Layer$/;"	m	class:defiPinAntennaModel
APinMaxCutCar_	def/def/defiPinCap.hpp	/^  int* APinMaxCutCar_;                   \/\/ 5.4 AntennaPinMaxCutCar$/;"	m	class:defiPinAntennaModel
APinMaxSideAreaCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::APinMaxSideAreaCar(int i) const {$/;"	f	class:defiPinAntennaModel
APinMaxSideAreaCarAllocated_	def/def/defiPinCap.hpp	/^  int APinMaxSideAreaCarAllocated_;$/;"	m	class:defiPinAntennaModel
APinMaxSideAreaCarLayer	def/def/defiPinCap.cpp	/^const char* defiPinAntennaModel::APinMaxSideAreaCarLayer(int i) const {$/;"	f	class:defiPinAntennaModel
APinMaxSideAreaCarLayer_	def/def/defiPinCap.hpp	/^  char** APinMaxSideAreaCarLayer_;       \/\/ 5.4 Layer$/;"	m	class:defiPinAntennaModel
APinMaxSideAreaCar_	def/def/defiPinCap.hpp	/^  int* APinMaxSideAreaCar_;              \/\/ 5.4 AntennaPinMaxSideAreaCar$/;"	m	class:defiPinAntennaModel
APinPartialCutArea	def/def/defiPinCap.cpp	/^int defiPin::APinPartialCutArea(int i) const {$/;"	f	class:defiPin
APinPartialCutAreaAllocated_	def/def/defiPinCap.hpp	/^  int APinPartialCutAreaAllocated_;$/;"	m	class:defiPin
APinPartialCutAreaLayer	def/def/defiPinCap.cpp	/^const char* defiPin::APinPartialCutAreaLayer(int i) const {$/;"	f	class:defiPin
APinPartialCutAreaLayer_	def/def/defiPinCap.hpp	/^  char** APinPartialCutAreaLayer_;       \/\/ 5.4 Layer$/;"	m	class:defiPin
APinPartialCutArea_	def/def/defiPinCap.hpp	/^  int* APinPartialCutArea_;              \/\/ 5.4 AntennaPinPartialCutArea$/;"	m	class:defiPin
APinPartialMetalArea	def/def/defiPinCap.cpp	/^int defiPin::APinPartialMetalArea(int i) const {$/;"	f	class:defiPin
APinPartialMetalAreaAllocated_	def/def/defiPinCap.hpp	/^  int APinPartialMetalAreaAllocated_;$/;"	m	class:defiPin
APinPartialMetalAreaLayer	def/def/defiPinCap.cpp	/^const char* defiPin::APinPartialMetalAreaLayer(int i) const {$/;"	f	class:defiPin
APinPartialMetalAreaLayer_	def/def/defiPinCap.hpp	/^  char** APinPartialMetalAreaLayer_;     \/\/ 5.4 Layer$/;"	m	class:defiPin
APinPartialMetalArea_	def/def/defiPinCap.hpp	/^  int* APinPartialMetalArea_;            \/\/ 5.4 AntennaPinPartialMetalArea$/;"	m	class:defiPin
APinPartialMetalSideArea	def/def/defiPinCap.cpp	/^int defiPin::APinPartialMetalSideArea(int i) const {$/;"	f	class:defiPin
APinPartialMetalSideAreaAllocated_	def/def/defiPinCap.hpp	/^  int APinPartialMetalSideAreaAllocated_;$/;"	m	class:defiPin
APinPartialMetalSideAreaLayer	def/def/defiPinCap.cpp	/^const char* defiPin::APinPartialMetalSideAreaLayer(int i) const {$/;"	f	class:defiPin
APinPartialMetalSideAreaLayer_	def/def/defiPinCap.hpp	/^  char** APinPartialMetalSideAreaLayer_; \/\/ 5.4 Layer$/;"	m	class:defiPin
APinPartialMetalSideArea_	def/def/defiPinCap.hpp	/^  int* APinPartialMetalSideArea_;        \/\/ 5.4 AntennaPinPartialMetalSideArea$/;"	m	class:defiPin
ARCH	def/template.mk	/^    ARCH=hppa$/;"	m
ARCH	def/template.mk	/^    ARCH=ibmrs$/;"	m
ARCH	def/template.mk	/^    ARCH=lnx86 $/;"	m
ARCH	def/template.mk	/^    ARCH=sun4v$/;"	m
ARCH	lef/template.mk	/^    ARCH=hppa$/;"	m
ARCH	lef/template.mk	/^    ARCH=ibmrs$/;"	m
ARCH	lef/template.mk	/^    ARCH=lnx86 $/;"	m
ARCH	lef/template.mk	/^    ARCH=sun4v$/;"	m
AddPathToNet	def/def/defrSettings.hpp	/^    int AddPathToNet;$/;"	m	class:defrSettings
AllowComponentNets	def/def/defrSettings.hpp	/^    int AllowComponentNets;$/;"	m	class:defrSettings
AntennaInoutCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaInoutCbk;$/;"	m	class:lefrCallbacks
AntennaInoutCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaInoutCbk;$/;"	m	class:lefrCallbacks
AntennaInoutWarnings	lef/include/lefrSettings.hpp	/^    int AntennaInoutWarnings;$/;"	m	class:lefrSettings
AntennaInoutWarnings	lef/lef/lefrSettings.hpp	/^    int AntennaInoutWarnings;$/;"	m	class:lefrSettings
AntennaInputCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaInputCbk;$/;"	m	class:lefrCallbacks
AntennaInputCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaInputCbk;$/;"	m	class:lefrCallbacks
AntennaInputWarnings	lef/include/lefrSettings.hpp	/^    int AntennaInputWarnings;$/;"	m	class:lefrSettings
AntennaInputWarnings	lef/lef/lefrSettings.hpp	/^    int AntennaInputWarnings;$/;"	m	class:lefrSettings
AntennaOutputCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaOutputCbk;$/;"	m	class:lefrCallbacks
AntennaOutputCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaOutputCbk;$/;"	m	class:lefrCallbacks
AntennaOutputWarnings	lef/include/lefrSettings.hpp	/^    int AntennaOutputWarnings;$/;"	m	class:lefrSettings
AntennaOutputWarnings	lef/lef/lefrSettings.hpp	/^    int AntennaOutputWarnings;$/;"	m	class:lefrSettings
ArrayBeginCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType ArrayBeginCbk;$/;"	m	class:lefrCallbacks
ArrayBeginCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType ArrayBeginCbk;$/;"	m	class:lefrCallbacks
ArrayCbk	lef/include/lefrCallBacks.hpp	/^    lefrArrayCbkFnType ArrayCbk;$/;"	m	class:lefrCallbacks
ArrayCbk	lef/lef/lefrCallBacks.hpp	/^    lefrArrayCbkFnType ArrayCbk;$/;"	m	class:lefrCallbacks
ArrayEndCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType ArrayEndCbk;$/;"	m	class:lefrCallbacks
ArrayEndCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType ArrayEndCbk;$/;"	m	class:lefrCallbacks
ArrayNameCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType ArrayNameCbk;$/;"	m	class:defrCallbacks
ArrayWarnings	lef/include/lefrSettings.hpp	/^    int ArrayWarnings;$/;"	m	class:lefrSettings
ArrayWarnings	lef/lef/lefrSettings.hpp	/^    int ArrayWarnings;$/;"	m	class:lefrSettings
Assertion	def/def/defrData.hpp	/^    defiAssertion Assertion;$/;"	m	class:defrData
AssertionCbk	def/def/defrCallBacks.hpp	/^    defrAssertionCbkFnType AssertionCbk;$/;"	m	class:defrCallbacks
AssertionWarnings	def/def/defrSettings.hpp	/^    int AssertionWarnings;$/;"	m	class:defrSettings
AssertionsEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType AssertionsEndCbk;$/;"	m	class:defrCallbacks
AssertionsStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType AssertionsStartCbk;$/;"	m	class:defrCallbacks
BEGIN_LEFDEF_PARSER_NAMESPACE	def/def/defiKRDefs.hpp	33;"	d
BEGIN_LEFDEF_PARSER_NAMESPACE	lef/include/lefiKRDefs.hpp	33;"	d
BEGIN_LEFDEF_PARSER_NAMESPACE	lef/lef/lefiKRDefs.hpp	33;"	d
BINOBJS	def/template.mk	/^BINOBJS =	$(TMP4:.c=.o)$/;"	m
BINOBJS	lef/template.mk	/^BINOBJS =	$(TMP4:.c=.o)$/;"	m
BINSRCS	def/defdiff/Makefile	/^BINSRCS =	\\$/;"	m
BINSRCS	def/defrw/Makefile	/^BINSRCS =	\\$/;"	m
BINSRCS	def/defwrite/Makefile	/^BINSRCS =	defwrite.cpp$/;"	m
BINSRCS	lef/lefdiff/Makefile	/^BINSRCS =	\\$/;"	m
BINSRCS	lef/lefrw/Makefile	/^BINSRCS =	lefrw.cpp$/;"	m
BINSRCS	lef/lefwrite/Makefile	/^BINSRCS =	lefwrite.cpp$/;"	m
BINTARGET	def/defdiff/Makefile	/^BINTARGET =	defdiff$/;"	m
BINTARGET	def/defrw/Makefile	/^BINTARGET =	defrw$/;"	m
BINTARGET	def/defwrite/Makefile	/^BINTARGET =	defwrite$/;"	m
BINTARGET	lef/lefdiff/Makefile	/^BINTARGET =	lefdiff$/;"	m
BINTARGET	lef/lefrw/Makefile	/^BINTARGET = lefrw$/;"	m
BINTARGET	lef/lefwrite/Makefile	/^BINTARGET = lefwrite$/;"	m
BIN_LINK_FLAGS	def/template.mk	/^    BIN_LINK_FLAGS=-lPW$/;"	m
BIN_LINK_FLAGS	lef/template.mk	/^    BIN_LINK_FLAGS=-lPW$/;"	m
BUILD_ORDER	def/Makefile	/^BUILD_ORDER	= \\$/;"	m
BUILD_ORDER	lef/Makefile	/^BUILD_ORDER	= \\$/;"	m
Blockage	def/def/defrData.hpp	/^    defiBlockage Blockage;$/;"	m	class:defrData
BlockageCbk	def/def/defrCallBacks.hpp	/^    defrBlockageCbkFnType BlockageCbk;$/;"	m	class:defrCallbacks
BlockageEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType BlockageEndCbk;$/;"	m	class:defrCallbacks
BlockageStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType BlockageStartCbk;$/;"	m	class:defrCallbacks
BlockageWarnings	def/def/defrSettings.hpp	/^    int BlockageWarnings;$/;"	m	class:defrSettings
BusBitCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType BusBitCbk;$/;"	m	class:defrCallbacks
BusBitCharsCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType BusBitCharsCbk;$/;"	m	class:lefrCallbacks
BusBitCharsCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType BusBitCharsCbk;$/;"	m	class:lefrCallbacks
CALLBACK	lef/lef/lef.tab.cpp	113;"	d	file:
CASE	lef/clef/xlefiDebug.cpp	/^const char* CASE (const char * x) {$/;"	f
CASE	lef/lef/lefiDebug.cpp	/^CASE(const char *x)$/;"	f
CBMAX	def/cdef/defrReader.h	41;"	d
CBMAX	def/def/defrReader.hpp	40;"	d
CC	def/template.mk	/^    CC=\/usr\/bin\/cc_r -Dibmrs$/;"	m
CC	def/template.mk	/^    CC=gcc$/;"	m
CC	lef/template.mk	/^    CC=\/usr\/bin\/cc_r -Dibmrs$/;"	m
CC	lef/template.mk	/^    CC=gcc$/;"	m
CDEFIALIAS_H	def/cdef/defiAlias.h	35;"	d
CDEFIASSERTION_H	def/cdef/defiAssertion.h	35;"	d
CDEFIBLOCKAGE_H	def/cdef/defiBlockage.h	35;"	d
CDEFICOMPONENT_H	def/cdef/defiComponent.h	35;"	d
CDEFIDEBUG_H	def/cdef/defiDebug.h	35;"	d
CDEFIFILL_H	def/cdef/defiFill.h	35;"	d
CDEFIFPC_H	def/cdef/defiFPC.h	35;"	d
CDEFIGROUP_H	def/cdef/defiGroup.h	35;"	d
CDEFIIOTIMING_H	def/cdef/defiIOTiming.h	35;"	d
CDEFIMISC_H	def/cdef/defiMisc.h	35;"	d
CDEFINET_H	def/cdef/defiNet.h	35;"	d
CDEFINONDEFAULT_H	def/cdef/defiNonDefault.h	35;"	d
CDEFIPARTITION_H	def/cdef/defiPartition.h	35;"	d
CDEFIPATH_H	def/cdef/defiPath.h	35;"	d
CDEFIPINCAP_H	def/cdef/defiPinCap.h	35;"	d
CDEFIPINPROP_H	def/cdef/defiPinProp.h	35;"	d
CDEFIPROPTYPE_H	def/cdef/defiPropType.h	35;"	d
CDEFIPROP_H	def/cdef/defiProp.h	35;"	d
CDEFIREGION_H	def/cdef/defiRegion.h	35;"	d
CDEFIROWTRACK_H	def/cdef/defiRowTrack.h	35;"	d
CDEFISCANCHAIN_H	def/cdef/defiScanchain.h	35;"	d
CDEFISITE_H	def/cdef/defiSite.h	35;"	d
CDEFISLOT_H	def/cdef/defiSlot.h	35;"	d
CDEFITIMINGDISABLE_H	def/cdef/defiTimingDisable.h	35;"	d
CDEFIUSER_H	def/cdef/defiUser.h	45;"	d
CDEFIVIA_H	def/cdef/defiVia.h	35;"	d
CDEFRREADER_H	def/cdef/defrReader.h	35;"	d
CDEFWWRITERCALLS_H	def/cdef/defwWriterCalls.h	35;"	d
CDEFWWRITER_H	def/cdef/defwWriter.h	35;"	d
CHECK_DEF_STATUS	def/def/defwWriterCalls.cpp	109;"	d	file:
CHECK_STATUS	def/defwrite/defwrite.cpp	43;"	d	file:
CHECK_STATUS	def/defwrite/defwriteCbs.cpp	44;"	d	file:
CHECK_STATUS	lef/lefwrite/lefwrite.cpp	43;"	d	file:
CHECK_STATUS	lef/lefwrite/lefwriteCbs.cpp	44;"	d	file:
CHKERR	lef/lef/lef.tab.cpp	123;"	d	file:
CLEFDEFZIP_H	def/cdefzlib/defzlib.h	26;"	d
CLEFIARRAY_H	lef/clef/lefiArray.h	35;"	d
CLEFIARRAY_H	lef/include/lefiArray.h	35;"	d
CLEFICROSSTALK_H	lef/clef/lefiCrossTalk.h	35;"	d
CLEFICROSSTALK_H	lef/include/lefiCrossTalk.h	35;"	d
CLEFIDEBUG_H	lef/clef/lefiDebug.h	35;"	d
CLEFIDEBUG_H	lef/include/lefiDebug.h	35;"	d
CLEFIENCRYPTINT_H	lef/clef/lefiEncryptInt.h	35;"	d
CLEFIENCRYPTINT_H	lef/include/lefiEncryptInt.h	35;"	d
CLEFILAYER_H	lef/clef/lefiLayer.h	35;"	d
CLEFILAYER_H	lef/include/lefiLayer.h	35;"	d
CLEFIMACRO_H	lef/clef/lefiMacro.h	35;"	d
CLEFIMACRO_H	lef/include/lefiMacro.h	35;"	d
CLEFIMISC_H	lef/clef/lefiMisc.h	35;"	d
CLEFIMISC_H	lef/include/lefiMisc.h	35;"	d
CLEFINONDEFAULT_H	lef/clef/lefiNonDefault.h	35;"	d
CLEFINONDEFAULT_H	lef/include/lefiNonDefault.h	35;"	d
CLEFIPROPTYPE_H	lef/clef/lefiPropType.h	35;"	d
CLEFIPROPTYPE_H	lef/include/lefiPropType.h	35;"	d
CLEFIPROP_H	lef/clef/lefiProp.h	35;"	d
CLEFIPROP_H	lef/include/lefiProp.h	35;"	d
CLEFITYPEDEFS_H	def/cdef/defiTypedefs.h	35;"	d
CLEFITYPEDEFS_H	lef/clef/lefiTypedefs.h	35;"	d
CLEFITYPEDEFS_H	lef/include/lefiTypedefs.h	35;"	d
CLEFIUNITS_H	lef/clef/lefiUnits.h	35;"	d
CLEFIUNITS_H	lef/include/lefiUnits.h	35;"	d
CLEFIUSER_H	lef/clef/lefiUser.h	44;"	d
CLEFIUSER_H	lef/include/lefiUser.h	44;"	d
CLEFIUTIL_H	lef/clef/lefiUtil.h	35;"	d
CLEFIUTIL_H	lef/include/lefiUtil.h	35;"	d
CLEFIVIARULE_H	lef/clef/lefiViaRule.h	35;"	d
CLEFIVIARULE_H	lef/include/lefiViaRule.h	35;"	d
CLEFIVIA_H	lef/clef/lefiVia.h	35;"	d
CLEFIVIA_H	lef/include/lefiVia.h	35;"	d
CLEFRREADER_H	lef/clef/lefrReader.h	35;"	d
CLEFRREADER_H	lef/include/lefrReader.h	35;"	d
CLEFWWRITERCALLS_H	lef/clef/lefwWriterCalls.h	35;"	d
CLEFWWRITERCALLS_H	lef/include/lefwWriterCalls.h	35;"	d
CLEFWWRITER_H	lef/clef/lefwWriter.h	35;"	d
CLEFWWRITER_H	lef/include/lefwWriter.h	35;"	d
CLEFZLIB_H	lef/clefzlib/lefzlib.h	26;"	d
CLEFZLIB_H	lef/include/lefzlib.h	26;"	d
CRYPT_H	lef/lef/crypt.hpp	31;"	d
CURRENT_VERSION	def/def/defrData.hpp	42;"	d
CURRENT_VERSION	lef/include/lefrData.hpp	53;"	d
CURRENT_VERSION	lef/lef/lefrData.hpp	53;"	d
CXX	def/template.mk	/^    CXX=CC$/;"	m
CXX	def/template.mk	/^    CXX=\/opt\/aCC\/bin\/aCC$/;"	m
CXX	def/template.mk	/^    CXX=\/usr\/bin\/xlC_r -+ -Dibmrs$/;"	m
CXX	def/template.mk	/^    CXX=g++$/;"	m
CXX	lef/template.mk	/^    CXX=CC$/;"	m
CXX	lef/template.mk	/^    CXX=\/opt\/aCC\/bin\/aCC$/;"	m
CXX	lef/template.mk	/^    CXX=\/usr\/bin\/xlC_r -+ -Dibmrs$/;"	m
CXX	lef/template.mk	/^    CXX=g++$/;"	m
CXXFLAGS	def/template.mk	/^    CXXFLAGS=+DAportable -AA$/;"	m
CXXFLAGS	def/template.mk	/^    CXXFLAGS=-g$/;"	m
CXXFLAGS	lef/template.mk	/^    CXXFLAGS=+DAportable -AA$/;"	m
CXXFLAGS	lef/template.mk	/^    CXXFLAGS=-g$/;"	m
C_EQ	lef/lef/lef.tab.cpp	133;"	d	file:
C_GE	lef/lef/lef.tab.cpp	138;"	d	file:
C_GT	lef/lef/lef.tab.cpp	137;"	d	file:
C_LE	lef/lef/lef.tab.cpp	136;"	d	file:
C_LT	lef/lef/lef.tab.cpp	135;"	d	file:
C_NE	lef/lef/lef.tab.cpp	134;"	d	file:
CannotOccupy	def/def/defrData.hpp	/^    defiSite CannotOccupy;$/;"	m	class:defrData
CannotOccupyCbk	def/def/defrCallBacks.hpp	/^    defrSiteCbkFnType CannotOccupyCbk;$/;"	m	class:defrCallbacks
Canplace	def/def/defrData.hpp	/^    defiSite Canplace;$/;"	m	class:defrData
CanplaceCbk	def/def/defrCallBacks.hpp	/^    defrSiteCbkFnType CanplaceCbk;$/;"	m	class:defrCallbacks
CaseSensitive	lef/include/lefrSettings.hpp	/^    int CaseSensitive;$/;"	m	class:lefrSettings
CaseSensitive	lef/lef/lefrSettings.hpp	/^    int CaseSensitive;$/;"	m	class:lefrSettings
CaseSensitiveCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType CaseSensitiveCbk;$/;"	m	class:defrCallbacks
CaseSensitiveCbk	lef/include/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType CaseSensitiveCbk;$/;"	m	class:lefrCallbacks
CaseSensitiveCbk	lef/lef/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType CaseSensitiveCbk;$/;"	m	class:lefrCallbacks
CaseSensitiveSet	lef/include/lefrSettings.hpp	/^    int CaseSensitiveSet;$/;"	m	class:lefrSettings
CaseSensitiveSet	lef/lef/lefrSettings.hpp	/^    int CaseSensitiveSet;$/;"	m	class:lefrSettings
CaseSensitiveWarnings	def/def/defrSettings.hpp	/^    int CaseSensitiveWarnings;$/;"	m	class:defrSettings
CaseSensitiveWarnings	lef/include/lefrSettings.hpp	/^    int CaseSensitiveWarnings;$/;"	m	class:lefrSettings
CaseSensitiveWarnings	lef/lef/lefrSettings.hpp	/^    int CaseSensitiveWarnings;$/;"	m	class:lefrSettings
Clear	def/def/defiPropType.cpp	/^void defiPropType::Clear() {$/;"	f	class:defiPropType
Clear	lef/lef/lefiPropType.cpp	/^lefiPropType::Clear()$/;"	f	class:lefiPropType
ClearanceMeasureCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType ClearanceMeasureCbk;$/;"	m	class:lefrCallbacks
ClearanceMeasureCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType ClearanceMeasureCbk;$/;"	m	class:lefrCallbacks
CommentChar	def/def/defrSettings.hpp	/^    char CommentChar;$/;"	m	class:defrSettings
CommentChar	lef/include/lefrSettings.hpp	/^    char CommentChar;$/;"	m	class:lefrSettings
CommentChar	lef/lef/lefrSettings.hpp	/^    char CommentChar;$/;"	m	class:lefrSettings
CompPinProp	def/def/defrSettings.hpp	/^    defiPropType    CompPinProp;$/;"	m	class:defrSession
CompProp	def/def/defrSettings.hpp	/^    defiPropType    CompProp;$/;"	m	class:defrSession
Component	def/def/defrData.hpp	/^    defiComponent Component;$/;"	m	class:defrData
ComponentCbk	def/def/defrCallBacks.hpp	/^    defrComponentCbkFnType ComponentCbk;$/;"	m	class:defrCallbacks
ComponentEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType ComponentEndCbk;$/;"	m	class:defrCallbacks
ComponentExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType ComponentExtCbk;$/;"	m	class:defrCallbacks
ComponentMaskShiftLayer	def/def/defrData.hpp	/^    defiComponentMaskShiftLayer ComponentMaskShiftLayer;$/;"	m	class:defrData
ComponentMaskShiftLayerCbk	def/def/defrCallBacks.hpp	/^    defrComponentMaskShiftLayerCbkFnType ComponentMaskShiftLayerCbk;$/;"	m	class:defrCallbacks
ComponentStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType ComponentStartCbk;$/;"	m	class:defrCallbacks
ComponentWarnings	def/def/defrSettings.hpp	/^    int ComponentWarnings;$/;"	m	class:defrSettings
ConstraintCbk	def/def/defrCallBacks.hpp	/^    defrAssertionCbkFnType ConstraintCbk;$/;"	m	class:defrCallbacks
ConstraintWarnings	def/def/defrSettings.hpp	/^    int ConstraintWarnings;$/;"	m	class:defrSettings
ConstraintsEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType ConstraintsEndCbk;$/;"	m	class:defrCallbacks
ConstraintsStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType ConstraintsStartCbk;$/;"	m	class:defrCallbacks
ContextErrorLogFunction	def/def/defrSettings.hpp	/^    DEFI_CONTEXT_LOG_FUNCTION ContextErrorLogFunction;$/;"	m	class:defrSettings
ContextLineNumberFunction	def/def/defrSettings.hpp	/^    DEFI_CONTEXT_LINE_NUMBER_FUNCTION ContextLineNumberFunction;$/;"	m	class:defrSettings
ContextLongLineNumberFunction	def/def/defrSettings.hpp	/^    DEFI_CONTEXT_LONG_LINE_NUMBER_FUNCTION ContextLongLineNumberFunction;$/;"	m	class:defrSettings
ContextWarningLogFunction	def/def/defrSettings.hpp	/^    DEFI_CONTEXT_WARNING_LOG_FUNCTION ContextWarningLogFunction;$/;"	m	class:defrSettings
CorrectionTableCbk	lef/include/lefrCallBacks.hpp	/^    lefrCorrectionTableCbkFnType CorrectionTableCbk;$/;"	m	class:lefrCallbacks
CorrectionTableCbk	lef/lef/lefrCallBacks.hpp	/^    lefrCorrectionTableCbkFnType CorrectionTableCbk;$/;"	m	class:lefrCallbacks
CorrectionTableWarnings	lef/include/lefrSettings.hpp	/^    int CorrectionTableWarnings;$/;"	m	class:lefrSettings
CorrectionTableWarnings	lef/lef/lefrSettings.hpp	/^    int CorrectionTableWarnings;$/;"	m	class:lefrSettings
DEFCASE	def/cdef/xdefiDebug.cpp	/^const char* DEFCASE (const char*  ch) {$/;"	f
DEFCASE	def/def/def_keywords.cpp	/^defrData::DEFCASE(const char* ch)$/;"	f	class:defrData
DEFCASE	def/def/defiDebug.cpp	/^const char* DEFCASE(const char* ch, defrData *defData) {$/;"	f
DEFEmsMsgTable	def/cdef/defMsgTable.h	/^emsError_t DEFEmsMsgTable[] =$/;"	v
DEFIPATH_DONE	def/cdef/defiPath.h	/^  DEFIPATH_DONE = 0,$/;"	e	enum:defiPath_e
DEFIPATH_DONE	def/def/defiPath.hpp	/^  DEFIPATH_DONE = 0,$/;"	e	enum:defiPath_e
DEFIPATH_FLUSHPOINT	def/cdef/defiPath.h	/^  DEFIPATH_FLUSHPOINT = 6,$/;"	e	enum:defiPath_e
DEFIPATH_FLUSHPOINT	def/def/defiPath.hpp	/^  DEFIPATH_FLUSHPOINT,$/;"	e	enum:defiPath_e
DEFIPATH_LAYER	def/cdef/defiPath.h	/^  DEFIPATH_LAYER = 1,$/;"	e	enum:defiPath_e
DEFIPATH_LAYER	def/def/defiPath.hpp	/^  DEFIPATH_LAYER,$/;"	e	enum:defiPath_e
DEFIPATH_MASK	def/cdef/defiPath.h	/^  DEFIPATH_MASK = 14,$/;"	e	enum:defiPath_e
DEFIPATH_MASK	def/def/defiPath.hpp	/^  DEFIPATH_MASK,$/;"	e	enum:defiPath_e
DEFIPATH_POINT	def/cdef/defiPath.h	/^  DEFIPATH_POINT = 5,$/;"	e	enum:defiPath_e
DEFIPATH_POINT	def/def/defiPath.hpp	/^  DEFIPATH_POINT,$/;"	e	enum:defiPath_e
DEFIPATH_RECT	def/cdef/defiPath.h	/^  DEFIPATH_RECT = 12,$/;"	e	enum:defiPath_e
DEFIPATH_RECT	def/def/defiPath.hpp	/^  DEFIPATH_RECT,$/;"	e	enum:defiPath_e
DEFIPATH_SHAPE	def/cdef/defiPath.h	/^  DEFIPATH_SHAPE = 8,$/;"	e	enum:defiPath_e
DEFIPATH_SHAPE	def/def/defiPath.hpp	/^  DEFIPATH_SHAPE,$/;"	e	enum:defiPath_e
DEFIPATH_STYLE	def/cdef/defiPath.h	/^  DEFIPATH_STYLE = 9,$/;"	e	enum:defiPath_e
DEFIPATH_STYLE	def/def/defiPath.hpp	/^  DEFIPATH_STYLE,$/;"	e	enum:defiPath_e
DEFIPATH_TAPER	def/cdef/defiPath.h	/^  DEFIPATH_TAPER = 7,$/;"	e	enum:defiPath_e
DEFIPATH_TAPER	def/def/defiPath.hpp	/^  DEFIPATH_TAPER,$/;"	e	enum:defiPath_e
DEFIPATH_TAPERRULE	def/cdef/defiPath.h	/^  DEFIPATH_TAPERRULE = 10,$/;"	e	enum:defiPath_e
DEFIPATH_TAPERRULE	def/def/defiPath.hpp	/^  DEFIPATH_TAPERRULE,$/;"	e	enum:defiPath_e
DEFIPATH_VIA	def/cdef/defiPath.h	/^  DEFIPATH_VIA = 2,$/;"	e	enum:defiPath_e
DEFIPATH_VIA	def/def/defiPath.hpp	/^  DEFIPATH_VIA,$/;"	e	enum:defiPath_e
DEFIPATH_VIADATA	def/cdef/defiPath.h	/^  DEFIPATH_VIADATA = 11,$/;"	e	enum:defiPath_e
DEFIPATH_VIADATA	def/def/defiPath.hpp	/^  DEFIPATH_VIADATA,$/;"	e	enum:defiPath_e
DEFIPATH_VIAMASK	def/cdef/defiPath.h	/^  DEFIPATH_VIAMASK = 15$/;"	e	enum:defiPath_e
DEFIPATH_VIAMASK	def/def/defiPath.hpp	/^  DEFIPATH_VIAMASK$/;"	e	enum:defiPath_e
DEFIPATH_VIAROTATION	def/cdef/defiPath.h	/^  DEFIPATH_VIAROTATION = 3,$/;"	e	enum:defiPath_e
DEFIPATH_VIAROTATION	def/def/defiPath.hpp	/^  DEFIPATH_VIAROTATION,$/;"	e	enum:defiPath_e
DEFIPATH_VIRTUALPOINT	def/cdef/defiPath.h	/^  DEFIPATH_VIRTUALPOINT = 13,$/;"	e	enum:defiPath_e
DEFIPATH_VIRTUALPOINT	def/def/defiPath.hpp	/^  DEFIPATH_VIRTUALPOINT,$/;"	e	enum:defiPath_e
DEFIPATH_WIDTH	def/cdef/defiPath.h	/^  DEFIPATH_WIDTH = 4,$/;"	e	enum:defiPath_e
DEFIPATH_WIDTH	def/def/defiPath.hpp	/^  DEFIPATH_WIDTH,$/;"	e	enum:defiPath_e
DEFI_COMPONENT_COVER	def/cdef/defiComponent.h	45;"	d
DEFI_COMPONENT_COVER	def/def/defiComponent.hpp	45;"	d
DEFI_COMPONENT_FIXED	def/cdef/defiComponent.h	44;"	d
DEFI_COMPONENT_FIXED	def/def/defiComponent.hpp	44;"	d
DEFI_COMPONENT_PLACED	def/cdef/defiComponent.h	43;"	d
DEFI_COMPONENT_PLACED	def/def/defiComponent.hpp	43;"	d
DEFI_COMPONENT_UNPLACED	def/cdef/defiComponent.h	42;"	d
DEFI_COMPONENT_UNPLACED	def/def/defiComponent.hpp	42;"	d
DEFI_CONTEXT_LINE_NUMBER_FUNCTION	def/def/defrReader.hpp	/^typedef void (*DEFI_CONTEXT_LINE_NUMBER_FUNCTION)  (defiUserData userData, int);$/;"	t
DEFI_CONTEXT_LOG_FUNCTION	def/def/defrReader.hpp	/^    typedef void (*DEFI_CONTEXT_LOG_FUNCTION) (defiUserData userData, const char*);$/;"	t
DEFI_CONTEXT_LONG_LINE_NUMBER_FUNCTION	def/def/defrReader.hpp	/^typedef void (*DEFI_CONTEXT_LONG_LINE_NUMBER_FUNCTION)  (defiUserData userData, long long);$/;"	t
DEFI_CONTEXT_WARNING_LOG_FUNCTION	def/def/defrReader.hpp	/^    typedef void (*DEFI_CONTEXT_WARNING_LOG_FUNCTION) (defiUserData userData, const char*);$/;"	t
DEFI_DEFS_H	def/def/defiDefs.hpp	33;"	d
DEFI_ENCRYPTINT_H	lef/include/lefiEncryptInt.hpp	31;"	d
DEFI_ENCRYPTINT_H	lef/lef/lefiEncryptInt.hpp	31;"	d
DEFI_FREE_FUNCTION	def/cdef/defrReader.h	/^typedef void (*DEFI_FREE_FUNCTION) (void *);$/;"	t
DEFI_FREE_FUNCTION	def/def/defrReader.hpp	/^typedef void (*DEFI_FREE_FUNCTION) (void *);$/;"	t
DEFI_LINE_NUMBER_FUNCTION	def/cdef/defrReader.h	/^typedef void (*DEFI_LINE_NUMBER_FUNCTION)  (int);$/;"	t
DEFI_LINE_NUMBER_FUNCTION	def/def/defrReader.hpp	/^typedef void (*DEFI_LINE_NUMBER_FUNCTION)  (int);$/;"	t
DEFI_LOG_FUNCTION	def/cdef/defrReader.h	/^    typedef void (*DEFI_LOG_FUNCTION) (const char*);$/;"	t
DEFI_LOG_FUNCTION	def/cdef/defwWriterCalls.h	/^    typedef void (*DEFI_LOG_FUNCTION) (const char*);$/;"	t
DEFI_LOG_FUNCTION	def/def/defrReader.hpp	/^    typedef void (*DEFI_LOG_FUNCTION) (const char*);$/;"	t
DEFI_LOG_FUNCTION	def/def/defwWriterCalls.hpp	/^    typedef void (*DEFI_LOG_FUNCTION) (const char*);$/;"	t
DEFI_LONG_LINE_NUMBER_FUNCTION	def/cdef/defrReader.h	/^typedef void (*DEFI_LONG_LINE_NUMBER_FUNCTION)  (long long);$/;"	t
DEFI_LONG_LINE_NUMBER_FUNCTION	def/def/defrReader.hpp	/^typedef void (*DEFI_LONG_LINE_NUMBER_FUNCTION)  (long long);$/;"	t
DEFI_MAGIC_COMMENT_FOUND_FUNCTION	def/cdef/defrReader.h	/^typedef void (*DEFI_MAGIC_COMMENT_FOUND_FUNCTION) ();$/;"	t
DEFI_MAGIC_COMMENT_FOUND_FUNCTION	def/def/defrReader.hpp	/^typedef void (*DEFI_MAGIC_COMMENT_FOUND_FUNCTION) ();$/;"	t
DEFI_MALLOC_FUNCTION	def/cdef/defrReader.h	/^typedef void* (*DEFI_MALLOC_FUNCTION) (size_t);$/;"	t
DEFI_MALLOC_FUNCTION	def/def/defrReader.hpp	/^typedef void* (*DEFI_MALLOC_FUNCTION) (size_t);$/;"	t
DEFI_READ_FUNCTION	def/cdef/defrReader.h	/^typedef size_t (*DEFI_READ_FUNCTION)  (FILE*, char*, size_t);$/;"	t
DEFI_READ_FUNCTION	def/def/defrReader.hpp	/^typedef size_t (*DEFI_READ_FUNCTION)  (FILE*, char*, size_t);$/;"	t
DEFI_REALLOC_FUNCTION	def/cdef/defrReader.h	/^typedef void* (*DEFI_REALLOC_FUNCTION) (void*, size_t);$/;"	t
DEFI_REALLOC_FUNCTION	def/def/defrReader.hpp	/^typedef void* (*DEFI_REALLOC_FUNCTION) (void*, size_t);$/;"	t
DEFI_USER_H	def/def/defiUser.hpp	41;"	d
DEFI_WARNING_LOG_FUNCTION	def/cdef/defrReader.h	/^    typedef void (*DEFI_WARNING_LOG_FUNCTION) (const char*);$/;"	t
DEFI_WARNING_LOG_FUNCTION	def/cdef/defwWriterCalls.h	/^    typedef void (*DEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t
DEFI_WARNING_LOG_FUNCTION	def/def/defrReader.hpp	/^    typedef void (*DEFI_WARNING_LOG_FUNCTION) (const char*);$/;"	t
DEFI_WARNING_LOG_FUNCTION	def/def/defwWriterCalls.hpp	/^    typedef void (*DEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t
DEFI_WRITER_H	def/def/defwWriterCalls.hpp	31;"	d
DEFRCALLBACKS_H	def/def/defrCallBacks.hpp	31;"	d
DEFRREADER_H	def/def/defrReader.hpp	31;"	d
DEFW_ALREADY_DEFINED	def/cdef/defwWriter.h	45;"	d
DEFW_ALREADY_DEFINED	def/def/defwWriter.hpp	47;"	d
DEFW_ARRAY	def/def/defwWriter.cpp	60;"	d	file:
DEFW_BAD_DATA	def/cdef/defwWriter.h	44;"	d
DEFW_BAD_DATA	def/def/defwWriter.hpp	46;"	d
DEFW_BAD_ORDER	def/cdef/defwWriter.h	43;"	d
DEFW_BAD_ORDER	def/def/defwWriter.hpp	45;"	d
DEFW_BEGINEXT	def/def/defwWriter.cpp	149;"	d	file:
DEFW_BEGINEXT_END	def/def/defwWriter.cpp	150;"	d	file:
DEFW_BEGINEXT_START	def/def/defwWriter.cpp	148;"	d	file:
DEFW_BLOCKAGE_END	def/def/defwWriter.cpp	100;"	d	file:
DEFW_BLOCKAGE_LAYER	def/def/defwWriter.cpp	96;"	d	file:
DEFW_BLOCKAGE_MASK	def/def/defwWriter.cpp	153;"	d	file:
DEFW_BLOCKAGE_PLACE	def/def/defwWriter.cpp	97;"	d	file:
DEFW_BLOCKAGE_POLYGON	def/def/defwWriter.cpp	99;"	d	file:
DEFW_BLOCKAGE_RECT	def/def/defwWriter.cpp	98;"	d	file:
DEFW_BLOCKAGE_START	def/def/defwWriter.cpp	95;"	d	file:
DEFW_BUSBIT	def/def/defwWriter.cpp	57;"	d	file:
DEFW_CANNOTOCCUPY	def/def/defwWriter.cpp	75;"	d	file:
DEFW_CANPLACE	def/def/defwWriter.cpp	74;"	d	file:
DEFW_CASESENSITIVE	def/def/defwWriter.cpp	55;"	d	file:
DEFW_COMPONENT	def/def/defwWriter.cpp	86;"	d	file:
DEFW_COMPONENT_END	def/def/defwWriter.cpp	87;"	d	file:
DEFW_COMPONENT_MASKSHIFTLAYERS	def/def/defwWriter.cpp	84;"	d	file:
DEFW_COMPONENT_START	def/def/defwWriter.cpp	85;"	d	file:
DEFW_DEFAULTCAP	def/def/defwWriter.cpp	72;"	d	file:
DEFW_DEFAULTCAP_END	def/def/defwWriter.cpp	73;"	d	file:
DEFW_DEFAULTCAP_START	def/def/defwWriter.cpp	71;"	d	file:
DEFW_DESIGN	def/def/defwWriter.cpp	58;"	d	file:
DEFW_DIE_AREA	def/def/defwWriter.cpp	67;"	d	file:
DEFW_DIVIDER	def/def/defwWriter.cpp	56;"	d	file:
DEFW_DONE	def/def/defwWriter.cpp	157;"	d	file:
DEFW_END	def/def/defwWriter.cpp	155;"	d	file:
DEFW_FILL_END	def/def/defwWriter.cpp	141;"	d	file:
DEFW_FILL_LAYER	def/def/defwWriter.cpp	137;"	d	file:
DEFW_FILL_LAYERMASK	def/def/defwWriter.cpp	151;"	d	file:
DEFW_FILL_OPC	def/def/defwWriter.cpp	139;"	d	file:
DEFW_FILL_RECT	def/def/defwWriter.cpp	140;"	d	file:
DEFW_FILL_START	def/def/defwWriter.cpp	136;"	d	file:
DEFW_FILL_VIA	def/def/defwWriter.cpp	138;"	d	file:
DEFW_FILL_VIAMASK	def/def/defwWriter.cpp	152;"	d	file:
DEFW_FLOORPLAN	def/def/defwWriter.cpp	61;"	d	file:
DEFW_FPC	def/def/defwWriter.cpp	125;"	d	file:
DEFW_FPC_END	def/def/defwWriter.cpp	128;"	d	file:
DEFW_FPC_OPER	def/def/defwWriter.cpp	126;"	d	file:
DEFW_FPC_OPER_SUM	def/def/defwWriter.cpp	127;"	d	file:
DEFW_FPC_START	def/def/defwWriter.cpp	124;"	d	file:
DEFW_GCELL_GRID	def/def/defwWriter.cpp	70;"	d	file:
DEFW_GROUP	def/def/defwWriter.cpp	130;"	d	file:
DEFW_GROUP_END	def/def/defwWriter.cpp	131;"	d	file:
DEFW_GROUP_START	def/def/defwWriter.cpp	129;"	d	file:
DEFW_HISTORY	def/def/defwWriter.cpp	63;"	d	file:
DEFW_INIT	def/def/defwWriter.cpp	53;"	d	file:
DEFW_IOTIMING	def/def/defwWriter.cpp	117;"	d	file:
DEFW_IOTIMING_END	def/def/defwWriter.cpp	118;"	d	file:
DEFW_IOTIMING_START	def/def/defwWriter.cpp	116;"	d	file:
DEFW_NDR	def/def/defwWriter.cpp	143;"	d	file:
DEFW_NDR_END	def/def/defwWriter.cpp	144;"	d	file:
DEFW_NDR_START	def/def/defwWriter.cpp	142;"	d	file:
DEFW_NET	def/def/defwWriter.cpp	110;"	d	file:
DEFW_NET_END	def/def/defwWriter.cpp	113;"	d	file:
DEFW_NET_ENDNET	def/def/defwWriter.cpp	112;"	d	file:
DEFW_NET_OPTIONS	def/def/defwWriter.cpp	111;"	d	file:
DEFW_NET_START	def/def/defwWriter.cpp	109;"	d	file:
DEFW_NOSHIELD	def/def/defwWriter.cpp	115;"	d	file:
DEFW_OBSOLETE	def/cdef/defwWriter.h	47;"	d
DEFW_OBSOLETE	def/def/defwWriter.hpp	49;"	d
DEFW_OK	def/cdef/defwWriter.h	41;"	d
DEFW_OK	def/def/defwWriter.hpp	43;"	d
DEFW_PATH	def/def/defwWriter.cpp	107;"	d	file:
DEFW_PATH_START	def/def/defwWriter.cpp	106;"	d	file:
DEFW_PIN	def/def/defwWriter.cpp	89;"	d	file:
DEFW_PINPROP	def/def/defwWriter.cpp	93;"	d	file:
DEFW_PINPROP_END	def/def/defwWriter.cpp	94;"	d	file:
DEFW_PINPROP_START	def/def/defwWriter.cpp	92;"	d	file:
DEFW_PIN_END	def/def/defwWriter.cpp	91;"	d	file:
DEFW_PIN_PORT	def/def/defwWriter.cpp	90;"	d	file:
DEFW_PIN_START	def/def/defwWriter.cpp	88;"	d	file:
DEFW_PROP	def/def/defwWriter.cpp	65;"	d	file:
DEFW_PROP_END	def/def/defwWriter.cpp	66;"	d	file:
DEFW_PROP_START	def/def/defwWriter.cpp	64;"	d	file:
DEFW_REGION	def/def/defwWriter.cpp	82;"	d	file:
DEFW_REGION_END	def/def/defwWriter.cpp	83;"	d	file:
DEFW_REGION_START	def/def/defwWriter.cpp	81;"	d	file:
DEFW_ROW	def/def/defwWriter.cpp	68;"	d	file:
DEFW_SCANCHAIN	def/def/defwWriter.cpp	120;"	d	file:
DEFW_SCANCHAIN_END	def/def/defwWriter.cpp	123;"	d	file:
DEFW_SCANCHAIN_START	def/def/defwWriter.cpp	119;"	d	file:
DEFW_SCAN_FLOATING	def/def/defwWriter.cpp	121;"	d	file:
DEFW_SCAN_ORDERED	def/def/defwWriter.cpp	122;"	d	file:
DEFW_SHIELD	def/def/defwWriter.cpp	108;"	d	file:
DEFW_SLOT_END	def/def/defwWriter.cpp	135;"	d	file:
DEFW_SLOT_LAYER	def/def/defwWriter.cpp	133;"	d	file:
DEFW_SLOT_RECT	def/def/defwWriter.cpp	134;"	d	file:
DEFW_SLOT_START	def/def/defwWriter.cpp	132;"	d	file:
DEFW_SNET	def/def/defwWriter.cpp	102;"	d	file:
DEFW_SNET_END	def/def/defwWriter.cpp	105;"	d	file:
DEFW_SNET_ENDNET	def/def/defwWriter.cpp	104;"	d	file:
DEFW_SNET_OPTIONS	def/def/defwWriter.cpp	103;"	d	file:
DEFW_SNET_START	def/def/defwWriter.cpp	101;"	d	file:
DEFW_STYLES	def/def/defwWriter.cpp	146;"	d	file:
DEFW_STYLES_END	def/def/defwWriter.cpp	147;"	d	file:
DEFW_STYLES_START	def/def/defwWriter.cpp	145;"	d	file:
DEFW_SUBNET	def/def/defwWriter.cpp	114;"	d	file:
DEFW_TECHNOLOGY	def/def/defwWriter.cpp	59;"	d	file:
DEFW_TOO_MANY_STMS	def/cdef/defwWriter.h	48;"	d
DEFW_TOO_MANY_STMS	def/def/defwWriter.hpp	50;"	d
DEFW_TRACKS	def/def/defwWriter.cpp	69;"	d	file:
DEFW_UNINIT	def/def/defwWriter.cpp	52;"	d	file:
DEFW_UNINITIALIZED	def/cdef/defwWriter.h	42;"	d
DEFW_UNINITIALIZED	def/def/defwWriter.hpp	44;"	d
DEFW_UNITS	def/def/defwWriter.cpp	62;"	d	file:
DEFW_VERSION	def/def/defwWriter.cpp	54;"	d	file:
DEFW_VIA	def/def/defwWriter.cpp	77;"	d	file:
DEFW_VIAONE_END	def/def/defwWriter.cpp	79;"	d	file:
DEFW_VIAVIARULE	def/def/defwWriter.cpp	78;"	d	file:
DEFW_VIA_END	def/def/defwWriter.cpp	80;"	d	file:
DEFW_VIA_START	def/def/defwWriter.cpp	76;"	d	file:
DEFW_WRITER_H	def/def/defwWriter.hpp	31;"	d
DEFW_WRONG_VERSION	def/cdef/defwWriter.h	46;"	d
DEFW_WRONG_VERSION	def/def/defwWriter.hpp	48;"	d
DEF_BISON_SRCS	def/cdef/Makefile	/^DEF_BISON_SRCS  = def.y$/;"	m
DEF_BISON_SRCS	def/def/Makefile	/^DEF_BISON_SRCS  = def.y$/;"	m
DEF_DEBUG_IDS	def/def/defrSettings.hpp	39;"	d
DEF_INIT	def/def/defrReader.cpp	48;"	d	file:
DEF_MSGS	def/cdef/defrReader.h	40;"	d
DEF_MSGS	def/def/defrReader.hpp	39;"	d
DEF_ORIENT_E	def/def/defiUtil.hpp	41;"	d
DEF_ORIENT_FE	def/def/defiUtil.hpp	45;"	d
DEF_ORIENT_FN	def/def/defiUtil.hpp	42;"	d
DEF_ORIENT_FS	def/def/defiUtil.hpp	44;"	d
DEF_ORIENT_FW	def/def/defiUtil.hpp	43;"	d
DEF_ORIENT_N	def/def/defiUtil.hpp	38;"	d
DEF_ORIENT_S	def/def/defiUtil.hpp	40;"	d
DEF_ORIENT_W	def/def/defiUtil.hpp	39;"	d
DEF_TABNAME	def/cdef/Makefile	/^DEF_TABNAME     = def$/;"	m
DEF_TABNAME	def/def/Makefile	/^DEF_TABNAME     = def$/;"	m
DEF_TABNAME	def/defzlib/Makefile	/^DEF_TABNAME     = defzlib$/;"	m
DIFFDEFRW_H	def/defdiff/diffDefRW.hpp	31;"	d
DIFFDEFRW_H	lef/lefdiff/diffLefRW.hpp	31;"	d
DIRNAME	def/cdefzlib/Makefile	/^DIRNAME = cdefzlib$/;"	m
DIRNAME	lef/clef/Makefile	/^DIRNAME = lef$/;"	m
DIRNAME	lef/clefzlib/Makefile	/^DIRNAME = clefzlib$/;"	m
DIRNAME	lef/lef/Makefile	/^DIRNAME = lef$/;"	m
DIRNAME	lef/lefzlib/Makefile	/^DIRNAME = lefzlib$/;"	m
Data	def/def/defiAlias.cpp	/^const char* defiAlias_itr::Data() {$/;"	f	class:defiAlias_itr
DefGetToken	def/def/def_keywords.cpp	/^defrData::DefGetToken(char **buf, int *bufferSize)$/;"	f	class:defrData
DefGetTokenFromStack	def/def/def_keywords.cpp	/^defrData::DefGetTokenFromStack(char *s) {$/;"	f	class:defrData
DefaultCapCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType DefaultCapCbk;$/;"	m	class:defrCallbacks
DefaultCapWarnings	def/def/defrSettings.hpp	/^    int DefaultCapWarnings;$/;"	m	class:defrSettings
DeltaNumberLines	lef/include/lefrSettings.hpp	/^    int DeltaNumberLines;$/;"	m	class:lefrSettings
DeltaNumberLines	lef/lef/lefrSettings.hpp	/^    int DeltaNumberLines;$/;"	m	class:lefrSettings
DensityCbk	lef/include/lefrCallBacks.hpp	/^    lefrDensityCbkFnType DensityCbk;$/;"	m	class:lefrCallbacks
DensityCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDensityCbkFnType DensityCbk;$/;"	m	class:lefrCallbacks
DesignCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType DesignCbk;$/;"	m	class:defrCallbacks
DesignEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType DesignEndCbk;$/;"	m	class:defrCallbacks
DesignProp	def/def/defrSettings.hpp	/^    defiPropType    DesignProp;$/;"	m	class:defrSession
Destroy	def/def/defiAlias.cpp	/^void defiAlias_itr::Destroy() {$/;"	f	class:defiAlias_itr
Destroy	def/def/defiAssertion.cpp	/^void defiAssertion::Destroy() {$/;"	f	class:defiAssertion
Destroy	def/def/defiBlockage.cpp	/^void defiBlockage::Destroy() {$/;"	f	class:defiBlockage
Destroy	def/def/defiComponent.cpp	/^void defiComponent::Destroy() {$/;"	f	class:defiComponent
Destroy	def/def/defiComponent.cpp	/^void defiComponentMaskShiftLayer::Destroy() {$/;"	f	class:defiComponentMaskShiftLayer
Destroy	def/def/defiFPC.cpp	/^void defiFPC::Destroy() {$/;"	f	class:defiFPC
Destroy	def/def/defiFill.cpp	/^void defiFill::Destroy() {$/;"	f	class:defiFill
Destroy	def/def/defiGroup.cpp	/^void defiGroup::Destroy() {$/;"	f	class:defiGroup
Destroy	def/def/defiIOTiming.cpp	/^void defiIOTiming::Destroy() {$/;"	f	class:defiIOTiming
Destroy	def/def/defiMisc.cpp	/^void defiGeometries::Destroy() {$/;"	f	class:defiGeometries
Destroy	def/def/defiMisc.cpp	/^void defiStyles::Destroy() {$/;"	f	class:defiStyles
Destroy	def/def/defiNet.cpp	/^void defiNet::Destroy() {$/;"	f	class:defiNet
Destroy	def/def/defiNet.cpp	/^void defiShield::Destroy() {$/;"	f	class:defiShield
Destroy	def/def/defiNet.cpp	/^void defiSubnet::Destroy() {$/;"	f	class:defiSubnet
Destroy	def/def/defiNet.cpp	/^void defiVpin::Destroy() {$/;"	f	class:defiVpin
Destroy	def/def/defiNet.cpp	/^void defiWire::Destroy() {$/;"	f	class:defiWire
Destroy	def/def/defiNonDefault.cpp	/^void defiNonDefault::Destroy() {$/;"	f	class:defiNonDefault
Destroy	def/def/defiPartition.cpp	/^void defiPartition::Destroy() {$/;"	f	class:defiPartition
Destroy	def/def/defiPath.cpp	/^void defiPath::Destroy() {$/;"	f	class:defiPath
Destroy	def/def/defiPinCap.cpp	/^void defiPin::Destroy() {$/;"	f	class:defiPin
Destroy	def/def/defiPinCap.cpp	/^void defiPinAntennaModel::Destroy() {$/;"	f	class:defiPinAntennaModel
Destroy	def/def/defiPinProp.cpp	/^void defiPinProp::Destroy() {$/;"	f	class:defiPinProp
Destroy	def/def/defiProp.cpp	/^void defiProp::Destroy() {$/;"	f	class:defiProp
Destroy	def/def/defiPropType.cpp	/^void defiPropType::Destroy() {$/;"	f	class:defiPropType
Destroy	def/def/defiRegion.cpp	/^void defiRegion::Destroy() {$/;"	f	class:defiRegion
Destroy	def/def/defiRowTrack.cpp	/^void defiGcellGrid::Destroy() {$/;"	f	class:defiGcellGrid
Destroy	def/def/defiRowTrack.cpp	/^void defiRow::Destroy() {$/;"	f	class:defiRow
Destroy	def/def/defiRowTrack.cpp	/^void defiTrack::Destroy() {$/;"	f	class:defiTrack
Destroy	def/def/defiScanchain.cpp	/^void defiOrdered::Destroy() {$/;"	f	class:defiOrdered
Destroy	def/def/defiScanchain.cpp	/^void defiScanchain::Destroy() {$/;"	f	class:defiScanchain
Destroy	def/def/defiSite.cpp	/^void defiBox::Destroy() {$/;"	f	class:defiBox
Destroy	def/def/defiSite.cpp	/^void defiSite::Destroy() {$/;"	f	class:defiSite
Destroy	def/def/defiSlot.cpp	/^void defiSlot::Destroy() {$/;"	f	class:defiSlot
Destroy	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::Destroy() {$/;"	f	class:defiTimingDisable
Destroy	def/def/defiVia.cpp	/^void defiVia::Destroy() {$/;"	f	class:defiVia
Destroy	lef/lef/lefiArray.cpp	/^lefiArray::Destroy()$/;"	f	class:lefiArray
Destroy	lef/lef/lefiArray.cpp	/^lefiArrayFloorPlan::Destroy()$/;"	f	class:lefiArrayFloorPlan
Destroy	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::Destroy()$/;"	f	class:lefiCorrectionEdge
Destroy	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::Destroy()$/;"	f	class:lefiCorrectionResistance
Destroy	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::Destroy()$/;"	f	class:lefiCorrectionTable
Destroy	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::Destroy()$/;"	f	class:lefiCorrectionVictim
Destroy	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::Destroy()$/;"	f	class:lefiNoiseEdge
Destroy	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::Destroy()$/;"	f	class:lefiNoiseResistance
Destroy	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::Destroy()$/;"	f	class:lefiNoiseTable
Destroy	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::Destroy()$/;"	f	class:lefiNoiseVictim
Destroy	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::Destroy()$/;"	f	class:lefiAntennaModel
Destroy	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::Destroy()$/;"	f	class:lefiAntennaPWL
Destroy	lef/lef/lefiLayer.cpp	/^lefiInfluence::Destroy()$/;"	f	class:lefiInfluence
Destroy	lef/lef/lefiLayer.cpp	/^lefiLayer::Destroy()$/;"	f	class:lefiLayer
Destroy	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::Destroy()$/;"	f	class:lefiLayerDensity
Destroy	lef/lef/lefiLayer.cpp	/^lefiOrthogonal::Destroy()$/;"	f	class:lefiOrthogonal
Destroy	lef/lef/lefiLayer.cpp	/^lefiParallel::Destroy()$/;"	f	class:lefiParallel
Destroy	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::Destroy()$/;"	f	class:lefiSpacingTable
Destroy	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::Destroy()$/;"	f	class:lefiTwoWidths
Destroy	lef/lef/lefiMacro.cpp	/^lefiDensity::Destroy()$/;"	f	class:lefiDensity
Destroy	lef/lef/lefiMacro.cpp	/^lefiMacro::Destroy()$/;"	f	class:lefiMacro
Destroy	lef/lef/lefiMacro.cpp	/^lefiObstruction::Destroy()$/;"	f	class:lefiObstruction
Destroy	lef/lef/lefiMacro.cpp	/^lefiPin::Destroy()$/;"	f	class:lefiPin
Destroy	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::Destroy()$/;"	f	class:lefiPinAntennaModel
Destroy	lef/lef/lefiMacro.cpp	/^lefiTiming::Destroy()$/;"	f	class:lefiTiming
Destroy	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::Destroy()$/;"	f	class:lefiGcellPattern
Destroy	lef/lef/lefiMisc.cpp	/^lefiGeometries::Destroy()$/;"	f	class:lefiGeometries
Destroy	lef/lef/lefiMisc.cpp	/^lefiIRDrop::Destroy()$/;"	f	class:lefiIRDrop
Destroy	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::Destroy()$/;"	f	class:lefiMaxStackVia
Destroy	lef/lef/lefiMisc.cpp	/^lefiMinFeature::Destroy()$/;"	f	class:lefiMinFeature
Destroy	lef/lef/lefiMisc.cpp	/^lefiSite::Destroy()$/;"	f	class:lefiSite
Destroy	lef/lef/lefiMisc.cpp	/^lefiSitePattern::Destroy()$/;"	f	class:lefiSitePattern
Destroy	lef/lef/lefiMisc.cpp	/^lefiSpacing::Destroy()$/;"	f	class:lefiSpacing
Destroy	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::Destroy()$/;"	f	class:lefiTrackPattern
Destroy	lef/lef/lefiMisc.cpp	/^lefiUseMinSpacing::Destroy()$/;"	f	class:lefiUseMinSpacing
Destroy	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::Destroy()$/;"	f	class:lefiNonDefault
Destroy	lef/lef/lefiProp.cpp	/^lefiProp::Destroy()$/;"	f	class:lefiProp
Destroy	lef/lef/lefiPropType.cpp	/^lefiPropType::Destroy()$/;"	f	class:lefiPropType
Destroy	lef/lef/lefiUnits.cpp	/^lefiUnits::Destroy()$/;"	f	class:lefiUnits
Destroy	lef/lef/lefiVia.cpp	/^lefiVia::Destroy()$/;"	f	class:lefiVia
Destroy	lef/lef/lefiVia.cpp	/^lefiViaLayer::Destroy()$/;"	f	class:lefiViaLayer
Destroy	lef/lef/lefiViaRule.cpp	/^lefiViaRule::Destroy()$/;"	f	class:lefiViaRule
Destroy	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::Destroy()$/;"	f	class:lefiViaRuleLayer
DieArea	def/def/defrData.hpp	/^    defiBox DieArea;$/;"	m	class:defrData
DieAreaCbk	def/def/defrCallBacks.hpp	/^    defrBoxCbkFnType DieAreaCbk;$/;"	m	class:defrCallbacks
DielectricCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType DielectricCbk;$/;"	m	class:lefrCallbacks
DielectricCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType DielectricCbk;$/;"	m	class:lefrCallbacks
DielectricWarnings	lef/include/lefrSettings.hpp	/^    int DielectricWarnings;$/;"	m	class:lefrSettings
DielectricWarnings	lef/lef/lefrSettings.hpp	/^    int DielectricWarnings;$/;"	m	class:lefrSettings
DisPropStrProcess	def/def/defrSettings.hpp	/^    int DisPropStrProcess; $/;"	m	class:defrSettings
DisPropStrProcess	lef/include/lefrSettings.hpp	/^    int DisPropStrProcess;$/;"	m	class:lefrSettings
DisPropStrProcess	lef/lef/lefrSettings.hpp	/^    int DisPropStrProcess;$/;"	m	class:lefrSettings
DividerCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType DividerCbk;$/;"	m	class:defrCallbacks
DividerCharCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType DividerCharCbk;$/;"	m	class:lefrCallbacks
DividerCharCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType DividerCharCbk;$/;"	m	class:lefrCallbacks
EEQ	def/def/defiComponent.cpp	/^const char* defiComponent::EEQ() const {$/;"	f	class:defiComponent
EEQ	lef/lef/lefiMacro.cpp	/^lefiMacro::EEQ() const$/;"	f	class:lefiMacro
EEQSize_	def/def/defiComponent.hpp	/^  int EEQSize_;         \/\/ allocated size of eeq$/;"	m	class:defiComponent
EEQSize_	lef/include/lefiMacro.hpp	/^  int EEQSize_;$/;"	m	class:lefiMacro
EEQSize_	lef/lef/lefiMacro.hpp	/^  int EEQSize_;$/;"	m	class:lefiMacro
EEQ_	def/def/defiComponent.hpp	/^  char* EEQ_;$/;"	m	class:defiComponent
EEQ_	lef/include/lefiMacro.hpp	/^  char* EEQ_;$/;"	m	class:lefiMacro
EEQ_	lef/lef/lefiMacro.hpp	/^  char* EEQ_;$/;"	m	class:lefiMacro
END_LEFDEF_PARSER_NAMESPACE	def/def/defiKRDefs.hpp	34;"	d
END_LEFDEF_PARSER_NAMESPACE	lef/include/lefiKRDefs.hpp	34;"	d
END_LEFDEF_PARSER_NAMESPACE	lef/lef/lefiKRDefs.hpp	34;"	d
EXIT_SUCCESS	lef/lef/lef.tab.cpp	839;"	d	file:
EXIT_SUCCESS	lef/lef/lef.tab.cpp	867;"	d	file:
EXTERN	def/cdef/defiTypedefs.h	38;"	d
EXTERN	def/cdef/xdefiAssertion.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiBlockage.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiComponent.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiDebug.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiFPC.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiFill.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiGroup.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiIOTiming.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiMisc.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiNet.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiNonDefault.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiPartition.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiPath.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiPinCap.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiPinProp.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiProp.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiPropType.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiRegion.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiRowTrack.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiScanchain.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiSite.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiSlot.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiTimingDisable.cpp	34;"	d	file:
EXTERN	def/cdef/xdefiVia.cpp	34;"	d	file:
EXTERN	def/cdef/xdefrReader.cpp	34;"	d	file:
EXTERN	def/cdef/xdefwWriter.cpp	34;"	d	file:
EXTERN	def/cdef/xdefwWriterCalls.cpp	34;"	d	file:
EXTERN	lef/clef/lefiTypedefs.h	38;"	d
EXTERN	lef/clef/xlefiArray.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiCrossTalk.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiDebug.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiEncryptInt.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiLayer.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiMacro.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiMisc.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiNonDefault.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiProp.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiPropType.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiUnits.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiUtil.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiVia.cpp	34;"	d	file:
EXTERN	lef/clef/xlefiViaRule.cpp	34;"	d	file:
EXTERN	lef/clef/xlefrReader.cpp	34;"	d	file:
EXTERN	lef/clef/xlefwWriter.cpp	34;"	d	file:
EXTERN	lef/clef/xlefwWriterCalls.cpp	34;"	d	file:
EXTERN	lef/include/lefiTypedefs.h	38;"	d
EdgeRateScaleFactorCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateScaleFactorCbk;$/;"	m	class:lefrCallbacks
EdgeRateScaleFactorCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateScaleFactorCbk;$/;"	m	class:lefrCallbacks
EdgeRateScaleFactorWarnings	lef/include/lefrSettings.hpp	/^    int EdgeRateScaleFactorWarnings;$/;"	m	class:lefrSettings
EdgeRateScaleFactorWarnings	lef/lef/lefrSettings.hpp	/^    int EdgeRateScaleFactorWarnings;$/;"	m	class:lefrSettings
EdgeRateThreshold1Cbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateThreshold1Cbk;$/;"	m	class:lefrCallbacks
EdgeRateThreshold1Cbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateThreshold1Cbk;$/;"	m	class:lefrCallbacks
EdgeRateThreshold1Warnings	lef/include/lefrSettings.hpp	/^    int EdgeRateThreshold1Warnings;$/;"	m	class:lefrSettings
EdgeRateThreshold1Warnings	lef/lef/lefrSettings.hpp	/^    int EdgeRateThreshold1Warnings;$/;"	m	class:lefrSettings
EdgeRateThreshold2Cbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateThreshold2Cbk;$/;"	m	class:lefrCallbacks
EdgeRateThreshold2Cbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateThreshold2Cbk;$/;"	m	class:lefrCallbacks
EdgeRateThreshold2Warnings	lef/include/lefrSettings.hpp	/^    int EdgeRateThreshold2Warnings;$/;"	m	class:lefrSettings
EdgeRateThreshold2Warnings	lef/lef/lefrSettings.hpp	/^    int EdgeRateThreshold2Warnings;$/;"	m	class:lefrSettings
ErrorLogFunction	def/def/defrSettings.hpp	/^    DEFI_LOG_FUNCTION ErrorLogFunction;$/;"	m	class:defrSettings
ErrorLogFunction	lef/include/lefrSettings.hpp	/^    LEFI_LOG_FUNCTION ErrorLogFunction;$/;"	m	class:lefrSettings
ErrorLogFunction	lef/lef/lefrSettings.hpp	/^    LEFI_LOG_FUNCTION ErrorLogFunction;$/;"	m	class:lefrSettings
ExtensionCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType ExtensionCbk;$/;"	m	class:defrCallbacks
ExtensionCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType ExtensionCbk;$/;"	m	class:lefrCallbacks
ExtensionCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType ExtensionCbk;$/;"	m	class:lefrCallbacks
FALSE	def/def/defiDefs.hpp	49;"	d
FALSE	lef/include/lefiDefs.hpp	49;"	d
FALSE	lef/lef/lefiDefs.hpp	49;"	d
FPC	def/def/defrData.hpp	/^    defiFPC FPC;$/;"	m	class:defrData
FPCCbk	def/def/defrCallBacks.hpp	/^    defrFPCCbkFnType FPCCbk;$/;"	m	class:defrCallbacks
FPCEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType FPCEndCbk;$/;"	m	class:defrCallbacks
FPCStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType FPCStartCbk;$/;"	m	class:defrCallbacks
File	def/def/defrData.hpp	/^    FILE* File;$/;"	m	class:defrData
FileName	def/def/defrSettings.hpp	/^    char*           FileName;$/;"	m	class:defrSession
Fill	def/def/defrData.hpp	/^    defiFill Fill;$/;"	m	class:defrData
FillCbk	def/def/defrCallBacks.hpp	/^    defrFillCbkFnType FillCbk;$/;"	m	class:defrCallbacks
FillEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType FillEndCbk;$/;"	m	class:defrCallbacks
FillStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType FillStartCbk;$/;"	m	class:defrCallbacks
FillWarnings	def/def/defrSettings.hpp	/^    int FillWarnings;$/;"	m	class:defrSettings
FixedMaskCbk	lef/include/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType FixedMaskCbk;$/;"	m	class:lefrCallbacks
FixedMaskCbk	lef/lef/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType FixedMaskCbk;$/;"	m	class:lefrCallbacks
FloorPlanNameCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType FloorPlanNameCbk;$/;"	m	class:defrCallbacks
ForiSize_	def/def/defiComponent.hpp	/^  int ForiSize_;        \/\/ allocate size of foreign ori$/;"	m	class:defiComponent
Fori_	def/def/defiComponent.hpp	/^  int Fori_;            \/\/ foreign ori$/;"	m	class:defiComponent
FreeFunction	def/def/defrSettings.hpp	/^    DEFI_FREE_FUNCTION FreeFunction;$/;"	m	class:defrSettings
FreeFunction	lef/include/lefrSettings.hpp	/^    LEFI_FREE_FUNCTION FreeFunction;$/;"	m	class:lefrSettings
FreeFunction	lef/lef/lefrSettings.hpp	/^    LEFI_FREE_FUNCTION FreeFunction;$/;"	m	class:lefrSettings
Fx_	def/def/defiComponent.hpp	/^  int Fx_, Fy_;         \/\/ foreign loc$/;"	m	class:defiComponent
Fy_	def/def/defiComponent.hpp	/^  int Fx_, Fy_;         \/\/ foreign loc$/;"	m	class:defiComponent
GETC	def/def/def_keywords.cpp	/^ defrData::GETC() {$/;"	f	class:defrData
GcellGrid	def/def/defrData.hpp	/^    defiGcellGrid GcellGrid;$/;"	m	class:defrData
GcellGridCbk	def/def/defrCallBacks.hpp	/^    defrGcellGridCbkFnType GcellGridCbk;$/;"	m	class:defrCallbacks
GcellGridWarnings	def/def/defrSettings.hpp	/^    int GcellGridWarnings;$/;"	m	class:defrSettings
Geometries	def/def/defrData.hpp	/^    defiGeometries Geometries;$/;"	m	class:defrData
GetToken	lef/lef/lef_keywords.cpp	/^GetToken(char **buffer, int *bufferSize)$/;"	f	file:
GetTokenFromStack	lef/lef/lef_keywords.cpp	/^GetTokenFromStack(char *s)$/;"	f	file:
Group	def/def/defrData.hpp	/^    defiGroup Group;$/;"	m	class:defrData
GroupCbk	def/def/defrCallBacks.hpp	/^    defrGroupCbkFnType GroupCbk;$/;"	m	class:defrCallbacks
GroupExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType GroupExtCbk;$/;"	m	class:defrCallbacks
GroupMemberCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType GroupMemberCbk;$/;"	m	class:defrCallbacks
GroupNameCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType GroupNameCbk;$/;"	m	class:defrCallbacks
GroupProp	def/def/defrSettings.hpp	/^    defiPropType    GroupProp;$/;"	m	class:defrSession
GroupsEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType GroupsEndCbk;$/;"	m	class:defrCallbacks
GroupsStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType GroupsStartCbk;$/;"	m	class:defrCallbacks
HEADERS	def/def/Makefile	/^HEADERS =	 \\$/;"	m
HEADERS	def/defdiff/Makefile	/^HEADERS =	\\$/;"	m
HEADERS	def/defrw/Makefile	/^HEADERS =$/;"	m
HEADERS	def/defwrite/Makefile	/^HEADERS =$/;"	m
HEADERS	lef/lef/Makefile	/^HEADERS =	\\$/;"	m
HEADERS	lef/lefdiff/Makefile	/^HEADERS =	\\$/;"	m
Hist_text	lef/include/lefrData.hpp	/^    std::vector<char>  Hist_text; $/;"	m	class:lefrData
Hist_text	lef/lef/lefrData.hpp	/^    std::vector<char>  Hist_text; $/;"	m	class:lefrData
HistoryCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType HistoryCbk;$/;"	m	class:defrCallbacks
History_text	def/def/defrData.hpp	/^    std::vector<char>  History_text; $/;"	m	class:defrData
IF	lef/lef/lef.tab.cpp	/^    IF = 680,$/;"	e	enum:yytokentype	file:
IF	lef/lef/lef.tab.h	/^    IF = 680,$/;"	e	enum:yytokentype
INSTALLED_BIN	def/template.mk	/^INSTALLED_BIN = ..\/bin\/$(BINTARGET)$/;"	m
INSTALLED_BIN	lef/template.mk	/^INSTALLED_BIN = ..\/bin\/$(BINTARGET)$/;"	m
INSTALLED_HDRS	def/template.mk	/^INSTALLED_HDRS = $(PUBLIC_HDRS:%=..\/include\/%)$/;"	m
INSTALLED_HDRS	lef/template.mk	/^INSTALLED_HDRS = $(PUBLIC_HDRS:%=..\/include\/%)$/;"	m
INSTALLED_LIB	def/template.mk	/^INSTALLED_LIB = ..\/lib\/$(LIBTARGET)$/;"	m
INSTALLED_LIB	lef/template.mk	/^INSTALLED_LIB = ..\/lib\/$(LIBTARGET)$/;"	m
IN_BUF_SIZE	def/def/defrData.hpp	44;"	d
IN_BUF_SIZE	lef/include/lefrData.hpp	55;"	d
IN_BUF_SIZE	lef/lef/lefrData.hpp	55;"	d
IOTiming	def/def/defrData.hpp	/^    defiIOTiming IOTiming;$/;"	m	class:defrData
IOTimingCbk	def/def/defrCallBacks.hpp	/^    defrIOTimingCbkFnType IOTimingCbk;$/;"	m	class:defrCallbacks
IOTimingWarnings	def/def/defrSettings.hpp	/^    int IOTimingWarnings;$/;"	m	class:defrSettings
IOTimingsEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType IOTimingsEndCbk;$/;"	m	class:defrCallbacks
IOTimingsStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType IOTimingsStartCbk;$/;"	m	class:defrCallbacks
IRDropBeginCbk	lef/include/lefrCallBacks.hpp	/^    lefrVoidCbkFnType IRDropBeginCbk;$/;"	m	class:lefrCallbacks
IRDropBeginCbk	lef/lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType IRDropBeginCbk;$/;"	m	class:lefrCallbacks
IRDropCbk	lef/include/lefrCallBacks.hpp	/^    lefrIRDropCbkFnType IRDropCbk;$/;"	m	class:lefrCallbacks
IRDropCbk	lef/lef/lefrCallBacks.hpp	/^    lefrIRDropCbkFnType IRDropCbk;$/;"	m	class:lefrCallbacks
IRDropEndCbk	lef/include/lefrCallBacks.hpp	/^    lefrVoidCbkFnType IRDropEndCbk;$/;"	m	class:lefrCallbacks
IRDropEndCbk	lef/lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType IRDropEndCbk;$/;"	m	class:lefrCallbacks
IRDropWarnings	lef/include/lefrSettings.hpp	/^    int IRDropWarnings;$/;"	m	class:lefrSettings
IRDropWarnings	lef/lef/lefrSettings.hpp	/^    int IRDropWarnings;$/;"	m	class:lefrSettings
IdAndName	def/def/defiComponent.cpp	/^void defiComponent::IdAndName(const char* id, const char* name) {$/;"	f	class:defiComponent
IncCurPos	def/def/def_keywords.cpp	/^defrData::IncCurPos(char **curPos, char **buffer, int *bufferSize)$/;"	f	class:defrData
IncCurPos	lef/lef/lef_keywords.cpp	/^IncCurPos(char **curPos, char **buffer, int *bufferSize)$/;"	f	file:
Init	def/def/defiAlias.cpp	/^void defiAlias_itr::Init() {$/;"	f	class:defiAlias_itr
Init	def/def/defiAssertion.cpp	/^void defiAssertion::Init() {$/;"	f	class:defiAssertion
Init	def/def/defiBlockage.cpp	/^void defiBlockage::Init() {$/;"	f	class:defiBlockage
Init	def/def/defiComponent.cpp	/^void defiComponent::Init() {$/;"	f	class:defiComponent
Init	def/def/defiComponent.cpp	/^void defiComponentMaskShiftLayer::Init() {$/;"	f	class:defiComponentMaskShiftLayer
Init	def/def/defiFPC.cpp	/^void defiFPC::Init() {$/;"	f	class:defiFPC
Init	def/def/defiFill.cpp	/^void defiFill::Init() {$/;"	f	class:defiFill
Init	def/def/defiGroup.cpp	/^void defiGroup::Init() {$/;"	f	class:defiGroup
Init	def/def/defiIOTiming.cpp	/^void defiIOTiming::Init() {$/;"	f	class:defiIOTiming
Init	def/def/defiMisc.cpp	/^void defiGeometries::Init() {$/;"	f	class:defiGeometries
Init	def/def/defiMisc.cpp	/^void defiStyles::Init() {$/;"	f	class:defiStyles
Init	def/def/defiNet.cpp	/^void defiNet::Init() {$/;"	f	class:defiNet
Init	def/def/defiNet.cpp	/^void defiShield::Init(const char* name) {$/;"	f	class:defiShield
Init	def/def/defiNet.cpp	/^void defiSubnet::Init() {$/;"	f	class:defiSubnet
Init	def/def/defiNet.cpp	/^void defiVpin::Init(const char* name) {$/;"	f	class:defiVpin
Init	def/def/defiNet.cpp	/^void defiWire::Init(const char* type, const char* wireShieldName) {$/;"	f	class:defiWire
Init	def/def/defiNonDefault.cpp	/^void defiNonDefault::Init() { $/;"	f	class:defiNonDefault
Init	def/def/defiPartition.cpp	/^void defiPartition::Init() {$/;"	f	class:defiPartition
Init	def/def/defiPath.cpp	/^void defiPath::Init() {$/;"	f	class:defiPath
Init	def/def/defiPinCap.cpp	/^void defiPin::Init() {$/;"	f	class:defiPin
Init	def/def/defiPinCap.cpp	/^void defiPinAntennaModel::Init() {$/;"	f	class:defiPinAntennaModel
Init	def/def/defiPinCap.cpp	/^void defiPinPort::Init() {$/;"	f	class:defiPinPort
Init	def/def/defiPinProp.cpp	/^void defiPinProp::Init() {$/;"	f	class:defiPinProp
Init	def/def/defiProp.cpp	/^void defiProp::Init() {$/;"	f	class:defiProp
Init	def/def/defiPropType.cpp	/^void defiPropType::Init() {$/;"	f	class:defiPropType
Init	def/def/defiRegion.cpp	/^void defiRegion::Init() {$/;"	f	class:defiRegion
Init	def/def/defiRowTrack.cpp	/^void defiGcellGrid::Init() {$/;"	f	class:defiGcellGrid
Init	def/def/defiRowTrack.cpp	/^void defiRow::Init() {$/;"	f	class:defiRow
Init	def/def/defiRowTrack.cpp	/^void defiTrack::Init() {$/;"	f	class:defiTrack
Init	def/def/defiScanchain.cpp	/^void defiOrdered::Init() {$/;"	f	class:defiOrdered
Init	def/def/defiScanchain.cpp	/^void defiScanchain::Init() {$/;"	f	class:defiScanchain
Init	def/def/defiSite.cpp	/^void defiBox::Init() {$/;"	f	class:defiBox
Init	def/def/defiSite.cpp	/^void defiSite::Init() {$/;"	f	class:defiSite
Init	def/def/defiSlot.cpp	/^void defiSlot::Init() {$/;"	f	class:defiSlot
Init	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::Init() {$/;"	f	class:defiTimingDisable
Init	def/def/defiVia.cpp	/^void defiVia::Init() {$/;"	f	class:defiVia
Init	lef/lef/lefiArray.cpp	/^lefiArray::Init()$/;"	f	class:lefiArray
Init	lef/lef/lefiArray.cpp	/^lefiArrayFloorPlan::Init(const char *name)$/;"	f	class:lefiArrayFloorPlan
Init	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::Init()$/;"	f	class:lefiCorrectionEdge
Init	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::Init()$/;"	f	class:lefiCorrectionResistance
Init	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::Init()$/;"	f	class:lefiCorrectionTable
Init	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::Init(double d)$/;"	f	class:lefiCorrectionVictim
Init	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::Init()$/;"	f	class:lefiNoiseEdge
Init	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::Init()$/;"	f	class:lefiNoiseResistance
Init	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::Init()$/;"	f	class:lefiNoiseTable
Init	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::Init(double d)$/;"	f	class:lefiNoiseVictim
Init	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::Init()$/;"	f	class:lefiAntennaModel
Init	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::Init()$/;"	f	class:lefiAntennaPWL
Init	lef/lef/lefiLayer.cpp	/^lefiInfluence::Init()$/;"	f	class:lefiInfluence
Init	lef/lef/lefiLayer.cpp	/^lefiLayer::Init()$/;"	f	class:lefiLayer
Init	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::Init(const char *type)$/;"	f	class:lefiLayerDensity
Init	lef/lef/lefiLayer.cpp	/^lefiOrthogonal::Init()$/;"	f	class:lefiOrthogonal
Init	lef/lef/lefiLayer.cpp	/^lefiParallel::Init()$/;"	f	class:lefiParallel
Init	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::Init()$/;"	f	class:lefiSpacingTable
Init	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::Init()$/;"	f	class:lefiTwoWidths
Init	lef/lef/lefiMacro.cpp	/^lefiDensity::Init()$/;"	f	class:lefiDensity
Init	lef/lef/lefiMacro.cpp	/^lefiMacro::Init()$/;"	f	class:lefiMacro
Init	lef/lef/lefiMacro.cpp	/^lefiObstruction::Init()$/;"	f	class:lefiObstruction
Init	lef/lef/lefiMacro.cpp	/^lefiPin::Init()$/;"	f	class:lefiPin
Init	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::Init()$/;"	f	class:lefiPinAntennaModel
Init	lef/lef/lefiMacro.cpp	/^lefiTiming::Init()$/;"	f	class:lefiTiming
Init	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::Init()$/;"	f	class:lefiGcellPattern
Init	lef/lef/lefiMisc.cpp	/^lefiGeometries::Init()$/;"	f	class:lefiGeometries
Init	lef/lef/lefiMisc.cpp	/^lefiIRDrop::Init()$/;"	f	class:lefiIRDrop
Init	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::Init()$/;"	f	class:lefiMaxStackVia
Init	lef/lef/lefiMisc.cpp	/^lefiMinFeature::Init()$/;"	f	class:lefiMinFeature
Init	lef/lef/lefiMisc.cpp	/^lefiSite::Init()$/;"	f	class:lefiSite
Init	lef/lef/lefiMisc.cpp	/^lefiSitePattern::Init()$/;"	f	class:lefiSitePattern
Init	lef/lef/lefiMisc.cpp	/^lefiSpacing::Init()$/;"	f	class:lefiSpacing
Init	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::Init()$/;"	f	class:lefiTrackPattern
Init	lef/lef/lefiMisc.cpp	/^lefiUseMinSpacing::Init()$/;"	f	class:lefiUseMinSpacing
Init	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::Init()$/;"	f	class:lefiNonDefault
Init	lef/lef/lefiProp.cpp	/^lefiProp::Init()$/;"	f	class:lefiProp
Init	lef/lef/lefiPropType.cpp	/^lefiPropType::Init()$/;"	f	class:lefiPropType
Init	lef/lef/lefiUnits.cpp	/^lefiUnits::Init()$/;"	f	class:lefiUnits
Init	lef/lef/lefiVia.cpp	/^lefiVia::Init()$/;"	f	class:lefiVia
Init	lef/lef/lefiVia.cpp	/^lefiViaLayer::Init()$/;"	f	class:lefiViaLayer
Init	lef/lef/lefiViaRule.cpp	/^lefiViaRule::Init()$/;"	f	class:lefiViaRule
Init	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::Init()$/;"	f	class:lefiViaRuleLayer
InoutAntennaCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType InoutAntennaCbk;$/;"	m	class:lefrCallbacks
InoutAntennaCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType InoutAntennaCbk;$/;"	m	class:lefrCallbacks
InoutAntennaWarnings	lef/include/lefrSettings.hpp	/^    int InoutAntennaWarnings;$/;"	m	class:lefrSettings
InoutAntennaWarnings	lef/lef/lefrSettings.hpp	/^    int InoutAntennaWarnings;$/;"	m	class:lefrSettings
InputAntennaCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType InputAntennaCbk;$/;"	m	class:lefrCallbacks
InputAntennaCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType InputAntennaCbk;$/;"	m	class:lefrCallbacks
InputAntennaWarnings	lef/include/lefrSettings.hpp	/^    int InputAntennaWarnings;$/;"	m	class:lefrSettings
InputAntennaWarnings	lef/lef/lefrSettings.hpp	/^    int InputAntennaWarnings;$/;"	m	class:lefrSettings
IoTimingsExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType IoTimingsExtCbk;$/;"	m	class:defrCallbacks
K_ABOVE	lef/lef/lef.tab.cpp	/^    K_ABOVE = 626,$/;"	e	enum:yytokentype	file:
K_ABOVE	lef/lef/lef.tab.h	/^    K_ABOVE = 626,$/;"	e	enum:yytokentype
K_ABUT	lef/lef/lef.tab.cpp	/^    K_ABUT = 259,$/;"	e	enum:yytokentype	file:
K_ABUT	lef/lef/lef.tab.h	/^    K_ABUT = 259,$/;"	e	enum:yytokentype
K_ABUTMENT	lef/lef/lef.tab.cpp	/^    K_ABUTMENT = 260,$/;"	e	enum:yytokentype	file:
K_ABUTMENT	lef/lef/lef.tab.h	/^    K_ABUTMENT = 260,$/;"	e	enum:yytokentype
K_ACCURRENTDENSITY	lef/lef/lef.tab.cpp	/^    K_ACCURRENTDENSITY = 545,$/;"	e	enum:yytokentype	file:
K_ACCURRENTDENSITY	lef/lef/lef.tab.h	/^    K_ACCURRENTDENSITY = 545,$/;"	e	enum:yytokentype
K_ACTIVE	lef/lef/lef.tab.cpp	/^    K_ACTIVE = 261,$/;"	e	enum:yytokentype	file:
K_ACTIVE	lef/lef/lef.tab.h	/^    K_ACTIVE = 261,$/;"	e	enum:yytokentype
K_ADJACENTCUTS	lef/lef/lef.tab.cpp	/^    K_ADJACENTCUTS = 602,$/;"	e	enum:yytokentype	file:
K_ADJACENTCUTS	lef/lef/lef.tab.h	/^    K_ADJACENTCUTS = 602,$/;"	e	enum:yytokentype
K_ANALOG	lef/lef/lef.tab.cpp	/^    K_ANALOG = 262,$/;"	e	enum:yytokentype	file:
K_ANALOG	lef/lef/lef.tab.h	/^    K_ANALOG = 262,$/;"	e	enum:yytokentype
K_AND	lef/lef/lef.tab.cpp	/^    K_AND = 478,$/;"	e	enum:yytokentype	file:
K_AND	lef/lef/lef.tab.h	/^    K_AND = 478,$/;"	e	enum:yytokentype
K_ANTENNAAREADIFFREDUCEPWL	lef/lef/lef.tab.cpp	/^    K_ANTENNAAREADIFFREDUCEPWL = 660,$/;"	e	enum:yytokentype	file:
K_ANTENNAAREADIFFREDUCEPWL	lef/lef/lef.tab.h	/^    K_ANTENNAAREADIFFREDUCEPWL = 660,$/;"	e	enum:yytokentype
K_ANTENNAAREAFACTOR	lef/lef/lef.tab.cpp	/^    K_ANTENNAAREAFACTOR = 562,$/;"	e	enum:yytokentype	file:
K_ANTENNAAREAFACTOR	lef/lef/lef.tab.h	/^    K_ANTENNAAREAFACTOR = 562,$/;"	e	enum:yytokentype
K_ANTENNAAREAMINUSDIFF	lef/lef/lef.tab.cpp	/^    K_ANTENNAAREAMINUSDIFF = 661,$/;"	e	enum:yytokentype	file:
K_ANTENNAAREAMINUSDIFF	lef/lef/lef.tab.h	/^    K_ANTENNAAREAMINUSDIFF = 661,$/;"	e	enum:yytokentype
K_ANTENNAAREARATIO	lef/lef/lef.tab.cpp	/^    K_ANTENNAAREARATIO = 558,$/;"	e	enum:yytokentype	file:
K_ANTENNAAREARATIO	lef/lef/lef.tab.h	/^    K_ANTENNAAREARATIO = 558,$/;"	e	enum:yytokentype
K_ANTENNACELL	lef/lef/lef.tab.cpp	/^    K_ANTENNACELL = 571,$/;"	e	enum:yytokentype	file:
K_ANTENNACELL	lef/lef/lef.tab.h	/^    K_ANTENNACELL = 571,$/;"	e	enum:yytokentype
K_ANTENNACUMAREARATIO	lef/lef/lef.tab.cpp	/^    K_ANTENNACUMAREARATIO = 560,$/;"	e	enum:yytokentype	file:
K_ANTENNACUMAREARATIO	lef/lef/lef.tab.h	/^    K_ANTENNACUMAREARATIO = 560,$/;"	e	enum:yytokentype
K_ANTENNACUMDIFFAREARATIO	lef/lef/lef.tab.cpp	/^    K_ANTENNACUMDIFFAREARATIO = 561,$/;"	e	enum:yytokentype	file:
K_ANTENNACUMDIFFAREARATIO	lef/lef/lef.tab.h	/^    K_ANTENNACUMDIFFAREARATIO = 561,$/;"	e	enum:yytokentype
K_ANTENNACUMDIFFSIDEAREARATIO	lef/lef/lef.tab.cpp	/^    K_ANTENNACUMDIFFSIDEAREARATIO = 566,$/;"	e	enum:yytokentype	file:
K_ANTENNACUMDIFFSIDEAREARATIO	lef/lef/lef.tab.h	/^    K_ANTENNACUMDIFFSIDEAREARATIO = 566,$/;"	e	enum:yytokentype
K_ANTENNACUMROUTINGPLUSCUT	lef/lef/lef.tab.cpp	/^    K_ANTENNACUMROUTINGPLUSCUT = 662,$/;"	e	enum:yytokentype	file:
K_ANTENNACUMROUTINGPLUSCUT	lef/lef/lef.tab.h	/^    K_ANTENNACUMROUTINGPLUSCUT = 662,$/;"	e	enum:yytokentype
K_ANTENNACUMSIDEAREARATIO	lef/lef/lef.tab.cpp	/^    K_ANTENNACUMSIDEAREARATIO = 565,$/;"	e	enum:yytokentype	file:
K_ANTENNACUMSIDEAREARATIO	lef/lef/lef.tab.h	/^    K_ANTENNACUMSIDEAREARATIO = 565,$/;"	e	enum:yytokentype
K_ANTENNADIFFAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNADIFFAREA = 583,$/;"	e	enum:yytokentype	file:
K_ANTENNADIFFAREA	lef/lef/lef.tab.h	/^    K_ANTENNADIFFAREA = 583,$/;"	e	enum:yytokentype
K_ANTENNADIFFAREARATIO	lef/lef/lef.tab.cpp	/^    K_ANTENNADIFFAREARATIO = 559,$/;"	e	enum:yytokentype	file:
K_ANTENNADIFFAREARATIO	lef/lef/lef.tab.h	/^    K_ANTENNADIFFAREARATIO = 559,$/;"	e	enum:yytokentype
K_ANTENNADIFFSIDEAREARATIO	lef/lef/lef.tab.cpp	/^    K_ANTENNADIFFSIDEAREARATIO = 564,$/;"	e	enum:yytokentype	file:
K_ANTENNADIFFSIDEAREARATIO	lef/lef/lef.tab.h	/^    K_ANTENNADIFFSIDEAREARATIO = 564,$/;"	e	enum:yytokentype
K_ANTENNAGATEAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNAGATEAREA = 582,$/;"	e	enum:yytokentype	file:
K_ANTENNAGATEAREA	lef/lef/lef.tab.h	/^    K_ANTENNAGATEAREA = 582,$/;"	e	enum:yytokentype
K_ANTENNAGATEPLUSDIFF	lef/lef/lef.tab.cpp	/^    K_ANTENNAGATEPLUSDIFF = 663,$/;"	e	enum:yytokentype	file:
K_ANTENNAGATEPLUSDIFF	lef/lef/lef.tab.h	/^    K_ANTENNAGATEPLUSDIFF = 663,$/;"	e	enum:yytokentype
K_ANTENNAINOUTDIFFAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNAINOUTDIFFAREA = 556,$/;"	e	enum:yytokentype	file:
K_ANTENNAINOUTDIFFAREA	lef/lef/lef.tab.h	/^    K_ANTENNAINOUTDIFFAREA = 556,$/;"	e	enum:yytokentype
K_ANTENNAINPUTGATEAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNAINPUTGATEAREA = 555,$/;"	e	enum:yytokentype	file:
K_ANTENNAINPUTGATEAREA	lef/lef/lef.tab.h	/^    K_ANTENNAINPUTGATEAREA = 555,$/;"	e	enum:yytokentype
K_ANTENNALENGTHFACTOR	lef/lef/lef.tab.cpp	/^    K_ANTENNALENGTHFACTOR = 513,$/;"	e	enum:yytokentype	file:
K_ANTENNALENGTHFACTOR	lef/lef/lef.tab.h	/^    K_ANTENNALENGTHFACTOR = 513,$/;"	e	enum:yytokentype
K_ANTENNAMAXAREACAR	lef/lef/lef.tab.cpp	/^    K_ANTENNAMAXAREACAR = 584,$/;"	e	enum:yytokentype	file:
K_ANTENNAMAXAREACAR	lef/lef/lef.tab.h	/^    K_ANTENNAMAXAREACAR = 584,$/;"	e	enum:yytokentype
K_ANTENNAMAXCUTCAR	lef/lef/lef.tab.cpp	/^    K_ANTENNAMAXCUTCAR = 587,$/;"	e	enum:yytokentype	file:
K_ANTENNAMAXCUTCAR	lef/lef/lef.tab.h	/^    K_ANTENNAMAXCUTCAR = 587,$/;"	e	enum:yytokentype
K_ANTENNAMAXSIDEAREACAR	lef/lef/lef.tab.cpp	/^    K_ANTENNAMAXSIDEAREACAR = 585,$/;"	e	enum:yytokentype	file:
K_ANTENNAMAXSIDEAREACAR	lef/lef/lef.tab.h	/^    K_ANTENNAMAXSIDEAREACAR = 585,$/;"	e	enum:yytokentype
K_ANTENNAMETALAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNAMETALAREA = 518,$/;"	e	enum:yytokentype	file:
K_ANTENNAMETALAREA	lef/lef/lef.tab.h	/^    K_ANTENNAMETALAREA = 518,$/;"	e	enum:yytokentype
K_ANTENNAMETALLENGTH	lef/lef/lef.tab.cpp	/^    K_ANTENNAMETALLENGTH = 517,$/;"	e	enum:yytokentype	file:
K_ANTENNAMETALLENGTH	lef/lef/lef.tab.h	/^    K_ANTENNAMETALLENGTH = 517,$/;"	e	enum:yytokentype
K_ANTENNAMODEL	lef/lef/lef.tab.cpp	/^    K_ANTENNAMODEL = 603,$/;"	e	enum:yytokentype	file:
K_ANTENNAMODEL	lef/lef/lef.tab.h	/^    K_ANTENNAMODEL = 603,$/;"	e	enum:yytokentype
K_ANTENNAOUTPUTDIFFAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNAOUTPUTDIFFAREA = 557,$/;"	e	enum:yytokentype	file:
K_ANTENNAOUTPUTDIFFAREA	lef/lef/lef.tab.h	/^    K_ANTENNAOUTPUTDIFFAREA = 557,$/;"	e	enum:yytokentype
K_ANTENNAPARTIALCUTAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNAPARTIALCUTAREA = 586,$/;"	e	enum:yytokentype	file:
K_ANTENNAPARTIALCUTAREA	lef/lef/lef.tab.h	/^    K_ANTENNAPARTIALCUTAREA = 586,$/;"	e	enum:yytokentype
K_ANTENNAPARTIALMETALAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNAPARTIALMETALAREA = 580,$/;"	e	enum:yytokentype	file:
K_ANTENNAPARTIALMETALAREA	lef/lef/lef.tab.h	/^    K_ANTENNAPARTIALMETALAREA = 580,$/;"	e	enum:yytokentype
K_ANTENNAPARTIALMETALSIDEAREA	lef/lef/lef.tab.cpp	/^    K_ANTENNAPARTIALMETALSIDEAREA = 581,$/;"	e	enum:yytokentype	file:
K_ANTENNAPARTIALMETALSIDEAREA	lef/lef/lef.tab.h	/^    K_ANTENNAPARTIALMETALSIDEAREA = 581,$/;"	e	enum:yytokentype
K_ANTENNASIDEAREAFACTOR	lef/lef/lef.tab.cpp	/^    K_ANTENNASIDEAREAFACTOR = 567,$/;"	e	enum:yytokentype	file:
K_ANTENNASIDEAREAFACTOR	lef/lef/lef.tab.h	/^    K_ANTENNASIDEAREAFACTOR = 567,$/;"	e	enum:yytokentype
K_ANTENNASIDEAREARATIO	lef/lef/lef.tab.cpp	/^    K_ANTENNASIDEAREARATIO = 563,$/;"	e	enum:yytokentype	file:
K_ANTENNASIDEAREARATIO	lef/lef/lef.tab.h	/^    K_ANTENNASIDEAREARATIO = 563,$/;"	e	enum:yytokentype
K_ANTENNASIZE	lef/lef/lef.tab.cpp	/^    K_ANTENNASIZE = 516,$/;"	e	enum:yytokentype	file:
K_ANTENNASIZE	lef/lef/lef.tab.h	/^    K_ANTENNASIZE = 516,$/;"	e	enum:yytokentype
K_ANYEDGE	lef/lef/lef.tab.cpp	/^    K_ANYEDGE = 536,$/;"	e	enum:yytokentype	file:
K_ANYEDGE	lef/lef/lef.tab.h	/^    K_ANYEDGE = 536,$/;"	e	enum:yytokentype
K_AREA	lef/lef/lef.tab.cpp	/^    K_AREA = 264,$/;"	e	enum:yytokentype	file:
K_AREA	lef/lef/lef.tab.h	/^    K_AREA = 264,$/;"	e	enum:yytokentype
K_AREAIO	lef/lef/lef.tab.cpp	/^    K_AREAIO = 611,$/;"	e	enum:yytokentype	file:
K_AREAIO	lef/lef/lef.tab.h	/^    K_AREAIO = 611,$/;"	e	enum:yytokentype
K_ARRAY	lef/lef/lef.tab.cpp	/^    K_ARRAY = 263,$/;"	e	enum:yytokentype	file:
K_ARRAY	lef/lef/lef.tab.h	/^    K_ARRAY = 263,$/;"	e	enum:yytokentype
K_ARRAYCUTS	lef/lef/lef.tab.cpp	/^    K_ARRAYCUTS = 658,$/;"	e	enum:yytokentype	file:
K_ARRAYCUTS	lef/lef/lef.tab.h	/^    K_ARRAYCUTS = 658,$/;"	e	enum:yytokentype
K_ARRAYSPACING	lef/lef/lef.tab.cpp	/^    K_ARRAYSPACING = 659,$/;"	e	enum:yytokentype	file:
K_ARRAYSPACING	lef/lef/lef.tab.h	/^    K_ARRAYSPACING = 659,$/;"	e	enum:yytokentype
K_AVERAGE	lef/lef/lef.tab.cpp	/^    K_AVERAGE = 547,$/;"	e	enum:yytokentype	file:
K_AVERAGE	lef/lef/lef.tab.h	/^    K_AVERAGE = 547,$/;"	e	enum:yytokentype
K_BEGINEXT	lef/lef/lef.tab.cpp	/^    K_BEGINEXT = 495,$/;"	e	enum:yytokentype	file:
K_BEGINEXT	lef/lef/lef.tab.h	/^    K_BEGINEXT = 495,$/;"	e	enum:yytokentype
K_BELOW	lef/lef/lef.tab.cpp	/^    K_BELOW = 627,$/;"	e	enum:yytokentype	file:
K_BELOW	lef/lef/lef.tab.h	/^    K_BELOW = 627,$/;"	e	enum:yytokentype
K_BLACKBOX	lef/lef/lef.tab.cpp	/^    K_BLACKBOX = 612,$/;"	e	enum:yytokentype	file:
K_BLACKBOX	lef/lef/lef.tab.h	/^    K_BLACKBOX = 612,$/;"	e	enum:yytokentype
K_BLOCK	lef/lef/lef.tab.cpp	/^    K_BLOCK = 265,$/;"	e	enum:yytokentype	file:
K_BLOCK	lef/lef/lef.tab.h	/^    K_BLOCK = 265,$/;"	e	enum:yytokentype
K_BOTTOMLEFT	lef/lef/lef.tab.cpp	/^    K_BOTTOMLEFT = 266,$/;"	e	enum:yytokentype	file:
K_BOTTOMLEFT	lef/lef/lef.tab.h	/^    K_BOTTOMLEFT = 266,$/;"	e	enum:yytokentype
K_BOTTOMRIGHT	lef/lef/lef.tab.cpp	/^    K_BOTTOMRIGHT = 267,$/;"	e	enum:yytokentype	file:
K_BOTTOMRIGHT	lef/lef/lef.tab.h	/^    K_BOTTOMRIGHT = 267,$/;"	e	enum:yytokentype
K_BUFFER	lef/lef/lef.tab.cpp	/^    K_BUFFER = 522,$/;"	e	enum:yytokentype	file:
K_BUFFER	lef/lef/lef.tab.h	/^    K_BUFFER = 522,$/;"	e	enum:yytokentype
K_BUMP	lef/lef/lef.tab.cpp	/^    K_BUMP = 604,$/;"	e	enum:yytokentype	file:
K_BUMP	lef/lef/lef.tab.h	/^    K_BUMP = 604,$/;"	e	enum:yytokentype
K_BUSBITCHARS	lef/lef/lef.tab.cpp	/^    K_BUSBITCHARS = 493,$/;"	e	enum:yytokentype	file:
K_BUSBITCHARS	lef/lef/lef.tab.h	/^    K_BUSBITCHARS = 493,$/;"	e	enum:yytokentype
K_BY	lef/lef/lef.tab.cpp	/^    K_BY = 268,$/;"	e	enum:yytokentype	file:
K_BY	lef/lef/lef.tab.h	/^    K_BY = 268,$/;"	e	enum:yytokentype
K_CANNOTOCCUPY	lef/lef/lef.tab.cpp	/^    K_CANNOTOCCUPY = 453,$/;"	e	enum:yytokentype	file:
K_CANNOTOCCUPY	lef/lef/lef.tab.h	/^    K_CANNOTOCCUPY = 453,$/;"	e	enum:yytokentype
K_CANPLACE	lef/lef/lef.tab.cpp	/^    K_CANPLACE = 452,$/;"	e	enum:yytokentype	file:
K_CANPLACE	lef/lef/lef.tab.h	/^    K_CANPLACE = 452,$/;"	e	enum:yytokentype
K_CAPACITANCE	lef/lef/lef.tab.cpp	/^    K_CAPACITANCE = 269,$/;"	e	enum:yytokentype	file:
K_CAPACITANCE	lef/lef/lef.tab.h	/^    K_CAPACITANCE = 269,$/;"	e	enum:yytokentype
K_CAPMULTIPLIER	lef/lef/lef.tab.cpp	/^    K_CAPMULTIPLIER = 270,$/;"	e	enum:yytokentype	file:
K_CAPMULTIPLIER	lef/lef/lef.tab.h	/^    K_CAPMULTIPLIER = 270,$/;"	e	enum:yytokentype
K_CENTERTOCENTER	lef/lef/lef.tab.cpp	/^    K_CENTERTOCENTER = 628,$/;"	e	enum:yytokentype	file:
K_CENTERTOCENTER	lef/lef/lef.tab.h	/^    K_CENTERTOCENTER = 628,$/;"	e	enum:yytokentype
K_CLASS	lef/lef/lef.tab.cpp	/^    K_CLASS = 271,$/;"	e	enum:yytokentype	file:
K_CLASS	lef/lef/lef.tab.h	/^    K_CLASS = 271,$/;"	e	enum:yytokentype
K_CLEARANCEMEASURE	lef/lef/lef.tab.cpp	/^    K_CLEARANCEMEASURE = 572,$/;"	e	enum:yytokentype	file:
K_CLEARANCEMEASURE	lef/lef/lef.tab.h	/^    K_CLEARANCEMEASURE = 572,$/;"	e	enum:yytokentype
K_CLOCK	lef/lef/lef.tab.cpp	/^    K_CLOCK = 272,$/;"	e	enum:yytokentype	file:
K_CLOCK	lef/lef/lef.tab.h	/^    K_CLOCK = 272,$/;"	e	enum:yytokentype
K_CLOCKTYPE	lef/lef/lef.tab.cpp	/^    K_CLOCKTYPE = 273,$/;"	e	enum:yytokentype	file:
K_CLOCKTYPE	lef/lef/lef.tab.h	/^    K_CLOCKTYPE = 273,$/;"	e	enum:yytokentype
K_CLOSEFILE	lef/lef/lef.tab.cpp	/^    K_CLOSEFILE = 530,$/;"	e	enum:yytokentype	file:
K_CLOSEFILE	lef/lef/lef.tab.h	/^    K_CLOSEFILE = 530,$/;"	e	enum:yytokentype
K_COLUMNMAJOR	lef/lef/lef.tab.cpp	/^    K_COLUMNMAJOR = 274,$/;"	e	enum:yytokentype	file:
K_COLUMNMAJOR	lef/lef/lef.tab.h	/^    K_COLUMNMAJOR = 274,$/;"	e	enum:yytokentype
K_COMPONENTPIN	lef/lef/lef.tab.cpp	/^    K_COMPONENTPIN = 313,$/;"	e	enum:yytokentype	file:
K_COMPONENTPIN	lef/lef/lef.tab.h	/^    K_COMPONENTPIN = 313,$/;"	e	enum:yytokentype
K_CORE	lef/lef/lef.tab.cpp	/^    K_CORE = 277,$/;"	e	enum:yytokentype	file:
K_CORE	lef/lef/lef.tab.h	/^    K_CORE = 277,$/;"	e	enum:yytokentype
K_CORNER	lef/lef/lef.tab.cpp	/^    K_CORNER = 278,$/;"	e	enum:yytokentype	file:
K_CORNER	lef/lef/lef.tab.h	/^    K_CORNER = 278,$/;"	e	enum:yytokentype
K_CORRECTIONFACTOR	lef/lef/lef.tab.cpp	/^    K_CORRECTIONFACTOR = 507,$/;"	e	enum:yytokentype	file:
K_CORRECTIONFACTOR	lef/lef/lef.tab.h	/^    K_CORRECTIONFACTOR = 507,$/;"	e	enum:yytokentype
K_CORRECTIONTABLE	lef/lef/lef.tab.cpp	/^    K_CORRECTIONTABLE = 499,$/;"	e	enum:yytokentype	file:
K_CORRECTIONTABLE	lef/lef/lef.tab.h	/^    K_CORRECTIONTABLE = 499,$/;"	e	enum:yytokentype
K_COVER	lef/lef/lef.tab.cpp	/^    K_COVER = 279,$/;"	e	enum:yytokentype	file:
K_COVER	lef/lef/lef.tab.h	/^    K_COVER = 279,$/;"	e	enum:yytokentype
K_CPERSQDIST	lef/lef/lef.tab.cpp	/^    K_CPERSQDIST = 280,$/;"	e	enum:yytokentype	file:
K_CPERSQDIST	lef/lef/lef.tab.h	/^    K_CPERSQDIST = 280,$/;"	e	enum:yytokentype
K_CREATEFILE	lef/lef/lef.tab.cpp	/^    K_CREATEFILE = 528,$/;"	e	enum:yytokentype	file:
K_CREATEFILE	lef/lef/lef.tab.h	/^    K_CREATEFILE = 528,$/;"	e	enum:yytokentype
K_CURRENT	lef/lef/lef.tab.cpp	/^    K_CURRENT = 281,$/;"	e	enum:yytokentype	file:
K_CURRENT	lef/lef/lef.tab.h	/^    K_CURRENT = 281,$/;"	e	enum:yytokentype
K_CURRENTDEN	lef/lef/lef.tab.cpp	/^    K_CURRENTDEN = 511,$/;"	e	enum:yytokentype	file:
K_CURRENTDEN	lef/lef/lef.tab.h	/^    K_CURRENTDEN = 511,$/;"	e	enum:yytokentype
K_CURRENTSOURCE	lef/lef/lef.tab.cpp	/^    K_CURRENTSOURCE = 282,$/;"	e	enum:yytokentype	file:
K_CURRENTSOURCE	lef/lef/lef.tab.h	/^    K_CURRENTSOURCE = 282,$/;"	e	enum:yytokentype
K_CUT	lef/lef/lef.tab.cpp	/^    K_CUT = 283,$/;"	e	enum:yytokentype	file:
K_CUT	lef/lef/lef.tab.h	/^    K_CUT = 283,$/;"	e	enum:yytokentype
K_CUTAREA	lef/lef/lef.tab.cpp	/^    K_CUTAREA = 551,$/;"	e	enum:yytokentype	file:
K_CUTAREA	lef/lef/lef.tab.h	/^    K_CUTAREA = 551,$/;"	e	enum:yytokentype
K_CUTSIZE	lef/lef/lef.tab.cpp	/^    K_CUTSIZE = 629,$/;"	e	enum:yytokentype	file:
K_CUTSIZE	lef/lef/lef.tab.h	/^    K_CUTSIZE = 629,$/;"	e	enum:yytokentype
K_CUTSPACING	lef/lef/lef.tab.cpp	/^    K_CUTSPACING = 630,$/;"	e	enum:yytokentype	file:
K_CUTSPACING	lef/lef/lef.tab.h	/^    K_CUTSPACING = 630,$/;"	e	enum:yytokentype
K_DATA	lef/lef/lef.tab.cpp	/^    K_DATA = 286,$/;"	e	enum:yytokentype	file:
K_DATA	lef/lef/lef.tab.h	/^    K_DATA = 286,$/;"	e	enum:yytokentype
K_DATABASE	lef/lef/lef.tab.cpp	/^    K_DATABASE = 285,$/;"	e	enum:yytokentype	file:
K_DATABASE	lef/lef/lef.tab.h	/^    K_DATABASE = 285,$/;"	e	enum:yytokentype
K_DCCURRENTDENSITY	lef/lef/lef.tab.cpp	/^    K_DCCURRENTDENSITY = 546,$/;"	e	enum:yytokentype	file:
K_DCCURRENTDENSITY	lef/lef/lef.tab.h	/^    K_DCCURRENTDENSITY = 546,$/;"	e	enum:yytokentype
K_DEFAULT	lef/lef/lef.tab.cpp	/^    K_DEFAULT = 284,$/;"	e	enum:yytokentype	file:
K_DEFAULT	lef/lef/lef.tab.h	/^    K_DEFAULT = 284,$/;"	e	enum:yytokentype
K_DEFAULTCAP	lef/lef/lef.tab.cpp	/^    K_DEFAULTCAP = 457,$/;"	e	enum:yytokentype	file:
K_DEFAULTCAP	lef/lef/lef.tab.h	/^    K_DEFAULTCAP = 457,$/;"	e	enum:yytokentype
K_DEFINE	lef/lef/lef.tab.cpp	/^    K_DEFINE = 463,$/;"	e	enum:yytokentype	file:
K_DEFINE	lef/lef/lef.tab.h	/^    K_DEFINE = 463,$/;"	e	enum:yytokentype
K_DEFINEB	lef/lef/lef.tab.cpp	/^    K_DEFINEB = 465,$/;"	e	enum:yytokentype	file:
K_DEFINEB	lef/lef/lef.tab.h	/^    K_DEFINEB = 465,$/;"	e	enum:yytokentype
K_DEFINES	lef/lef/lef.tab.cpp	/^    K_DEFINES = 464,$/;"	e	enum:yytokentype	file:
K_DEFINES	lef/lef/lef.tab.h	/^    K_DEFINES = 464,$/;"	e	enum:yytokentype
K_DELAY	lef/lef/lef.tab.cpp	/^    K_DELAY = 480,$/;"	e	enum:yytokentype	file:
K_DELAY	lef/lef/lef.tab.h	/^    K_DELAY = 480,$/;"	e	enum:yytokentype
K_DENSITY	lef/lef/lef.tab.cpp	/^    K_DENSITY = 631,$/;"	e	enum:yytokentype	file:
K_DENSITY	lef/lef/lef.tab.h	/^    K_DENSITY = 631,$/;"	e	enum:yytokentype
K_DENSITYCHECKSTEP	lef/lef/lef.tab.cpp	/^    K_DENSITYCHECKSTEP = 599,$/;"	e	enum:yytokentype	file:
K_DENSITYCHECKSTEP	lef/lef/lef.tab.h	/^    K_DENSITYCHECKSTEP = 599,$/;"	e	enum:yytokentype
K_DENSITYCHECKWINDOW	lef/lef/lef.tab.cpp	/^    K_DENSITYCHECKWINDOW = 598,$/;"	e	enum:yytokentype	file:
K_DENSITYCHECKWINDOW	lef/lef/lef.tab.h	/^    K_DENSITYCHECKWINDOW = 598,$/;"	e	enum:yytokentype
K_DESIGNRULEWIDTH	lef/lef/lef.tab.cpp	/^    K_DESIGNRULEWIDTH = 275,$/;"	e	enum:yytokentype	file:
K_DESIGNRULEWIDTH	lef/lef/lef.tab.h	/^    K_DESIGNRULEWIDTH = 275,$/;"	e	enum:yytokentype
K_DIAG135	lef/lef/lef.tab.cpp	/^    K_DIAG135 = 633,$/;"	e	enum:yytokentype	file:
K_DIAG135	lef/lef/lef.tab.h	/^    K_DIAG135 = 633,$/;"	e	enum:yytokentype
K_DIAG45	lef/lef/lef.tab.cpp	/^    K_DIAG45 = 632,$/;"	e	enum:yytokentype	file:
K_DIAG45	lef/lef/lef.tab.h	/^    K_DIAG45 = 632,$/;"	e	enum:yytokentype
K_DIAGMINEDGELENGTH	lef/lef/lef.tab.cpp	/^    K_DIAGMINEDGELENGTH = 635,$/;"	e	enum:yytokentype	file:
K_DIAGMINEDGELENGTH	lef/lef/lef.tab.h	/^    K_DIAGMINEDGELENGTH = 635,$/;"	e	enum:yytokentype
K_DIAGPITCH	lef/lef/lef.tab.cpp	/^    K_DIAGPITCH = 637,$/;"	e	enum:yytokentype	file:
K_DIAGPITCH	lef/lef/lef.tab.h	/^    K_DIAGPITCH = 637,$/;"	e	enum:yytokentype
K_DIAGSPACING	lef/lef/lef.tab.cpp	/^    K_DIAGSPACING = 636,$/;"	e	enum:yytokentype	file:
K_DIAGSPACING	lef/lef/lef.tab.h	/^    K_DIAGSPACING = 636,$/;"	e	enum:yytokentype
K_DIAGWIDTH	lef/lef/lef.tab.cpp	/^    K_DIAGWIDTH = 638,$/;"	e	enum:yytokentype	file:
K_DIAGWIDTH	lef/lef/lef.tab.h	/^    K_DIAGWIDTH = 638,$/;"	e	enum:yytokentype
K_DIELECTRIC	lef/lef/lef.tab.cpp	/^    K_DIELECTRIC = 287,$/;"	e	enum:yytokentype	file:
K_DIELECTRIC	lef/lef/lef.tab.h	/^    K_DIELECTRIC = 287,$/;"	e	enum:yytokentype
K_DIFFUSEONLY	lef/lef/lef.tab.cpp	/^    K_DIFFUSEONLY = 568,$/;"	e	enum:yytokentype	file:
K_DIFFUSEONLY	lef/lef/lef.tab.h	/^    K_DIFFUSEONLY = 568,$/;"	e	enum:yytokentype
K_DIRECTION	lef/lef/lef.tab.cpp	/^    K_DIRECTION = 288,$/;"	e	enum:yytokentype	file:
K_DIRECTION	lef/lef/lef.tab.h	/^    K_DIRECTION = 288,$/;"	e	enum:yytokentype
K_DIVIDERCHAR	lef/lef/lef.tab.cpp	/^    K_DIVIDERCHAR = 515,$/;"	e	enum:yytokentype	file:
K_DIVIDERCHAR	lef/lef/lef.tab.h	/^    K_DIVIDERCHAR = 515,$/;"	e	enum:yytokentype
K_DO	lef/lef/lef.tab.cpp	/^    K_DO = 289,$/;"	e	enum:yytokentype	file:
K_DO	lef/lef/lef.tab.h	/^    K_DO = 289,$/;"	e	enum:yytokentype
K_E	lef/lef/lef.tab.cpp	/^    K_E = 430,$/;"	e	enum:yytokentype	file:
K_E	lef/lef/lef.tab.h	/^    K_E = 430,$/;"	e	enum:yytokentype
K_EDGECAPACITANCE	lef/lef/lef.tab.cpp	/^    K_EDGECAPACITANCE = 290,$/;"	e	enum:yytokentype	file:
K_EDGECAPACITANCE	lef/lef/lef.tab.h	/^    K_EDGECAPACITANCE = 290,$/;"	e	enum:yytokentype
K_EDGERATE	lef/lef/lef.tab.cpp	/^    K_EDGERATE = 504,$/;"	e	enum:yytokentype	file:
K_EDGERATE	lef/lef/lef.tab.h	/^    K_EDGERATE = 504,$/;"	e	enum:yytokentype
K_EDGERATESCALEFACTOR	lef/lef/lef.tab.cpp	/^    K_EDGERATESCALEFACTOR = 500,$/;"	e	enum:yytokentype	file:
K_EDGERATESCALEFACTOR	lef/lef/lef.tab.h	/^    K_EDGERATESCALEFACTOR = 500,$/;"	e	enum:yytokentype
K_EDGERATETHRESHOLD1	lef/lef/lef.tab.cpp	/^    K_EDGERATETHRESHOLD1 = 498,$/;"	e	enum:yytokentype	file:
K_EDGERATETHRESHOLD1	lef/lef/lef.tab.h	/^    K_EDGERATETHRESHOLD1 = 498,$/;"	e	enum:yytokentype
K_EDGERATETHRESHOLD2	lef/lef/lef.tab.cpp	/^    K_EDGERATETHRESHOLD2 = 501,$/;"	e	enum:yytokentype	file:
K_EDGERATETHRESHOLD2	lef/lef/lef.tab.h	/^    K_EDGERATETHRESHOLD2 = 501,$/;"	e	enum:yytokentype
K_EEQ	lef/lef/lef.tab.cpp	/^    K_EEQ = 291,$/;"	e	enum:yytokentype	file:
K_EEQ	lef/lef/lef.tab.h	/^    K_EEQ = 291,$/;"	e	enum:yytokentype
K_ELSE	lef/lef/lef.tab.cpp	/^    K_ELSE = 468,$/;"	e	enum:yytokentype	file:
K_ELSE	lef/lef/lef.tab.h	/^    K_ELSE = 468,$/;"	e	enum:yytokentype
K_ENCLOSURE	lef/lef/lef.tab.cpp	/^    K_ENCLOSURE = 605,$/;"	e	enum:yytokentype	file:
K_ENCLOSURE	lef/lef/lef.tab.h	/^    K_ENCLOSURE = 605,$/;"	e	enum:yytokentype
K_END	lef/lef/lef.tab.cpp	/^    K_END = 292,$/;"	e	enum:yytokentype	file:
K_END	lef/lef/lef.tab.h	/^    K_END = 292,$/;"	e	enum:yytokentype
K_ENDCAP	lef/lef/lef.tab.cpp	/^    K_ENDCAP = 293,$/;"	e	enum:yytokentype	file:
K_ENDCAP	lef/lef/lef.tab.h	/^    K_ENDCAP = 293,$/;"	e	enum:yytokentype
K_ENDEXT	lef/lef/lef.tab.cpp	/^    K_ENDEXT = 496,$/;"	e	enum:yytokentype	file:
K_ENDEXT	lef/lef/lef.tab.h	/^    K_ENDEXT = 496,$/;"	e	enum:yytokentype
K_ENDLAYER	lef/lef/lef.tab.cpp	/^    K_ENDLAYER = 450,$/;"	e	enum:yytokentype	file:
K_ENDLAYER	lef/lef/lef.tab.h	/^    K_ENDLAYER = 450,$/;"	e	enum:yytokentype
K_ENDMACRO	lef/lef/lef.tab.cpp	/^    K_ENDMACRO = 446,$/;"	e	enum:yytokentype	file:
K_ENDMACRO	lef/lef/lef.tab.h	/^    K_ENDMACRO = 446,$/;"	e	enum:yytokentype
K_ENDMACROPIN	lef/lef/lef.tab.cpp	/^    K_ENDMACROPIN = 447,$/;"	e	enum:yytokentype	file:
K_ENDMACROPIN	lef/lef/lef.tab.h	/^    K_ENDMACROPIN = 447,$/;"	e	enum:yytokentype
K_ENDOFLINE	lef/lef/lef.tab.cpp	/^    K_ENDOFLINE = 664,$/;"	e	enum:yytokentype	file:
K_ENDOFLINE	lef/lef/lef.tab.h	/^    K_ENDOFLINE = 664,$/;"	e	enum:yytokentype
K_ENDOFNOTCHWIDTH	lef/lef/lef.tab.cpp	/^    K_ENDOFNOTCHWIDTH = 665,$/;"	e	enum:yytokentype	file:
K_ENDOFNOTCHWIDTH	lef/lef/lef.tab.h	/^    K_ENDOFNOTCHWIDTH = 665,$/;"	e	enum:yytokentype
K_ENDSITE	lef/lef/lef.tab.cpp	/^    K_ENDSITE = 451,$/;"	e	enum:yytokentype	file:
K_ENDSITE	lef/lef/lef.tab.h	/^    K_ENDSITE = 451,$/;"	e	enum:yytokentype
K_ENDVIA	lef/lef/lef.tab.cpp	/^    K_ENDVIA = 449,$/;"	e	enum:yytokentype	file:
K_ENDVIA	lef/lef/lef.tab.h	/^    K_ENDVIA = 449,$/;"	e	enum:yytokentype
K_ENDVIARULE	lef/lef/lef.tab.cpp	/^    K_ENDVIARULE = 448,$/;"	e	enum:yytokentype	file:
K_ENDVIARULE	lef/lef/lef.tab.h	/^    K_ENDVIARULE = 448,$/;"	e	enum:yytokentype
K_EQ	lef/lef/lef.tab.cpp	/^    K_EQ = 471,$/;"	e	enum:yytokentype	file:
K_EQ	lef/lef/lef.tab.h	/^    K_EQ = 471,$/;"	e	enum:yytokentype
K_ERROR	lef/lef/lef.tab.cpp	/^    K_ERROR = 532,$/;"	e	enum:yytokentype	file:
K_ERROR	lef/lef/lef.tab.h	/^    K_ERROR = 532,$/;"	e	enum:yytokentype
K_EUCLIDEAN	lef/lef/lef.tab.cpp	/^    K_EUCLIDEAN = 573,$/;"	e	enum:yytokentype	file:
K_EUCLIDEAN	lef/lef/lef.tab.h	/^    K_EUCLIDEAN = 573,$/;"	e	enum:yytokentype
K_EXCEPTEXTRACUT	lef/lef/lef.tab.cpp	/^    K_EXCEPTEXTRACUT = 666,$/;"	e	enum:yytokentype	file:
K_EXCEPTEXTRACUT	lef/lef/lef.tab.h	/^    K_EXCEPTEXTRACUT = 666,$/;"	e	enum:yytokentype
K_EXCEPTPGNET	lef/lef/lef.tab.cpp	/^    K_EXCEPTPGNET = 668,$/;"	e	enum:yytokentype	file:
K_EXCEPTPGNET	lef/lef/lef.tab.h	/^    K_EXCEPTPGNET = 668,$/;"	e	enum:yytokentype
K_EXCEPTSAMEPGNET	lef/lef/lef.tab.cpp	/^    K_EXCEPTSAMEPGNET = 667,$/;"	e	enum:yytokentype	file:
K_EXCEPTSAMEPGNET	lef/lef/lef.tab.h	/^    K_EXCEPTSAMEPGNET = 667,$/;"	e	enum:yytokentype
K_EXTENSION	lef/lef/lef.tab.cpp	/^    K_EXTENSION = 485,$/;"	e	enum:yytokentype	file:
K_EXTENSION	lef/lef/lef.tab.h	/^    K_EXTENSION = 485,$/;"	e	enum:yytokentype
K_FALL	lef/lef/lef.tab.cpp	/^    K_FALL = 294,$/;"	e	enum:yytokentype	file:
K_FALL	lef/lef/lef.tab.h	/^    K_FALL = 294,$/;"	e	enum:yytokentype
K_FALLCS	lef/lef/lef.tab.cpp	/^    K_FALLCS = 295,$/;"	e	enum:yytokentype	file:
K_FALLCS	lef/lef/lef.tab.h	/^    K_FALLCS = 295,$/;"	e	enum:yytokentype
K_FALLRS	lef/lef/lef.tab.cpp	/^    K_FALLRS = 298,$/;"	e	enum:yytokentype	file:
K_FALLRS	lef/lef/lef.tab.h	/^    K_FALLRS = 298,$/;"	e	enum:yytokentype
K_FALLSATCUR	lef/lef/lef.tab.cpp	/^    K_FALLSATCUR = 299,$/;"	e	enum:yytokentype	file:
K_FALLSATCUR	lef/lef/lef.tab.h	/^    K_FALLSATCUR = 299,$/;"	e	enum:yytokentype
K_FALLSATT1	lef/lef/lef.tab.cpp	/^    K_FALLSATT1 = 297,$/;"	e	enum:yytokentype	file:
K_FALLSATT1	lef/lef/lef.tab.h	/^    K_FALLSATT1 = 297,$/;"	e	enum:yytokentype
K_FALLSLEWLIMIT	lef/lef/lef.tab.cpp	/^    K_FALLSLEWLIMIT = 520,$/;"	e	enum:yytokentype	file:
K_FALLSLEWLIMIT	lef/lef/lef.tab.h	/^    K_FALLSLEWLIMIT = 520,$/;"	e	enum:yytokentype
K_FALLT0	lef/lef/lef.tab.cpp	/^    K_FALLT0 = 296,$/;"	e	enum:yytokentype	file:
K_FALLT0	lef/lef/lef.tab.h	/^    K_FALLT0 = 296,$/;"	e	enum:yytokentype
K_FALLTHRESH	lef/lef/lef.tab.cpp	/^    K_FALLTHRESH = 300,$/;"	e	enum:yytokentype	file:
K_FALLTHRESH	lef/lef/lef.tab.h	/^    K_FALLTHRESH = 300,$/;"	e	enum:yytokentype
K_FALLVOLTAGETHRESHOLD	lef/lef/lef.tab.cpp	/^    K_FALLVOLTAGETHRESHOLD = 376,$/;"	e	enum:yytokentype	file:
K_FALLVOLTAGETHRESHOLD	lef/lef/lef.tab.h	/^    K_FALLVOLTAGETHRESHOLD = 376,$/;"	e	enum:yytokentype
K_FALSE	lef/lef/lef.tab.cpp	/^    K_FALSE = 469,$/;"	e	enum:yytokentype	file:
K_FALSE	lef/lef/lef.tab.h	/^    K_FALSE = 469,$/;"	e	enum:yytokentype
K_FATALERROR	lef/lef/lef.tab.cpp	/^    K_FATALERROR = 533,$/;"	e	enum:yytokentype	file:
K_FATALERROR	lef/lef/lef.tab.h	/^    K_FATALERROR = 533,$/;"	e	enum:yytokentype
K_FE	lef/lef/lef.tab.cpp	/^    K_FE = 434,$/;"	e	enum:yytokentype	file:
K_FE	lef/lef/lef.tab.h	/^    K_FE = 434,$/;"	e	enum:yytokentype
K_FEEDTHRU	lef/lef/lef.tab.cpp	/^    K_FEEDTHRU = 301,$/;"	e	enum:yytokentype	file:
K_FEEDTHRU	lef/lef/lef.tab.h	/^    K_FEEDTHRU = 301,$/;"	e	enum:yytokentype
K_FILLACTIVESPACING	lef/lef/lef.tab.cpp	/^    K_FILLACTIVESPACING = 600,$/;"	e	enum:yytokentype	file:
K_FILLACTIVESPACING	lef/lef/lef.tab.h	/^    K_FILLACTIVESPACING = 600,$/;"	e	enum:yytokentype
K_FIXED	lef/lef/lef.tab.cpp	/^    K_FIXED = 302,$/;"	e	enum:yytokentype	file:
K_FIXED	lef/lef/lef.tab.h	/^    K_FIXED = 302,$/;"	e	enum:yytokentype
K_FIXEDMASK	lef/lef/lef.tab.cpp	/^    K_FIXEDMASK = 570,$/;"	e	enum:yytokentype	file:
K_FIXEDMASK	lef/lef/lef.tab.h	/^    K_FIXEDMASK = 570,$/;"	e	enum:yytokentype
K_FLIP	lef/lef/lef.tab.cpp	/^    K_FLIP = 578,$/;"	e	enum:yytokentype	file:
K_FLIP	lef/lef/lef.tab.h	/^    K_FLIP = 578,$/;"	e	enum:yytokentype
K_FLOORPLAN	lef/lef/lef.tab.cpp	/^    K_FLOORPLAN = 455,$/;"	e	enum:yytokentype	file:
K_FLOORPLAN	lef/lef/lef.tab.h	/^    K_FLOORPLAN = 455,$/;"	e	enum:yytokentype
K_FN	lef/lef/lef.tab.cpp	/^    K_FN = 432,$/;"	e	enum:yytokentype	file:
K_FN	lef/lef/lef.tab.h	/^    K_FN = 432,$/;"	e	enum:yytokentype
K_FOREIGN	lef/lef/lef.tab.cpp	/^    K_FOREIGN = 303,$/;"	e	enum:yytokentype	file:
K_FOREIGN	lef/lef/lef.tab.h	/^    K_FOREIGN = 303,$/;"	e	enum:yytokentype
K_FREQUENCY	lef/lef/lef.tab.cpp	/^    K_FREQUENCY = 550,$/;"	e	enum:yytokentype	file:
K_FREQUENCY	lef/lef/lef.tab.h	/^    K_FREQUENCY = 550,$/;"	e	enum:yytokentype
K_FROMABOVE	lef/lef/lef.tab.cpp	/^    K_FROMABOVE = 606,$/;"	e	enum:yytokentype	file:
K_FROMABOVE	lef/lef/lef.tab.h	/^    K_FROMABOVE = 606,$/;"	e	enum:yytokentype
K_FROMBELOW	lef/lef/lef.tab.cpp	/^    K_FROMBELOW = 607,$/;"	e	enum:yytokentype	file:
K_FROMBELOW	lef/lef/lef.tab.h	/^    K_FROMBELOW = 607,$/;"	e	enum:yytokentype
K_FROMPIN	lef/lef/lef.tab.cpp	/^    K_FROMPIN = 304,$/;"	e	enum:yytokentype	file:
K_FROMPIN	lef/lef/lef.tab.h	/^    K_FROMPIN = 304,$/;"	e	enum:yytokentype
K_FS	lef/lef/lef.tab.cpp	/^    K_FS = 433,$/;"	e	enum:yytokentype	file:
K_FS	lef/lef/lef.tab.h	/^    K_FS = 433,$/;"	e	enum:yytokentype
K_FUNCTION	lef/lef/lef.tab.cpp	/^    K_FUNCTION = 521,$/;"	e	enum:yytokentype	file:
K_FUNCTION	lef/lef/lef.tab.h	/^    K_FUNCTION = 521,$/;"	e	enum:yytokentype
K_FW	lef/lef/lef.tab.cpp	/^    K_FW = 435,$/;"	e	enum:yytokentype	file:
K_FW	lef/lef/lef.tab.h	/^    K_FW = 435,$/;"	e	enum:yytokentype
K_GCELLGRID	lef/lef/lef.tab.cpp	/^    K_GCELLGRID = 456,$/;"	e	enum:yytokentype	file:
K_GCELLGRID	lef/lef/lef.tab.h	/^    K_GCELLGRID = 456,$/;"	e	enum:yytokentype
K_GE	lef/lef/lef.tab.cpp	/^    K_GE = 475,$/;"	e	enum:yytokentype	file:
K_GE	lef/lef/lef.tab.h	/^    K_GE = 475,$/;"	e	enum:yytokentype
K_GENERATE	lef/lef/lef.tab.cpp	/^    K_GENERATE = 305,$/;"	e	enum:yytokentype	file:
K_GENERATE	lef/lef/lef.tab.h	/^    K_GENERATE = 305,$/;"	e	enum:yytokentype
K_GENERATED	lef/lef/lef.tab.cpp	/^    K_GENERATED = 639,$/;"	e	enum:yytokentype	file:
K_GENERATED	lef/lef/lef.tab.h	/^    K_GENERATED = 639,$/;"	e	enum:yytokentype
K_GENERATOR	lef/lef/lef.tab.cpp	/^    K_GENERATOR = 306,$/;"	e	enum:yytokentype	file:
K_GENERATOR	lef/lef/lef.tab.h	/^    K_GENERATOR = 306,$/;"	e	enum:yytokentype
K_GROUND	lef/lef/lef.tab.cpp	/^    K_GROUND = 307,$/;"	e	enum:yytokentype	file:
K_GROUND	lef/lef/lef.tab.h	/^    K_GROUND = 307,$/;"	e	enum:yytokentype
K_GROUNDSENSITIVITY	lef/lef/lef.tab.cpp	/^    K_GROUNDSENSITIVITY = 640,$/;"	e	enum:yytokentype	file:
K_GROUNDSENSITIVITY	lef/lef/lef.tab.h	/^    K_GROUNDSENSITIVITY = 640,$/;"	e	enum:yytokentype
K_GT	lef/lef/lef.tab.cpp	/^    K_GT = 476,$/;"	e	enum:yytokentype	file:
K_GT	lef/lef/lef.tab.h	/^    K_GT = 476,$/;"	e	enum:yytokentype
K_HARDSPACING	lef/lef/lef.tab.cpp	/^    K_HARDSPACING = 641,$/;"	e	enum:yytokentype	file:
K_HARDSPACING	lef/lef/lef.tab.h	/^    K_HARDSPACING = 641,$/;"	e	enum:yytokentype
K_HEIGHT	lef/lef/lef.tab.cpp	/^    K_HEIGHT = 308,$/;"	e	enum:yytokentype	file:
K_HEIGHT	lef/lef/lef.tab.h	/^    K_HEIGHT = 308,$/;"	e	enum:yytokentype
K_HISTORY	lef/lef/lef.tab.cpp	/^    K_HISTORY = 258,$/;"	e	enum:yytokentype	file:
K_HISTORY	lef/lef/lef.tab.h	/^    K_HISTORY = 258,$/;"	e	enum:yytokentype
K_HOLD	lef/lef/lef.tab.cpp	/^    K_HOLD = 462,$/;"	e	enum:yytokentype	file:
K_HOLD	lef/lef/lef.tab.h	/^    K_HOLD = 462,$/;"	e	enum:yytokentype
K_HORIZONTAL	lef/lef/lef.tab.cpp	/^    K_HORIZONTAL = 309,$/;"	e	enum:yytokentype	file:
K_HORIZONTAL	lef/lef/lef.tab.h	/^    K_HORIZONTAL = 309,$/;"	e	enum:yytokentype
K_IF	lef/lef/lef.tab.cpp	/^    K_IF = 466,$/;"	e	enum:yytokentype	file:
K_IF	lef/lef/lef.tab.h	/^    K_IF = 466,$/;"	e	enum:yytokentype
K_IMPLANT	lef/lef/lef.tab.cpp	/^    K_IMPLANT = 608,$/;"	e	enum:yytokentype	file:
K_IMPLANT	lef/lef/lef.tab.h	/^    K_IMPLANT = 608,$/;"	e	enum:yytokentype
K_INFLUENCE	lef/lef/lef.tab.cpp	/^    K_INFLUENCE = 276,$/;"	e	enum:yytokentype	file:
K_INFLUENCE	lef/lef/lef.tab.h	/^    K_INFLUENCE = 276,$/;"	e	enum:yytokentype
K_INOUT	lef/lef/lef.tab.cpp	/^    K_INOUT = 310,$/;"	e	enum:yytokentype	file:
K_INOUT	lef/lef/lef.tab.h	/^    K_INOUT = 310,$/;"	e	enum:yytokentype
K_INOUTPINANTENNASIZE	lef/lef/lef.tab.cpp	/^    K_INOUTPINANTENNASIZE = 510,$/;"	e	enum:yytokentype	file:
K_INOUTPINANTENNASIZE	lef/lef/lef.tab.h	/^    K_INOUTPINANTENNASIZE = 510,$/;"	e	enum:yytokentype
K_INPUT	lef/lef/lef.tab.cpp	/^    K_INPUT = 311,$/;"	e	enum:yytokentype	file:
K_INPUT	lef/lef/lef.tab.h	/^    K_INPUT = 311,$/;"	e	enum:yytokentype
K_INPUTNOISEMARGIN	lef/lef/lef.tab.cpp	/^    K_INPUTNOISEMARGIN = 312,$/;"	e	enum:yytokentype	file:
K_INPUTNOISEMARGIN	lef/lef/lef.tab.h	/^    K_INPUTNOISEMARGIN = 312,$/;"	e	enum:yytokentype
K_INPUTPINANTENNASIZE	lef/lef/lef.tab.cpp	/^    K_INPUTPINANTENNASIZE = 509,$/;"	e	enum:yytokentype	file:
K_INPUTPINANTENNASIZE	lef/lef/lef.tab.h	/^    K_INPUTPINANTENNASIZE = 509,$/;"	e	enum:yytokentype
K_INSIDECORNER	lef/lef/lef.tab.cpp	/^    K_INSIDECORNER = 642,$/;"	e	enum:yytokentype	file:
K_INSIDECORNER	lef/lef/lef.tab.h	/^    K_INSIDECORNER = 642,$/;"	e	enum:yytokentype
K_INTEGER	lef/lef/lef.tab.cpp	/^    K_INTEGER = 488,$/;"	e	enum:yytokentype	file:
K_INTEGER	lef/lef/lef.tab.h	/^    K_INTEGER = 488,$/;"	e	enum:yytokentype
K_INTRINSIC	lef/lef/lef.tab.cpp	/^    K_INTRINSIC = 314,$/;"	e	enum:yytokentype	file:
K_INTRINSIC	lef/lef/lef.tab.h	/^    K_INTRINSIC = 314,$/;"	e	enum:yytokentype
K_INVERT	lef/lef/lef.tab.cpp	/^    K_INVERT = 315,$/;"	e	enum:yytokentype	file:
K_INVERT	lef/lef/lef.tab.h	/^    K_INVERT = 315,$/;"	e	enum:yytokentype
K_INVERTER	lef/lef/lef.tab.cpp	/^    K_INVERTER = 523,$/;"	e	enum:yytokentype	file:
K_INVERTER	lef/lef/lef.tab.h	/^    K_INVERTER = 523,$/;"	e	enum:yytokentype
K_IRDROP	lef/lef/lef.tab.cpp	/^    K_IRDROP = 316,$/;"	e	enum:yytokentype	file:
K_IRDROP	lef/lef/lef.tab.h	/^    K_IRDROP = 316,$/;"	e	enum:yytokentype
K_ITERATE	lef/lef/lef.tab.cpp	/^    K_ITERATE = 317,$/;"	e	enum:yytokentype	file:
K_ITERATE	lef/lef/lef.tab.h	/^    K_ITERATE = 317,$/;"	e	enum:yytokentype
K_IV_TABLES	lef/lef/lef.tab.cpp	/^    K_IV_TABLES = 318,$/;"	e	enum:yytokentype	file:
K_IV_TABLES	lef/lef/lef.tab.h	/^    K_IV_TABLES = 318,$/;"	e	enum:yytokentype
K_LAYER	lef/lef/lef.tab.cpp	/^    K_LAYER = 319,$/;"	e	enum:yytokentype	file:
K_LAYER	lef/lef/lef.tab.h	/^    K_LAYER = 319,$/;"	e	enum:yytokentype
K_LAYERS	lef/lef/lef.tab.cpp	/^    K_LAYERS = 643,$/;"	e	enum:yytokentype	file:
K_LAYERS	lef/lef/lef.tab.h	/^    K_LAYERS = 643,$/;"	e	enum:yytokentype
K_LE	lef/lef/lef.tab.cpp	/^    K_LE = 473,$/;"	e	enum:yytokentype	file:
K_LE	lef/lef/lef.tab.h	/^    K_LE = 473,$/;"	e	enum:yytokentype
K_LEAKAGE	lef/lef/lef.tab.cpp	/^    K_LEAKAGE = 320,$/;"	e	enum:yytokentype	file:
K_LEAKAGE	lef/lef/lef.tab.h	/^    K_LEAKAGE = 320,$/;"	e	enum:yytokentype
K_LENGTH	lef/lef/lef.tab.cpp	/^    K_LENGTH = 609,$/;"	e	enum:yytokentype	file:
K_LENGTH	lef/lef/lef.tab.h	/^    K_LENGTH = 609,$/;"	e	enum:yytokentype
K_LENGTHSUM	lef/lef/lef.tab.cpp	/^    K_LENGTHSUM = 644,$/;"	e	enum:yytokentype	file:
K_LENGTHSUM	lef/lef/lef.tab.h	/^    K_LENGTHSUM = 644,$/;"	e	enum:yytokentype
K_LENGTHTHRESHOLD	lef/lef/lef.tab.cpp	/^    K_LENGTHTHRESHOLD = 554,$/;"	e	enum:yytokentype	file:
K_LENGTHTHRESHOLD	lef/lef/lef.tab.h	/^    K_LENGTHTHRESHOLD = 554,$/;"	e	enum:yytokentype
K_LEQ	lef/lef/lef.tab.cpp	/^    K_LEQ = 321,$/;"	e	enum:yytokentype	file:
K_LEQ	lef/lef/lef.tab.h	/^    K_LEQ = 321,$/;"	e	enum:yytokentype
K_LIBRARY	lef/lef/lef.tab.cpp	/^    K_LIBRARY = 322,$/;"	e	enum:yytokentype	file:
K_LIBRARY	lef/lef/lef.tab.h	/^    K_LIBRARY = 322,$/;"	e	enum:yytokentype
K_LONGARRAY	lef/lef/lef.tab.cpp	/^    K_LONGARRAY = 669,$/;"	e	enum:yytokentype	file:
K_LONGARRAY	lef/lef/lef.tab.h	/^    K_LONGARRAY = 669,$/;"	e	enum:yytokentype
K_LT	lef/lef/lef.tab.cpp	/^    K_LT = 474,$/;"	e	enum:yytokentype	file:
K_LT	lef/lef/lef.tab.h	/^    K_LT = 474,$/;"	e	enum:yytokentype
K_MACRO	lef/lef/lef.tab.cpp	/^    K_MACRO = 323,$/;"	e	enum:yytokentype	file:
K_MACRO	lef/lef/lef.tab.h	/^    K_MACRO = 323,$/;"	e	enum:yytokentype
K_MANUFACTURINGGRID	lef/lef/lef.tab.cpp	/^    K_MANUFACTURINGGRID = 569,$/;"	e	enum:yytokentype	file:
K_MANUFACTURINGGRID	lef/lef/lef.tab.h	/^    K_MANUFACTURINGGRID = 569,$/;"	e	enum:yytokentype
K_MASK	lef/lef/lef.tab.cpp	/^    K_MASK = 634,$/;"	e	enum:yytokentype	file:
K_MASK	lef/lef/lef.tab.h	/^    K_MASK = 634,$/;"	e	enum:yytokentype
K_MASTERSLICE	lef/lef/lef.tab.cpp	/^    K_MASTERSLICE = 445,$/;"	e	enum:yytokentype	file:
K_MASTERSLICE	lef/lef/lef.tab.h	/^    K_MASTERSLICE = 445,$/;"	e	enum:yytokentype
K_MATCH	lef/lef/lef.tab.cpp	/^    K_MATCH = 324,$/;"	e	enum:yytokentype	file:
K_MATCH	lef/lef/lef.tab.h	/^    K_MATCH = 324,$/;"	e	enum:yytokentype
K_MAXADJACENTSLOTSPACING	lef/lef/lef.tab.cpp	/^    K_MAXADJACENTSLOTSPACING = 592,$/;"	e	enum:yytokentype	file:
K_MAXADJACENTSLOTSPACING	lef/lef/lef.tab.h	/^    K_MAXADJACENTSLOTSPACING = 592,$/;"	e	enum:yytokentype
K_MAXCOAXIALSLOTSPACING	lef/lef/lef.tab.cpp	/^    K_MAXCOAXIALSLOTSPACING = 593,$/;"	e	enum:yytokentype	file:
K_MAXCOAXIALSLOTSPACING	lef/lef/lef.tab.h	/^    K_MAXCOAXIALSLOTSPACING = 593,$/;"	e	enum:yytokentype
K_MAXDELAY	lef/lef/lef.tab.cpp	/^    K_MAXDELAY = 325,$/;"	e	enum:yytokentype	file:
K_MAXDELAY	lef/lef/lef.tab.h	/^    K_MAXDELAY = 325,$/;"	e	enum:yytokentype
K_MAXEDGES	lef/lef/lef.tab.cpp	/^    K_MAXEDGES = 670,$/;"	e	enum:yytokentype	file:
K_MAXEDGES	lef/lef/lef.tab.h	/^    K_MAXEDGES = 670,$/;"	e	enum:yytokentype
K_MAXEDGESLOTSPACING	lef/lef/lef.tab.cpp	/^    K_MAXEDGESLOTSPACING = 594,$/;"	e	enum:yytokentype	file:
K_MAXEDGESLOTSPACING	lef/lef/lef.tab.h	/^    K_MAXEDGESLOTSPACING = 594,$/;"	e	enum:yytokentype
K_MAXIMUMDENSITY	lef/lef/lef.tab.cpp	/^    K_MAXIMUMDENSITY = 597,$/;"	e	enum:yytokentype	file:
K_MAXIMUMDENSITY	lef/lef/lef.tab.h	/^    K_MAXIMUMDENSITY = 597,$/;"	e	enum:yytokentype
K_MAXLOAD	lef/lef/lef.tab.cpp	/^    K_MAXLOAD = 326,$/;"	e	enum:yytokentype	file:
K_MAXLOAD	lef/lef/lef.tab.h	/^    K_MAXLOAD = 326,$/;"	e	enum:yytokentype
K_MAXVIASTACK	lef/lef/lef.tab.cpp	/^    K_MAXVIASTACK = 610,$/;"	e	enum:yytokentype	file:
K_MAXVIASTACK	lef/lef/lef.tab.h	/^    K_MAXVIASTACK = 610,$/;"	e	enum:yytokentype
K_MAXWIDTH	lef/lef/lef.tab.cpp	/^    K_MAXWIDTH = 613,$/;"	e	enum:yytokentype	file:
K_MAXWIDTH	lef/lef/lef.tab.h	/^    K_MAXWIDTH = 613,$/;"	e	enum:yytokentype
K_MAXXY	lef/lef/lef.tab.cpp	/^    K_MAXXY = 574,$/;"	e	enum:yytokentype	file:
K_MAXXY	lef/lef/lef.tab.h	/^    K_MAXXY = 574,$/;"	e	enum:yytokentype
K_MEGAHERTZ	lef/lef/lef.tab.cpp	/^    K_MEGAHERTZ = 552,$/;"	e	enum:yytokentype	file:
K_MEGAHERTZ	lef/lef/lef.tab.h	/^    K_MEGAHERTZ = 552,$/;"	e	enum:yytokentype
K_MESSAGE	lef/lef/lef.tab.cpp	/^    K_MESSAGE = 527,$/;"	e	enum:yytokentype	file:
K_MESSAGE	lef/lef/lef.tab.h	/^    K_MESSAGE = 527,$/;"	e	enum:yytokentype
K_METALOVERHANG	lef/lef/lef.tab.cpp	/^    K_METALOVERHANG = 327,$/;"	e	enum:yytokentype	file:
K_METALOVERHANG	lef/lef/lef.tab.h	/^    K_METALOVERHANG = 327,$/;"	e	enum:yytokentype
K_MICRONS	lef/lef/lef.tab.cpp	/^    K_MICRONS = 645,$/;"	e	enum:yytokentype	file:
K_MICRONS	lef/lef/lef.tab.h	/^    K_MICRONS = 645,$/;"	e	enum:yytokentype
K_MILLIAMPS	lef/lef/lef.tab.cpp	/^    K_MILLIAMPS = 328,$/;"	e	enum:yytokentype	file:
K_MILLIAMPS	lef/lef/lef.tab.h	/^    K_MILLIAMPS = 328,$/;"	e	enum:yytokentype
K_MILLIWATTS	lef/lef/lef.tab.cpp	/^    K_MILLIWATTS = 329,$/;"	e	enum:yytokentype	file:
K_MILLIWATTS	lef/lef/lef.tab.h	/^    K_MILLIWATTS = 329,$/;"	e	enum:yytokentype
K_MINCUTS	lef/lef/lef.tab.cpp	/^    K_MINCUTS = 646,$/;"	e	enum:yytokentype	file:
K_MINCUTS	lef/lef/lef.tab.h	/^    K_MINCUTS = 646,$/;"	e	enum:yytokentype
K_MINENCLOSEDAREA	lef/lef/lef.tab.cpp	/^    K_MINENCLOSEDAREA = 614,$/;"	e	enum:yytokentype	file:
K_MINENCLOSEDAREA	lef/lef/lef.tab.h	/^    K_MINENCLOSEDAREA = 614,$/;"	e	enum:yytokentype
K_MINFEATURE	lef/lef/lef.tab.cpp	/^    K_MINFEATURE = 330,$/;"	e	enum:yytokentype	file:
K_MINFEATURE	lef/lef/lef.tab.h	/^    K_MINFEATURE = 330,$/;"	e	enum:yytokentype
K_MINIMUMCUT	lef/lef/lef.tab.cpp	/^    K_MINIMUMCUT = 601,$/;"	e	enum:yytokentype	file:
K_MINIMUMCUT	lef/lef/lef.tab.h	/^    K_MINIMUMCUT = 601,$/;"	e	enum:yytokentype
K_MINIMUMDENSITY	lef/lef/lef.tab.cpp	/^    K_MINIMUMDENSITY = 596,$/;"	e	enum:yytokentype	file:
K_MINIMUMDENSITY	lef/lef/lef.tab.h	/^    K_MINIMUMDENSITY = 596,$/;"	e	enum:yytokentype
K_MINPINS	lef/lef/lef.tab.cpp	/^    K_MINPINS = 458,$/;"	e	enum:yytokentype	file:
K_MINPINS	lef/lef/lef.tab.h	/^    K_MINPINS = 458,$/;"	e	enum:yytokentype
K_MINSIZE	lef/lef/lef.tab.cpp	/^    K_MINSIZE = 647,$/;"	e	enum:yytokentype	file:
K_MINSIZE	lef/lef/lef.tab.h	/^    K_MINSIZE = 647,$/;"	e	enum:yytokentype
K_MINSTEP	lef/lef/lef.tab.cpp	/^    K_MINSTEP = 615,$/;"	e	enum:yytokentype	file:
K_MINSTEP	lef/lef/lef.tab.h	/^    K_MINSTEP = 615,$/;"	e	enum:yytokentype
K_MINWIDTH	lef/lef/lef.tab.cpp	/^    K_MINWIDTH = 622,$/;"	e	enum:yytokentype	file:
K_MINWIDTH	lef/lef/lef.tab.h	/^    K_MINWIDTH = 622,$/;"	e	enum:yytokentype
K_MPWH	lef/lef/lef.tab.cpp	/^    K_MPWH = 542,$/;"	e	enum:yytokentype	file:
K_MPWH	lef/lef/lef.tab.h	/^    K_MPWH = 542,$/;"	e	enum:yytokentype
K_MPWL	lef/lef/lef.tab.cpp	/^    K_MPWL = 543,$/;"	e	enum:yytokentype	file:
K_MPWL	lef/lef/lef.tab.h	/^    K_MPWL = 543,$/;"	e	enum:yytokentype
K_MUSTJOIN	lef/lef/lef.tab.cpp	/^    K_MUSTJOIN = 331,$/;"	e	enum:yytokentype	file:
K_MUSTJOIN	lef/lef/lef.tab.h	/^    K_MUSTJOIN = 331,$/;"	e	enum:yytokentype
K_MX	lef/lef/lef.tab.cpp	/^    K_MX = 440,$/;"	e	enum:yytokentype	file:
K_MX	lef/lef/lef.tab.h	/^    K_MX = 440,$/;"	e	enum:yytokentype
K_MXR90	lef/lef/lef.tab.cpp	/^    K_MXR90 = 442,$/;"	e	enum:yytokentype	file:
K_MXR90	lef/lef/lef.tab.h	/^    K_MXR90 = 442,$/;"	e	enum:yytokentype
K_MY	lef/lef/lef.tab.cpp	/^    K_MY = 441,$/;"	e	enum:yytokentype	file:
K_MY	lef/lef/lef.tab.h	/^    K_MY = 441,$/;"	e	enum:yytokentype
K_MYR90	lef/lef/lef.tab.cpp	/^    K_MYR90 = 443,$/;"	e	enum:yytokentype	file:
K_MYR90	lef/lef/lef.tab.h	/^    K_MYR90 = 443,$/;"	e	enum:yytokentype
K_N	lef/lef/lef.tab.cpp	/^    K_N = 428,$/;"	e	enum:yytokentype	file:
K_N	lef/lef/lef.tab.h	/^    K_N = 428,$/;"	e	enum:yytokentype
K_NAMEMAPSTRING	lef/lef/lef.tab.cpp	/^    K_NAMEMAPSTRING = 524,$/;"	e	enum:yytokentype	file:
K_NAMEMAPSTRING	lef/lef/lef.tab.h	/^    K_NAMEMAPSTRING = 524,$/;"	e	enum:yytokentype
K_NAMESCASESENSITIVE	lef/lef/lef.tab.cpp	/^    K_NAMESCASESENSITIVE = 332,$/;"	e	enum:yytokentype	file:
K_NAMESCASESENSITIVE	lef/lef/lef.tab.h	/^    K_NAMESCASESENSITIVE = 332,$/;"	e	enum:yytokentype
K_NANOSECONDS	lef/lef/lef.tab.cpp	/^    K_NANOSECONDS = 333,$/;"	e	enum:yytokentype	file:
K_NANOSECONDS	lef/lef/lef.tab.h	/^    K_NANOSECONDS = 333,$/;"	e	enum:yytokentype
K_NE	lef/lef/lef.tab.cpp	/^    K_NE = 472,$/;"	e	enum:yytokentype	file:
K_NE	lef/lef/lef.tab.h	/^    K_NE = 472,$/;"	e	enum:yytokentype
K_NEGEDGE	lef/lef/lef.tab.cpp	/^    K_NEGEDGE = 538,$/;"	e	enum:yytokentype	file:
K_NEGEDGE	lef/lef/lef.tab.h	/^    K_NEGEDGE = 538,$/;"	e	enum:yytokentype
K_NETEXPR	lef/lef/lef.tab.cpp	/^    K_NETEXPR = 648,$/;"	e	enum:yytokentype	file:
K_NETEXPR	lef/lef/lef.tab.h	/^    K_NETEXPR = 648,$/;"	e	enum:yytokentype
K_NETS	lef/lef/lef.tab.cpp	/^    K_NETS = 334,$/;"	e	enum:yytokentype	file:
K_NETS	lef/lef/lef.tab.h	/^    K_NETS = 334,$/;"	e	enum:yytokentype
K_NEW	lef/lef/lef.tab.cpp	/^    K_NEW = 335,$/;"	e	enum:yytokentype	file:
K_NEW	lef/lef/lef.tab.h	/^    K_NEW = 335,$/;"	e	enum:yytokentype
K_NOISETABLE	lef/lef/lef.tab.cpp	/^    K_NOISETABLE = 503,$/;"	e	enum:yytokentype	file:
K_NOISETABLE	lef/lef/lef.tab.h	/^    K_NOISETABLE = 503,$/;"	e	enum:yytokentype
K_NONDEFAULTRULE	lef/lef/lef.tab.cpp	/^    K_NONDEFAULTRULE = 336,$/;"	e	enum:yytokentype	file:
K_NONDEFAULTRULE	lef/lef/lef.tab.h	/^    K_NONDEFAULTRULE = 336,$/;"	e	enum:yytokentype
K_NONE	lef/lef/lef.tab.cpp	/^    K_NONE = 579,$/;"	e	enum:yytokentype	file:
K_NONE	lef/lef/lef.tab.h	/^    K_NONE = 579,$/;"	e	enum:yytokentype
K_NONINVERT	lef/lef/lef.tab.cpp	/^    K_NONINVERT = 337,$/;"	e	enum:yytokentype	file:
K_NONINVERT	lef/lef/lef.tab.h	/^    K_NONINVERT = 337,$/;"	e	enum:yytokentype
K_NONUNATE	lef/lef/lef.tab.cpp	/^    K_NONUNATE = 338,$/;"	e	enum:yytokentype	file:
K_NONUNATE	lef/lef/lef.tab.h	/^    K_NONUNATE = 338,$/;"	e	enum:yytokentype
K_NOT	lef/lef/lef.tab.cpp	/^    K_NOT = 479,$/;"	e	enum:yytokentype	file:
K_NOT	lef/lef/lef.tab.h	/^    K_NOT = 479,$/;"	e	enum:yytokentype
K_NOTCHLENGTH	lef/lef/lef.tab.cpp	/^    K_NOTCHLENGTH = 671,$/;"	e	enum:yytokentype	file:
K_NOTCHLENGTH	lef/lef/lef.tab.h	/^    K_NOTCHLENGTH = 671,$/;"	e	enum:yytokentype
K_NOTCHSPACING	lef/lef/lef.tab.cpp	/^    K_NOTCHSPACING = 672,$/;"	e	enum:yytokentype	file:
K_NOTCHSPACING	lef/lef/lef.tab.h	/^    K_NOTCHSPACING = 672,$/;"	e	enum:yytokentype
K_NOWIREEXTENSIONATPIN	lef/lef/lef.tab.cpp	/^    K_NOWIREEXTENSIONATPIN = 525,$/;"	e	enum:yytokentype	file:
K_NOWIREEXTENSIONATPIN	lef/lef/lef.tab.h	/^    K_NOWIREEXTENSIONATPIN = 525,$/;"	e	enum:yytokentype
K_OBS	lef/lef/lef.tab.cpp	/^    K_OBS = 339,$/;"	e	enum:yytokentype	file:
K_OBS	lef/lef/lef.tab.h	/^    K_OBS = 339,$/;"	e	enum:yytokentype
K_OFF	lef/lef/lef.tab.cpp	/^    K_OFF = 348,$/;"	e	enum:yytokentype	file:
K_OFF	lef/lef/lef.tab.h	/^    K_OFF = 348,$/;"	e	enum:yytokentype
K_OFFSET	lef/lef/lef.tab.cpp	/^    K_OFFSET = 341,$/;"	e	enum:yytokentype	file:
K_OFFSET	lef/lef/lef.tab.h	/^    K_OFFSET = 341,$/;"	e	enum:yytokentype
K_OHMS	lef/lef/lef.tab.cpp	/^    K_OHMS = 340,$/;"	e	enum:yytokentype	file:
K_OHMS	lef/lef/lef.tab.h	/^    K_OHMS = 340,$/;"	e	enum:yytokentype
K_ON	lef/lef/lef.tab.cpp	/^    K_ON = 349,$/;"	e	enum:yytokentype	file:
K_ON	lef/lef/lef.tab.h	/^    K_ON = 349,$/;"	e	enum:yytokentype
K_OPENFILE	lef/lef/lef.tab.cpp	/^    K_OPENFILE = 529,$/;"	e	enum:yytokentype	file:
K_OPENFILE	lef/lef/lef.tab.h	/^    K_OPENFILE = 529,$/;"	e	enum:yytokentype
K_OR	lef/lef/lef.tab.cpp	/^    K_OR = 477,$/;"	e	enum:yytokentype	file:
K_OR	lef/lef/lef.tab.h	/^    K_OR = 477,$/;"	e	enum:yytokentype
K_ORIENT	lef/lef/lef.tab.cpp	/^    K_ORIENT = 616,$/;"	e	enum:yytokentype	file:
K_ORIENT	lef/lef/lef.tab.h	/^    K_ORIENT = 616,$/;"	e	enum:yytokentype
K_ORIENTATION	lef/lef/lef.tab.cpp	/^    K_ORIENTATION = 342,$/;"	e	enum:yytokentype	file:
K_ORIENTATION	lef/lef/lef.tab.h	/^    K_ORIENTATION = 342,$/;"	e	enum:yytokentype
K_ORIGIN	lef/lef/lef.tab.cpp	/^    K_ORIGIN = 343,$/;"	e	enum:yytokentype	file:
K_ORIGIN	lef/lef/lef.tab.h	/^    K_ORIGIN = 343,$/;"	e	enum:yytokentype
K_ORTHOGONAL	lef/lef/lef.tab.cpp	/^    K_ORTHOGONAL = 673,$/;"	e	enum:yytokentype	file:
K_ORTHOGONAL	lef/lef/lef.tab.h	/^    K_ORTHOGONAL = 673,$/;"	e	enum:yytokentype
K_OUTPUT	lef/lef/lef.tab.cpp	/^    K_OUTPUT = 344,$/;"	e	enum:yytokentype	file:
K_OUTPUT	lef/lef/lef.tab.h	/^    K_OUTPUT = 344,$/;"	e	enum:yytokentype
K_OUTPUTNOISEMARGIN	lef/lef/lef.tab.cpp	/^    K_OUTPUTNOISEMARGIN = 345,$/;"	e	enum:yytokentype	file:
K_OUTPUTNOISEMARGIN	lef/lef/lef.tab.h	/^    K_OUTPUTNOISEMARGIN = 345,$/;"	e	enum:yytokentype
K_OUTPUTPINANTENNASIZE	lef/lef/lef.tab.cpp	/^    K_OUTPUTPINANTENNASIZE = 508,$/;"	e	enum:yytokentype	file:
K_OUTPUTPINANTENNASIZE	lef/lef/lef.tab.h	/^    K_OUTPUTPINANTENNASIZE = 508,$/;"	e	enum:yytokentype
K_OUTPUTRESISTANCE	lef/lef/lef.tab.cpp	/^    K_OUTPUTRESISTANCE = 505,$/;"	e	enum:yytokentype	file:
K_OUTPUTRESISTANCE	lef/lef/lef.tab.h	/^    K_OUTPUTRESISTANCE = 505,$/;"	e	enum:yytokentype
K_OUTSIDECORNER	lef/lef/lef.tab.cpp	/^    K_OUTSIDECORNER = 649,$/;"	e	enum:yytokentype	file:
K_OUTSIDECORNER	lef/lef/lef.tab.h	/^    K_OUTSIDECORNER = 649,$/;"	e	enum:yytokentype
K_OVERHANG	lef/lef/lef.tab.cpp	/^    K_OVERHANG = 346,$/;"	e	enum:yytokentype	file:
K_OVERHANG	lef/lef/lef.tab.h	/^    K_OVERHANG = 346,$/;"	e	enum:yytokentype
K_OVERLAP	lef/lef/lef.tab.cpp	/^    K_OVERLAP = 347,$/;"	e	enum:yytokentype	file:
K_OVERLAP	lef/lef/lef.tab.h	/^    K_OVERLAP = 347,$/;"	e	enum:yytokentype
K_OVERLAPS	lef/lef/lef.tab.cpp	/^    K_OVERLAPS = 350,$/;"	e	enum:yytokentype	file:
K_OVERLAPS	lef/lef/lef.tab.h	/^    K_OVERLAPS = 350,$/;"	e	enum:yytokentype
K_OXIDE1	lef/lef/lef.tab.cpp	/^    K_OXIDE1 = 617,$/;"	e	enum:yytokentype	file:
K_OXIDE1	lef/lef/lef.tab.h	/^    K_OXIDE1 = 617,$/;"	e	enum:yytokentype
K_OXIDE2	lef/lef/lef.tab.cpp	/^    K_OXIDE2 = 618,$/;"	e	enum:yytokentype	file:
K_OXIDE2	lef/lef/lef.tab.h	/^    K_OXIDE2 = 618,$/;"	e	enum:yytokentype
K_OXIDE3	lef/lef/lef.tab.cpp	/^    K_OXIDE3 = 619,$/;"	e	enum:yytokentype	file:
K_OXIDE3	lef/lef/lef.tab.h	/^    K_OXIDE3 = 619,$/;"	e	enum:yytokentype
K_OXIDE4	lef/lef/lef.tab.cpp	/^    K_OXIDE4 = 620,$/;"	e	enum:yytokentype	file:
K_OXIDE4	lef/lef/lef.tab.h	/^    K_OXIDE4 = 620,$/;"	e	enum:yytokentype
K_PAD	lef/lef/lef.tab.cpp	/^    K_PAD = 351,$/;"	e	enum:yytokentype	file:
K_PAD	lef/lef/lef.tab.h	/^    K_PAD = 351,$/;"	e	enum:yytokentype
K_PARALLELEDGE	lef/lef/lef.tab.cpp	/^    K_PARALLELEDGE = 674,$/;"	e	enum:yytokentype	file:
K_PARALLELEDGE	lef/lef/lef.tab.h	/^    K_PARALLELEDGE = 674,$/;"	e	enum:yytokentype
K_PARALLELOVERLAP	lef/lef/lef.tab.cpp	/^    K_PARALLELOVERLAP = 675,$/;"	e	enum:yytokentype	file:
K_PARALLELOVERLAP	lef/lef/lef.tab.h	/^    K_PARALLELOVERLAP = 675,$/;"	e	enum:yytokentype
K_PARALLELRUNLENGTH	lef/lef/lef.tab.cpp	/^    K_PARALLELRUNLENGTH = 621,$/;"	e	enum:yytokentype	file:
K_PARALLELRUNLENGTH	lef/lef/lef.tab.h	/^    K_PARALLELRUNLENGTH = 621,$/;"	e	enum:yytokentype
K_PATH	lef/lef/lef.tab.cpp	/^    K_PATH = 352,$/;"	e	enum:yytokentype	file:
K_PATH	lef/lef/lef.tab.h	/^    K_PATH = 352,$/;"	e	enum:yytokentype
K_PATTERN	lef/lef/lef.tab.cpp	/^    K_PATTERN = 353,$/;"	e	enum:yytokentype	file:
K_PATTERN	lef/lef/lef.tab.h	/^    K_PATTERN = 353,$/;"	e	enum:yytokentype
K_PEAK	lef/lef/lef.tab.cpp	/^    K_PEAK = 548,$/;"	e	enum:yytokentype	file:
K_PEAK	lef/lef/lef.tab.h	/^    K_PEAK = 548,$/;"	e	enum:yytokentype
K_PERIOD	lef/lef/lef.tab.cpp	/^    K_PERIOD = 544,$/;"	e	enum:yytokentype	file:
K_PERIOD	lef/lef/lef.tab.h	/^    K_PERIOD = 544,$/;"	e	enum:yytokentype
K_PGONLY	lef/lef/lef.tab.cpp	/^    K_PGONLY = 676,$/;"	e	enum:yytokentype	file:
K_PGONLY	lef/lef/lef.tab.h	/^    K_PGONLY = 676,$/;"	e	enum:yytokentype
K_PICOFARADS	lef/lef/lef.tab.cpp	/^    K_PICOFARADS = 354,$/;"	e	enum:yytokentype	file:
K_PICOFARADS	lef/lef/lef.tab.h	/^    K_PICOFARADS = 354,$/;"	e	enum:yytokentype
K_PIN	lef/lef/lef.tab.cpp	/^    K_PIN = 355,$/;"	e	enum:yytokentype	file:
K_PIN	lef/lef/lef.tab.h	/^    K_PIN = 355,$/;"	e	enum:yytokentype
K_PITCH	lef/lef/lef.tab.cpp	/^    K_PITCH = 356,$/;"	e	enum:yytokentype	file:
K_PITCH	lef/lef/lef.tab.h	/^    K_PITCH = 356,$/;"	e	enum:yytokentype
K_PLACED	lef/lef/lef.tab.cpp	/^    K_PLACED = 357,$/;"	e	enum:yytokentype	file:
K_PLACED	lef/lef/lef.tab.h	/^    K_PLACED = 357,$/;"	e	enum:yytokentype
K_POLYGON	lef/lef/lef.tab.cpp	/^    K_POLYGON = 358,$/;"	e	enum:yytokentype	file:
K_POLYGON	lef/lef/lef.tab.h	/^    K_POLYGON = 358,$/;"	e	enum:yytokentype
K_PORT	lef/lef/lef.tab.cpp	/^    K_PORT = 359,$/;"	e	enum:yytokentype	file:
K_PORT	lef/lef/lef.tab.h	/^    K_PORT = 359,$/;"	e	enum:yytokentype
K_POSEDGE	lef/lef/lef.tab.cpp	/^    K_POSEDGE = 537,$/;"	e	enum:yytokentype	file:
K_POSEDGE	lef/lef/lef.tab.h	/^    K_POSEDGE = 537,$/;"	e	enum:yytokentype
K_POST	lef/lef/lef.tab.cpp	/^    K_POST = 360,$/;"	e	enum:yytokentype	file:
K_POST	lef/lef/lef.tab.h	/^    K_POST = 360,$/;"	e	enum:yytokentype
K_POWER	lef/lef/lef.tab.cpp	/^    K_POWER = 361,$/;"	e	enum:yytokentype	file:
K_POWER	lef/lef/lef.tab.h	/^    K_POWER = 361,$/;"	e	enum:yytokentype
K_PRE	lef/lef/lef.tab.cpp	/^    K_PRE = 362,$/;"	e	enum:yytokentype	file:
K_PRE	lef/lef/lef.tab.h	/^    K_PRE = 362,$/;"	e	enum:yytokentype
K_PREFERENCLOSURE	lef/lef/lef.tab.cpp	/^    K_PREFERENCLOSURE = 650,$/;"	e	enum:yytokentype	file:
K_PREFERENCLOSURE	lef/lef/lef.tab.h	/^    K_PREFERENCLOSURE = 650,$/;"	e	enum:yytokentype
K_PRL	lef/lef/lef.tab.cpp	/^    K_PRL = 677,$/;"	e	enum:yytokentype	file:
K_PRL	lef/lef/lef.tab.h	/^    K_PRL = 677,$/;"	e	enum:yytokentype
K_PROPDEF	lef/lef/lef.tab.cpp	/^    K_PROPDEF = 486,$/;"	e	enum:yytokentype	file:
K_PROPDEF	lef/lef/lef.tab.h	/^    K_PROPDEF = 486,$/;"	e	enum:yytokentype
K_PROPERTY	lef/lef/lef.tab.cpp	/^    K_PROPERTY = 491,$/;"	e	enum:yytokentype	file:
K_PROPERTY	lef/lef/lef.tab.h	/^    K_PROPERTY = 491,$/;"	e	enum:yytokentype
K_PROTRUSIONWIDTH	lef/lef/lef.tab.cpp	/^    K_PROTRUSIONWIDTH = 623,$/;"	e	enum:yytokentype	file:
K_PROTRUSIONWIDTH	lef/lef/lef.tab.h	/^    K_PROTRUSIONWIDTH = 623,$/;"	e	enum:yytokentype
K_PULLDOWNRES	lef/lef/lef.tab.cpp	/^    K_PULLDOWNRES = 363,$/;"	e	enum:yytokentype	file:
K_PULLDOWNRES	lef/lef/lef.tab.h	/^    K_PULLDOWNRES = 363,$/;"	e	enum:yytokentype
K_PWL	lef/lef/lef.tab.cpp	/^    K_PWL = 512,$/;"	e	enum:yytokentype	file:
K_PWL	lef/lef/lef.tab.h	/^    K_PWL = 512,$/;"	e	enum:yytokentype
K_R0	lef/lef/lef.tab.cpp	/^    K_R0 = 436,$/;"	e	enum:yytokentype	file:
K_R0	lef/lef/lef.tab.h	/^    K_R0 = 436,$/;"	e	enum:yytokentype
K_R180	lef/lef/lef.tab.cpp	/^    K_R180 = 438,$/;"	e	enum:yytokentype	file:
K_R180	lef/lef/lef.tab.h	/^    K_R180 = 438,$/;"	e	enum:yytokentype
K_R270	lef/lef/lef.tab.cpp	/^    K_R270 = 439,$/;"	e	enum:yytokentype	file:
K_R270	lef/lef/lef.tab.h	/^    K_R270 = 439,$/;"	e	enum:yytokentype
K_R90	lef/lef/lef.tab.cpp	/^    K_R90 = 437,$/;"	e	enum:yytokentype	file:
K_R90	lef/lef/lef.tab.h	/^    K_R90 = 437,$/;"	e	enum:yytokentype
K_RANGE	lef/lef/lef.tab.cpp	/^    K_RANGE = 490,$/;"	e	enum:yytokentype	file:
K_RANGE	lef/lef/lef.tab.h	/^    K_RANGE = 490,$/;"	e	enum:yytokentype
K_REAL	lef/lef/lef.tab.cpp	/^    K_REAL = 489,$/;"	e	enum:yytokentype	file:
K_REAL	lef/lef/lef.tab.h	/^    K_REAL = 489,$/;"	e	enum:yytokentype
K_RECOVERY	lef/lef/lef.tab.cpp	/^    K_RECOVERY = 534,$/;"	e	enum:yytokentype	file:
K_RECOVERY	lef/lef/lef.tab.h	/^    K_RECOVERY = 534,$/;"	e	enum:yytokentype
K_RECT	lef/lef/lef.tab.cpp	/^    K_RECT = 364,$/;"	e	enum:yytokentype	file:
K_RECT	lef/lef/lef.tab.h	/^    K_RECT = 364,$/;"	e	enum:yytokentype
K_RESISTANCE	lef/lef/lef.tab.cpp	/^    K_RESISTANCE = 365,$/;"	e	enum:yytokentype	file:
K_RESISTANCE	lef/lef/lef.tab.h	/^    K_RESISTANCE = 365,$/;"	e	enum:yytokentype
K_RESISTIVE	lef/lef/lef.tab.cpp	/^    K_RESISTIVE = 366,$/;"	e	enum:yytokentype	file:
K_RESISTIVE	lef/lef/lef.tab.h	/^    K_RESISTIVE = 366,$/;"	e	enum:yytokentype
K_RING	lef/lef/lef.tab.cpp	/^    K_RING = 367,$/;"	e	enum:yytokentype	file:
K_RING	lef/lef/lef.tab.h	/^    K_RING = 367,$/;"	e	enum:yytokentype
K_RISE	lef/lef/lef.tab.cpp	/^    K_RISE = 368,$/;"	e	enum:yytokentype	file:
K_RISE	lef/lef/lef.tab.h	/^    K_RISE = 368,$/;"	e	enum:yytokentype
K_RISECS	lef/lef/lef.tab.cpp	/^    K_RISECS = 369,$/;"	e	enum:yytokentype	file:
K_RISECS	lef/lef/lef.tab.h	/^    K_RISECS = 369,$/;"	e	enum:yytokentype
K_RISERS	lef/lef/lef.tab.cpp	/^    K_RISERS = 370,$/;"	e	enum:yytokentype	file:
K_RISERS	lef/lef/lef.tab.h	/^    K_RISERS = 370,$/;"	e	enum:yytokentype
K_RISESATCUR	lef/lef/lef.tab.cpp	/^    K_RISESATCUR = 371,$/;"	e	enum:yytokentype	file:
K_RISESATCUR	lef/lef/lef.tab.h	/^    K_RISESATCUR = 371,$/;"	e	enum:yytokentype
K_RISESATT1	lef/lef/lef.tab.cpp	/^    K_RISESATT1 = 373,$/;"	e	enum:yytokentype	file:
K_RISESATT1	lef/lef/lef.tab.h	/^    K_RISESATT1 = 373,$/;"	e	enum:yytokentype
K_RISESLEWLIMIT	lef/lef/lef.tab.cpp	/^    K_RISESLEWLIMIT = 519,$/;"	e	enum:yytokentype	file:
K_RISESLEWLIMIT	lef/lef/lef.tab.h	/^    K_RISESLEWLIMIT = 519,$/;"	e	enum:yytokentype
K_RISET0	lef/lef/lef.tab.cpp	/^    K_RISET0 = 374,$/;"	e	enum:yytokentype	file:
K_RISET0	lef/lef/lef.tab.h	/^    K_RISET0 = 374,$/;"	e	enum:yytokentype
K_RISETHRESH	lef/lef/lef.tab.cpp	/^    K_RISETHRESH = 372,$/;"	e	enum:yytokentype	file:
K_RISETHRESH	lef/lef/lef.tab.h	/^    K_RISETHRESH = 372,$/;"	e	enum:yytokentype
K_RISEVOLTAGETHRESHOLD	lef/lef/lef.tab.cpp	/^    K_RISEVOLTAGETHRESHOLD = 375,$/;"	e	enum:yytokentype	file:
K_RISEVOLTAGETHRESHOLD	lef/lef/lef.tab.h	/^    K_RISEVOLTAGETHRESHOLD = 375,$/;"	e	enum:yytokentype
K_RMS	lef/lef/lef.tab.cpp	/^    K_RMS = 549,$/;"	e	enum:yytokentype	file:
K_RMS	lef/lef/lef.tab.h	/^    K_RMS = 549,$/;"	e	enum:yytokentype
K_ROUTING	lef/lef/lef.tab.cpp	/^    K_ROUTING = 377,$/;"	e	enum:yytokentype	file:
K_ROUTING	lef/lef/lef.tab.h	/^    K_ROUTING = 377,$/;"	e	enum:yytokentype
K_ROWABUTSPACING	lef/lef/lef.tab.cpp	/^    K_ROWABUTSPACING = 577,$/;"	e	enum:yytokentype	file:
K_ROWABUTSPACING	lef/lef/lef.tab.h	/^    K_ROWABUTSPACING = 577,$/;"	e	enum:yytokentype
K_ROWCOL	lef/lef/lef.tab.cpp	/^    K_ROWCOL = 651,$/;"	e	enum:yytokentype	file:
K_ROWCOL	lef/lef/lef.tab.h	/^    K_ROWCOL = 651,$/;"	e	enum:yytokentype
K_ROWMAJOR	lef/lef/lef.tab.cpp	/^    K_ROWMAJOR = 378,$/;"	e	enum:yytokentype	file:
K_ROWMAJOR	lef/lef/lef.tab.h	/^    K_ROWMAJOR = 378,$/;"	e	enum:yytokentype
K_ROWMINSPACING	lef/lef/lef.tab.cpp	/^    K_ROWMINSPACING = 576,$/;"	e	enum:yytokentype	file:
K_ROWMINSPACING	lef/lef/lef.tab.h	/^    K_ROWMINSPACING = 576,$/;"	e	enum:yytokentype
K_ROWPATTERN	lef/lef/lef.tab.cpp	/^    K_ROWPATTERN = 652,$/;"	e	enum:yytokentype	file:
K_ROWPATTERN	lef/lef/lef.tab.h	/^    K_ROWPATTERN = 652,$/;"	e	enum:yytokentype
K_RPERSQ	lef/lef/lef.tab.cpp	/^    K_RPERSQ = 379,$/;"	e	enum:yytokentype	file:
K_RPERSQ	lef/lef/lef.tab.h	/^    K_RPERSQ = 379,$/;"	e	enum:yytokentype
K_S	lef/lef/lef.tab.cpp	/^    K_S = 429,$/;"	e	enum:yytokentype	file:
K_S	lef/lef/lef.tab.h	/^    K_S = 429,$/;"	e	enum:yytokentype
K_SAMENET	lef/lef/lef.tab.cpp	/^    K_SAMENET = 380,$/;"	e	enum:yytokentype	file:
K_SAMENET	lef/lef/lef.tab.h	/^    K_SAMENET = 380,$/;"	e	enum:yytokentype
K_SCANUSE	lef/lef/lef.tab.cpp	/^    K_SCANUSE = 381,$/;"	e	enum:yytokentype	file:
K_SCANUSE	lef/lef/lef.tab.h	/^    K_SCANUSE = 381,$/;"	e	enum:yytokentype
K_SDFCOND	lef/lef/lef.tab.cpp	/^    K_SDFCOND = 541,$/;"	e	enum:yytokentype	file:
K_SDFCOND	lef/lef/lef.tab.h	/^    K_SDFCOND = 541,$/;"	e	enum:yytokentype
K_SDFCONDEND	lef/lef/lef.tab.cpp	/^    K_SDFCONDEND = 540,$/;"	e	enum:yytokentype	file:
K_SDFCONDEND	lef/lef/lef.tab.h	/^    K_SDFCONDEND = 540,$/;"	e	enum:yytokentype
K_SDFCONDSTART	lef/lef/lef.tab.cpp	/^    K_SDFCONDSTART = 539,$/;"	e	enum:yytokentype	file:
K_SDFCONDSTART	lef/lef/lef.tab.h	/^    K_SDFCONDSTART = 539,$/;"	e	enum:yytokentype
K_SETUP	lef/lef/lef.tab.cpp	/^    K_SETUP = 461,$/;"	e	enum:yytokentype	file:
K_SETUP	lef/lef/lef.tab.h	/^    K_SETUP = 461,$/;"	e	enum:yytokentype
K_SHAPE	lef/lef/lef.tab.cpp	/^    K_SHAPE = 382,$/;"	e	enum:yytokentype	file:
K_SHAPE	lef/lef/lef.tab.h	/^    K_SHAPE = 382,$/;"	e	enum:yytokentype
K_SHRINKAGE	lef/lef/lef.tab.cpp	/^    K_SHRINKAGE = 383,$/;"	e	enum:yytokentype	file:
K_SHRINKAGE	lef/lef/lef.tab.h	/^    K_SHRINKAGE = 383,$/;"	e	enum:yytokentype
K_SIGNAL	lef/lef/lef.tab.cpp	/^    K_SIGNAL = 384,$/;"	e	enum:yytokentype	file:
K_SIGNAL	lef/lef/lef.tab.h	/^    K_SIGNAL = 384,$/;"	e	enum:yytokentype
K_SITE	lef/lef/lef.tab.cpp	/^    K_SITE = 385,$/;"	e	enum:yytokentype	file:
K_SITE	lef/lef/lef.tab.h	/^    K_SITE = 385,$/;"	e	enum:yytokentype
K_SIZE	lef/lef/lef.tab.cpp	/^    K_SIZE = 386,$/;"	e	enum:yytokentype	file:
K_SIZE	lef/lef/lef.tab.h	/^    K_SIZE = 386,$/;"	e	enum:yytokentype
K_SKEW	lef/lef/lef.tab.cpp	/^    K_SKEW = 535,$/;"	e	enum:yytokentype	file:
K_SKEW	lef/lef/lef.tab.h	/^    K_SKEW = 535,$/;"	e	enum:yytokentype
K_SLOTLENGTH	lef/lef/lef.tab.cpp	/^    K_SLOTLENGTH = 591,$/;"	e	enum:yytokentype	file:
K_SLOTLENGTH	lef/lef/lef.tab.h	/^    K_SLOTLENGTH = 591,$/;"	e	enum:yytokentype
K_SLOTWIDTH	lef/lef/lef.tab.cpp	/^    K_SLOTWIDTH = 590,$/;"	e	enum:yytokentype	file:
K_SLOTWIDTH	lef/lef/lef.tab.h	/^    K_SLOTWIDTH = 590,$/;"	e	enum:yytokentype
K_SLOTWIRELENGTH	lef/lef/lef.tab.cpp	/^    K_SLOTWIRELENGTH = 589,$/;"	e	enum:yytokentype	file:
K_SLOTWIRELENGTH	lef/lef/lef.tab.h	/^    K_SLOTWIRELENGTH = 589,$/;"	e	enum:yytokentype
K_SLOTWIREWIDTH	lef/lef/lef.tab.cpp	/^    K_SLOTWIREWIDTH = 588,$/;"	e	enum:yytokentype	file:
K_SLOTWIREWIDTH	lef/lef/lef.tab.h	/^    K_SLOTWIREWIDTH = 588,$/;"	e	enum:yytokentype
K_SOFT	lef/lef/lef.tab.cpp	/^    K_SOFT = 653,$/;"	e	enum:yytokentype	file:
K_SOFT	lef/lef/lef.tab.h	/^    K_SOFT = 653,$/;"	e	enum:yytokentype
K_SOURCE	lef/lef/lef.tab.cpp	/^    K_SOURCE = 387,$/;"	e	enum:yytokentype	file:
K_SOURCE	lef/lef/lef.tab.h	/^    K_SOURCE = 387,$/;"	e	enum:yytokentype
K_SPACER	lef/lef/lef.tab.cpp	/^    K_SPACER = 388,$/;"	e	enum:yytokentype	file:
K_SPACER	lef/lef/lef.tab.h	/^    K_SPACER = 388,$/;"	e	enum:yytokentype
K_SPACING	lef/lef/lef.tab.cpp	/^    K_SPACING = 389,$/;"	e	enum:yytokentype	file:
K_SPACING	lef/lef/lef.tab.h	/^    K_SPACING = 389,$/;"	e	enum:yytokentype
K_SPACINGTABLE	lef/lef/lef.tab.cpp	/^    K_SPACINGTABLE = 624,$/;"	e	enum:yytokentype	file:
K_SPACINGTABLE	lef/lef/lef.tab.h	/^    K_SPACINGTABLE = 624,$/;"	e	enum:yytokentype
K_SPECIALNETS	lef/lef/lef.tab.cpp	/^    K_SPECIALNETS = 390,$/;"	e	enum:yytokentype	file:
K_SPECIALNETS	lef/lef/lef.tab.h	/^    K_SPECIALNETS = 390,$/;"	e	enum:yytokentype
K_SPLITWIREWIDTH	lef/lef/lef.tab.cpp	/^    K_SPLITWIREWIDTH = 595,$/;"	e	enum:yytokentype	file:
K_SPLITWIREWIDTH	lef/lef/lef.tab.h	/^    K_SPLITWIREWIDTH = 595,$/;"	e	enum:yytokentype
K_STABLE	lef/lef/lef.tab.cpp	/^    K_STABLE = 460,$/;"	e	enum:yytokentype	file:
K_STABLE	lef/lef/lef.tab.h	/^    K_STABLE = 460,$/;"	e	enum:yytokentype
K_STACK	lef/lef/lef.tab.cpp	/^    K_STACK = 391,$/;"	e	enum:yytokentype	file:
K_STACK	lef/lef/lef.tab.h	/^    K_STACK = 391,$/;"	e	enum:yytokentype
K_START	lef/lef/lef.tab.cpp	/^    K_START = 392,$/;"	e	enum:yytokentype	file:
K_START	lef/lef/lef.tab.h	/^    K_START = 392,$/;"	e	enum:yytokentype
K_STEP	lef/lef/lef.tab.cpp	/^    K_STEP = 393,$/;"	e	enum:yytokentype	file:
K_STEP	lef/lef/lef.tab.h	/^    K_STEP = 393,$/;"	e	enum:yytokentype
K_STOP	lef/lef/lef.tab.cpp	/^    K_STOP = 394,$/;"	e	enum:yytokentype	file:
K_STOP	lef/lef/lef.tab.h	/^    K_STOP = 394,$/;"	e	enum:yytokentype
K_STRING	lef/lef/lef.tab.cpp	/^    K_STRING = 487,$/;"	e	enum:yytokentype	file:
K_STRING	lef/lef/lef.tab.h	/^    K_STRING = 487,$/;"	e	enum:yytokentype
K_STRUCTURE	lef/lef/lef.tab.cpp	/^    K_STRUCTURE = 395,$/;"	e	enum:yytokentype	file:
K_STRUCTURE	lef/lef/lef.tab.h	/^    K_STRUCTURE = 395,$/;"	e	enum:yytokentype
K_SUPPLYSENSITIVITY	lef/lef/lef.tab.cpp	/^    K_SUPPLYSENSITIVITY = 654,$/;"	e	enum:yytokentype	file:
K_SUPPLYSENSITIVITY	lef/lef/lef.tab.h	/^    K_SUPPLYSENSITIVITY = 654,$/;"	e	enum:yytokentype
K_SYMMETRY	lef/lef/lef.tab.cpp	/^    K_SYMMETRY = 396,$/;"	e	enum:yytokentype	file:
K_SYMMETRY	lef/lef/lef.tab.h	/^    K_SYMMETRY = 396,$/;"	e	enum:yytokentype
K_TABLE	lef/lef/lef.tab.cpp	/^    K_TABLE = 397,$/;"	e	enum:yytokentype	file:
K_TABLE	lef/lef/lef.tab.h	/^    K_TABLE = 397,$/;"	e	enum:yytokentype
K_TABLEAXIS	lef/lef/lef.tab.cpp	/^    K_TABLEAXIS = 482,$/;"	e	enum:yytokentype	file:
K_TABLEAXIS	lef/lef/lef.tab.h	/^    K_TABLEAXIS = 482,$/;"	e	enum:yytokentype
K_TABLEDIMENSION	lef/lef/lef.tab.cpp	/^    K_TABLEDIMENSION = 481,$/;"	e	enum:yytokentype	file:
K_TABLEDIMENSION	lef/lef/lef.tab.h	/^    K_TABLEDIMENSION = 481,$/;"	e	enum:yytokentype
K_TABLEENTRIES	lef/lef/lef.tab.cpp	/^    K_TABLEENTRIES = 483,$/;"	e	enum:yytokentype	file:
K_TABLEENTRIES	lef/lef/lef.tab.h	/^    K_TABLEENTRIES = 483,$/;"	e	enum:yytokentype
K_TAPERRULE	lef/lef/lef.tab.cpp	/^    K_TAPERRULE = 514,$/;"	e	enum:yytokentype	file:
K_TAPERRULE	lef/lef/lef.tab.h	/^    K_TAPERRULE = 514,$/;"	e	enum:yytokentype
K_THEN	lef/lef/lef.tab.cpp	/^    K_THEN = 467,$/;"	e	enum:yytokentype	file:
K_THEN	lef/lef/lef.tab.h	/^    K_THEN = 467,$/;"	e	enum:yytokentype
K_THICKNESS	lef/lef/lef.tab.cpp	/^    K_THICKNESS = 398,$/;"	e	enum:yytokentype	file:
K_THICKNESS	lef/lef/lef.tab.h	/^    K_THICKNESS = 398,$/;"	e	enum:yytokentype
K_TIEHIGH	lef/lef/lef.tab.cpp	/^    K_TIEHIGH = 399,$/;"	e	enum:yytokentype	file:
K_TIEHIGH	lef/lef/lef.tab.h	/^    K_TIEHIGH = 399,$/;"	e	enum:yytokentype
K_TIELOW	lef/lef/lef.tab.cpp	/^    K_TIELOW = 400,$/;"	e	enum:yytokentype	file:
K_TIELOW	lef/lef/lef.tab.h	/^    K_TIELOW = 400,$/;"	e	enum:yytokentype
K_TIEOFFR	lef/lef/lef.tab.cpp	/^    K_TIEOFFR = 401,$/;"	e	enum:yytokentype	file:
K_TIEOFFR	lef/lef/lef.tab.h	/^    K_TIEOFFR = 401,$/;"	e	enum:yytokentype
K_TIME	lef/lef/lef.tab.cpp	/^    K_TIME = 402,$/;"	e	enum:yytokentype	file:
K_TIME	lef/lef/lef.tab.h	/^    K_TIME = 402,$/;"	e	enum:yytokentype
K_TIMING	lef/lef/lef.tab.cpp	/^    K_TIMING = 403,$/;"	e	enum:yytokentype	file:
K_TIMING	lef/lef/lef.tab.h	/^    K_TIMING = 403,$/;"	e	enum:yytokentype
K_TO	lef/lef/lef.tab.cpp	/^    K_TO = 404,$/;"	e	enum:yytokentype	file:
K_TO	lef/lef/lef.tab.h	/^    K_TO = 404,$/;"	e	enum:yytokentype
K_TOPIN	lef/lef/lef.tab.cpp	/^    K_TOPIN = 405,$/;"	e	enum:yytokentype	file:
K_TOPIN	lef/lef/lef.tab.h	/^    K_TOPIN = 405,$/;"	e	enum:yytokentype
K_TOPLEFT	lef/lef/lef.tab.cpp	/^    K_TOPLEFT = 406,$/;"	e	enum:yytokentype	file:
K_TOPLEFT	lef/lef/lef.tab.h	/^    K_TOPLEFT = 406,$/;"	e	enum:yytokentype
K_TOPOFSTACKONLY	lef/lef/lef.tab.cpp	/^    K_TOPOFSTACKONLY = 408,$/;"	e	enum:yytokentype	file:
K_TOPOFSTACKONLY	lef/lef/lef.tab.h	/^    K_TOPOFSTACKONLY = 408,$/;"	e	enum:yytokentype
K_TOPRIGHT	lef/lef/lef.tab.cpp	/^    K_TOPRIGHT = 407,$/;"	e	enum:yytokentype	file:
K_TOPRIGHT	lef/lef/lef.tab.h	/^    K_TOPRIGHT = 407,$/;"	e	enum:yytokentype
K_TRACKS	lef/lef/lef.tab.cpp	/^    K_TRACKS = 454,$/;"	e	enum:yytokentype	file:
K_TRACKS	lef/lef/lef.tab.h	/^    K_TRACKS = 454,$/;"	e	enum:yytokentype
K_TRANSITIONTIME	lef/lef/lef.tab.cpp	/^    K_TRANSITIONTIME = 484,$/;"	e	enum:yytokentype	file:
K_TRANSITIONTIME	lef/lef/lef.tab.h	/^    K_TRANSITIONTIME = 484,$/;"	e	enum:yytokentype
K_TRISTATE	lef/lef/lef.tab.cpp	/^    K_TRISTATE = 409,$/;"	e	enum:yytokentype	file:
K_TRISTATE	lef/lef/lef.tab.h	/^    K_TRISTATE = 409,$/;"	e	enum:yytokentype
K_TRUE	lef/lef/lef.tab.cpp	/^    K_TRUE = 470,$/;"	e	enum:yytokentype	file:
K_TRUE	lef/lef/lef.tab.h	/^    K_TRUE = 470,$/;"	e	enum:yytokentype
K_TWOEDGES	lef/lef/lef.tab.cpp	/^    K_TWOEDGES = 678,$/;"	e	enum:yytokentype	file:
K_TWOEDGES	lef/lef/lef.tab.h	/^    K_TWOEDGES = 678,$/;"	e	enum:yytokentype
K_TWOWIDTHS	lef/lef/lef.tab.cpp	/^    K_TWOWIDTHS = 679,$/;"	e	enum:yytokentype	file:
K_TWOWIDTHS	lef/lef/lef.tab.h	/^    K_TWOWIDTHS = 679,$/;"	e	enum:yytokentype
K_TYPE	lef/lef/lef.tab.cpp	/^    K_TYPE = 410,$/;"	e	enum:yytokentype	file:
K_TYPE	lef/lef/lef.tab.h	/^    K_TYPE = 410,$/;"	e	enum:yytokentype
K_UNATENESS	lef/lef/lef.tab.cpp	/^    K_UNATENESS = 411,$/;"	e	enum:yytokentype	file:
K_UNATENESS	lef/lef/lef.tab.h	/^    K_UNATENESS = 411,$/;"	e	enum:yytokentype
K_UNITS	lef/lef/lef.tab.cpp	/^    K_UNITS = 412,$/;"	e	enum:yytokentype	file:
K_UNITS	lef/lef/lef.tab.h	/^    K_UNITS = 412,$/;"	e	enum:yytokentype
K_UNIVERSALNOISEMARGIN	lef/lef/lef.tab.cpp	/^    K_UNIVERSALNOISEMARGIN = 497,$/;"	e	enum:yytokentype	file:
K_UNIVERSALNOISEMARGIN	lef/lef/lef.tab.h	/^    K_UNIVERSALNOISEMARGIN = 497,$/;"	e	enum:yytokentype
K_USE	lef/lef/lef.tab.cpp	/^    K_USE = 413,$/;"	e	enum:yytokentype	file:
K_USE	lef/lef/lef.tab.h	/^    K_USE = 413,$/;"	e	enum:yytokentype
K_USELENGTHTHRESHOLD	lef/lef/lef.tab.cpp	/^    K_USELENGTHTHRESHOLD = 553,$/;"	e	enum:yytokentype	file:
K_USELENGTHTHRESHOLD	lef/lef/lef.tab.h	/^    K_USELENGTHTHRESHOLD = 553,$/;"	e	enum:yytokentype
K_USEMINSPACING	lef/lef/lef.tab.cpp	/^    K_USEMINSPACING = 575,$/;"	e	enum:yytokentype	file:
K_USEMINSPACING	lef/lef/lef.tab.h	/^    K_USEMINSPACING = 575,$/;"	e	enum:yytokentype
K_USER	lef/lef/lef.tab.cpp	/^    K_USER = 444,$/;"	e	enum:yytokentype	file:
K_USER	lef/lef/lef.tab.h	/^    K_USER = 444,$/;"	e	enum:yytokentype
K_USEVIA	lef/lef/lef.tab.cpp	/^    K_USEVIA = 655,$/;"	e	enum:yytokentype	file:
K_USEVIA	lef/lef/lef.tab.h	/^    K_USEVIA = 655,$/;"	e	enum:yytokentype
K_USEVIARULE	lef/lef/lef.tab.cpp	/^    K_USEVIARULE = 656,$/;"	e	enum:yytokentype	file:
K_USEVIARULE	lef/lef/lef.tab.h	/^    K_USEVIARULE = 656,$/;"	e	enum:yytokentype
K_VARIABLE	lef/lef/lef.tab.cpp	/^    K_VARIABLE = 414,$/;"	e	enum:yytokentype	file:
K_VARIABLE	lef/lef/lef.tab.h	/^    K_VARIABLE = 414,$/;"	e	enum:yytokentype
K_VERSION	lef/lef/lef.tab.cpp	/^    K_VERSION = 494,$/;"	e	enum:yytokentype	file:
K_VERSION	lef/lef/lef.tab.h	/^    K_VERSION = 494,$/;"	e	enum:yytokentype
K_VERTICAL	lef/lef/lef.tab.cpp	/^    K_VERTICAL = 415,$/;"	e	enum:yytokentype	file:
K_VERTICAL	lef/lef/lef.tab.h	/^    K_VERTICAL = 415,$/;"	e	enum:yytokentype
K_VHI	lef/lef/lef.tab.cpp	/^    K_VHI = 416,$/;"	e	enum:yytokentype	file:
K_VHI	lef/lef/lef.tab.h	/^    K_VHI = 416,$/;"	e	enum:yytokentype
K_VIA	lef/lef/lef.tab.cpp	/^    K_VIA = 417,$/;"	e	enum:yytokentype	file:
K_VIA	lef/lef/lef.tab.h	/^    K_VIA = 417,$/;"	e	enum:yytokentype
K_VIARULE	lef/lef/lef.tab.cpp	/^    K_VIARULE = 418,$/;"	e	enum:yytokentype	file:
K_VIARULE	lef/lef/lef.tab.h	/^    K_VIARULE = 418,$/;"	e	enum:yytokentype
K_VICTIMLENGTH	lef/lef/lef.tab.cpp	/^    K_VICTIMLENGTH = 506,$/;"	e	enum:yytokentype	file:
K_VICTIMLENGTH	lef/lef/lef.tab.h	/^    K_VICTIMLENGTH = 506,$/;"	e	enum:yytokentype
K_VICTIMNOISE	lef/lef/lef.tab.cpp	/^    K_VICTIMNOISE = 502,$/;"	e	enum:yytokentype	file:
K_VICTIMNOISE	lef/lef/lef.tab.h	/^    K_VICTIMNOISE = 502,$/;"	e	enum:yytokentype
K_VIRTUAL	lef/lef/lef.tab.cpp	/^    K_VIRTUAL = 492,$/;"	e	enum:yytokentype	file:
K_VIRTUAL	lef/lef/lef.tab.h	/^    K_VIRTUAL = 492,$/;"	e	enum:yytokentype
K_VLO	lef/lef/lef.tab.cpp	/^    K_VLO = 419,$/;"	e	enum:yytokentype	file:
K_VLO	lef/lef/lef.tab.h	/^    K_VLO = 419,$/;"	e	enum:yytokentype
K_VOLTAGE	lef/lef/lef.tab.cpp	/^    K_VOLTAGE = 420,$/;"	e	enum:yytokentype	file:
K_VOLTAGE	lef/lef/lef.tab.h	/^    K_VOLTAGE = 420,$/;"	e	enum:yytokentype
K_VOLTS	lef/lef/lef.tab.cpp	/^    K_VOLTS = 421,$/;"	e	enum:yytokentype	file:
K_VOLTS	lef/lef/lef.tab.h	/^    K_VOLTS = 421,$/;"	e	enum:yytokentype
K_W	lef/lef/lef.tab.cpp	/^    K_W = 431,$/;"	e	enum:yytokentype	file:
K_W	lef/lef/lef.tab.h	/^    K_W = 431,$/;"	e	enum:yytokentype
K_WARNING	lef/lef/lef.tab.cpp	/^    K_WARNING = 531,$/;"	e	enum:yytokentype	file:
K_WARNING	lef/lef/lef.tab.h	/^    K_WARNING = 531,$/;"	e	enum:yytokentype
K_WELLTAP	lef/lef/lef.tab.cpp	/^    K_WELLTAP = 657,$/;"	e	enum:yytokentype	file:
K_WELLTAP	lef/lef/lef.tab.h	/^    K_WELLTAP = 657,$/;"	e	enum:yytokentype
K_WIDTH	lef/lef/lef.tab.cpp	/^    K_WIDTH = 422,$/;"	e	enum:yytokentype	file:
K_WIDTH	lef/lef/lef.tab.h	/^    K_WIDTH = 422,$/;"	e	enum:yytokentype
K_WIRECAP	lef/lef/lef.tab.cpp	/^    K_WIRECAP = 459,$/;"	e	enum:yytokentype	file:
K_WIRECAP	lef/lef/lef.tab.h	/^    K_WIRECAP = 459,$/;"	e	enum:yytokentype
K_WIREEXTENSION	lef/lef/lef.tab.cpp	/^    K_WIREEXTENSION = 526,$/;"	e	enum:yytokentype	file:
K_WIREEXTENSION	lef/lef/lef.tab.h	/^    K_WIREEXTENSION = 526,$/;"	e	enum:yytokentype
K_WITHIN	lef/lef/lef.tab.cpp	/^    K_WITHIN = 625,$/;"	e	enum:yytokentype	file:
K_WITHIN	lef/lef/lef.tab.h	/^    K_WITHIN = 625,$/;"	e	enum:yytokentype
K_X	lef/lef/lef.tab.cpp	/^    K_X = 423,$/;"	e	enum:yytokentype	file:
K_X	lef/lef/lef.tab.h	/^    K_X = 423,$/;"	e	enum:yytokentype
K_Y	lef/lef/lef.tab.cpp	/^    K_Y = 424,$/;"	e	enum:yytokentype	file:
K_Y	lef/lef/lef.tab.h	/^    K_Y = 424,$/;"	e	enum:yytokentype
Key	def/def/defiAlias.cpp	/^const char* defiAlias_itr::Key() {$/;"	f	class:defiAlias_itr
Keyword_set	def/def/defrSettings.hpp	/^    defKeywordMap Keyword_set; $/;"	m	class:defrSettings
Keyword_set	lef/include/lefrSettings.hpp	/^    lefKeywordMap       Keyword_set; $/;"	m	class:lefrSettings
Keyword_set	lef/lef/lefrSettings.hpp	/^    lefKeywordMap       Keyword_set; $/;"	m	class:lefrSettings
LAYER_SPEC	def/def/defiDefs.hpp	82;"	d
LAYER_SPEC	lef/include/lefiDefs.hpp	82;"	d
LAYER_SPEC	lef/lef/lefiDefs.hpp	82;"	d
LDLIBS	def/defdiff/Makefile	/^LDLIBS = ..\/lib\/libdef.a$/;"	m
LDLIBS	def/defrw/Makefile	/^LDLIBS = ..\/lib\/libdef.a$/;"	m
LDLIBS	def/defwrite/Makefile	/^LDLIBS = ..\/lib\/libdef.a$/;"	m
LDLIBS	lef/lefdiff/Makefile	/^LDLIBS = ..\/lib\/liblef.a$/;"	m
LDLIBS	lef/lefrw/Makefile	/^LDLIBS =	..\/lib\/liblef.a$/;"	m
LDLIBS	lef/lefwrite/Makefile	/^LDLIBS =	..\/lib\/liblef.a$/;"	m
LEFDEFZIP_H	def/defzlib/defzlib.hpp	31;"	d
LEFEmsMsgTable	lef/clef/lefMsgTable.h	/^emsError_t LEFEmsMsgTable[] =$/;"	v
LEFI_DEFS_H	lef/include/lefiDefs.hpp	33;"	d
LEFI_DEFS_H	lef/lef/lefiDefs.hpp	33;"	d
LEFI_FREE_FUNCTION	lef/clef/lefrReader.h	/^typedef void (*LEFI_FREE_FUNCTION) (void *);$/;"	t
LEFI_FREE_FUNCTION	lef/include/lefrReader.h	/^typedef void (*LEFI_FREE_FUNCTION) (void *);$/;"	t
LEFI_FREE_FUNCTION	lef/include/lefrReader.hpp	/^typedef void (*LEFI_FREE_FUNCTION) (void *);$/;"	t
LEFI_FREE_FUNCTION	lef/lef/lefrReader.hpp	/^typedef void (*LEFI_FREE_FUNCTION) (void *);$/;"	t
LEFI_LINE_NUMBER_FUNCTION	lef/clef/lefrReader.h	/^typedef void (*LEFI_LINE_NUMBER_FUNCTION) (int);$/;"	t
LEFI_LINE_NUMBER_FUNCTION	lef/include/lefrReader.h	/^typedef void (*LEFI_LINE_NUMBER_FUNCTION) (int);$/;"	t
LEFI_LINE_NUMBER_FUNCTION	lef/include/lefrReader.hpp	/^typedef void (*LEFI_LINE_NUMBER_FUNCTION) (int);$/;"	t
LEFI_LINE_NUMBER_FUNCTION	lef/lef/lefrReader.hpp	/^typedef void (*LEFI_LINE_NUMBER_FUNCTION) (int);$/;"	t
LEFI_LOG_FUNCTION	lef/clef/lefrReader.h	/^typedef void (*LEFI_LOG_FUNCTION) (const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/clef/lefwWriterCalls.h	/^typedef void (*LEFI_LOG_FUNCTION)(const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/include/lefrReader.h	/^typedef void (*LEFI_LOG_FUNCTION) (const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/include/lefrReader.hpp	/^typedef void (*LEFI_LOG_FUNCTION) (const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/include/lefwWriterCalls.h	/^typedef void (*LEFI_LOG_FUNCTION)(const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/include/lefwWriterCalls.hpp	/^typedef void (*LEFI_LOG_FUNCTION)(const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/lef/lefrReader.hpp	/^typedef void (*LEFI_LOG_FUNCTION) (const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/lef/lefwWriter.cpp	/^typedef void (*LEFI_LOG_FUNCTION)(const char*);$/;"	t	file:
LEFI_LOG_FUNCTION	lef/lef/lefwWriterCalls.hpp	/^typedef void (*LEFI_LOG_FUNCTION)(const char*);$/;"	t
LEFI_MALLOC_FUNCTION	lef/clef/lefrReader.h	/^typedef void* (*LEFI_MALLOC_FUNCTION) (int);$/;"	t
LEFI_MALLOC_FUNCTION	lef/include/lefrReader.h	/^typedef void* (*LEFI_MALLOC_FUNCTION) (int);$/;"	t
LEFI_MALLOC_FUNCTION	lef/include/lefrReader.hpp	/^typedef void* (*LEFI_MALLOC_FUNCTION) (int);$/;"	t
LEFI_MALLOC_FUNCTION	lef/lef/lefrReader.hpp	/^typedef void* (*LEFI_MALLOC_FUNCTION) (int);$/;"	t
LEFI_READ_FUNCTION	lef/clef/lefrReader.h	/^typedef size_t (*LEFI_READ_FUNCTION) (FILE*, char*, size_t);$/;"	t
LEFI_READ_FUNCTION	lef/include/lefrReader.h	/^typedef size_t (*LEFI_READ_FUNCTION) (FILE*, char*, size_t);$/;"	t
LEFI_READ_FUNCTION	lef/include/lefrReader.hpp	/^typedef size_t (*LEFI_READ_FUNCTION) (FILE*, char*, size_t);$/;"	t
LEFI_READ_FUNCTION	lef/lef/lefrReader.hpp	/^typedef size_t (*LEFI_READ_FUNCTION) (FILE*, char*, size_t);$/;"	t
LEFI_REALLOC_FUNCTION	lef/clef/lefrReader.h	/^typedef void* (*LEFI_REALLOC_FUNCTION) (void *, int);$/;"	t
LEFI_REALLOC_FUNCTION	lef/include/lefrReader.h	/^typedef void* (*LEFI_REALLOC_FUNCTION) (void *, int);$/;"	t
LEFI_REALLOC_FUNCTION	lef/include/lefrReader.hpp	/^typedef void* (*LEFI_REALLOC_FUNCTION) (void *, int);$/;"	t
LEFI_REALLOC_FUNCTION	lef/lef/lefrReader.hpp	/^typedef void* (*LEFI_REALLOC_FUNCTION) (void *, int);$/;"	t
LEFI_USER_H	lef/include/lefiUser.hpp	40;"	d
LEFI_USER_H	lef/lef/lefiUser.hpp	40;"	d
LEFI_WARNING_LOG_FUNCTION	lef/clef/lefrReader.h	/^typedef void (*LEFI_WARNING_LOG_FUNCTION) (const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/clef/lefwWriterCalls.h	/^typedef void (*LEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/include/lefrReader.h	/^typedef void (*LEFI_WARNING_LOG_FUNCTION) (const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/include/lefrReader.hpp	/^typedef void (*LEFI_WARNING_LOG_FUNCTION) (const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/include/lefwWriterCalls.h	/^typedef void (*LEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/include/lefwWriterCalls.hpp	/^typedef void (*LEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/lef/lefrReader.hpp	/^typedef void (*LEFI_WARNING_LOG_FUNCTION) (const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/lef/lefwWriter.cpp	/^typedef void (*LEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t	file:
LEFI_WARNING_LOG_FUNCTION	lef/lef/lefwWriterCalls.hpp	/^typedef void (*LEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t
LEFI_WRITER_H	lef/include/lefwWriterCalls.hpp	31;"	d
LEFI_WRITER_H	lef/lef/lefwWriterCalls.hpp	31;"	d
LEFRREADER_H	lef/include/lefrReader.hpp	31;"	d
LEFRREADER_H	lef/lef/lefrReader.hpp	31;"	d
LEFW_ALREADY_DEFINED	lef/clef/lefwWriter.h	45;"	d
LEFW_ALREADY_DEFINED	lef/include/lefwWriter.h	45;"	d
LEFW_ALREADY_DEFINED	lef/include/lefwWriter.hpp	46;"	d
LEFW_ALREADY_DEFINED	lef/lef/lefwWriter.hpp	46;"	d
LEFW_ANTENNAAREAFACTOR	lef/lef/lefwWriter.cpp	156;"	d	file:
LEFW_ANTENNAAREARATIO	lef/lef/lefwWriter.cpp	150;"	d	file:
LEFW_ANTENNACUMAREARATIO	lef/lef/lefwWriter.cpp	153;"	d	file:
LEFW_ANTENNACUMDIFFAREARATIO	lef/lef/lefwWriter.cpp	154;"	d	file:
LEFW_ANTENNACUMDIFFAREARATIOPWL	lef/lef/lefwWriter.cpp	155;"	d	file:
LEFW_ANTENNACUMDIFFSIDEAREARATIO	lef/lef/lefwWriter.cpp	161;"	d	file:
LEFW_ANTENNACUMDIFFSIDEAREARATIOPWL	lef/lef/lefwWriter.cpp	162;"	d	file:
LEFW_ANTENNACUMSIDEAREARATIO	lef/lef/lefwWriter.cpp	160;"	d	file:
LEFW_ANTENNADIFFAREA	lef/lef/lefwWriter.cpp	168;"	d	file:
LEFW_ANTENNADIFFAREARATIO	lef/lef/lefwWriter.cpp	151;"	d	file:
LEFW_ANTENNADIFFAREARATIOPWL	lef/lef/lefwWriter.cpp	152;"	d	file:
LEFW_ANTENNADIFFSIDEAREARATIO	lef/lef/lefwWriter.cpp	158;"	d	file:
LEFW_ANTENNADIFFSIDEAREARATIOPWL	lef/lef/lefwWriter.cpp	159;"	d	file:
LEFW_ANTENNAGATEAREA	lef/lef/lefwWriter.cpp	167;"	d	file:
LEFW_ANTENNAINOUTDIFFAREA	lef/lef/lefwWriter.cpp	147;"	d	file:
LEFW_ANTENNAINPUTGATEAREA	lef/lef/lefwWriter.cpp	146;"	d	file:
LEFW_ANTENNAMAXAREACAR	lef/lef/lefwWriter.cpp	169;"	d	file:
LEFW_ANTENNAMAXCUTCAR	lef/lef/lefwWriter.cpp	172;"	d	file:
LEFW_ANTENNAMAXSIDEAREACAR	lef/lef/lefwWriter.cpp	170;"	d	file:
LEFW_ANTENNAMODEL	lef/lef/lefwWriter.cpp	149;"	d	file:
LEFW_ANTENNAOUTPUTDIFFAREA	lef/lef/lefwWriter.cpp	148;"	d	file:
LEFW_ANTENNAPARTIALCUTAREA	lef/lef/lefwWriter.cpp	171;"	d	file:
LEFW_ANTENNAPARTIALMETALAREA	lef/lef/lefwWriter.cpp	165;"	d	file:
LEFW_ANTENNAPARTIALMETALSIDEAREA	lef/lef/lefwWriter.cpp	166;"	d	file:
LEFW_ANTENNASIDEAREAFACTOR	lef/lef/lefwWriter.cpp	163;"	d	file:
LEFW_ANTENNASIDEAREARATIO	lef/lef/lefwWriter.cpp	157;"	d	file:
LEFW_ANTENNASIZE	lef/lef/lefwWriter.cpp	63;"	d	file:
LEFW_ARRAY	lef/lef/lefwWriter.cpp	64;"	d	file:
LEFW_ARRAY_END	lef/lef/lefwWriter.cpp	126;"	d	file:
LEFW_ARRAY_START	lef/lef/lefwWriter.cpp	46;"	d	file:
LEFW_BAD_DATA	lef/clef/lefwWriter.h	44;"	d
LEFW_BAD_DATA	lef/include/lefwWriter.h	44;"	d
LEFW_BAD_DATA	lef/include/lefwWriter.hpp	45;"	d
LEFW_BAD_DATA	lef/lef/lefwWriter.hpp	45;"	d
LEFW_BAD_ORDER	lef/clef/lefwWriter.h	43;"	d
LEFW_BAD_ORDER	lef/include/lefwWriter.h	43;"	d
LEFW_BAD_ORDER	lef/include/lefwWriter.hpp	44;"	d
LEFW_BAD_ORDER	lef/lef/lefwWriter.hpp	44;"	d
LEFW_BEGINEXT	lef/lef/lefwWriter.cpp	65;"	d	file:
LEFW_BEGINEXT_END	lef/lef/lefwWriter.cpp	127;"	d	file:
LEFW_BEGINEXT_START	lef/lef/lefwWriter.cpp	47;"	d	file:
LEFW_BUSBITCHARS	lef/lef/lefwWriter.cpp	66;"	d	file:
LEFW_CASESENSITIVE	lef/lef/lefwWriter.cpp	67;"	d	file:
LEFW_CLEARANCEMEASURE	lef/lef/lefwWriter.cpp	173;"	d	file:
LEFW_CORRECTTABLE	lef/lef/lefwWriter.cpp	68;"	d	file:
LEFW_CORRECTTABLE_END	lef/lef/lefwWriter.cpp	128;"	d	file:
LEFW_CORRECTTABLE_START	lef/lef/lefwWriter.cpp	48;"	d	file:
LEFW_DENSITYCHECKSTEP	lef/lef/lefwWriter.cpp	175;"	d	file:
LEFW_DENSITYCHECKWINDOW	lef/lef/lefwWriter.cpp	174;"	d	file:
LEFW_DESIGNRULEWIDTH	lef/lef/lefwWriter.cpp	176;"	d	file:
LEFW_DIELECTRIC	lef/lef/lefwWriter.cpp	69;"	d	file:
LEFW_DIVIDERCHAR	lef/lef/lefwWriter.cpp	70;"	d	file:
LEFW_DONE	lef/lef/lefwWriter.cpp	194;"	d	file:
LEFW_EDGERATE	lef/lef/lefwWriter.cpp	71;"	d	file:
LEFW_END	lef/lef/lefwWriter.cpp	125;"	d	file:
LEFW_FILLACTIVESPACING	lef/lef/lefwWriter.cpp	177;"	d	file:
LEFW_FIXEDMASK	lef/lef/lefwWriter.cpp	192;"	d	file:
LEFW_INIT	lef/lef/lefwWriter.cpp	45;"	d	file:
LEFW_IRDROP	lef/lef/lefwWriter.cpp	72;"	d	file:
LEFW_IRDROP_END	lef/lef/lefwWriter.cpp	129;"	d	file:
LEFW_IRDROP_START	lef/lef/lefwWriter.cpp	49;"	d	file:
LEFW_LAYER	lef/lef/lefwWriter.cpp	73;"	d	file:
LEFW_LAYERACCURRENT	lef/lef/lefwWriter.cpp	74;"	d	file:
LEFW_LAYERDCCURRENT	lef/lef/lefwWriter.cpp	75;"	d	file:
LEFW_LAYERROUTING	lef/lef/lefwWriter.cpp	76;"	d	file:
LEFW_LAYERROUTINGWIDTH	lef/lef/lefwWriter.cpp	77;"	d	file:
LEFW_LAYERROUTING_END	lef/lef/lefwWriter.cpp	131;"	d	file:
LEFW_LAYERROUTING_SPACINGTABLE_END	lef/lef/lefwWriter.cpp	132;"	d	file:
LEFW_LAYERROUTING_SP_START	lef/lef/lefwWriter.cpp	52;"	d	file:
LEFW_LAYERROUTING_START	lef/lef/lefwWriter.cpp	51;"	d	file:
LEFW_LAYER_END	lef/lef/lefwWriter.cpp	130;"	d	file:
LEFW_LAYER_START	lef/lef/lefwWriter.cpp	50;"	d	file:
LEFW_MACRO	lef/lef/lefwWriter.cpp	78;"	d	file:
LEFW_MACRO_CAPACITANCE	lef/lef/lefwWriter.cpp	79;"	d	file:
LEFW_MACRO_END	lef/lef/lefwWriter.cpp	133;"	d	file:
LEFW_MACRO_FALLCURRENTSOURCE	lef/lef/lefwWriter.cpp	81;"	d	file:
LEFW_MACRO_FALLSATCUR	lef/lef/lefwWriter.cpp	82;"	d	file:
LEFW_MACRO_FALLTHRESH	lef/lef/lefwWriter.cpp	83;"	d	file:
LEFW_MACRO_FALLVOLTAGETHRESHOLD	lef/lef/lefwWriter.cpp	84;"	d	file:
LEFW_MACRO_INPUTNOISEMARGIN	lef/lef/lefwWriter.cpp	80;"	d	file:
LEFW_MACRO_IV_TABLES	lef/lef/lefwWriter.cpp	85;"	d	file:
LEFW_MACRO_LEAKAGE	lef/lef/lefwWriter.cpp	86;"	d	file:
LEFW_MACRO_LEQ	lef/lef/lefwWriter.cpp	87;"	d	file:
LEFW_MACRO_OUTPUTNOISEMARGIN	lef/lef/lefwWriter.cpp	88;"	d	file:
LEFW_MACRO_OUTPUTRESISTANCE	lef/lef/lefwWriter.cpp	89;"	d	file:
LEFW_MACRO_PINFOREIGN	lef/lef/lefwWriter.cpp	90;"	d	file:
LEFW_MACRO_PINLEQ	lef/lef/lefwWriter.cpp	91;"	d	file:
LEFW_MACRO_POWER	lef/lef/lefwWriter.cpp	92;"	d	file:
LEFW_MACRO_PULLDOWNRES	lef/lef/lefwWriter.cpp	93;"	d	file:
LEFW_MACRO_RESISTANCE	lef/lef/lefwWriter.cpp	94;"	d	file:
LEFW_MACRO_RISESATCUR	lef/lef/lefwWriter.cpp	95;"	d	file:
LEFW_MACRO_RISETHRESH	lef/lef/lefwWriter.cpp	96;"	d	file:
LEFW_MACRO_RISEVOLTAGETHRESHOLD	lef/lef/lefwWriter.cpp	97;"	d	file:
LEFW_MACRO_SOURCE	lef/lef/lefwWriter.cpp	98;"	d	file:
LEFW_MACRO_START	lef/lef/lefwWriter.cpp	53;"	d	file:
LEFW_MACRO_TIEOFFR	lef/lef/lefwWriter.cpp	99;"	d	file:
LEFW_MACRO_TIMING	lef/lef/lefwWriter.cpp	100;"	d	file:
LEFW_MACRO_VHI	lef/lef/lefwWriter.cpp	101;"	d	file:
LEFW_MACRO_VLO	lef/lef/lefwWriter.cpp	102;"	d	file:
LEFW_MANUFACTURINGGRID	lef/lef/lefwWriter.cpp	178;"	d	file:
LEFW_MAXADJACENTSLOTSPACING	lef/lef/lefwWriter.cpp	179;"	d	file:
LEFW_MAXCOAXIALSLOTSPACING	lef/lef/lefwWriter.cpp	180;"	d	file:
LEFW_MAXEDGESLOTSPACING	lef/lef/lefwWriter.cpp	181;"	d	file:
LEFW_MAXIMUMDENSITY	lef/lef/lefwWriter.cpp	182;"	d	file:
LEFW_MINFEATURE	lef/lef/lefwWriter.cpp	103;"	d	file:
LEFW_MINIMUMDENSITY	lef/lef/lefwWriter.cpp	183;"	d	file:
LEFW_MIX_VERSION_DATA	lef/clef/lefwWriter.h	47;"	d
LEFW_MIX_VERSION_DATA	lef/include/lefwWriter.h	47;"	d
LEFW_MIX_VERSION_DATA	lef/include/lefwWriter.hpp	48;"	d
LEFW_MIX_VERSION_DATA	lef/lef/lefwWriter.hpp	48;"	d
LEFW_NOISEMARGIN	lef/lef/lefwWriter.cpp	106;"	d	file:
LEFW_NOISETABLE	lef/lef/lefwWriter.cpp	107;"	d	file:
LEFW_NOISETABLE_END	lef/lef/lefwWriter.cpp	134;"	d	file:
LEFW_NOISETABLE_START	lef/lef/lefwWriter.cpp	54;"	d	file:
LEFW_NONDEFAULTRULE	lef/lef/lefwWriter.cpp	104;"	d	file:
LEFW_NONDEFAULTRULELAYER	lef/lef/lefwWriter.cpp	105;"	d	file:
LEFW_NONDEFAULTRULE_END	lef/lef/lefwWriter.cpp	135;"	d	file:
LEFW_NONDEFAULTRULE_START	lef/lef/lefwWriter.cpp	55;"	d	file:
LEFW_NOWIREEXTATPIN	lef/lef/lefwWriter.cpp	108;"	d	file:
LEFW_OBSOLETE	lef/clef/lefwWriter.h	48;"	d
LEFW_OBSOLETE	lef/include/lefwWriter.h	48;"	d
LEFW_OBSOLETE	lef/include/lefwWriter.hpp	49;"	d
LEFW_OBSOLETE	lef/lef/lefwWriter.hpp	49;"	d
LEFW_OK	lef/clef/lefwWriter.h	41;"	d
LEFW_OK	lef/include/lefwWriter.h	41;"	d
LEFW_OK	lef/include/lefwWriter.hpp	42;"	d
LEFW_OK	lef/lef/lefwWriter.hpp	42;"	d
LEFW_PROPERTYDEF	lef/lef/lefwWriter.cpp	109;"	d	file:
LEFW_PROPERTYDEF_END	lef/lef/lefwWriter.cpp	136;"	d	file:
LEFW_PROPERTYDEF_START	lef/lef/lefwWriter.cpp	56;"	d	file:
LEFW_ROWABUTSPACING	lef/lef/lefwWriter.cpp	184;"	d	file:
LEFW_ROWMINSPACING	lef/lef/lefwWriter.cpp	185;"	d	file:
LEFW_SCALEFACTOR	lef/lef/lefwWriter.cpp	110;"	d	file:
LEFW_SITE	lef/lef/lefwWriter.cpp	111;"	d	file:
LEFW_SITE_END	lef/lef/lefwWriter.cpp	137;"	d	file:
LEFW_SLOTLENGTH	lef/lef/lefwWriter.cpp	189;"	d	file:
LEFW_SLOTWIDTH	lef/lef/lefwWriter.cpp	188;"	d	file:
LEFW_SLOTWIRELENGTH	lef/lef/lefwWriter.cpp	187;"	d	file:
LEFW_SLOTWIREWIDTH	lef/lef/lefwWriter.cpp	186;"	d	file:
LEFW_SPACING	lef/lef/lefwWriter.cpp	112;"	d	file:
LEFW_SPACING_END	lef/lef/lefwWriter.cpp	138;"	d	file:
LEFW_SPACING_START	lef/lef/lefwWriter.cpp	57;"	d	file:
LEFW_SPLITWIREWIDTH	lef/lef/lefwWriter.cpp	190;"	d	file:
LEFW_THRESHOLD1	lef/lef/lefwWriter.cpp	113;"	d	file:
LEFW_THRESHOLD2	lef/lef/lefwWriter.cpp	114;"	d	file:
LEFW_UNINIT	lef/lef/lefwWriter.cpp	44;"	d	file:
LEFW_UNINITIALIZED	lef/clef/lefwWriter.h	42;"	d
LEFW_UNINITIALIZED	lef/include/lefwWriter.h	42;"	d
LEFW_UNINITIALIZED	lef/include/lefwWriter.hpp	43;"	d
LEFW_UNINITIALIZED	lef/lef/lefwWriter.hpp	43;"	d
LEFW_UNITS	lef/lef/lefwWriter.cpp	115;"	d	file:
LEFW_UNITS_END	lef/lef/lefwWriter.cpp	142;"	d	file:
LEFW_UNITS_START	lef/lef/lefwWriter.cpp	58;"	d	file:
LEFW_USEMINSPACING	lef/lef/lefwWriter.cpp	191;"	d	file:
LEFW_VERSION	lef/lef/lefwWriter.cpp	116;"	d	file:
LEFW_VIA	lef/lef/lefwWriter.cpp	117;"	d	file:
LEFW_VIAFOREIGN	lef/lef/lefwWriter.cpp	118;"	d	file:
LEFW_VIARULE	lef/lef/lefwWriter.cpp	119;"	d	file:
LEFW_VIARULEGEN	lef/lef/lefwWriter.cpp	121;"	d	file:
LEFW_VIARULEGENERATE	lef/lef/lefwWriter.cpp	120;"	d	file:
LEFW_VIARULEGEN_END	lef/lef/lefwWriter.cpp	141;"	d	file:
LEFW_VIARULEGEN_START	lef/lef/lefwWriter.cpp	61;"	d	file:
LEFW_VIARULE_END	lef/lef/lefwWriter.cpp	140;"	d	file:
LEFW_VIARULE_START	lef/lef/lefwWriter.cpp	60;"	d	file:
LEFW_VIATOPOFSTACKONLY	lef/lef/lefwWriter.cpp	122;"	d	file:
LEFW_VIAVIARULE	lef/lef/lefwWriter.cpp	123;"	d	file:
LEFW_VIA_END	lef/lef/lefwWriter.cpp	139;"	d	file:
LEFW_VIA_START	lef/lef/lefwWriter.cpp	59;"	d	file:
LEFW_WRITERCALLS_H	lef/include/lefwWriter.hpp	31;"	d
LEFW_WRITERCALLS_H	lef/lef/lefwWriter.hpp	31;"	d
LEFW_WRONG_VERSION	lef/clef/lefwWriter.h	46;"	d
LEFW_WRONG_VERSION	lef/include/lefwWriter.h	46;"	d
LEFW_WRONG_VERSION	lef/include/lefwWriter.hpp	47;"	d
LEFW_WRONG_VERSION	lef/lef/lefwWriter.hpp	47;"	d
LEF_BISON_SRCS	lef/clef/Makefile	/^LEF_BISON_SRCS  = lef.y$/;"	m
LEF_BISON_SRCS	lef/lef/Makefile	/^LEF_BISON_SRCS  = lef.y$/;"	m
LEF_INIT	lef/lef/lefrReader.cpp	42;"	d	file:
LEF_TABNAME	def/cdefzlib/Makefile	/^LEF_TABNAME     = cdefzlib$/;"	m
LEF_TABNAME	lef/clef/Makefile	/^LEF_TABNAME     = lef$/;"	m
LEF_TABNAME	lef/clefzlib/Makefile	/^LEF_TABNAME     = clefzlib$/;"	m
LEF_TABNAME	lef/lef/Makefile	/^LEF_TABNAME     = lef$/;"	m
LEF_TABNAME	lef/lefzlib/Makefile	/^LEF_TABNAME     = lefzlib$/;"	m
LEQ	lef/lef/lefiMacro.cpp	/^lefiMacro::LEQ() const$/;"	f	class:lefiMacro
LEQ	lef/lef/lefiMacro.cpp	/^lefiPin::LEQ() const$/;"	f	class:lefiPin
LEQSize_	lef/include/lefiMacro.hpp	/^  int    LEQSize_;$/;"	m	class:lefiPin
LEQSize_	lef/include/lefiMacro.hpp	/^  int LEQSize_;$/;"	m	class:lefiMacro
LEQSize_	lef/lef/lefiMacro.hpp	/^  int    LEQSize_;$/;"	m	class:lefiPin
LEQSize_	lef/lef/lefiMacro.hpp	/^  int LEQSize_;$/;"	m	class:lefiMacro
LEQ_	lef/include/lefiMacro.hpp	/^  char*  LEQ_;$/;"	m	class:lefiPin
LEQ_	lef/include/lefiMacro.hpp	/^  char* LEQ_;$/;"	m	class:lefiMacro
LEQ_	lef/lef/lefiMacro.hpp	/^  char*  LEQ_;$/;"	m	class:lefiPin
LEQ_	lef/lef/lefiMacro.hpp	/^  char* LEQ_;$/;"	m	class:lefiMacro
LIBOBJS	def/template.mk	/^LIBOBJS =	$(TMP2:.c=.o)$/;"	m
LIBOBJS	lef/template.mk	/^LIBOBJS =	$(TMP2:.c=.o)$/;"	m
LIBSRCS	def/cdef/Makefile	/^LIBSRCS =	\\$/;"	m
LIBSRCS	def/cdefzlib/Makefile	/^LIBSRCS =	cdefzlib.c $/;"	m
LIBSRCS	def/def/Makefile	/^LIBSRCS =	\\$/;"	m
LIBSRCS	def/defzlib/Makefile	/^LIBSRCS =	defzlib.cpp$/;"	m
LIBSRCS	lef/clef/Makefile	/^LIBSRCS =           xlefiArray.cpp \\$/;"	m
LIBSRCS	lef/clefzlib/Makefile	/^LIBSRCS =	clefzlib.c $/;"	m
LIBSRCS	lef/lef/Makefile	/^LIBSRCS =  \\$/;"	m
LIBSRCS	lef/lefzlib/Makefile	/^LIBSRCS =	lefzlib.cpp$/;"	m
LIBTARGET	def/cdef/Makefile	/^LIBTARGET =	libcdef.a$/;"	m
LIBTARGET	def/cdefzlib/Makefile	/^LIBTARGET =	libcdefzlib.a$/;"	m
LIBTARGET	def/def/Makefile	/^LIBTARGET =	libdef.a$/;"	m
LIBTARGET	def/defzlib/Makefile	/^LIBTARGET =	libdefzlib.a$/;"	m
LIBTARGET	lef/clef/Makefile	/^LIBTARGET =	libclef.a$/;"	m
LIBTARGET	lef/clefzlib/Makefile	/^LIBTARGET =	libclefzlib.a$/;"	m
LIBTARGET	lef/lef/Makefile	/^LIBTARGET =	liblef.a$/;"	m
LIBTARGET	lef/lefrw/Makefile	/^LIBTARGET =	$/;"	m
LIBTARGET	lef/lefwrite/Makefile	/^LIBTARGET =	$/;"	m
LIBTARGET	lef/lefzlib/Makefile	/^LIBTARGET =	liblefzlib.a$/;"	m
LNOT	lef/lef/lef.tab.cpp	/^    LNOT = 681,$/;"	e	enum:yytokentype	file:
LNOT	lef/lef/lef.tab.h	/^    LNOT = 681,$/;"	e	enum:yytokentype
LYPROP_ECAP	lef/lef/lef.tab.cpp	90;"	d	file:
LayerCbk	lef/include/lefrCallBacks.hpp	/^    lefrLayerCbkFnType LayerCbk;$/;"	m	class:lefrCallbacks
LayerCbk	lef/lef/lefrCallBacks.hpp	/^    lefrLayerCbkFnType LayerCbk;$/;"	m	class:lefrCallbacks
LayerWarnings	lef/include/lefrSettings.hpp	/^    int LayerWarnings;$/;"	m	class:lefrSettings
LayerWarnings	lef/lef/lefrSettings.hpp	/^    int LayerWarnings;$/;"	m	class:lefrSettings
Lef58TypePairs	lef/include/lefrSettings.hpp	/^    StringSet Lef58TypePairs;$/;"	m	class:lefrSettings
Lef58TypePairs	lef/lef/lefrSettings.hpp	/^    StringSet Lef58TypePairs;$/;"	m	class:lefrSettings
LibraryEndCbk	lef/include/lefrCallBacks.hpp	/^    lefrVoidCbkFnType LibraryEndCbk;$/;"	m	class:lefrCallbacks
LibraryEndCbk	lef/lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType LibraryEndCbk;$/;"	m	class:lefrCallbacks
LineNumberFunction	def/def/defrSettings.hpp	/^    DEFI_LINE_NUMBER_FUNCTION LineNumberFunction;$/;"	m	class:defrSettings
LineNumberFunction	lef/include/lefrSettings.hpp	/^    LEFI_LINE_NUMBER_FUNCTION LineNumberFunction;$/;"	m	class:lefrSettings
LineNumberFunction	lef/lef/lefrSettings.hpp	/^    LEFI_LINE_NUMBER_FUNCTION LineNumberFunction;$/;"	m	class:lefrSettings
LogFileAppend	def/def/defrSettings.hpp	/^    int LogFileAppend; $/;"	m	class:defrSettings
LogFileAppend	lef/include/lefrSettings.hpp	/^    int LogFileAppend;$/;"	m	class:lefrSettings
LogFileAppend	lef/lef/lefrSettings.hpp	/^    int LogFileAppend;$/;"	m	class:lefrSettings
LongLineNumberFunction	def/def/defrSettings.hpp	/^    DEFI_LONG_LINE_NUMBER_FUNCTION LongLineNumberFunction;$/;"	m	class:defrSettings
MAX	def/def/defiDefs.hpp	90;"	d
MAX	lef/include/lefiDefs.hpp	97;"	d
MAX	lef/lef/lefiDefs.hpp	97;"	d
MAXCBS	def/def/defwWriterCalls.cpp	58;"	d	file:
MAXCBS	lef/lef/lefwWriterCalls.cpp	46;"	d	file:
MAXINT	lef/include/lefiDefs.hpp	86;"	d
MAXINT	lef/lef/lefiDefs.hpp	86;"	d
MAXSYN	def/def/defwWriter.cpp	159;"	d	file:
MAXSYN	lef/lef/lefwWriter.cpp	196;"	d	file:
MAX_LEF_MSGS	lef/clef/lefrReader.h	40;"	d
MAX_LEF_MSGS	lef/include/lefrReader.h	40;"	d
MAX_LEF_MSGS	lef/include/lefrReader.hpp	41;"	d
MAX_LEF_MSGS	lef/lef/lefrReader.hpp	41;"	d
MIN	def/def/defiDefs.hpp	86;"	d
MIN	lef/include/lefiDefs.hpp	93;"	d
MIN	lef/lef/lefiDefs.hpp	93;"	d
MININT	lef/include/lefiDefs.hpp	89;"	d
MININT	lef/lef/lefiDefs.hpp	89;"	d
MSG_SIZE	def/def/defrData.hpp	46;"	d
MacroBeginCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroBeginCbk;$/;"	m	class:lefrCallbacks
MacroBeginCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroBeginCbk;$/;"	m	class:lefrCallbacks
MacroCbk	lef/include/lefrCallBacks.hpp	/^    lefrMacroCbkFnType MacroCbk;$/;"	m	class:lefrCallbacks
MacroCbk	lef/lef/lefrCallBacks.hpp	/^    lefrMacroCbkFnType MacroCbk;$/;"	m	class:lefrCallbacks
MacroClassTypeCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroClassTypeCbk;$/;"	m	class:lefrCallbacks
MacroClassTypeCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroClassTypeCbk;$/;"	m	class:lefrCallbacks
MacroEndCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroEndCbk;$/;"	m	class:lefrCallbacks
MacroEndCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroEndCbk;$/;"	m	class:lefrCallbacks
MacroFixedMaskCbk	lef/include/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType MacroFixedMaskCbk;$/;"	m	class:lefrCallbacks
MacroFixedMaskCbk	lef/lef/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType MacroFixedMaskCbk;$/;"	m	class:lefrCallbacks
MacroForeignCbk	lef/include/lefrCallBacks.hpp	/^    lefrMacroForeignCbkFnType MacroForeignCbk;$/;"	m	class:lefrCallbacks
MacroForeignCbk	lef/lef/lefrCallBacks.hpp	/^    lefrMacroForeignCbkFnType MacroForeignCbk;$/;"	m	class:lefrCallbacks
MacroOriginCbk	lef/include/lefrCallBacks.hpp	/^    lefrMacroNumCbkFnType MacroOriginCbk;$/;"	m	class:lefrCallbacks
MacroOriginCbk	lef/lef/lefrCallBacks.hpp	/^    lefrMacroNumCbkFnType MacroOriginCbk;$/;"	m	class:lefrCallbacks
MacroSiteCbk	lef/include/lefrCallBacks.hpp	/^    lefrMacroSiteCbkFnType MacroSiteCbk;$/;"	m	class:lefrCallbacks
MacroSiteCbk	lef/lef/lefrCallBacks.hpp	/^    lefrMacroSiteCbkFnType MacroSiteCbk;$/;"	m	class:lefrCallbacks
MacroSizeCbk	lef/include/lefrCallBacks.hpp	/^    lefrMacroNumCbkFnType MacroSizeCbk;$/;"	m	class:lefrCallbacks
MacroSizeCbk	lef/lef/lefrCallBacks.hpp	/^    lefrMacroNumCbkFnType MacroSizeCbk;$/;"	m	class:lefrCallbacks
MacroWarnings	lef/include/lefrSettings.hpp	/^    int MacroWarnings;$/;"	m	class:lefrSettings
MacroWarnings	lef/lef/lefrSettings.hpp	/^    int MacroWarnings;$/;"	m	class:lefrSettings
MagicCommentFoundFunction	def/def/defrSettings.hpp	/^    DEFI_MAGIC_COMMENT_FOUND_FUNCTION MagicCommentFoundFunction;$/;"	m	class:defrSettings
MallocFunction	def/def/defrSettings.hpp	/^    DEFI_MALLOC_FUNCTION MallocFunction;$/;"	m	class:defrSettings
MallocFunction	lef/include/lefrSettings.hpp	/^    LEFI_MALLOC_FUNCTION MallocFunction;$/;"	m	class:lefrSettings
MallocFunction	lef/lef/lefrSettings.hpp	/^    LEFI_MALLOC_FUNCTION MallocFunction;$/;"	m	class:lefrSettings
ManufacturingCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType ManufacturingCbk;$/;"	m	class:lefrCallbacks
ManufacturingCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType ManufacturingCbk;$/;"	m	class:lefrCallbacks
Marked	def/def/defiAlias.cpp	/^int defiAlias_itr::Marked() {$/;"	f	class:defiAlias_itr
MaxStackViaCbk	lef/include/lefrCallBacks.hpp	/^    lefrMaxStackViaCbkFnType MaxStackViaCbk;$/;"	m	class:lefrCallbacks
MaxStackViaCbk	lef/lef/lefrCallBacks.hpp	/^    lefrMaxStackViaCbkFnType MaxStackViaCbk;$/;"	m	class:lefrCallbacks
MaxStackViaWarnings	lef/include/lefrSettings.hpp	/^    int MaxStackViaWarnings;$/;"	m	class:lefrSettings
MaxStackViaWarnings	lef/lef/lefrSettings.hpp	/^    int MaxStackViaWarnings;$/;"	m	class:lefrSettings
MinFeatureCbk	lef/include/lefrCallBacks.hpp	/^    lefrMinFeatureCbkFnType MinFeatureCbk;$/;"	m	class:lefrCallbacks
MinFeatureCbk	lef/lef/lefrCallBacks.hpp	/^    lefrMinFeatureCbkFnType MinFeatureCbk;$/;"	m	class:lefrCallbacks
MinFeatureWarnings	lef/include/lefrSettings.hpp	/^    int MinFeatureWarnings;$/;"	m	class:lefrSettings
MinFeatureWarnings	lef/lef/lefrSettings.hpp	/^    int MinFeatureWarnings;$/;"	m	class:lefrSettings
MsgLimit	def/def/defrSettings.hpp	/^    int MsgLimit[DEF_MSGS];$/;"	m	class:defrSettings
MsgLimit	lef/include/lefrSettings.hpp	/^    int MsgLimit[MAX_LEF_MSGS];$/;"	m	class:lefrSettings
MsgLimit	lef/lef/lefrSettings.hpp	/^    int MsgLimit[MAX_LEF_MSGS];$/;"	m	class:lefrSettings
MsgsDisableMap	lef/include/lefrSettings.hpp	/^typedef std::map<int, int>                              MsgsDisableMap;$/;"	t
MsgsDisableMap	lef/lef/lefrSettings.hpp	/^typedef std::map<int, int>                              MsgsDisableMap;$/;"	t
NDefProp	def/def/defrSettings.hpp	/^    defiPropType    NDefProp;$/;"	m	class:defrSession
NOCBK	lef/lef/lefrReader.cpp	39;"	d	file:
NODEFMSG	def/def/defrReader.cpp	46;"	d	file:
NOLEFMSG	lef/lef/lefrReader.cpp	40;"	d	file:
NULL	def/def/defiDefs.hpp	53;"	d
NULL	lef/include/lefiDefs.hpp	53;"	d
NULL	lef/lef/lefiDefs.hpp	53;"	d
NUMBER	lef/lef/lef.tab.cpp	/^    NUMBER = 427,$/;"	e	enum:yytokentype	file:
NUMBER	lef/lef/lef.tab.h	/^    NUMBER = 427,$/;"	e	enum:yytokentype
NeedPathData	def/def/defrData.hpp	/^    int NeedPathData;$/;"	m	class:defrData
Net	def/def/defrData.hpp	/^    defiNet Net;$/;"	m	class:defrData
NetCbk	def/def/defrCallBacks.hpp	/^    defrNetCbkFnType NetCbk;$/;"	m	class:defrCallbacks
NetConnectionExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType NetConnectionExtCbk;$/;"	m	class:defrCallbacks
NetEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType NetEndCbk;$/;"	m	class:defrCallbacks
NetExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType NetExtCbk;$/;"	m	class:defrCallbacks
NetNameCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType NetNameCbk;$/;"	m	class:defrCallbacks
NetNonDefaultRuleCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType NetNonDefaultRuleCbk;$/;"	m	class:defrCallbacks
NetPartialPathCbk	def/def/defrCallBacks.hpp	/^    defrNetCbkFnType NetPartialPathCbk;$/;"	m	class:defrCallbacks
NetProp	def/def/defrSettings.hpp	/^    defiPropType    NetProp;$/;"	m	class:defrSession
NetStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType NetStartCbk;$/;"	m	class:defrCallbacks
NetSubnetNameCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType NetSubnetNameCbk;$/;"	m	class:defrCallbacks
NetWarnings	def/def/defrSettings.hpp	/^    int NetWarnings;$/;"	m	class:defrSettings
Next	def/def/defiAlias.cpp	/^int defiAlias_itr::Next() {$/;"	f	class:defiAlias_itr
NoWireExtensionCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType NoWireExtensionCbk;$/;"	m	class:lefrCallbacks
NoWireExtensionCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType NoWireExtensionCbk;$/;"	m	class:lefrCallbacks
NoWireExtensionWarnings	lef/include/lefrSettings.hpp	/^    int NoWireExtensionWarnings;$/;"	m	class:lefrSettings
NoWireExtensionWarnings	lef/lef/lefrSettings.hpp	/^    int NoWireExtensionWarnings;$/;"	m	class:lefrSettings
NoiseMarginCbk	lef/include/lefrCallBacks.hpp	/^    lefrNoiseMarginCbkFnType NoiseMarginCbk;$/;"	m	class:lefrCallbacks
NoiseMarginCbk	lef/lef/lefrCallBacks.hpp	/^    lefrNoiseMarginCbkFnType NoiseMarginCbk;$/;"	m	class:lefrCallbacks
NoiseMarginWarnings	lef/include/lefrSettings.hpp	/^    int NoiseMarginWarnings;$/;"	m	class:lefrSettings
NoiseMarginWarnings	lef/lef/lefrSettings.hpp	/^    int NoiseMarginWarnings;$/;"	m	class:lefrSettings
NoiseTableCbk	lef/include/lefrCallBacks.hpp	/^    lefrNoiseTableCbkFnType NoiseTableCbk;$/;"	m	class:lefrCallbacks
NoiseTableCbk	lef/lef/lefrCallBacks.hpp	/^    lefrNoiseTableCbkFnType NoiseTableCbk;$/;"	m	class:lefrCallbacks
NoiseTableWarnings	lef/include/lefrSettings.hpp	/^    int NoiseTableWarnings;$/;"	m	class:lefrSettings
NoiseTableWarnings	lef/lef/lefrSettings.hpp	/^    int NoiseTableWarnings;$/;"	m	class:lefrSettings
NonDefault	def/def/defrData.hpp	/^    defiNonDefault NonDefault;$/;"	m	class:defrData
NonDefaultCbk	def/def/defrCallBacks.hpp	/^    defrNonDefaultCbkFnType NonDefaultCbk;$/;"	m	class:defrCallbacks
NonDefaultCbk	lef/include/lefrCallBacks.hpp	/^    lefrNonDefaultCbkFnType NonDefaultCbk;$/;"	m	class:lefrCallbacks
NonDefaultCbk	lef/lef/lefrCallBacks.hpp	/^    lefrNonDefaultCbkFnType NonDefaultCbk;$/;"	m	class:lefrCallbacks
NonDefaultEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType NonDefaultEndCbk;$/;"	m	class:defrCallbacks
NonDefaultStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType NonDefaultStartCbk;$/;"	m	class:defrCallbacks
NonDefaultWarnings	def/def/defrSettings.hpp	/^    int NonDefaultWarnings;$/;"	m	class:defrSettings
NonDefaultWarnings	lef/include/lefrSettings.hpp	/^    int NonDefaultWarnings;$/;"	m	class:lefrSettings
NonDefaultWarnings	lef/lef/lefrSettings.hpp	/^    int NonDefaultWarnings;$/;"	m	class:lefrSettings
OPTIMIZE_FLAG	def/Makefile	/^OPTIMIZE_FLAG = +O2$/;"	m
OPTIMIZE_FLAG	def/Makefile	/^OPTIMIZE_FLAG = -O$/;"	m
OPTIMIZE_FLAG	lef/Makefile	/^OPTIMIZE_FLAG = +O2$/;"	m
OPTIMIZE_FLAG	lef/Makefile	/^OPTIMIZE_FLAG = -O$/;"	m
OS_TYPE	def/Makefile	/^OS_TYPE := $(shell uname)$/;"	m
OS_TYPE	def/template.mk	/^OS_TYPE	:= $(shell uname -s)$/;"	m
OS_TYPE	lef/Makefile	/^OS_TYPE := $(shell uname)$/;"	m
OS_TYPE	lef/template.mk	/^OS_TYPE	:= $(shell uname -s)$/;"	m
OS_VER	def/Makefile	/^OS_VER := $(shell uname -r)$/;"	m
OS_VER	lef/Makefile	/^OS_VER := $(shell uname -r)$/;"	m
ObstructionCbk	lef/include/lefrCallBacks.hpp	/^    lefrObstructionCbkFnType ObstructionCbk;$/;"	m	class:lefrCallbacks
ObstructionCbk	lef/lef/lefrCallBacks.hpp	/^    lefrObstructionCbkFnType ObstructionCbk;$/;"	m	class:lefrCallbacks
OutputAntennaCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType OutputAntennaCbk;$/;"	m	class:lefrCallbacks
OutputAntennaCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType OutputAntennaCbk;$/;"	m	class:lefrCallbacks
OutputAntennaWarnings	lef/include/lefrSettings.hpp	/^    int OutputAntennaWarnings;$/;"	m	class:lefrSettings
OutputAntennaWarnings	lef/lef/lefrSettings.hpp	/^    int OutputAntennaWarnings;$/;"	m	class:lefrSettings
PARSE_ERROR	def/cdef/defrReader.h	663;"	d
PARSE_ERROR	def/def/defrReader.hpp	712;"	d
PARSE_ERROR	lef/clef/lefrReader.h	507;"	d
PARSE_ERROR	lef/include/lefrReader.h	507;"	d
PARSE_ERROR	lef/include/lefrReader.hpp	580;"	d
PARSE_ERROR	lef/lef/lefrReader.hpp	580;"	d
PARSE_OK	def/cdef/defrReader.h	661;"	d
PARSE_OK	def/def/defrReader.hpp	710;"	d
PARSE_OK	lef/clef/lefrReader.h	505;"	d
PARSE_OK	lef/include/lefrReader.h	505;"	d
PARSE_OK	lef/include/lefrReader.hpp	578;"	d
PARSE_OK	lef/lef/lefrReader.hpp	578;"	d
POINT_SPEC	def/def/defiDefs.hpp	79;"	d
POINT_SPEC	lef/include/lefiDefs.hpp	79;"	d
POINT_SPEC	lef/lef/lefiDefs.hpp	79;"	d
PUBLIC_HDRS	def/cdef/Makefile	/^PUBLIC_HDRS = \\$/;"	m
PUBLIC_HDRS	def/cdefzlib/Makefile	/^PUBLIC_HDRS =   defzlib.h$/;"	m
PUBLIC_HDRS	def/def/Makefile	/^PUBLIC_HDRS = \\$/;"	m
PUBLIC_HDRS	def/defdiff/Makefile	/^PUBLIC_HDRS = $/;"	m
PUBLIC_HDRS	def/defrw/Makefile	/^PUBLIC_HDRS = $/;"	m
PUBLIC_HDRS	def/defwrite/Makefile	/^PUBLIC_HDRS = $/;"	m
PUBLIC_HDRS	def/defzlib/Makefile	/^PUBLIC_HDRS =   defzlib.hpp$/;"	m
PUBLIC_HDRS	lef/clef/Makefile	/^PUBLIC_HDRS =       lefiArray.h \\$/;"	m
PUBLIC_HDRS	lef/clefzlib/Makefile	/^PUBLIC_HDRS =   lefzlib.h$/;"	m
PUBLIC_HDRS	lef/lef/Makefile	/^PUBLIC_HDRS =       lefiArray.hpp \\$/;"	m
PUBLIC_HDRS	lef/lefdiff/Makefile	/^PUBLIC_HDRS = $/;"	m
PUBLIC_HDRS	lef/lefzlib/Makefile	/^PUBLIC_HDRS =   lefzlib.hpp$/;"	m
PWLdiffusion	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::PWLdiffusion(int index)$/;"	f	class:lefiAntennaPWL
PWLratio	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::PWLratio(int index)$/;"	f	class:lefiAntennaPWL
Partition	def/def/defrData.hpp	/^    defiPartition Partition;$/;"	m	class:defrData
PartitionCbk	def/def/defrCallBacks.hpp	/^    defrPartitionCbkFnType PartitionCbk;$/;"	m	class:defrCallbacks
PartitionsEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType PartitionsEndCbk;$/;"	m	class:defrCallbacks
PartitionsExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType PartitionsExtCbk;$/;"	m	class:defrCallbacks
PartitionsStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType PartitionsStartCbk;$/;"	m	class:defrCallbacks
PathCbk	def/def/defrCallBacks.hpp	/^    defrPathCbkFnType PathCbk;$/;"	m	class:defrCallbacks
PathObj	def/def/defrData.hpp	/^    defiPath PathObj;$/;"	m	class:defrData
Pin	def/def/defrData.hpp	/^    defiPin Pin;$/;"	m	class:defrData
PinCap	def/def/defrData.hpp	/^    defiPinCap PinCap;$/;"	m	class:defrData
PinCapCbk	def/def/defrCallBacks.hpp	/^    defrPinCapCbkFnType PinCapCbk;$/;"	m	class:defrCallbacks
PinCbk	def/def/defrCallBacks.hpp	/^    defrPinCbkFnType PinCbk;$/;"	m	class:defrCallbacks
PinCbk	lef/include/lefrCallBacks.hpp	/^    lefrPinCbkFnType PinCbk;$/;"	m	class:lefrCallbacks
PinCbk	lef/lef/lefrCallBacks.hpp	/^    lefrPinCbkFnType PinCbk;$/;"	m	class:lefrCallbacks
PinEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType PinEndCbk;$/;"	m	class:defrCallbacks
PinExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType PinExtCbk;$/;"	m	class:defrCallbacks
PinExtWarnings	def/def/defrSettings.hpp	/^    int PinExtWarnings;$/;"	m	class:defrSettings
PinProp	def/def/defrData.hpp	/^    defiPinProp PinProp;$/;"	m	class:defrData
PinPropCbk	def/def/defrCallBacks.hpp	/^    defrPinPropCbkFnType PinPropCbk;$/;"	m	class:defrCallbacks
PinPropEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType PinPropEndCbk;$/;"	m	class:defrCallbacks
PinPropStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType PinPropStartCbk;$/;"	m	class:defrCallbacks
PinWarnings	def/def/defrSettings.hpp	/^    int PinWarnings;$/;"	m	class:defrSettings
PinWarnings	lef/include/lefrSettings.hpp	/^    int PinWarnings;$/;"	m	class:lefrSettings
PinWarnings	lef/lef/lefrSettings.hpp	/^    int PinWarnings;$/;"	m	class:lefrSettings
Prop	def/def/defrData.hpp	/^    defiProp Prop;$/;"	m	class:defrData
PropBeginCbk	lef/include/lefrCallBacks.hpp	/^    lefrVoidCbkFnType PropBeginCbk;$/;"	m	class:lefrCallbacks
PropBeginCbk	lef/lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType PropBeginCbk;$/;"	m	class:lefrCallbacks
PropCbk	def/def/defrCallBacks.hpp	/^    defrPropCbkFnType PropCbk;$/;"	m	class:defrCallbacks
PropCbk	lef/include/lefrCallBacks.hpp	/^    lefrPropCbkFnType PropCbk;$/;"	m	class:lefrCallbacks
PropCbk	lef/lef/lefrCallBacks.hpp	/^    lefrPropCbkFnType PropCbk;$/;"	m	class:lefrCallbacks
PropDefEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType PropDefEndCbk;$/;"	m	class:defrCallbacks
PropDefStartCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType PropDefStartCbk;$/;"	m	class:defrCallbacks
PropEndCbk	lef/include/lefrCallBacks.hpp	/^    lefrVoidCbkFnType PropEndCbk;$/;"	m	class:lefrCallbacks
PropEndCbk	lef/lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType PropEndCbk;$/;"	m	class:lefrCallbacks
QSTRING	lef/lef/lef.tab.cpp	/^    QSTRING = 426,$/;"	e	enum:yytokentype	file:
QSTRING	lef/lef/lef.tab.h	/^    QSTRING = 426,$/;"	e	enum:yytokentype
RING_SIZE	def/def/defrData.hpp	43;"	d
RING_SIZE	lef/include/lefrData.hpp	54;"	d
RING_SIZE	lef/lef/lefrData.hpp	54;"	d
ROUND	def/def/defiDefs.hpp	93;"	d
ROUND	lef/include/lefiDefs.hpp	100;"	d
ROUND	lef/lef/lefiDefs.hpp	100;"	d
ReadEncrypted	lef/include/lefrSettings.hpp	/^    int ReadEncrypted; $/;"	m	class:lefrSettings
ReadEncrypted	lef/lef/lefrSettings.hpp	/^    int ReadEncrypted; $/;"	m	class:lefrSettings
ReadFunction	def/def/defrSettings.hpp	/^    DEFI_READ_FUNCTION ReadFunction;$/;"	m	class:defrSettings
ReadFunction	lef/include/lefrSettings.hpp	/^    LEFI_READ_FUNCTION ReadFunction;$/;"	m	class:lefrSettings
ReadFunction	lef/lef/lefrSettings.hpp	/^    LEFI_READ_FUNCTION ReadFunction;$/;"	m	class:lefrSettings
ReallocFunction	def/def/defrSettings.hpp	/^    DEFI_REALLOC_FUNCTION ReallocFunction;$/;"	m	class:defrSettings
ReallocFunction	lef/include/lefrSettings.hpp	/^    LEFI_REALLOC_FUNCTION ReallocFunction;$/;"	m	class:lefrSettings
ReallocFunction	lef/lef/lefrSettings.hpp	/^    LEFI_REALLOC_FUNCTION ReallocFunction;$/;"	m	class:lefrSettings
Region	def/def/defrData.hpp	/^    defiRegion Region;$/;"	m	class:defrData
RegionCbk	def/def/defrCallBacks.hpp	/^    defrRegionCbkFnType RegionCbk;$/;"	m	class:defrCallbacks
RegionEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType RegionEndCbk;$/;"	m	class:defrCallbacks
RegionProp	def/def/defrSettings.hpp	/^    defiPropType    RegionProp;$/;"	m	class:defrSession
RegionStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType RegionStartCbk;$/;"	m	class:defrCallbacks
RegionWarnings	def/def/defrSettings.hpp	/^    int RegionWarnings;$/;"	m	class:defrSettings
RegisterUnused	lef/include/lefrSettings.hpp	/^    int RegisterUnused;$/;"	m	class:lefrSettings
RegisterUnused	lef/lef/lefrSettings.hpp	/^    int RegisterUnused;$/;"	m	class:lefrSettings
RelaxMode	lef/include/lefrSettings.hpp	/^    int RelaxMode;$/;"	m	class:lefrSettings
RelaxMode	lef/lef/lefrSettings.hpp	/^    int RelaxMode;$/;"	m	class:lefrSettings
Reset	def/def/defiMisc.cpp	/^void defiGeometries::Reset() {$/;"	f	class:defiGeometries
Row	def/def/defrData.hpp	/^    defiRow Row;$/;"	m	class:defrData
RowCbk	def/def/defrCallBacks.hpp	/^    defrRowCbkFnType RowCbk;$/;"	m	class:defrCallbacks
RowProp	def/def/defrSettings.hpp	/^    defiPropType    RowProp;$/;"	m	class:defrSession
RowWarnings	def/def/defrSettings.hpp	/^    int RowWarnings;$/;"	m	class:defrSettings
SDFcond	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFcond()$/;"	f	class:lefiTiming
SDFcondEnd	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFcondEnd()$/;"	f	class:lefiTiming
SDFcondEnd_	lef/include/lefiMacro.hpp	/^  char* SDFcondEnd_;$/;"	m	class:lefiTiming
SDFcondEnd_	lef/lef/lefiMacro.hpp	/^  char* SDFcondEnd_;$/;"	m	class:lefiTiming
SDFcondStart	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFcondStart()$/;"	f	class:lefiTiming
SDFcondStart_	lef/include/lefiMacro.hpp	/^  char* SDFcondStart_;$/;"	m	class:lefiTiming
SDFcondStart_	lef/lef/lefiMacro.hpp	/^  char* SDFcondStart_;$/;"	m	class:lefiTiming
SDFcond_	lef/include/lefiMacro.hpp	/^  char* SDFcond_;$/;"	m	class:lefiTiming
SDFcond_	lef/lef/lefiMacro.hpp	/^  char* SDFcond_;$/;"	m	class:lefiTiming
SDFfromTrigger	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFfromTrigger()$/;"	f	class:lefiTiming
SDFfromTrigger_	lef/include/lefiMacro.hpp	/^  char* SDFfromTrigger_;$/;"	m	class:lefiTiming
SDFfromTrigger_	lef/lef/lefiMacro.hpp	/^  char* SDFfromTrigger_;$/;"	m	class:lefiTiming
SDFonePinTriggerType	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFonePinTriggerType()$/;"	f	class:lefiTiming
SDFtoTrigger	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFtoTrigger()$/;"	f	class:lefiTiming
SDFtoTrigger_	lef/include/lefiMacro.hpp	/^  char* SDFtoTrigger_;$/;"	m	class:lefiTiming
SDFtoTrigger_	lef/lef/lefiMacro.hpp	/^  char* SDFtoTrigger_;$/;"	m	class:lefiTiming
SDFtriggerOne	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFtriggerOne()$/;"	f	class:lefiTiming
SDFtriggerTableOne_	lef/include/lefiMacro.hpp	/^  double SDFtriggerTableOne_;$/;"	m	class:lefiTiming
SDFtriggerTableOne_	lef/lef/lefiMacro.hpp	/^  double SDFtriggerTableOne_;$/;"	m	class:lefiTiming
SDFtriggerTableThree_	lef/include/lefiMacro.hpp	/^  double SDFtriggerTableThree_;$/;"	m	class:lefiTiming
SDFtriggerTableThree_	lef/lef/lefiMacro.hpp	/^  double SDFtriggerTableThree_;$/;"	m	class:lefiTiming
SDFtriggerTableTwo_	lef/include/lefiMacro.hpp	/^  double SDFtriggerTableTwo_;$/;"	m	class:lefiTiming
SDFtriggerTableTwo_	lef/lef/lefiMacro.hpp	/^  double SDFtriggerTableTwo_;$/;"	m	class:lefiTiming
SDFtriggerThree	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFtriggerThree()$/;"	f	class:lefiTiming
SDFtriggerTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFtriggerTwo()$/;"	f	class:lefiTiming
SDFtriggerType_	lef/include/lefiMacro.hpp	/^  char* SDFtriggerType_;$/;"	m	class:lefiTiming
SDFtriggerType_	lef/lef/lefiMacro.hpp	/^  char* SDFtriggerType_;$/;"	m	class:lefiTiming
SDFtwoPinTriggerType	lef/lef/lefiMacro.cpp	/^lefiTiming::SDFtwoPinTriggerType()$/;"	f	class:lefiTiming
SHAPE_SPEC	def/def/defiDefs.hpp	83;"	d
SHAPE_SPEC	lef/include/lefiDefs.hpp	83;"	d
SHAPE_SPEC	lef/lef/lefiDefs.hpp	83;"	d
SHELL	def/template.mk	/^SHELL=\/bin\/sh$/;"	m
SHELL	lef/template.mk	/^SHELL=\/bin\/sh$/;"	m
SNetCbk	def/def/defrCallBacks.hpp	/^    defrNetCbkFnType SNetCbk;$/;"	m	class:defrCallbacks
SNetEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType SNetEndCbk;$/;"	m	class:defrCallbacks
SNetPartialPathCbk	def/def/defrCallBacks.hpp	/^    defrNetCbkFnType SNetPartialPathCbk;$/;"	m	class:defrCallbacks
SNetProp	def/def/defrSettings.hpp	/^    defiPropType    SNetProp;$/;"	m	class:defrSession
SNetStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType SNetStartCbk;$/;"	m	class:defrCallbacks
SNetWarnings	def/def/defrSettings.hpp	/^    int SNetWarnings;$/;"	m	class:defrSettings
SNetWireCbk	def/def/defrCallBacks.hpp	/^    defrNetCbkFnType SNetWireCbk;$/;"	m	class:defrCallbacks
START_LIST	def/def/defiDefs.hpp	78;"	d
START_LIST	lef/include/lefiDefs.hpp	78;"	d
START_LIST	lef/lef/lefiDefs.hpp	78;"	d
STOP_PARSE	def/cdef/defrReader.h	662;"	d
STOP_PARSE	def/def/defrReader.hpp	711;"	d
STOP_PARSE	lef/clef/lefrReader.h	506;"	d
STOP_PARSE	lef/include/lefrReader.h	506;"	d
STOP_PARSE	lef/include/lefrReader.hpp	579;"	d
STOP_PARSE	lef/lef/lefrReader.hpp	579;"	d
ScanChainExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType ScanChainExtCbk;$/;"	m	class:defrCallbacks
Scanchain	def/def/defrData.hpp	/^    defiScanchain Scanchain;$/;"	m	class:defrData
ScanchainCbk	def/def/defrCallBacks.hpp	/^    defrScanchainCbkFnType ScanchainCbk;$/;"	m	class:defrCallbacks
ScanchainWarnings	def/def/defrSettings.hpp	/^    int ScanchainWarnings;$/;"	m	class:defrSettings
ScanchainsEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType ScanchainsEndCbk;$/;"	m	class:defrCallbacks
ScanchainsStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType ScanchainsStartCbk;$/;"	m	class:defrCallbacks
SetLogFunction	lef/include/lefrSettings.hpp	/^    LEFI_LOG_FUNCTION SetLogFunction;$/;"	m	class:lefrSettings
SetLogFunction	lef/lef/lefrSettings.hpp	/^    LEFI_LOG_FUNCTION SetLogFunction;$/;"	m	class:lefrSettings
SetUnusedCallbacks	def/def/defrCallbacks.cpp	/^defrCallbacks::SetUnusedCallbacks(defrVoidCbkFnType f)$/;"	f	class:defrCallbacks
Setup	def/def/defiPinCap.cpp	/^void defiPin::Setup(const char* pinName, const char* netName) {$/;"	f	class:defiPin
ShiftCase	lef/include/lefrSettings.hpp	/^    int ShiftCase;$/;"	m	class:lefrSettings
ShiftCase	lef/lef/lefrSettings.hpp	/^    int ShiftCase;$/;"	m	class:lefrSettings
Site	def/def/defrData.hpp	/^    defiSite Site;$/;"	m	class:defrData
SiteCbk	def/def/defrCallBacks.hpp	/^    defrSiteCbkFnType SiteCbk;$/;"	m	class:defrCallbacks
SiteCbk	lef/include/lefrCallBacks.hpp	/^    lefrSiteCbkFnType SiteCbk;$/;"	m	class:lefrCallbacks
SiteCbk	lef/lef/lefrCallBacks.hpp	/^    lefrSiteCbkFnType SiteCbk;$/;"	m	class:lefrCallbacks
SiteWarnings	lef/include/lefrSettings.hpp	/^    int SiteWarnings;$/;"	m	class:lefrSettings
SiteWarnings	lef/lef/lefrSettings.hpp	/^    int SiteWarnings;$/;"	m	class:lefrSettings
Slot	def/def/defrData.hpp	/^    defiSlot Slot;$/;"	m	class:defrData
SlotCbk	def/def/defrCallBacks.hpp	/^    defrSlotCbkFnType SlotCbk;$/;"	m	class:defrCallbacks
SlotEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType SlotEndCbk;$/;"	m	class:defrCallbacks
SlotStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType SlotStartCbk;$/;"	m	class:defrCallbacks
SpacingBeginCbk	lef/include/lefrCallBacks.hpp	/^    lefrVoidCbkFnType SpacingBeginCbk;$/;"	m	class:lefrCallbacks
SpacingBeginCbk	lef/lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType SpacingBeginCbk;$/;"	m	class:lefrCallbacks
SpacingCbk	lef/include/lefrCallBacks.hpp	/^    lefrSpacingCbkFnType SpacingCbk;$/;"	m	class:lefrCallbacks
SpacingCbk	lef/lef/lefrCallBacks.hpp	/^    lefrSpacingCbkFnType SpacingCbk;$/;"	m	class:lefrCallbacks
SpacingEndCbk	lef/include/lefrCallBacks.hpp	/^    lefrVoidCbkFnType SpacingEndCbk;$/;"	m	class:lefrCallbacks
SpacingEndCbk	lef/lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType SpacingEndCbk;$/;"	m	class:lefrCallbacks
SpacingWarnings	lef/include/lefrSettings.hpp	/^    int SpacingWarnings;$/;"	m	class:lefrSettings
SpacingWarnings	lef/lef/lefrSettings.hpp	/^    int SpacingWarnings;$/;"	m	class:lefrSettings
StartPinsCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType StartPinsCbk;$/;"	m	class:defrCallbacks
StoreAlias	def/def/def_keywords.cpp	/^defrData::StoreAlias()$/;"	f	class:defrData
StringSet	lef/include/lefrSettings.hpp	/^typedef std::set<std::string>               StringSet;$/;"	t
StringSet	lef/lef/lefrSettings.hpp	/^typedef std::set<std::string>               StringSet;$/;"	t
Styles	def/def/defrData.hpp	/^    defiStyles Styles;$/;"	m	class:defrData
StylesCbk	def/def/defrCallBacks.hpp	/^    defrStylesCbkFnType StylesCbk;$/;"	m	class:defrCallbacks
StylesEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType StylesEndCbk;$/;"	m	class:defrCallbacks
StylesStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType StylesStartCbk;$/;"	m	class:defrCallbacks
StylesWarnings	def/def/defrSettings.hpp	/^    int StylesWarnings;$/;"	m	class:defrSettings
Subnet	def/def/defrData.hpp	/^    defiSubnet* Subnet;$/;"	m	class:defrData
TEST_FILE	def/TEST/Makefile	/^TEST_FILE = complete.5.8.def$/;"	m
TEST_FILE	lef/TEST/Makefile	/^TEST_FILE = complete.5.8.lef$/;"	m
TEST_GOLD	def/TEST/Makefile	/^TEST_GOLD = complete.5.8.def.au$/;"	m
TEST_GOLD	lef/TEST/Makefile	/^TEST_GOLD = complete.5.8.lef.au$/;"	m
TMP1	def/template.mk	/^TMP1	=	$(LIBSRCS:.cpp=.o)$/;"	m
TMP1	lef/template.mk	/^TMP1	=	$(LIBSRCS:.cpp=.o)$/;"	m
TMP2	def/template.mk	/^TMP2	=	$(TMP1:.cc=.o)$/;"	m
TMP2	lef/template.mk	/^TMP2	=	$(TMP1:.cc=.o)$/;"	m
TMP3	def/template.mk	/^TMP3	=	$(BINSRCS:.cpp=.o)$/;"	m
TMP3	lef/template.mk	/^TMP3	=	$(BINSRCS:.cpp=.o)$/;"	m
TMP4	def/template.mk	/^TMP4	=	$(TMP3:.cc=.o)$/;"	m
TMP4	lef/template.mk	/^TMP4	=	$(TMP3:.cc=.o)$/;"	m
TOKEN_SIZE	def/def/defrData.hpp	45;"	d
TOKEN_SIZE	lef/include/lefrData.hpp	56;"	d
TOKEN_SIZE	lef/lef/lefrData.hpp	56;"	d
TRUE	def/def/defiDefs.hpp	45;"	d
TRUE	lef/include/lefiDefs.hpp	45;"	d
TRUE	lef/lef/lefiDefs.hpp	45;"	d
TSIZE	def/cdef/defMsgTable.h	10;"	d
TSIZE	def/cdef/defMsgTable.h	11;"	d
TSIZE	lef/clef/lefMsgTable.h	10;"	d
TSIZE	lef/clef/lefMsgTable.h	11;"	d
T_STRING	lef/lef/lef.tab.cpp	/^    T_STRING = 425,$/;"	e	enum:yytokentype	file:
T_STRING	lef/lef/lef.tab.h	/^    T_STRING = 425,$/;"	e	enum:yytokentype
TechnologyCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType TechnologyCbk;$/;"	m	class:defrCallbacks
TimingCbk	lef/include/lefrCallBacks.hpp	/^    lefrTimingCbkFnType TimingCbk;$/;"	m	class:lefrCallbacks
TimingCbk	lef/lef/lefrCallBacks.hpp	/^    lefrTimingCbkFnType TimingCbk;$/;"	m	class:lefrCallbacks
TimingDisable	def/def/defrData.hpp	/^    defiTimingDisable TimingDisable;$/;"	m	class:defrData
TimingDisableCbk	def/def/defrCallBacks.hpp	/^    defrTimingDisableCbkFnType TimingDisableCbk;$/;"	m	class:defrCallbacks
TimingDisablesEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType TimingDisablesEndCbk;$/;"	m	class:defrCallbacks
TimingDisablesStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType TimingDisablesStartCbk;$/;"	m	class:defrCallbacks
TimingWarnings	lef/include/lefrSettings.hpp	/^    int TimingWarnings;$/;"	m	class:lefrSettings
TimingWarnings	lef/lef/lefrSettings.hpp	/^    int TimingWarnings;$/;"	m	class:lefrSettings
TotalMsgLimit	lef/include/lefrSettings.hpp	/^    int TotalMsgLimit;$/;"	m	class:lefrSettings
TotalMsgLimit	lef/lef/lefrSettings.hpp	/^    int TotalMsgLimit;$/;"	m	class:lefrSettings
Track	def/def/defrData.hpp	/^    defiTrack Track;$/;"	m	class:defrData
TrackCbk	def/def/defrCallBacks.hpp	/^    defrTrackCbkFnType TrackCbk;$/;"	m	class:defrCallbacks
TrackWarnings	def/def/defrSettings.hpp	/^    int TrackWarnings;$/;"	m	class:defrSettings
UMINUS	lef/lef/lef.tab.cpp	/^    UMINUS = 682$/;"	e	enum:yytokentype	file:
UMINUS	lef/lef/lef.tab.h	/^    UMINUS = 682$/;"	e	enum:yytokentype
UNGETC	def/def/def_keywords.cpp	/^defrData::UNGETC(char ch) {$/;"	f	class:defrData
UNlefGetc	lef/lef/lef_keywords.cpp	/^UNlefGetc(char ch)$/;"	f
USE_LEFDEF_PARSER_NAMESPACE	def/def/defiKRDefs.hpp	35;"	d
USE_LEFDEF_PARSER_NAMESPACE	lef/include/lefiKRDefs.hpp	35;"	d
USE_LEFDEF_PARSER_NAMESPACE	lef/lef/lefiKRDefs.hpp	35;"	d
UnitsCbk	def/def/defrCallBacks.hpp	/^    defrDoubleCbkFnType UnitsCbk;$/;"	m	class:defrCallbacks
UnitsCbk	lef/include/lefrCallBacks.hpp	/^    lefrUnitsCbkFnType UnitsCbk;$/;"	m	class:lefrCallbacks
UnitsCbk	lef/lef/lefrCallBacks.hpp	/^    lefrUnitsCbkFnType UnitsCbk;$/;"	m	class:lefrCallbacks
UnitsWarnings	def/def/defrSettings.hpp	/^    int UnitsWarnings;$/;"	m	class:defrSettings
UnitsWarnings	lef/include/lefrSettings.hpp	/^    int UnitsWarnings;$/;"	m	class:lefrSettings
UnitsWarnings	lef/lef/lefrSettings.hpp	/^    int UnitsWarnings;$/;"	m	class:lefrSettings
UnusedCallbacks	def/def/defrSettings.hpp	/^    int UnusedCallbacks[CBMAX];$/;"	m	class:defrSettings
UseMinSpacingCbk	lef/include/lefrCallBacks.hpp	/^    lefrUseMinSpacingCbkFnType UseMinSpacingCbk;$/;"	m	class:lefrCallbacks
UseMinSpacingCbk	lef/lef/lefrCallBacks.hpp	/^    lefrUseMinSpacingCbkFnType UseMinSpacingCbk;$/;"	m	class:lefrCallbacks
UseMinSpacingWarnings	lef/include/lefrSettings.hpp	/^    int UseMinSpacingWarnings;$/;"	m	class:lefrSettings
UseMinSpacingWarnings	lef/lef/lefrSettings.hpp	/^    int UseMinSpacingWarnings;$/;"	m	class:lefrSettings
UserData	def/def/defrSettings.hpp	/^    defiUserData    UserData;$/;"	m	class:defrSession
UserData	lef/include/lefrSettings.hpp	/^    lefiUserData UserData;$/;"	m	class:lefrSettings
UserData	lef/lef/lefrSettings.hpp	/^    lefiUserData UserData;$/;"	m	class:lefrSettings
VHI	lef/lef/lefiMacro.cpp	/^lefiPin::VHI() const$/;"	f	class:lefiPin
VHI_	lef/include/lefiMacro.hpp	/^  double VHI_;$/;"	m	class:lefiPin
VHI_	lef/lef/lefiMacro.hpp	/^  double VHI_;$/;"	m	class:lefiPin
VIA_SPEC	def/def/defiDefs.hpp	80;"	d
VIA_SPEC	lef/include/lefiDefs.hpp	80;"	d
VIA_SPEC	lef/lef/lefiDefs.hpp	80;"	d
VLO	lef/lef/lefiMacro.cpp	/^lefiPin::VLO() const$/;"	f	class:lefiPin
VLO_	lef/include/lefiMacro.hpp	/^  double VLO_;$/;"	m	class:lefiPin
VLO_	lef/lef/lefiMacro.hpp	/^  double VLO_;$/;"	m	class:lefiPin
VersionCbk	def/def/defrCallBacks.hpp	/^    defrDoubleCbkFnType VersionCbk;$/;"	m	class:defrCallbacks
VersionCbk	lef/include/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType VersionCbk;$/;"	m	class:lefrCallbacks
VersionCbk	lef/lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType VersionCbk;$/;"	m	class:lefrCallbacks
VersionIdent	def/defdiff/differDef.cpp	/^char* VersionIdent = "N\/A";$/;"	v
VersionIdent	lef/lefdiff/differLef.cpp	/^char* VersionIdent = "N\/A";$/;"	v
VersionNum	def/def/defrData.hpp	/^    double VersionNum;$/;"	m	class:defrData
VersionNum	lef/include/lefrSettings.hpp	/^    double VersionNum;$/;"	m	class:lefrSettings
VersionNum	lef/lef/lefrSettings.hpp	/^    double VersionNum;$/;"	m	class:lefrSettings
VersionStrCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType VersionStrCbk;$/;"	m	class:defrCallbacks
VersionStrCbk	lef/include/lefrCallBacks.hpp	/^    lefrStringCbkFnType VersionStrCbk;$/;"	m	class:lefrCallbacks
VersionStrCbk	lef/lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType VersionStrCbk;$/;"	m	class:lefrCallbacks
VersionWarnings	def/def/defrSettings.hpp	/^    int VersionWarnings;$/;"	m	class:defrSettings
Via	def/def/defrData.hpp	/^    defiVia Via;$/;"	m	class:defrData
ViaCbk	def/def/defrCallBacks.hpp	/^    defrViaCbkFnType ViaCbk;$/;"	m	class:defrCallbacks
ViaCbk	lef/include/lefrCallBacks.hpp	/^    lefrViaCbkFnType ViaCbk;$/;"	m	class:lefrCallbacks
ViaCbk	lef/lef/lefrCallBacks.hpp	/^    lefrViaCbkFnType ViaCbk;$/;"	m	class:lefrCallbacks
ViaEndCbk	def/def/defrCallBacks.hpp	/^    defrVoidCbkFnType ViaEndCbk;$/;"	m	class:defrCallbacks
ViaExtCbk	def/def/defrCallBacks.hpp	/^    defrStringCbkFnType ViaExtCbk;$/;"	m	class:defrCallbacks
ViaRuleCbk	lef/include/lefrCallBacks.hpp	/^    lefrViaRuleCbkFnType ViaRuleCbk;$/;"	m	class:lefrCallbacks
ViaRuleCbk	lef/lef/lefrCallBacks.hpp	/^    lefrViaRuleCbkFnType ViaRuleCbk;$/;"	m	class:lefrCallbacks
ViaRuleWarnings	lef/include/lefrSettings.hpp	/^    int ViaRuleWarnings;$/;"	m	class:lefrSettings
ViaRuleWarnings	lef/lef/lefrSettings.hpp	/^    int ViaRuleWarnings;$/;"	m	class:lefrSettings
ViaStartCbk	def/def/defrCallBacks.hpp	/^    defrIntegerCbkFnType ViaStartCbk;$/;"	m	class:defrCallbacks
ViaWarnings	def/def/defrSettings.hpp	/^    int ViaWarnings;$/;"	m	class:defrSettings
ViaWarnings	lef/include/lefrSettings.hpp	/^    int ViaWarnings;$/;"	m	class:lefrSettings
ViaWarnings	lef/lef/lefrSettings.hpp	/^    int ViaWarnings;$/;"	m	class:lefrSettings
WIDTH_SPEC	def/def/defiDefs.hpp	81;"	d
WIDTH_SPEC	lef/include/lefiDefs.hpp	81;"	d
WIDTH_SPEC	lef/lef/lefiDefs.hpp	81;"	d
WRITER_CALLBACK	def/def/defwWriterCalls.cpp	103;"	d	file:
WRITER_CALLBACK	lef/lef/lefwWriterCalls.cpp	85;"	d	file:
WarningLogFunction	def/def/defrSettings.hpp	/^    DEFI_WARNING_LOG_FUNCTION WarningLogFunction;$/;"	m	class:defrSettings
WarningLogFunction	lef/include/lefrSettings.hpp	/^    LEFI_WARNING_LOG_FUNCTION WarningLogFunction;$/;"	m	class:lefrSettings
WarningLogFunction	lef/lef/lefrSettings.hpp	/^    LEFI_WARNING_LOG_FUNCTION WarningLogFunction;$/;"	m	class:lefrSettings
XTalk	def/def/defiNet.cpp	/^int defiNet::XTalk() const {$/;"	f	class:defiNet
YYABORT	lef/lef/lef.tab.cpp	2927;"	d	file:
YYACCEPT	lef/lef/lef.tab.cpp	2926;"	d	file:
YYBACKUP	lef/lef/lef.tab.cpp	2933;"	d	file:
YYBISON	lef/lef/lef.tab.cpp	44;"	d	file:
YYBISON_VERSION	lef/lef/lef.tab.cpp	47;"	d	file:
YYCASE_	lef/lef/lef.tab.cpp	3274;"	d	file:
YYCASE_	lef/lef/lef.tab.cpp	3284;"	d	file:
YYCOPY	lef/lef/lef.tab.cpp	931;"	d	file:
YYCOPY	lef/lef/lef.tab.cpp	934;"	d	file:
YYCOPY_NEEDED	lef/lef/lef.tab.cpp	906;"	d	file:
YYDEBUG	lef/lef/lef.tab.cpp	239;"	d	file:
YYDEBUG	lef/lef/lef.tab.h	37;"	d
YYDPRINTF	lef/lef/lef.tab.cpp	2964;"	d	file:
YYDPRINTF	lef/lef/lef.tab.cpp	3079;"	d	file:
YYEMPTY	lef/lef/lef.tab.cpp	2923;"	d	file:
YYEOF	lef/lef/lef.tab.cpp	2924;"	d	file:
YYERRCODE	lef/lef/lef.tab.cpp	2952;"	d	file:
YYERROR	lef/lef/lef.tab.cpp	2928;"	d	file:
YYERROR_VERBOSE	lef/lef/lef.tab.cpp	227;"	d	file:
YYERROR_VERBOSE	lef/lef/lef.tab.cpp	228;"	d	file:
YYERROR_VERBOSE	lef/lef/lef.tab.cpp	230;"	d	file:
YYFINAL	lef/lef/lef.tab.cpp	947;"	d	file:
YYFPRINTF	lef/lef/lef.tab.cpp	2961;"	d	file:
YYFREE	lef/lef/lef.tab.cpp	877;"	d	file:
YYINITDEPTH	lef/lef/lef.tab.cpp	3088;"	d	file:
YYINITDEPTH	lef/lef/lef.tab.cpp	92;"	d	file:
YYLAST	lef/lef/lef.tab.cpp	949;"	d	file:
YYMALLOC	lef/lef/lef.tab.cpp	871;"	d	file:
YYMAXDEPTH	lef/lef/lef.tab.cpp	105;"	d	file:
YYMAXDEPTH	lef/lef/lef.tab.cpp	3099;"	d	file:
YYMAXUTOK	lef/lef/lef.tab.cpp	963;"	d	file:
YYNNTS	lef/lef/lef.tab.cpp	954;"	d	file:
YYNRULES	lef/lef/lef.tab.cpp	956;"	d	file:
YYNSTATES	lef/lef/lef.tab.cpp	958;"	d	file:
YYNTOKENS	lef/lef/lef.tab.cpp	952;"	d	file:
YYPACT_NINF	lef/lef/lef.tab.cpp	1409;"	d	file:
YYPOPSTACK	lef/lef/lef.tab.cpp	3399;"	d	file:
YYPULL	lef/lef/lef.tab.cpp	59;"	d	file:
YYPURE	lef/lef/lef.tab.cpp	53;"	d	file:
YYPUSH	lef/lef/lef.tab.cpp	56;"	d	file:
YYRECOVERING	lef/lef/lef.tab.cpp	2931;"	d	file:
YYSIZE_MAXIMUM	lef/lef/lef.tab.cpp	750;"	d	file:
YYSIZE_T	lef/lef/lef.tab.cpp	739;"	d	file:
YYSIZE_T	lef/lef/lef.tab.cpp	741;"	d	file:
YYSIZE_T	lef/lef/lef.tab.cpp	744;"	d	file:
YYSIZE_T	lef/lef/lef.tab.cpp	746;"	d	file:
YYSKELETON_NAME	lef/lef/lef.tab.cpp	50;"	d	file:
YYSTACK_ALLOC	lef/lef/lef.tab.cpp	825;"	d	file:
YYSTACK_ALLOC	lef/lef/lef.tab.cpp	829;"	d	file:
YYSTACK_ALLOC	lef/lef/lef.tab.cpp	834;"	d	file:
YYSTACK_ALLOC	lef/lef/lef.tab.cpp	857;"	d	file:
YYSTACK_ALLOC_MAXIMUM	lef/lef/lef.tab.cpp	854;"	d	file:
YYSTACK_ALLOC_MAXIMUM	lef/lef/lef.tab.cpp	860;"	d	file:
YYSTACK_BYTES	lef/lef/lef.tab.cpp	902;"	d	file:
YYSTACK_FREE	lef/lef/lef.tab.cpp	848;"	d	file:
YYSTACK_FREE	lef/lef/lef.tab.cpp	858;"	d	file:
YYSTACK_GAP_MAXIMUM	lef/lef/lef.tab.cpp	898;"	d	file:
YYSTACK_RELOCATE	lef/lef/lef.tab.cpp	913;"	d	file:
YYSTYPE	def/def/defrData.hpp	/^} YYSTYPE;$/;"	t	typeref:union:__anon17
YYSTYPE	lef/lef/lef.tab.cpp	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	lef/lef/lef.tab.cpp	/^union YYSTYPE$/;"	u	file:
YYSTYPE	lef/lef/lef.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	lef/lef/lef.tab.h	/^union YYSTYPE$/;"	u
YYSTYPE_IS_DECLARED	def/def/defrData.hpp	70;"	d
YYSTYPE_IS_DECLARED	lef/lef/lef.tab.cpp	695;"	d	file:
YYSTYPE_IS_DECLARED	lef/lef/lef.tab.h	493;"	d
YYSTYPE_IS_TRIVIAL	lef/lef/lef.tab.cpp	694;"	d	file:
YYSTYPE_IS_TRIVIAL	lef/lef/lef.tab.h	492;"	d
YYTABLE_NINF	lef/lef/lef.tab.cpp	1414;"	d	file:
YYTERROR	lef/lef/lef.tab.cpp	2951;"	d	file:
YYTOKENTYPE	lef/lef/lef.tab.cpp	247;"	d	file:
YYTOKENTYPE	lef/lef/lef.tab.h	45;"	d
YYTRANSLATE	lef/lef/lef.tab.cpp	965;"	d	file:
YYUNDEFTOK	lef/lef/lef.tab.cpp	962;"	d	file:
YYUSE	lef/lef/lef.tab.cpp	793;"	d	file:
YYUSE	lef/lef/lef.tab.cpp	795;"	d	file:
YY_	lef/lef/lef.tab.cpp	756;"	d	file:
YY_	lef/lef/lef.tab.cpp	760;"	d	file:
YY_ATTRIBUTE	lef/lef/lef.tab.cpp	768;"	d	file:
YY_ATTRIBUTE	lef/lef/lef.tab.cpp	770;"	d	file:
YY_ATTRIBUTE_PURE	lef/lef/lef.tab.cpp	775;"	d	file:
YY_ATTRIBUTE_UNUSED	lef/lef/lef.tab.cpp	779;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	lef/lef/lef.tab.cpp	800;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	lef/lef/lef.tab.cpp	810;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	lef/lef/lef.tab.cpp	804;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	lef/lef/lef.tab.cpp	811;"	d	file:
YY_INITIAL_VALUE	lef/lef/lef.tab.cpp	807;"	d	file:
YY_INITIAL_VALUE	lef/lef/lef.tab.cpp	814;"	d	file:
YY_LEFYY_LEF_TAB_H_INCLUDED	lef/lef/lef.tab.cpp	236;"	d	file:
YY_LEFYY_LEF_TAB_H_INCLUDED	lef/lef/lef.tab.h	34;"	d
YY_LOCATION_PRINT	lef/lef/lef.tab.cpp	2972;"	d	file:
YY_NULLPTR	lef/lef/lef.tab.cpp	219;"	d	file:
YY_NULLPTR	lef/lef/lef.tab.cpp	221;"	d	file:
YY_REDUCE_PRINT	lef/lef/lef.tab.cpp	3069;"	d	file:
YY_REDUCE_PRINT	lef/lef/lef.tab.cpp	3082;"	d	file:
YY_STACK_PRINT	lef/lef/lef.tab.cpp	3038;"	d	file:
YY_STACK_PRINT	lef/lef/lef.tab.cpp	3081;"	d	file:
YY_SYMBOL_PRINT	lef/lef/lef.tab.cpp	2976;"	d	file:
YY_SYMBOL_PRINT	lef/lef/lef.tab.cpp	3080;"	d	file:
_Noreturn	lef/lef/lef.tab.cpp	785;"	d	file:
_Noreturn	lef/lef/lef.tab.cpp	787;"	d	file:
aOxide	def/def/defrData.hpp	/^    int  aOxide; \/\/ keep track for oxide$/;"	m	class:defrData
ac_layer_table_opt	lef/lef/lef.y	/^ac_layer_table_opt:  \/\/ empty $/;"	l
accurrent	lef/lef/lefiLayer.cpp	/^lefiLayer::accurrent(int index) const$/;"	f	class:lefiLayer
accurrentAllocated_	lef/include/lefiLayer.hpp	/^  int accurrentAllocated_;$/;"	m	class:lefiLayer
accurrentAllocated_	lef/lef/lefiLayer.hpp	/^  int accurrentAllocated_;$/;"	m	class:lefiLayer
accurrents_	lef/include/lefiLayer.hpp	/^  lefiLayerDensity** accurrents_;$/;"	m	class:lefiLayer
accurrents_	lef/lef/lefiLayer.hpp	/^  lefiLayerDensity** accurrents_;$/;"	m	class:lefiLayer
ad	def/def/defiPartition.cpp	/^static char* ad(const char* in) {$/;"	f	file:
add	lef/lef/lefiMisc.cpp	/^lefiGeometries::add(void            *v,$/;"	f	class:lefiGeometries
addAPinDiffArea	def/def/defiPinCap.cpp	/^void defiPin::addAPinDiffArea(int value, const char* layer) {$/;"	f	class:defiPin
addAPinGateArea	def/def/defiPinCap.cpp	/^void defiPin::addAPinGateArea(int value, const char* layer) {$/;"	f	class:defiPin
addAPinGateArea	def/def/defiPinCap.cpp	/^void defiPinAntennaModel::addAPinGateArea(int value, const char* layer) {$/;"	f	class:defiPinAntennaModel
addAPinMaxAreaCar	def/def/defiPinCap.cpp	/^void defiPin::addAPinMaxAreaCar(int value, const char* layer) {$/;"	f	class:defiPin
addAPinMaxAreaCar	def/def/defiPinCap.cpp	/^void defiPinAntennaModel::addAPinMaxAreaCar(int value, const char* layer) {$/;"	f	class:defiPinAntennaModel
addAPinMaxCutCar	def/def/defiPinCap.cpp	/^void defiPin::addAPinMaxCutCar(int value, const char* layer) {$/;"	f	class:defiPin
addAPinMaxCutCar	def/def/defiPinCap.cpp	/^void defiPinAntennaModel::addAPinMaxCutCar(int value, const char* layer) {$/;"	f	class:defiPinAntennaModel
addAPinMaxSideAreaCar	def/def/defiPinCap.cpp	/^void defiPin::addAPinMaxSideAreaCar(int value, const char* layer) {$/;"	f	class:defiPin
addAPinMaxSideAreaCar	def/def/defiPinCap.cpp	/^void defiPinAntennaModel::addAPinMaxSideAreaCar(int value, const char* layer) {$/;"	f	class:defiPinAntennaModel
addAPinPartialCutArea	def/def/defiPinCap.cpp	/^void defiPin::addAPinPartialCutArea(int value, const char* layer) {$/;"	f	class:defiPin
addAPinPartialMetalArea	def/def/defiPinCap.cpp	/^void defiPin::addAPinPartialMetalArea(int value, const char* layer) {$/;"	f	class:defiPin
addAPinPartialMetalSideArea	def/def/defiPinCap.cpp	/^void defiPin::addAPinPartialMetalSideArea(int value, const char* layer) {$/;"	f	class:defiPin
addAcCutarea	lef/lef/lefiLayer.cpp	/^lefiLayer::addAcCutarea()$/;"	f	class:lefiLayer
addAcFrequency	lef/lef/lefiLayer.cpp	/^lefiLayer::addAcFrequency()$/;"	f	class:lefiLayer
addAcTableEntry	lef/lef/lefiLayer.cpp	/^lefiLayer::addAcTableEntry()$/;"	f	class:lefiLayer
addAcWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::addAcWidth()$/;"	f	class:lefiLayer
addAccurrentDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::addAccurrentDensity(const char *type)$/;"	f	class:lefiLayer
addAntennaDiffArea	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaDiffArea(double      val,$/;"	f	class:lefiPin
addAntennaGateArea	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaGateArea(double      val,$/;"	f	class:lefiPin
addAntennaGateArea	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::addAntennaGateArea(double      val,$/;"	f	class:lefiPinAntennaModel
addAntennaMaxAreaCar	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaMaxAreaCar(double        val,$/;"	f	class:lefiPin
addAntennaMaxAreaCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::addAntennaMaxAreaCar(double        val,$/;"	f	class:lefiPinAntennaModel
addAntennaMaxCutCar	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaMaxCutCar(double     val,$/;"	f	class:lefiPin
addAntennaMaxCutCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::addAntennaMaxCutCar(double     val,$/;"	f	class:lefiPinAntennaModel
addAntennaMaxSideAreaCar	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaMaxSideAreaCar(double        val,$/;"	f	class:lefiPin
addAntennaMaxSideAreaCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::addAntennaMaxSideAreaCar(double        val,$/;"	f	class:lefiPinAntennaModel
addAntennaMetalArea	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaMetalArea(double     val,$/;"	f	class:lefiPin
addAntennaMetalLength	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaMetalLength(double       val,$/;"	f	class:lefiPin
addAntennaModel	def/def/defiPinCap.cpp	/^void defiPin::addAntennaModel(int oxide) {$/;"	f	class:defiPin
addAntennaModel	lef/lef/lefiLayer.cpp	/^lefiLayer::addAntennaModel(int aOxide)$/;"	f	class:lefiLayer
addAntennaModel	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaModel(int oxide)$/;"	f	class:lefiPin
addAntennaPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::addAntennaPWL(double    d,$/;"	f	class:lefiAntennaPWL
addAntennaPartialCutArea	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaPartialCutArea(double        val,$/;"	f	class:lefiPin
addAntennaPartialMetalArea	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaPartialMetalArea(double      val,$/;"	f	class:lefiPin
addAntennaPartialMetalSideArea	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaPartialMetalSideArea(double      val,$/;"	f	class:lefiPin
addAntennaSize	lef/lef/lefiMacro.cpp	/^lefiPin::addAntennaSize(double      val,$/;"	f	class:lefiPin
addArraySpacingArray	lef/lef/lefiLayer.cpp	/^lefiLayer::addArraySpacingArray(int     arrayCut,$/;"	f	class:lefiLayer
addCanPlace	lef/lef/lefiArray.cpp	/^lefiArray::addCanPlace(lefiSitePattern *s)$/;"	f	class:lefiArray
addCannotOccupy	lef/lef/lefiArray.cpp	/^lefiArray::addCannotOccupy(lefiSitePattern *s)$/;"	f	class:lefiArray
addCapacitance	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addCapacitance(double num)$/;"	f	class:lefiNonDefault
addClass	lef/lef/lefiMisc.cpp	/^lefiGeometries::addClass(const char *name)$/;"	f	class:lefiGeometries
addComps	def/def/defiFPC.cpp	/^void defiFPC::addComps(const char* name) {$/;"	f	class:defiFPC
addCutPattern	def/def/defiVia.cpp	/^void defiVia::addCutPattern(char* cutPattern) {$/;"	f	class:defiVia
addCutarea	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::addCutarea(int    num,$/;"	f	class:lefiLayerDensity
addDcCutarea	lef/lef/lefiLayer.cpp	/^lefiLayer::addDcCutarea()$/;"	f	class:lefiLayer
addDcTableEntry	lef/lef/lefiLayer.cpp	/^lefiLayer::addDcTableEntry()$/;"	f	class:lefiLayer
addDcWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::addDcWidth()$/;"	f	class:lefiLayer
addDccurrentDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::addDccurrentDensity(const char *type)$/;"	f	class:lefiLayer
addDefaultCap	lef/lef/lefiArray.cpp	/^lefiArray::addDefaultCap(int    minPins,$/;"	f	class:lefiArray
addDelay	lef/lef/lefiMacro.cpp	/^lefiTiming::addDelay(const char *risefall,$/;"	f	class:lefiTiming
addDiagWidth	def/def/defiNonDefault.cpp	/^void defiNonDefault::addDiagWidth(double num) { $/;"	f	class:defiNonDefault
addDiagWidth	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addDiagWidth(double num)$/;"	f	class:lefiNonDefault
addEdge	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addEdge(double d)$/;"	f	class:lefiCorrectionEdge
addEdge	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addEdge(double d)$/;"	f	class:lefiCorrectionTable
addEdge	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addEdge(double d)$/;"	f	class:lefiNoiseEdge
addEdge	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addEdge(double d)$/;"	f	class:lefiNoiseTable
addEdgeCap	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addEdgeCap(double num)$/;"	f	class:lefiNonDefault
addEnclosure	lef/lef/lefiLayer.cpp	/^lefiLayer::addEnclosure(char    *enclRule,$/;"	f	class:lefiLayer
addEnclosureExceptEC	lef/lef/lefiLayer.cpp	/^lefiLayer::addEnclosureExceptEC(double cutWithin)$/;"	f	class:lefiLayer
addEnclosureLength	lef/lef/lefiLayer.cpp	/^lefiLayer::addEnclosureLength(double minLength)$/;"	f	class:lefiLayer
addEnclosureWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::addEnclosureWidth(double minWidth)$/;"	f	class:lefiLayer
addFallMax	def/def/defiPartition.cpp	/^void defiPartition::addFallMax(double d) {$/;"	f	class:defiPartition
addFallMaxRange	def/def/defiPartition.cpp	/^void defiPartition::addFallMaxRange(double l, double h) {$/;"	f	class:defiPartition
addFallMin	def/def/defiPartition.cpp	/^void defiPartition::addFallMin(double d) {$/;"	f	class:defiPartition
addFallMinRange	def/def/defiPartition.cpp	/^void defiPartition::addFallMinRange(double l, double h) {$/;"	f	class:defiPartition
addFloatingIn	def/def/defiScanchain.cpp	/^void defiScanchain::addFloatingIn(const char* name) {$/;"	f	class:defiScanchain
addFloatingInst	def/def/defiScanchain.cpp	/^void defiScanchain::addFloatingInst(const char* name) {$/;"	f	class:defiScanchain
addFloatingOut	def/def/defiScanchain.cpp	/^void defiScanchain::addFloatingOut(const char* name) {$/;"	f	class:defiScanchain
addFloorPlan	lef/lef/lefiArray.cpp	/^lefiArray::addFloorPlan(const char *name)$/;"	f	class:lefiArray
addFlushPoint	def/def/defiPath.cpp	/^void defiPath::addFlushPoint(int x, int y, int ext) {$/;"	f	class:defiPath
addForeign	lef/lef/lefiMacro.cpp	/^lefiMacro::addForeign(const char    *name,$/;"	f	class:lefiMacro
addForeign	lef/lef/lefiMacro.cpp	/^lefiPin::addForeign(const char  *name,$/;"	f	class:lefiPin
addFrequency	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::addFrequency(int      num,$/;"	f	class:lefiLayerDensity
addFromPin	lef/lef/lefiMacro.cpp	/^lefiTiming::addFromPin(const char *name)$/;"	f	class:lefiTiming
addGcell	lef/lef/lefiArray.cpp	/^lefiArray::addGcell(lefiGcellPattern *g)$/;"	f	class:lefiArray
addIn	def/def/defiScanchain.cpp	/^void defiOrdered::addIn(const char* pin) {$/;"	f	class:defiOrdered
addInfluence	lef/lef/lefiLayer.cpp	/^lefiInfluence::addInfluence(double  width,$/;"	f	class:lefiInfluence
addInfluence	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::addInfluence(double   width,$/;"	f	class:lefiSpacingTable
addItem	def/def/defiFPC.cpp	/^void defiFPC::addItem(char item, const char* name) {$/;"	f	class:defiFPC
addLayer	def/def/defiNonDefault.cpp	/^void defiNonDefault::addLayer(const char* name) { $/;"	f	class:defiNonDefault
addLayer	def/def/defiPath.cpp	/^void defiPath::addLayer(const char* l) {$/;"	f	class:defiPath
addLayer	def/def/defiPinCap.cpp	/^void defiPin::addLayer(const char* layer) {$/;"	f	class:defiPin
addLayer	def/def/defiPinCap.cpp	/^void defiPinPort::addLayer(const char* layer) {$/;"	f	class:defiPinPort
addLayer	def/def/defiRowTrack.cpp	/^void defiTrack::addLayer(const char* layer) {$/;"	f	class:defiTrack
addLayer	def/def/defiVia.cpp	/^void defiVia::addLayer(const char* layer, int xl, int yl, int xh, int yh, int colorMask) {$/;"	f	class:defiVia
addLayer	lef/lef/lefiMacro.cpp	/^lefiDensity::addLayer(const char *name)$/;"	f	class:lefiDensity
addLayer	lef/lef/lefiMisc.cpp	/^lefiGeometries::addLayer(const char *name)$/;"	f	class:lefiGeometries
addLayer	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::addLayer(const char *name)$/;"	f	class:lefiTrackPattern
addLayer	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addLayer(const char *name)$/;"	f	class:lefiNonDefault
addLayer	lef/lef/lefiVia.cpp	/^lefiVia::addLayer(const char *name)$/;"	f	class:lefiVia
addLayerDesignRuleWidth	def/def/defiPinCap.cpp	/^void defiPin::addLayerDesignRuleWidth(int effectiveWidth) {$/;"	f	class:defiPin
addLayerDesignRuleWidth	def/def/defiPinCap.cpp	/^void defiPinPort::addLayerDesignRuleWidth(int effectiveWidth) {$/;"	f	class:defiPinPort
addLayerExceptPgNet	lef/lef/lefiMisc.cpp	/^lefiGeometries::addLayerExceptPgNet()$/;"	f	class:lefiGeometries
addLayerMask	def/def/defiPinCap.cpp	/^void defiPin::addLayerMask(int mask) {$/;"	f	class:defiPin
addLayerMask	def/def/defiPinCap.cpp	/^void defiPinPort::addLayerMask(int mask) {$/;"	f	class:defiPinPort
addLayerMinSpacing	lef/lef/lefiMisc.cpp	/^lefiGeometries::addLayerMinSpacing(double spacing)$/;"	f	class:lefiGeometries
addLayerPts	def/def/defiPinCap.cpp	/^void defiPin::addLayerPts(int xl, int yl, int xh, int yh) {$/;"	f	class:defiPin
addLayerPts	def/def/defiPinCap.cpp	/^void defiPinPort::addLayerPts(int xl, int yl, int xh, int yh) {$/;"	f	class:defiPinPort
addLayerRuleWidth	lef/lef/lefiMisc.cpp	/^lefiGeometries::addLayerRuleWidth(double width)$/;"	f	class:lefiGeometries
addLayerSpacing	def/def/defiPinCap.cpp	/^void defiPin::addLayerSpacing(int minSpacing) {$/;"	f	class:defiPin
addLayerSpacing	def/def/defiPinCap.cpp	/^void defiPinPort::addLayerSpacing(int minSpacing) {$/;"	f	class:defiPinPort
addLef58Type	lef/lef/lefrSettings.cpp	/^lefrSettings::addLef58Type(const char *lef58Type, $/;"	f	class:lefrSettings
addMask	def/def/defiPath.cpp	/^void defiPath::addMask(int colorMask) {$/;"	f	class:defiPath
addMask	def/def/defiRowTrack.cpp	/^void defiTrack::addMask(int colorMask, int sameMask) {$/;"	f	class:defiTrack
addMaskShiftLayer	def/def/defiComponent.cpp	/^void defiComponentMaskShiftLayer::addMaskShiftLayer(const char* layer) {$/;"	f	class:defiComponentMaskShiftLayer
addMinCuts	def/def/defiNonDefault.cpp	/^void defiNonDefault::addMinCuts(const char* name, int numCuts) {$/;"	f	class:defiNonDefault
addMinCuts	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addMinCuts(const char   *name,$/;"	f	class:lefiNonDefault
addMinenclosedarea	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinenclosedarea(double area)$/;"	f	class:lefiLayer
addMinenclosedareaWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinenclosedareaWidth(double width)$/;"	f	class:lefiLayer
addMinimumcut	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinimumcut(int    mincut,$/;"	f	class:lefiLayer
addMinimumcutConnect	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinimumcutConnect(const char *connectType)$/;"	f	class:lefiLayer
addMinimumcutLengDis	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinimumcutLengDis(double  length,$/;"	f	class:lefiLayer
addMinimumcutWithin	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinimumcutWithin(double cutDistance)$/;"	f	class:lefiLayer
addMinstep	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinstep(double distance)$/;"	f	class:lefiLayer
addMinstepLengthsum	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinstepLengthsum(double maxLength)$/;"	f	class:lefiLayer
addMinstepMaxedges	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinstepMaxedges(int maxEdges)$/;"	f	class:lefiLayer
addMinstepMinAdjLength	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinstepMinAdjLength(double adjLength)$/;"	f	class:lefiLayer
addMinstepMinBetLength	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinstepMinBetLength(double betLength)$/;"	f	class:lefiLayer
addMinstepType	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinstepType(char *type)$/;"	f	class:lefiLayer
addMinstepXSameCorners	lef/lef/lefiLayer.cpp	/^lefiLayer::addMinstepXSameCorners()$/;"	f	class:lefiLayer
addMustPin	def/def/defiNet.cpp	/^void defiNet::addMustPin(const char* instance, const char* pin, int syn) {$/;"	f	class:defiNet
addMustPin	def/def/defiNet.cpp	/^void defiSubnet::addMustPin(const char* instance, const char* pin, int syn) {$/;"	f	class:defiSubnet
addNet	def/def/defiAssertion.cpp	/^void defiAssertion::addNet(const char* name) {$/;"	f	class:defiAssertion
addNet	def/def/defiComponent.cpp	/^void defiComponent::addNet(const char* net) {$/;"	f	class:defiComponent
addNoShield	def/def/defiNet.cpp	/^void defiNet::addNoShield(const char* name) {$/;"	f	class:defiNet
addNumProp	def/def/defiNet.cpp	/^void defiNet::addNumProp(const char* name, const double d,$/;"	f	class:defiNet
addNumProp	lef/lef/lefiLayer.cpp	/^lefiLayer::addNumProp(const char    *name,$/;"	f	class:lefiLayer
addNumProp	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addNumProp(const char   *name,$/;"	f	class:lefiNonDefault
addNumProp	lef/lef/lefiVia.cpp	/^lefiVia::addNumProp(const char  *name,$/;"	f	class:lefiVia
addNumProp	lef/lef/lefiViaRule.cpp	/^lefiViaRule::addNumProp(const char      *name,$/;"	f	class:lefiViaRule
addNumProperty	def/def/defiComponent.cpp	/^void defiComponent::addNumProperty(const char* name, const double d,$/;"	f	class:defiComponent
addNumProperty	def/def/defiGroup.cpp	/^void defiGroup::addNumProperty(const char* name, const double d,$/;"	f	class:defiGroup
addNumProperty	def/def/defiNonDefault.cpp	/^void defiNonDefault::addNumProperty(const char* name, const double d,$/;"	f	class:defiNonDefault
addNumProperty	def/def/defiPinProp.cpp	/^void defiPinProp::addNumProperty(const char* name, const double d,$/;"	f	class:defiPinProp
addNumProperty	def/def/defiRegion.cpp	/^void defiRegion::addNumProperty(const char* name, const double d,$/;"	f	class:defiRegion
addNumProperty	def/def/defiRowTrack.cpp	/^void defiRow::addNumProperty(const char* name, const double d,$/;"	f	class:defiRow
addNumber	lef/lef/lefiLayer.cpp	/^lefiLayer::addNumber(double num)$/;"	f	class:lefiLayer
addOffset	def/def/defiVia.cpp	/^void defiVia::addOffset(int xBotOs, int yBotOs, int xTopOs, int yTopOs) {$/;"	f	class:defiVia
addOrdered	def/def/defiScanchain.cpp	/^void defiOrdered::addOrdered(const char* inst) {$/;"	f	class:defiOrdered
addOrderedIn	def/def/defiScanchain.cpp	/^void defiScanchain::addOrderedIn(const char* name) {$/;"	f	class:defiScanchain
addOrderedInst	def/def/defiScanchain.cpp	/^void defiScanchain::addOrderedInst(const char* name) {$/;"	f	class:defiScanchain
addOrderedList	def/def/defiScanchain.cpp	/^void defiScanchain::addOrderedList() {$/;"	f	class:defiScanchain
addOrderedOut	def/def/defiScanchain.cpp	/^void defiScanchain::addOrderedOut(const char* name) {$/;"	f	class:defiScanchain
addOrigin	def/def/defiVia.cpp	/^void defiVia::addOrigin(int xOffset, int yOffset) {$/;"	f	class:defiVia
addOrthogonal	lef/lef/lefiLayer.cpp	/^lefiOrthogonal::addOrthogonal(double    cutWithin,$/;"	f	class:lefiOrthogonal
addOut	def/def/defiScanchain.cpp	/^void defiOrdered::addOut(const char* pin) {$/;"	f	class:defiOrdered
addParallelLength	lef/lef/lefiLayer.cpp	/^lefiParallel::addParallelLength(int     numLength,$/;"	f	class:lefiParallel
addParallelLength	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::addParallelLength(int     numLength,$/;"	f	class:lefiSpacingTable
addParallelWidth	lef/lef/lefiLayer.cpp	/^lefiParallel::addParallelWidth(double width)$/;"	f	class:lefiParallel
addParallelWidth	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::addParallelWidth(double width)$/;"	f	class:lefiSpacingTable
addParallelWidthSpacing	lef/lef/lefiLayer.cpp	/^lefiParallel::addParallelWidthSpacing(int       numSpacing,$/;"	f	class:lefiParallel
addParallelWidthSpacing	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::addParallelWidthSpacing(int       numSpacing,$/;"	f	class:lefiSpacingTable
addPath	def/def/defiAssertion.cpp	/^void defiAssertion::addPath(const char* fromInst, const char* fromPin,$/;"	f	class:defiAssertion
addPath	def/def/defiNet.cpp	/^void defiShield::addPath(defiPath* p, int reset, int netOsnet, int *needCbk) {$/;"	f	class:defiShield
addPath	def/def/defiNet.cpp	/^void defiSubnet::addPath(defiPath* p, int reset, int netOsnet, int *needCbk) {$/;"	f	class:defiSubnet
addPath	def/def/defiNet.cpp	/^void defiWire::addPath(defiPath* p, int reset, int netOsnet, int *needCbk) {$/;"	f	class:defiWire
addPath	lef/lef/lefiMisc.cpp	/^lefiGeometries::addPath(int colorMask)$/;"	f	class:lefiGeometries
addPathIter	lef/lef/lefiMisc.cpp	/^lefiGeometries::addPathIter(int colorMask)$/;"	f	class:lefiGeometries
addPattern	def/def/defiVia.cpp	/^void defiVia::addPattern(const char* pattern) {$/;"	f	class:defiVia
addPin	def/def/defiNet.cpp	/^void defiNet::addPin(const char* instance, const char* pin, int syn) {$/;"	f	class:defiNet
addPin	def/def/defiNet.cpp	/^void defiSubnet::addPin(const char* instance, const char* pin, int syn) {$/;"	f	class:defiSubnet
addPin	def/def/defiPartition.cpp	/^void defiPartition::addPin(const char* name) {$/;"	f	class:defiPartition
addPoint	def/def/defiPath.cpp	/^void defiPath::addPoint(int x, int y) {$/;"	f	class:defiPath
addPoint	def/def/defiSite.cpp	/^void defiBox::addPoint(defiGeometries* geom) {$/;"	f	class:defiBox
addPoly	lef/lef/lefiVia.cpp	/^lefiViaLayer::addPoly(int               colorMask,$/;"	f	class:lefiViaLayer
addPolyDesignRuleWidth	def/def/defiPinCap.cpp	/^void defiPin::addPolyDesignRuleWidth(int effectiveWidth) {$/;"	f	class:defiPin
addPolyDesignRuleWidth	def/def/defiPinCap.cpp	/^void defiPinPort::addPolyDesignRuleWidth(int effectiveWidth) {$/;"	f	class:defiPinPort
addPolyMask	def/def/defiPinCap.cpp	/^void defiPin::addPolyMask(int color) {$/;"	f	class:defiPin
addPolyMask	def/def/defiPinCap.cpp	/^void defiPinPort::addPolyMask(int color) {$/;"	f	class:defiPinPort
addPolySpacing	def/def/defiPinCap.cpp	/^void defiPin::addPolySpacing(int minSpacing) {$/;"	f	class:defiPin
addPolySpacing	def/def/defiPinCap.cpp	/^void defiPinPort::addPolySpacing(int minSpacing) {$/;"	f	class:defiPinPort
addPolyToLayer	lef/lef/lefiVia.cpp	/^lefiVia::addPolyToLayer(int             mask,$/;"	f	class:lefiVia
addPolygon	def/def/defiBlockage.cpp	/^void defiBlockage::addPolygon(defiGeometries* geom) {$/;"	f	class:defiBlockage
addPolygon	def/def/defiFill.cpp	/^void defiFill::addPolygon(defiGeometries* geom) {$/;"	f	class:defiFill
addPolygon	def/def/defiNet.cpp	/^void defiNet::addPolygon(const char* layerName, defiGeometries* geom,$/;"	f	class:defiNet
addPolygon	def/def/defiPinCap.cpp	/^void defiPin::addPolygon(const char* layerName) {$/;"	f	class:defiPin
addPolygon	def/def/defiPinCap.cpp	/^void defiPinPort::addPolygon(const char* layerName) {$/;"	f	class:defiPinPort
addPolygon	def/def/defiSlot.cpp	/^void defiSlot::addPolygon(defiGeometries* geom) {$/;"	f	class:defiSlot
addPolygon	def/def/defiVia.cpp	/^void defiVia::addPolygon(const char* layer, defiGeometries* geom, int colorMask) {$/;"	f	class:defiVia
addPolygon	lef/lef/lefiMisc.cpp	/^lefiGeometries::addPolygon(int colorMask)$/;"	f	class:lefiGeometries
addPolygonIter	lef/lef/lefiMisc.cpp	/^lefiGeometries::addPolygonIter(int colorMask)$/;"	f	class:lefiGeometries
addPolygonPts	def/def/defiPinCap.cpp	/^void defiPin::addPolygonPts(defiGeometries* geom) {$/;"	f	class:defiPin
addPolygonPts	def/def/defiPinCap.cpp	/^void defiPinPort::addPolygonPts(defiGeometries* geom) {$/;"	f	class:defiPinPort
addPort	def/def/defiPinCap.cpp	/^void defiPin::addPort() {$/;"	f	class:defiPin
addPort	lef/lef/lefiMacro.cpp	/^lefiPin::addPort(lefiGeometries *g)$/;"	f	class:lefiPin
addPortLayer	def/def/defiPinCap.cpp	/^void defiPin::addPortLayer(const char* layer) {$/;"	f	class:defiPin
addPortLayerDesignRuleWidth	def/def/defiPinCap.cpp	/^void defiPin::addPortLayerDesignRuleWidth(int effectiveWidth) {$/;"	f	class:defiPin
addPortLayerMask	def/def/defiPinCap.cpp	/^void defiPin::addPortLayerMask(int color) {$/;"	f	class:defiPin
addPortLayerPts	def/def/defiPinCap.cpp	/^void defiPin::addPortLayerPts(int xl, int yl, int xh, int yh) {$/;"	f	class:defiPin
addPortLayerSpacing	def/def/defiPinCap.cpp	/^void defiPin::addPortLayerSpacing(int minSpacing) {$/;"	f	class:defiPin
addPortPolyDesignRuleWidth	def/def/defiPinCap.cpp	/^void defiPin::addPortPolyDesignRuleWidth(int effectiveWidth) {$/;"	f	class:defiPin
addPortPolyMask	def/def/defiPinCap.cpp	/^void defiPin::addPortPolyMask(int color) {$/;"	f	class:defiPin
addPortPolySpacing	def/def/defiPinCap.cpp	/^void defiPin::addPortPolySpacing(int minSpacing) {$/;"	f	class:defiPin
addPortPolygon	def/def/defiPinCap.cpp	/^void defiPin::addPortPolygon(const char* layerName) {$/;"	f	class:defiPin
addPortPolygonPts	def/def/defiPinCap.cpp	/^void defiPin::addPortPolygonPts(defiGeometries* geom) {$/;"	f	class:defiPin
addPortVia	def/def/defiPinCap.cpp	/^void defiPin::addPortVia(const char* via, int viaX, int viaY, int color) {$/;"	f	class:defiPin
addPreferEnclosure	lef/lef/lefiLayer.cpp	/^lefiLayer::addPreferEnclosure(char      *enclRule,$/;"	f	class:lefiLayer
addPreferEnclosureWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::addPreferEnclosureWidth(double minWidth)$/;"	f	class:lefiLayer
addProp	def/def/defiNet.cpp	/^void defiNet::addProp(const char* name, const char* value, const char type) {$/;"	f	class:defiNet
addProp	lef/lef/lefiLayer.cpp	/^lefiLayer::addProp(const char   *name,$/;"	f	class:lefiLayer
addProp	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addProp(const char  *name,$/;"	f	class:lefiNonDefault
addProp	lef/lef/lefiVia.cpp	/^lefiVia::addProp(const char *name,$/;"	f	class:lefiVia
addProp	lef/lef/lefiViaRule.cpp	/^lefiViaRule::addProp(const char *name,$/;"	f	class:lefiViaRule
addProperty	def/def/defiComponent.cpp	/^void defiComponent::addProperty(const char* name, const char* value,$/;"	f	class:defiComponent
addProperty	def/def/defiGroup.cpp	/^void defiGroup::addProperty(const char* name, const char* value,$/;"	f	class:defiGroup
addProperty	def/def/defiNonDefault.cpp	/^void defiNonDefault::addProperty(const char* name, const char* value,$/;"	f	class:defiNonDefault
addProperty	def/def/defiPinProp.cpp	/^void defiPinProp::addProperty(const char* name, const char* value,$/;"	f	class:defiPinProp
addProperty	def/def/defiRegion.cpp	/^void defiRegion::addProperty(const char* name, const char* value,$/;"	f	class:defiRegion
addProperty	def/def/defiRowTrack.cpp	/^void defiRow::addProperty(const char* name, const char* value, const char type) $/;"	f	class:defiRow
addPts	def/def/defiFill.cpp	/^void defiFill::addPts(defiGeometries* geom) {$/;"	f	class:defiFill
addPts	def/def/defiNet.cpp	/^void defiNet::addPts(const char* viaName, int o, defiGeometries* geom, $/;"	f	class:defiNet
addRect	def/def/defiBlockage.cpp	/^void defiBlockage::addRect(int xl, int yl, int xh, int yh) {$/;"	f	class:defiBlockage
addRect	def/def/defiFill.cpp	/^void defiFill::addRect(int xl, int yl, int xh, int yh) {$/;"	f	class:defiFill
addRect	def/def/defiNet.cpp	/^void defiNet::addRect(const char* layerName, int xl, int yl, int xh, int yh,$/;"	f	class:defiNet
addRect	def/def/defiRegion.cpp	/^void defiRegion::addRect(int xl, int yl, int xh, int yh) {$/;"	f	class:defiRegion
addRect	def/def/defiSlot.cpp	/^void defiSlot::addRect(int xl, int yl, int xh, int yh) {$/;"	f	class:defiSlot
addRect	lef/lef/lefiMacro.cpp	/^lefiDensity::addRect(double x1,$/;"	f	class:lefiDensity
addRect	lef/lef/lefiMisc.cpp	/^lefiGeometries::addRect(int     colorMask,$/;"	f	class:lefiGeometries
addRect	lef/lef/lefiVia.cpp	/^lefiViaLayer::addRect(int       colorMask,$/;"	f	class:lefiViaLayer
addRectIter	lef/lef/lefiMisc.cpp	/^lefiGeometries::addRectIter(int     colorMask,$/;"	f	class:lefiGeometries
addRectToLayer	lef/lef/lefiVia.cpp	/^lefiVia::addRectToLayer(int     mask,$/;"	f	class:lefiVia
addRegionRect	def/def/defiGroup.cpp	/^void defiGroup::addRegionRect(int xl, int yl, int xh, int yh) {$/;"	f	class:defiGroup
addResistance	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addResistance()$/;"	f	class:lefiCorrectionEdge
addResistance	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addResistance()$/;"	f	class:lefiCorrectionTable
addResistance	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addResistance()$/;"	f	class:lefiNoiseEdge
addResistance	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addResistance()$/;"	f	class:lefiNoiseTable
addResistance	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addResistance(double num)$/;"	f	class:lefiNonDefault
addResistanceNumber	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addResistanceNumber(double d)$/;"	f	class:lefiCorrectionEdge
addResistanceNumber	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::addResistanceNumber(double d)$/;"	f	class:lefiCorrectionResistance
addResistanceNumber	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addResistanceNumber(double d)$/;"	f	class:lefiCorrectionTable
addResistanceNumber	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addResistanceNumber(double d)$/;"	f	class:lefiNoiseEdge
addResistanceNumber	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::addResistanceNumber(double d)$/;"	f	class:lefiNoiseResistance
addResistanceNumber	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addResistanceNumber(double d)$/;"	f	class:lefiNoiseTable
addRiseFall	lef/lef/lefiMacro.cpp	/^lefiTiming::addRiseFall(const char  *risefall,$/;"	f	class:lefiTiming
addRiseFallSlew	lef/lef/lefiMacro.cpp	/^lefiTiming::addRiseFallSlew(double  one,$/;"	f	class:lefiTiming
addRiseFallSlew2	lef/lef/lefiMacro.cpp	/^lefiTiming::addRiseFallSlew2(double one,$/;"	f	class:lefiTiming
addRiseFallVariable	lef/lef/lefiMacro.cpp	/^lefiTiming::addRiseFallVariable(double  one,$/;"	f	class:lefiTiming
addRiseMax	def/def/defiPartition.cpp	/^void defiPartition::addRiseMax(double d) {$/;"	f	class:defiPartition
addRiseMaxRange	def/def/defiPartition.cpp	/^void defiPartition::addRiseMaxRange(double l, double h) {$/;"	f	class:defiPartition
addRiseMin	def/def/defiPartition.cpp	/^void defiPartition::addRiseMin(double d) {$/;"	f	class:defiPartition
addRiseMinRange	def/def/defiPartition.cpp	/^void defiPartition::addRiseMinRange(double l, double h) {$/;"	f	class:defiPartition
addRow	def/def/defiFPC.cpp	/^void defiFPC::addRow(const char* name) {$/;"	f	class:defiFPC
addRowCol	def/def/defiVia.cpp	/^void defiVia::addRowCol(int numCutRows, int numCutCols) {$/;"	f	class:defiVia
addRowPattern	lef/lef/lefiMisc.cpp	/^lefiSite::addRowPattern(const char  *name,$/;"	f	class:lefiSite
addSDF1Pin	lef/lef/lefiMacro.cpp	/^lefiTiming::addSDF1Pin(const char   *trigType,$/;"	f	class:lefiTiming
addSDF2Pins	lef/lef/lefiMacro.cpp	/^lefiTiming::addSDF2Pins(const char  *trigType,$/;"	f	class:lefiTiming
addShape	def/def/defiPath.cpp	/^void defiPath::addShape(const char* l) {$/;"	f	class:defiPath
addShield	def/def/defiNet.cpp	/^void defiNet::addShield(const char* name) {$/;"	f	class:defiNet
addShieldNet	def/def/defiNet.cpp	/^void defiNet::addShieldNet(const char* name) {$/;"	f	class:defiNet
addShieldPath	def/def/defiNet.cpp	/^void defiNet::addShieldPath(defiPath* p, int reset, int netOsnet, int *needCbk) {$/;"	f	class:defiNet
addSitePattern	lef/lef/lefiArray.cpp	/^lefiArray::addSitePattern(lefiSitePattern *s)$/;"	f	class:lefiArray
addSitePattern	lef/lef/lefiArray.cpp	/^lefiArrayFloorPlan::addSitePattern(const char       *typ,$/;"	f	class:lefiArrayFloorPlan
addSiteToFloorPlan	lef/lef/lefiArray.cpp	/^lefiArray::addSiteToFloorPlan(const char        *typ,$/;"	f	class:lefiArray
addSpInfluence	lef/lef/lefiLayer.cpp	/^lefiLayer::addSpInfluence(double    width,$/;"	f	class:lefiLayer
addSpParallelLength	lef/lef/lefiLayer.cpp	/^lefiLayer::addSpParallelLength()$/;"	f	class:lefiLayer
addSpParallelWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::addSpParallelWidth(double width)$/;"	f	class:lefiLayer
addSpParallelWidthSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::addSpParallelWidthSpacing()$/;"	f	class:lefiLayer
addSpTwoWidths	lef/lef/lefiLayer.cpp	/^lefiLayer::addSpTwoWidths(double    width,$/;"	f	class:lefiLayer
addSpacing	def/def/defiNonDefault.cpp	/^void defiNonDefault::addSpacing(double num) { $/;"	f	class:defiNonDefault
addSpacing	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addSpacing(double num)$/;"	f	class:lefiNonDefault
addSpacingRule	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addSpacingRule(lefiSpacing *s)$/;"	f	class:lefiNonDefault
addSpacingTable	lef/lef/lefiLayer.cpp	/^lefiLayer::addSpacingTable()$/;"	f	class:lefiLayer
addSpacingTableOrthoWithin	lef/lef/lefiLayer.cpp	/^lefiLayer::addSpacingTableOrthoWithin(double    cutWithin,$/;"	f	class:lefiLayer
addStepPattern	lef/lef/lefiMisc.cpp	/^lefiGeometries::addStepPattern(double   xStart,$/;"	f	class:lefiGeometries
addStyle	def/def/defiPath.cpp	/^void defiPath::addStyle(int s) {$/;"	f	class:defiPath
addSubnet	def/def/defiNet.cpp	/^void defiNet::addSubnet(defiSubnet* subnet) {$/;"	f	class:defiNet
addTableAxisNumber	lef/lef/lefiMacro.cpp	/^lefiTiming::addTableAxisNumber(double one)$/;"	f	class:lefiTiming
addTableEntry	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::addTableEntry(int     num,$/;"	f	class:lefiLayerDensity
addTableEntry	lef/lef/lefiMacro.cpp	/^lefiTiming::addTableEntry(double    one,$/;"	f	class:lefiTiming
addTaperRule	def/def/defiPath.cpp	/^void defiPath::addTaperRule(const char* l) {$/;"	f	class:defiPath
addToList	def/def/defiMisc.cpp	/^void defiGeometries::addToList(int x, int y) {$/;"	f	class:defiGeometries
addToList	lef/lef/lefiMisc.cpp	/^lefiGeometries::addToList(double    x,$/;"	f	class:lefiGeometries
addToPin	lef/lef/lefiMacro.cpp	/^lefiTiming::addToPin(const char *name)$/;"	f	class:lefiTiming
addTrack	lef/lef/lefiArray.cpp	/^lefiArray::addTrack(lefiTrackPattern *t)$/;"	f	class:lefiArray
addTransition	lef/lef/lefiMacro.cpp	/^lefiTiming::addTransition(const char    *risefall,$/;"	f	class:lefiTiming
addTurnOff	def/def/defiPartition.cpp	/^void defiPartition::addTurnOff(const char* setup, const char* hold) {$/;"	f	class:defiPartition
addTwoWidths	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::addTwoWidths(double   width,$/;"	f	class:lefiSpacingTable
addTwoWidths	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::addTwoWidths(double  width,$/;"	f	class:lefiTwoWidths
addUnateness	lef/lef/lefiMacro.cpp	/^lefiTiming::addUnateness(const char *typ)$/;"	f	class:lefiTiming
addUseVia	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addUseVia(const char *name)$/;"	f	class:lefiNonDefault
addUseViaRule	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addUseViaRule(const char *name)$/;"	f	class:lefiNonDefault
addVia	def/def/defiNonDefault.cpp	/^void defiNonDefault::addVia(const char* name) {$/;"	f	class:defiNonDefault
addVia	def/def/defiPath.cpp	/^void defiPath::addVia(const char* l) {$/;"	f	class:defiPath
addVia	def/def/defiPinCap.cpp	/^void defiPin::addVia(const char* viaName, int ptX, int ptY, int color) {$/;"	f	class:defiPin
addVia	def/def/defiPinCap.cpp	/^void defiPinPort::addVia(const char* viaName, int ptX, int ptY, int color) {$/;"	f	class:defiPinPort
addVia	lef/lef/lefiMisc.cpp	/^lefiGeometries::addVia(int          viaMask,$/;"	f	class:lefiGeometries
addViaData	def/def/defiPath.cpp	/^void defiPath::addViaData(int numX, int numY, int stepX, int stepY) {$/;"	f	class:defiPath
addViaIter	lef/lef/lefiMisc.cpp	/^lefiGeometries::addViaIter(int          viaMask,$/;"	f	class:lefiGeometries
addViaMask	def/def/defiPath.cpp	/^void defiPath::addViaMask(int colorMask) {$/;"	f	class:defiPath
addViaName	lef/lef/lefiViaRule.cpp	/^lefiViaRule::addViaName(const char *name)$/;"	f	class:lefiViaRule
addViaRect	def/def/defiPath.cpp	/^void defiPath::addViaRect(int deltaX1, int deltaY1, int deltaX2, int deltaY2) {$/;"	f	class:defiPath
addViaRotation	def/def/defiPath.cpp	/^void defiPath::addViaRotation(int o) {$/;"	f	class:defiPath
addViaRule	def/def/defiNonDefault.cpp	/^void defiNonDefault::addViaRule(const char* name) {$/;"	f	class:defiNonDefault
addViaRule	def/def/defiVia.cpp	/^void defiVia::addViaRule(char* viaRuleName, int xSize, int ySize,$/;"	f	class:defiVia
addViaRule	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addViaRule(lefiVia *v)$/;"	f	class:lefiNonDefault
addVictimCorrection	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addVictimCorrection(double d)$/;"	f	class:lefiCorrectionEdge
addVictimCorrection	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::addVictimCorrection(double d)$/;"	f	class:lefiCorrectionResistance
addVictimCorrection	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addVictimCorrection(double d)$/;"	f	class:lefiCorrectionTable
addVictimCorrection	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::addVictimCorrection(double d)$/;"	f	class:lefiCorrectionVictim
addVictimLength	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addVictimLength(double d)$/;"	f	class:lefiCorrectionEdge
addVictimLength	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::addVictimLength(double d)$/;"	f	class:lefiCorrectionResistance
addVictimLength	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addVictimLength(double d)$/;"	f	class:lefiCorrectionTable
addVictimLength	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addVictimLength(double d)$/;"	f	class:lefiNoiseEdge
addVictimLength	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::addVictimLength(double d)$/;"	f	class:lefiNoiseResistance
addVictimLength	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addVictimLength(double d)$/;"	f	class:lefiNoiseTable
addVictimNoise	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addVictimNoise(double d)$/;"	f	class:lefiNoiseEdge
addVictimNoise	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::addVictimNoise(double d)$/;"	f	class:lefiNoiseResistance
addVictimNoise	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addVictimNoise(double d)$/;"	f	class:lefiNoiseTable
addVictimNoise	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::addVictimNoise(double d)$/;"	f	class:lefiNoiseVictim
addVirtualPoint	def/def/defiPath.cpp	/^void defiPath::addVirtualPoint(int x, int y) {$/;"	f	class:defiPath
addVpin	def/def/defiNet.cpp	/^void defiNet::addVpin(const char* name) {$/;"	f	class:defiNet
addVpinBounds	def/def/defiNet.cpp	/^void defiNet::addVpinBounds(int xl, int yl, int xh, int yh) {$/;"	f	class:defiNet
addVpinLayer	def/def/defiNet.cpp	/^void defiNet::addVpinLayer(const char* name) {$/;"	f	class:defiNet
addVpinLoc	def/def/defiNet.cpp	/^void defiNet::addVpinLoc(const char* status, int x, int y, int orient) {$/;"	f	class:defiNet
addWidth	def/def/defiNonDefault.cpp	/^void defiNonDefault::addWidth(double num) { $/;"	f	class:defiNonDefault
addWidth	def/def/defiPath.cpp	/^void defiPath::addWidth(int w) {$/;"	f	class:defiPath
addWidth	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::addWidth(int      num,$/;"	f	class:lefiLayerDensity
addWidth	lef/lef/lefiMisc.cpp	/^lefiGeometries::addWidth(double w)$/;"	f	class:lefiGeometries
addWidth	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addWidth(double num)$/;"	f	class:lefiNonDefault
addWire	def/def/defiNet.cpp	/^void defiNet::addWire(const char* type, const char* wireShieldName) {$/;"	f	class:defiNet
addWire	def/def/defiNet.cpp	/^void defiSubnet::addWire(const char* type) {$/;"	f	class:defiSubnet
addWireExt	def/def/defiNonDefault.cpp	/^void defiNonDefault::addWireExt(double num) { $/;"	f	class:defiNonDefault
addWireExtension	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::addWireExtension(double num)$/;"	f	class:lefiNonDefault
addWirePath	def/def/defiNet.cpp	/^void defiNet::addWirePath(defiPath* p, int reset, int netOsnet, int *needCbk) {$/;"	f	class:defiNet
addWirePath	def/def/defiNet.cpp	/^void defiSubnet::addWirePath(defiPath* p, int reset, int netOsnet, int *needCbk) {$/;"	f	class:defiSubnet
address	def/defdiff/diffDefRW.cpp	/^char* address(const char* in) {$/;"	f
address	def/defrw/defrw.cpp	/^char* address(const char* in) {$/;"	f
alias_set	lef/include/lefrData.hpp	/^    lefStringMap        alias_set; $/;"	m	class:lefrData
alias_set	lef/lef/lefrData.hpp	/^    lefStringMap        alias_set; $/;"	m	class:lefrData
alignMax	def/def/defiFPC.cpp	/^double defiFPC::alignMax() const {$/;"	f	class:defiFPC
alignMin	def/def/defiFPC.cpp	/^double defiFPC::alignMin() const {$/;"	f	class:defiFPC
alloca	lef/lef/lef.tab.cpp	832;"	d	file:
allocatedMinCuts_	lef/include/lefiNonDefault.hpp	/^  int    allocatedMinCuts_;        \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedMinCuts_	lef/lef/lefiNonDefault.hpp	/^  int    allocatedMinCuts_;        \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedSpacing_	lef/include/lefiNonDefault.hpp	/^  int allocatedSpacing_;$/;"	m	class:lefiNonDefault
allocatedSpacing_	lef/lef/lefiNonDefault.hpp	/^  int allocatedSpacing_;$/;"	m	class:lefiNonDefault
allocatedUseViaRules_	lef/include/lefiNonDefault.hpp	/^  int    allocatedUseViaRules_;    \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedUseViaRules_	lef/lef/lefiNonDefault.hpp	/^  int    allocatedUseViaRules_;    \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedUseVias_	lef/include/lefiNonDefault.hpp	/^  int    allocatedUseVias_;        \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedUseVias_	lef/lef/lefiNonDefault.hpp	/^  int    allocatedUseVias_;        \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedVias_	lef/include/lefiNonDefault.hpp	/^  int allocatedVias_;$/;"	m	class:lefiNonDefault
allocatedVias_	lef/lef/lefiNonDefault.hpp	/^  int allocatedVias_;$/;"	m	class:lefiNonDefault
allocated_	def/def/defiScanchain.hpp	/^  int allocated_;$/;"	m	class:defiOrdered
amper_lookup	def/def/def_keywords.cpp	/^defrData::amper_lookup(YYSTYPE *pYylval, char *tkn)$/;"	f	class:defrData
an	def/defrw/defrw.cpp	/^int an(defrCallbackType_e c, const char* h, defiUserData ud) {$/;"	f
antennaArea	lef/lef/lefiLayer.cpp	/^lefiLayer::antennaArea() const$/;"	f	class:lefiLayer
antennaAreaDiffReducePWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaAreaDiffReducePWL() const$/;"	f	class:lefiAntennaModel
antennaAreaDiffReducePWL_	lef/include/lefiLayer.hpp	/^  lefiAntennaPWL* antennaAreaDiffReducePWL_;    \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaAreaDiffReducePWL_	lef/lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaAreaDiffReducePWL_;    \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaAreaFactor	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaAreaFactor() const$/;"	f	class:lefiAntennaModel
antennaAreaFactor_	lef/include/lefiLayer.hpp	/^  double antennaAreaFactor_;$/;"	m	class:lefiAntennaModel
antennaAreaFactor_	lef/lef/lefiLayer.hpp	/^  double antennaAreaFactor_;$/;"	m	class:lefiAntennaModel
antennaAreaMinusDiff	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaAreaMinusDiff() const$/;"	f	class:lefiAntennaModel
antennaAreaMinusDiff_	lef/include/lefiLayer.hpp	/^  double antennaAreaMinusDiff_;                 \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaAreaMinusDiff_	lef/lef/lefiLayer.hpp	/^  double antennaAreaMinusDiff_;                 \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaAreaRatio_	lef/include/lefiLayer.hpp	/^  double antennaAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaAreaRatio_	lef/lef/lefiLayer.hpp	/^  double antennaAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaArea_	lef/include/lefiLayer.hpp	/^  double antennaArea_;$/;"	m	class:lefiLayer
antennaArea_	lef/lef/lefiLayer.hpp	/^  double antennaArea_;$/;"	m	class:lefiLayer
antennaCB	lef/lefdiff/diffLefRW.cpp	/^int antennaCB(lefrCallbackType_e c, double value, lefiUserData ud) {$/;"	f
antennaCB	lef/lefrw/lefrw.cpp	/^int antennaCB(lefrCallbackType_e c, double value, lefiUserData) {$/;"	f
antennaCB	lef/lefwrite/lefwriteCbs.cpp	/^int antennaCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
antennaCumAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaCumAreaRatio_	lef/include/lefiLayer.hpp	/^  double antennaCumAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumAreaRatio_	lef/lef/lefiLayer.hpp	/^  double antennaCumAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumDiffAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumDiffAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaCumDiffAreaRatioPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumDiffAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
antennaCumDiffAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  lefiAntennaPWL* antennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaCumDiffAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaCumDiffAreaRatio_	lef/include/lefiLayer.hpp	/^  double antennaCumDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumDiffAreaRatio_	lef/lef/lefiLayer.hpp	/^  double antennaCumDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumDiffSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumDiffSideAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaCumDiffSideAreaRatioPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumDiffSideAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
antennaCumDiffSideAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  lefiAntennaPWL* antennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaCumDiffSideAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaCumDiffSideAreaRatio_	lef/include/lefiLayer.hpp	/^  double antennaCumDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumDiffSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  double antennaCumDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumSideAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaCumSideAreaRatio_	lef/include/lefiLayer.hpp	/^  double antennaCumSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  double antennaCumSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaDiffArea	lef/lef/lefiMacro.cpp	/^lefiPin::antennaDiffArea(int i) const$/;"	f	class:lefiPin
antennaDiffAreaAllocated_	lef/include/lefiMacro.hpp	/^  int antennaDiffAreaAllocated_;$/;"	m	class:lefiPin
antennaDiffAreaAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaDiffAreaAllocated_;$/;"	m	class:lefiPin
antennaDiffAreaLayer	lef/lef/lefiMacro.cpp	/^lefiPin::antennaDiffAreaLayer(int i) const$/;"	f	class:lefiPin
antennaDiffAreaLayer_	lef/include/lefiMacro.hpp	/^  char** antennaDiffAreaLayer_;$/;"	m	class:lefiPin
antennaDiffAreaLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaDiffAreaLayer_;$/;"	m	class:lefiPin
antennaDiffAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaDiffAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaDiffAreaRatioPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaDiffAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
antennaDiffAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  lefiAntennaPWL* antennaDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaDiffAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaDiffAreaRatio_	lef/include/lefiLayer.hpp	/^  double antennaDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaDiffAreaRatio_	lef/lef/lefiLayer.hpp	/^  double antennaDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaDiffArea_	lef/include/lefiMacro.hpp	/^  double* antennaDiffArea_;$/;"	m	class:lefiPin
antennaDiffArea_	lef/lef/lefiMacro.hpp	/^  double* antennaDiffArea_;$/;"	m	class:lefiPin
antennaDiffSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaDiffSideAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaDiffSideAreaRatioPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaDiffSideAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
antennaDiffSideAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  lefiAntennaPWL* antennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaDiffSideAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaDiffSideAreaRatio_	lef/include/lefiLayer.hpp	/^  double antennaDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaDiffSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  double antennaDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaGateArea	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaGateArea(int i) const$/;"	f	class:lefiPinAntennaModel
antennaGateAreaAllocated_	lef/include/lefiMacro.hpp	/^  int antennaGateAreaAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaGateAreaAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaGateAreaAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaGateAreaLayer	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaGateAreaLayer(int i) const$/;"	f	class:lefiPinAntennaModel
antennaGateAreaLayer_	lef/include/lefiMacro.hpp	/^  char** antennaGateAreaLayer_;$/;"	m	class:lefiPinAntennaModel
antennaGateAreaLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaGateAreaLayer_;$/;"	m	class:lefiPinAntennaModel
antennaGateArea_	lef/include/lefiMacro.hpp	/^  double* antennaGateArea_;$/;"	m	class:lefiPinAntennaModel
antennaGateArea_	lef/lef/lefiMacro.hpp	/^  double* antennaGateArea_;$/;"	m	class:lefiPinAntennaModel
antennaGatePlusDiff	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaGatePlusDiff() const$/;"	f	class:lefiAntennaModel
antennaGatePlusDiff_	lef/include/lefiLayer.hpp	/^  double antennaGatePlusDiff_;                  \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaGatePlusDiff_	lef/lef/lefiLayer.hpp	/^  double antennaGatePlusDiff_;                  \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaInoutWarnings	lef/include/lefrData.hpp	/^    int  antennaInoutWarnings; $/;"	m	class:lefrData
antennaInoutWarnings	lef/lef/lefrData.hpp	/^    int  antennaInoutWarnings; $/;"	m	class:lefrData
antennaInputWarnings	lef/include/lefrData.hpp	/^    int  antennaInputWarnings; $/;"	m	class:lefrData
antennaInputWarnings	lef/lef/lefrData.hpp	/^    int  antennaInputWarnings; $/;"	m	class:lefrData
antennaLength	lef/lef/lefiLayer.cpp	/^lefiLayer::antennaLength() const$/;"	f	class:lefiLayer
antennaLength_	lef/include/lefiLayer.hpp	/^  double antennaLength_;$/;"	m	class:lefiLayer
antennaLength_	lef/lef/lefiLayer.hpp	/^  double antennaLength_;$/;"	m	class:lefiLayer
antennaMaxAreaCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxAreaCar(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxAreaCarAllocated_	lef/include/lefiMacro.hpp	/^  int antennaMaxAreaCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxAreaCarAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaMaxAreaCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxAreaCarLayer	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxAreaCarLayer(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxAreaCarLayer_	lef/include/lefiMacro.hpp	/^  char** antennaMaxAreaCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxAreaCarLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaMaxAreaCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxAreaCar_	lef/include/lefiMacro.hpp	/^  double* antennaMaxAreaCar_;$/;"	m	class:lefiPinAntennaModel
antennaMaxAreaCar_	lef/lef/lefiMacro.hpp	/^  double* antennaMaxAreaCar_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxCutCar(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxCutCarAllocated_	lef/include/lefiMacro.hpp	/^  int antennaMaxCutCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCarAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaMaxCutCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCarLayer	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxCutCarLayer(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxCutCarLayer_	lef/include/lefiMacro.hpp	/^  char** antennaMaxCutCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCarLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaMaxCutCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCar_	lef/include/lefiMacro.hpp	/^  double* antennaMaxCutCar_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCar_	lef/lef/lefiMacro.hpp	/^  double* antennaMaxCutCar_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxSideAreaCar(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxSideAreaCarAllocated_	lef/include/lefiMacro.hpp	/^  int antennaMaxSideAreaCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCarAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaMaxSideAreaCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCarLayer	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxSideAreaCarLayer(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxSideAreaCarLayer_	lef/include/lefiMacro.hpp	/^  char** antennaMaxSideAreaCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCarLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaMaxSideAreaCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCar_	lef/include/lefiMacro.hpp	/^  double* antennaMaxSideAreaCar_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCar_	lef/lef/lefiMacro.hpp	/^  double* antennaMaxSideAreaCar_;$/;"	m	class:lefiPinAntennaModel
antennaMetalArea	lef/lef/lefiMacro.cpp	/^lefiPin::antennaMetalArea(int i) const$/;"	f	class:lefiPin
antennaMetalAreaAllocated_	lef/include/lefiMacro.hpp	/^  int antennaMetalAreaAllocated_;$/;"	m	class:lefiPin
antennaMetalAreaAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaMetalAreaAllocated_;$/;"	m	class:lefiPin
antennaMetalAreaLayer	lef/lef/lefiMacro.cpp	/^lefiPin::antennaMetalAreaLayer(int i) const$/;"	f	class:lefiPin
antennaMetalAreaLayer_	lef/include/lefiMacro.hpp	/^  char** antennaMetalAreaLayer_;$/;"	m	class:lefiPin
antennaMetalAreaLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaMetalAreaLayer_;$/;"	m	class:lefiPin
antennaMetalArea_	lef/include/lefiMacro.hpp	/^  double* antennaMetalArea_;$/;"	m	class:lefiPin
antennaMetalArea_	lef/lef/lefiMacro.hpp	/^  double* antennaMetalArea_;$/;"	m	class:lefiPin
antennaMetalLength	lef/lef/lefiMacro.cpp	/^lefiPin::antennaMetalLength(int i) const$/;"	f	class:lefiPin
antennaMetalLengthAllocated_	lef/include/lefiMacro.hpp	/^  int antennaMetalLengthAllocated_;$/;"	m	class:lefiPin
antennaMetalLengthAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaMetalLengthAllocated_;$/;"	m	class:lefiPin
antennaMetalLengthLayer	lef/lef/lefiMacro.cpp	/^lefiPin::antennaMetalLengthLayer(int i) const$/;"	f	class:lefiPin
antennaMetalLengthLayer_	lef/include/lefiMacro.hpp	/^  char** antennaMetalLengthLayer_;$/;"	m	class:lefiPin
antennaMetalLengthLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaMetalLengthLayer_;$/;"	m	class:lefiPin
antennaMetalLength_	lef/include/lefiMacro.hpp	/^  double* antennaMetalLength_;$/;"	m	class:lefiPin
antennaMetalLength_	lef/lef/lefiMacro.hpp	/^  double* antennaMetalLength_;$/;"	m	class:lefiPin
antennaModel	def/def/defiPinCap.cpp	/^defiPinAntennaModel* defiPin::antennaModel(int index) const {$/;"	f	class:defiPin
antennaModel	lef/lef/lefiLayer.cpp	/^lefiLayer::antennaModel(int index) const$/;"	f	class:lefiLayer
antennaModel	lef/lef/lefiMacro.cpp	/^lefiPin::antennaModel(int index) const$/;"	f	class:lefiPin
antennaModelAllocated_	def/def/defiPinCap.hpp	/^  int antennaModelAllocated_;$/;"	m	class:defiPin
antennaModelAllocated_	lef/include/lefiLayer.hpp	/^  int antennaModelAllocated_;$/;"	m	class:lefiLayer
antennaModelAllocated_	lef/include/lefiMacro.hpp	/^  int antennaModelAllocated_;$/;"	m	class:lefiPin
antennaModelAllocated_	lef/lef/lefiLayer.hpp	/^  int antennaModelAllocated_;$/;"	m	class:lefiLayer
antennaModelAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaModelAllocated_;$/;"	m	class:lefiPin
antennaModel_	def/def/defiPinCap.hpp	/^  defiPinAntennaModel** antennaModel_;$/;"	m	class:defiPin
antennaModel_	lef/include/lefiLayer.hpp	/^  lefiAntennaModel** antennaModel_;$/;"	m	class:lefiLayer
antennaModel_	lef/include/lefiMacro.hpp	/^  lefiPinAntennaModel** antennaModel_;$/;"	m	class:lefiPin
antennaModel_	lef/lef/lefiLayer.hpp	/^  lefiAntennaModel** antennaModel_;$/;"	m	class:lefiLayer
antennaModel_	lef/lef/lefiMacro.hpp	/^  lefiPinAntennaModel** antennaModel_;$/;"	m	class:lefiPin
antennaOutputWarnings	lef/include/lefrData.hpp	/^    int  antennaOutputWarnings; $/;"	m	class:lefrData
antennaOutputWarnings	lef/lef/lefrData.hpp	/^    int  antennaOutputWarnings; $/;"	m	class:lefrData
antennaOxide	def/def/defiPinCap.cpp	/^char* defiPinAntennaModel::antennaOxide() const {$/;"	f	class:defiPinAntennaModel
antennaOxide	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaOxide() const$/;"	f	class:lefiAntennaModel
antennaOxide	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaOxide() const$/;"	f	class:lefiPinAntennaModel
antennaPartialCutArea	lef/lef/lefiMacro.cpp	/^lefiPin::antennaPartialCutArea(int i) const$/;"	f	class:lefiPin
antennaPartialCutAreaAllocated_	lef/include/lefiMacro.hpp	/^  int antennaPartialCutAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialCutAreaAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaPartialCutAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialCutAreaLayer	lef/lef/lefiMacro.cpp	/^lefiPin::antennaPartialCutAreaLayer(int i) const$/;"	f	class:lefiPin
antennaPartialCutAreaLayer_	lef/include/lefiMacro.hpp	/^  char** antennaPartialCutAreaLayer_;$/;"	m	class:lefiPin
antennaPartialCutAreaLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaPartialCutAreaLayer_;$/;"	m	class:lefiPin
antennaPartialCutArea_	lef/include/lefiMacro.hpp	/^  double* antennaPartialCutArea_;$/;"	m	class:lefiPin
antennaPartialCutArea_	lef/lef/lefiMacro.hpp	/^  double* antennaPartialCutArea_;$/;"	m	class:lefiPin
antennaPartialMetalArea	lef/lef/lefiMacro.cpp	/^lefiPin::antennaPartialMetalArea(int i) const$/;"	f	class:lefiPin
antennaPartialMetalAreaAllocated_	lef/include/lefiMacro.hpp	/^  int antennaPartialMetalAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialMetalAreaAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaPartialMetalAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialMetalAreaLayer	lef/lef/lefiMacro.cpp	/^lefiPin::antennaPartialMetalAreaLayer(int i) const$/;"	f	class:lefiPin
antennaPartialMetalAreaLayer_	lef/include/lefiMacro.hpp	/^  char** antennaPartialMetalAreaLayer_;$/;"	m	class:lefiPin
antennaPartialMetalAreaLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaPartialMetalAreaLayer_;$/;"	m	class:lefiPin
antennaPartialMetalArea_	lef/include/lefiMacro.hpp	/^  double* antennaPartialMetalArea_;$/;"	m	class:lefiPin
antennaPartialMetalArea_	lef/lef/lefiMacro.hpp	/^  double* antennaPartialMetalArea_;$/;"	m	class:lefiPin
antennaPartialMetalSideArea	lef/lef/lefiMacro.cpp	/^lefiPin::antennaPartialMetalSideArea(int i) const$/;"	f	class:lefiPin
antennaPartialMetalSideAreaAllocated_	lef/include/lefiMacro.hpp	/^  int antennaPartialMetalSideAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialMetalSideAreaAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaPartialMetalSideAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialMetalSideAreaLayer	lef/lef/lefiMacro.cpp	/^lefiPin::antennaPartialMetalSideAreaLayer(int i) const$/;"	f	class:lefiPin
antennaPartialMetalSideAreaLayer_	lef/include/lefiMacro.hpp	/^  char** antennaPartialMetalSideAreaLayer_;$/;"	m	class:lefiPin
antennaPartialMetalSideAreaLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaPartialMetalSideAreaLayer_;$/;"	m	class:lefiPin
antennaPartialMetalSideArea_	lef/include/lefiMacro.hpp	/^  double* antennaPartialMetalSideArea_;$/;"	m	class:lefiPin
antennaPartialMetalSideArea_	lef/lef/lefiMacro.hpp	/^  double* antennaPartialMetalSideArea_;$/;"	m	class:lefiPin
antennaSideAreaFactor	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaSideAreaFactor() const$/;"	f	class:lefiAntennaModel
antennaSideAreaFactor_	lef/include/lefiLayer.hpp	/^  double antennaSideAreaFactor_;$/;"	m	class:lefiAntennaModel
antennaSideAreaFactor_	lef/lef/lefiLayer.hpp	/^  double antennaSideAreaFactor_;$/;"	m	class:lefiAntennaModel
antennaSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::antennaSideAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaSideAreaRatio_	lef/include/lefiLayer.hpp	/^  double antennaSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  double antennaSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaSize	lef/lef/lefiMacro.cpp	/^lefiPin::antennaSize(int i) const$/;"	f	class:lefiPin
antennaSizeAllocated_	lef/include/lefiMacro.hpp	/^  int antennaSizeAllocated_;$/;"	m	class:lefiPin
antennaSizeAllocated_	lef/lef/lefiMacro.hpp	/^  int antennaSizeAllocated_;$/;"	m	class:lefiPin
antennaSizeLayer	lef/lef/lefiMacro.cpp	/^lefiPin::antennaSizeLayer(int i) const$/;"	f	class:lefiPin
antennaSizeLayer_	lef/include/lefiMacro.hpp	/^  char** antennaSizeLayer_;$/;"	m	class:lefiPin
antennaSizeLayer_	lef/lef/lefiMacro.hpp	/^  char** antennaSizeLayer_;$/;"	m	class:lefiPin
antennaSize_	lef/include/lefiMacro.hpp	/^  double* antennaSize_;$/;"	m	class:lefiPin
antennaSize_	lef/lef/lefiMacro.hpp	/^  double* antennaSize_;$/;"	m	class:lefiPin
antennaType	lef/include/lefrData.hpp	/^    lefiAntennaEnum  antennaType; $/;"	m	class:lefrData
antennaType	lef/lef/lefrData.hpp	/^    lefiAntennaEnum  antennaType; $/;"	m	class:lefrData
antenna_inout	lef/lef/lef.y	/^antenna_inout: K_ANTENNAINOUTDIFFAREA NUMBER ';'$/;"	l
antenna_input	lef/lef/lef.y	/^antenna_input: K_ANTENNAINPUTGATEAREA NUMBER ';'$/;"	l
antenna_output	lef/lef/lef.y	/^antenna_output: K_ANTENNAOUTPUTDIFFAREA NUMBER ';'$/;"	l
area	lef/lef/lefiLayer.cpp	/^lefiLayer::area() const$/;"	f	class:lefiLayer
area_	lef/include/lefiLayer.hpp	/^  double area_;$/;"	m	class:lefiLayer
area_	lef/lef/lefiLayer.hpp	/^  double area_;$/;"	m	class:lefiLayer
array	lef/lef/lef.y	/^array: start_array array_rules$/;"	l
arrayBeginCB	lef/lefrw/lefrw.cpp	/^int arrayBeginCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
arrayCB	def/defwrite/defwriteCbs.cpp	/^int arrayCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
arrayCB	lef/lefdiff/diffLefRW.cpp	/^int arrayCB(lefrCallbackType_e c, lefiArray* a, lefiUserData ud) {$/;"	f
arrayCB	lef/lefrw/lefrw.cpp	/^int arrayCB(lefrCallbackType_e c, lefiArray* a, lefiUserData) {$/;"	f
arrayCuts	lef/lef/lefiLayer.cpp	/^lefiLayer::arrayCuts(int index) const$/;"	f	class:lefiLayer
arrayCutsAllocated_	lef/include/lefiLayer.hpp	/^  int     arrayCutsAllocated_;$/;"	m	class:lefiLayer
arrayCutsAllocated_	lef/lef/lefiLayer.hpp	/^  int     arrayCutsAllocated_;$/;"	m	class:lefiLayer
arrayCutsVal	lef/include/lefrData.hpp	/^    int  arrayCutsVal; $/;"	m	class:lefrData
arrayCutsVal	lef/lef/lefrData.hpp	/^    int  arrayCutsVal; $/;"	m	class:lefrData
arrayCutsWar	lef/include/lefrData.hpp	/^    int  arrayCutsWar; $/;"	m	class:lefrData
arrayCutsWar	lef/lef/lefrData.hpp	/^    int  arrayCutsWar; $/;"	m	class:lefrData
arrayCuts_	lef/include/lefiLayer.hpp	/^  int*    arrayCuts_;$/;"	m	class:lefiLayer
arrayCuts_	lef/lef/lefiLayer.hpp	/^  int*    arrayCuts_;$/;"	m	class:lefiLayer
arrayEndCB	lef/lefrw/lefrw.cpp	/^int arrayEndCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
arrayName	lef/include/lefrData.hpp	/^    char*  arrayName; $/;"	m	class:lefrData
arrayName	lef/lef/lefrData.hpp	/^    char*  arrayName; $/;"	m	class:lefrData
arraySpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::arraySpacing(int index) const$/;"	f	class:lefiLayer
arraySpacings_	lef/include/lefiLayer.hpp	/^  double* arraySpacings_;$/;"	m	class:lefiLayer
arraySpacings_	lef/lef/lefiLayer.hpp	/^  double* arraySpacings_;$/;"	m	class:lefiLayer
arrayWarnings	lef/include/lefrData.hpp	/^    int  arrayWarnings; $/;"	m	class:lefrData
arrayWarnings	lef/lef/lefrData.hpp	/^    int  arrayWarnings; $/;"	m	class:lefrData
array_name	def/def/def.y	/^array_name: K_ARRAY {defData->dumb_mode = 1; defData->no_num = 1;} T_STRING ';'$/;"	l
array_rule	lef/lef/lef.y	/^array_rule:$/;"	l
array_rules	lef/lef/lef.y	/^array_rules:$/;"	l
assertionWarnings	def/def/defrData.hpp	/^    int  assertionWarnings; $/;"	m	class:defrData
assertions_end	def/def/def.y	/^assertions_end: K_END K_ASSERTIONS$/;"	l
assertions_section	def/def/def.y	/^assertions_section: assertions_start constraint_rules assertions_end$/;"	l
assertions_start	def/def/def.y	/^assertions_start: K_ASSERTIONS NUMBER ';'$/;"	l
atNsp_	lef/include/lefiLayer.hpp	/^  int*    atNsp_;             \/\/ accumulate total number of spacing$/;"	m	class:lefiTwoWidths
atNsp_	lef/lef/lefiLayer.hpp	/^  int*    atNsp_;             \/\/ accumulate total number of spacing$/;"	m	class:lefiTwoWidths
axisNumbers	lef/lef/lefiMacro.cpp	/^lefiTiming::axisNumbers()$/;"	f	class:lefiTiming
axisNumbersAllocated_	lef/include/lefiMacro.hpp	/^  int axisNumbersAllocated_;$/;"	m	class:lefiTiming
axisNumbersAllocated_	lef/lef/lefiMacro.hpp	/^  int axisNumbersAllocated_;$/;"	m	class:lefiTiming
axisNumbers_	lef/include/lefiMacro.hpp	/^  double* axisNumbers_;$/;"	m	class:lefiTiming
axisNumbers_	lef/lef/lefiMacro.hpp	/^  double* axisNumbers_;$/;"	m	class:lefiTiming
b_expr	lef/lef/lef.y	/^b_expr:$/;"	l
bbn	def/defdiff/diffDefRW.cpp	/^int bbn(defrCallbackType_e c, const char* h, defiUserData ud) {$/;"	f
bbn	def/defrw/defrw.cpp	/^int bbn(defrCallbackType_e c, const char* h, defiUserData ud) {$/;"	f
begOperand	def/defdiff/diffDefRW.cpp	/^int begOperand;    \/\/ to keep track for constraint, to print - as the 1st char$/;"	v
begOperand	def/defrw/defrw.cpp	/^int begOperand;    \/\/ to keep track for constraint, to print - as the 1st char$/;"	v
begin_pin_props	def/def/def.y	/^begin_pin_props: K_PINPROPERTIES NUMBER opt_semi$/;"	l
bit_is_keyword	def/def/defrData.hpp	/^    int  bit_is_keyword; $/;"	m	class:defrData
bits	def/def/defiScanchain.cpp	/^int* defiOrdered::bits() const {$/;"	f	class:defiOrdered
bitsNum	def/def/defrData.hpp	/^    int  bitsNum; \/\/ Scanchain Bits value$/;"	m	class:defrData
bits_	def/def/defiScanchain.hpp	/^  int*   bits_;                       \/\/ 5.4.1$/;"	m	class:defiOrdered
blockageWarnings	def/def/defrData.hpp	/^    int  blockageWarnings; $/;"	m	class:defrData
blockage_def	def/def/def.y	/^blockage_def: blockage_rule rectPoly_blockage rectPoly_blockage_rules$/;"	l
blockage_defs	def/def/def.y	/^blockage_defs: \/\/ empty $/;"	l
blockage_end	def/def/def.y	/^blockage_end: K_END K_BLOCKAGES$/;"	l
blockage_rule	def/def/def.y	/^blockage_rule: '-' K_LAYER { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING $/;"	l
blockage_section	def/def/def.y	/^blockage_section: blockage_start blockage_defs blockage_end ;$/;"	l
blockage_start	def/def/def.y	/^blockage_start: K_BLOCKAGES NUMBER ';'$/;"	l
bool	def/cdef/defiTypedefs.h	41;"	d
bool	lef/clef/lefiTypedefs.h	41;"	d
bool	lef/include/lefiTypedefs.h	41;"	d
botLayerLength_	def/def/defiVia.hpp	/^  int   botLayerLength_;    \/\/ 5.6$/;"	m	class:defiVia
botLayer_	def/def/defiVia.hpp	/^  char* botLayer_;          \/\/ 5.6$/;"	m	class:defiVia
botLayer_	lef/include/lefiVia.hpp	/^  char* botLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
botLayer_	lef/lef/lefiVia.hpp	/^  char* botLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
botMetalLayer	lef/lef/lefiVia.cpp	/^lefiVia::botMetalLayer() const$/;"	f	class:lefiVia
bottomHalo_	def/def/defiComponent.hpp	/^  int bottomHalo_;$/;"	m	class:defiComponent
bottomLayer_	lef/include/lefiMisc.hpp	/^  char* bottomLayer_;$/;"	m	class:lefiMaxStackVia
bottomLayer_	lef/lef/lefiMisc.hpp	/^  char* bottomLayer_;$/;"	m	class:lefiMaxStackVia
bottomMaskNum	def/def/defiNet.cpp	/^const int defiNet::bottomMaskNum(int index) const {$/;"	f	class:defiNet
bottomMaskNum	lef/clef/lefiTypedefs.h	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomVia
bottomMaskNum	lef/clef/lefiTypedefs.h	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomViaIter
bottomMaskNum	lef/include/lefiMisc.hpp	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomVia
bottomMaskNum	lef/include/lefiMisc.hpp	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomViaIter
bottomMaskNum	lef/include/lefiTypedefs.h	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomVia
bottomMaskNum	lef/include/lefiTypedefs.h	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomViaIter
bottomMaskNum	lef/lef/lefiMisc.hpp	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomVia
bottomMaskNum	lef/lef/lefiMisc.hpp	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomViaIter
bounds	def/def/defiPinCap.cpp	/^void defiPin::bounds(int index, int* xl, int* yl, int* xh, int* yh) const {$/;"	f	class:defiPin
bounds	def/def/defiPinCap.cpp	/^void defiPinPort::bounds(int index, int* xl, int* yl, int* xh, int* yh) const {$/;"	f	class:defiPinPort
buffer	def/def/defrData.hpp	/^    char buffer[IN_BUF_SIZE];$/;"	m	class:defrData
bump	def/def/defiScanchain.cpp	/^void defiOrdered::bump() {$/;"	f	class:defiOrdered
bump	lef/lef/lefiArray.cpp	/^lefiArray::bump(void    ***arr,$/;"	f	class:lefiArray
bump	lef/lef/lefiMacro.cpp	/^lefiMacro::bump(char    **array,$/;"	f	class:lefiMacro
bump	lef/lef/lefiMacro.cpp	/^lefiPin::bump(char  **array,$/;"	f	class:lefiPin
bumpEEQ	def/def/defiComponent.cpp	/^void defiComponent::bumpEEQ(int size) {$/;"	f	class:defiComponent
bumpForeignName	def/def/defiComponent.cpp	/^void defiComponent::bumpForeignName(int size) {$/;"	f	class:defiComponent
bumpId	def/def/defiComponent.cpp	/^void defiComponent::bumpId(int size) {$/;"	f	class:defiComponent
bumpItems	def/def/defiAssertion.cpp	/^void defiAssertion::bumpItems() {$/;"	f	class:defiAssertion
bumpLayers	def/def/defiComponent.cpp	/^void defiComponentMaskShiftLayer::bumpLayers(int size) {$/;"	f	class:defiComponentMaskShiftLayer
bumpMaxLayer	def/def/defiComponent.cpp	/^void defiComponent::bumpMaxLayer(int size) {$/;"	f	class:defiComponent
bumpMinLayer	def/def/defiComponent.cpp	/^void defiComponent::bumpMinLayer(int size) {$/;"	f	class:defiComponent
bumpName	def/def/defiComponent.cpp	/^void defiComponent::bumpName(int size) {$/;"	f	class:defiComponent
bumpName	def/def/defiNet.cpp	/^void defiNet::bumpName(long long size) {$/;"	f	class:defiNet
bumpName	def/def/defiNet.cpp	/^void defiSubnet::bumpName(long long  size) {$/;"	f	class:defiSubnet
bumpName	def/def/defiProp.cpp	/^void defiProp::bumpName(int size) {$/;"	f	class:defiProp
bumpName	def/def/defiSite.cpp	/^void defiSite::bumpName(int size) {$/;"	f	class:defiSite
bumpName	lef/lef/lefiProp.cpp	/^lefiProp::bumpName(int size)$/;"	f	class:lefiProp
bumpNets	def/def/defiComponent.cpp	/^void defiComponent::bumpNets(int size) {$/;"	f	class:defiComponent
bumpPaths	def/def/defiNet.cpp	/^void defiNet::bumpPaths(long long size) {$/;"	f	class:defiNet
bumpPaths	def/def/defiNet.cpp	/^void defiShield::bumpPaths(long long size) {$/;"	f	class:defiShield
bumpPaths	def/def/defiNet.cpp	/^void defiSubnet::bumpPaths(long long size) {$/;"	f	class:defiSubnet
bumpPaths	def/def/defiNet.cpp	/^void defiWire::bumpPaths(long long size) {$/;"	f	class:defiWire
bumpPins	def/def/defiNet.cpp	/^void defiNet::bumpPins(long long size) {$/;"	f	class:defiNet
bumpPins	def/def/defiNet.cpp	/^void defiSubnet::bumpPins(long long size) {$/;"	f	class:defiSubnet
bumpProps	def/def/defiNet.cpp	/^void defiNet::bumpProps(long long size) {$/;"	f	class:defiNet
bumpProps	def/def/defiPropType.cpp	/^void defiPropType::bumpProps() {$/;"	f	class:defiPropType
bumpProps	lef/lef/lefiMacro.cpp	/^lefiMacro::bumpProps()$/;"	f	class:lefiMacro
bumpProps	lef/lef/lefiMacro.cpp	/^lefiPin::bumpProps()$/;"	f	class:lefiPin
bumpProps	lef/lef/lefiPropType.cpp	/^lefiPropType::bumpProps()$/;"	f	class:lefiPropType
bumpProps	lef/lef/lefiVia.cpp	/^lefiVia::bumpProps()$/;"	f	class:lefiVia
bumpRegionName	def/def/defiComponent.cpp	/^void defiComponent::bumpRegionName(int size) {$/;"	f	class:defiComponent
bumpShieldNets	def/def/defiNet.cpp	/^void defiNet::bumpShieldNets(long long size) {$/;"	f	class:defiNet
bumpSize	def/def/defiPath.cpp	/^void defiPath::bumpSize(int size) {$/;"	f	class:defiPath
bumpSize	def/def/defiProp.cpp	/^void defiProp::bumpSize(int size) {$/;"	f	class:defiProp
bumpSize	lef/lef/lefiProp.cpp	/^lefiProp::bumpSize(int size)$/;"	f	class:lefiProp
bumpSubnets	def/def/defiNet.cpp	/^void defiNet::bumpSubnets(long long size) {$/;"	f	class:defiNet
busBitCharsCB	lef/lefdiff/diffLefRW.cpp	/^int busBitCharsCB(lefrCallbackType_e c, const char* busBit, lefiUserData ud)$/;"	f
busBitCharsCB	lef/lefrw/lefrw.cpp	/^int busBitCharsCB(lefrCallbackType_e c, const char* busBit, lefiUserData)$/;"	f
busBitCharsCB	lef/lefwrite/lefwriteCbs.cpp	/^int busBitCharsCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
bus_bit_chars	def/def/def.y	/^bus_bit_chars: K_BUSBITCHARS QSTRING ';'$/;"	l
busbitCB	def/defwrite/defwriteCbs.cpp	/^int busbitCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
busbitchars	lef/lef/lef.y	/^busbitchars: K_BUSBITCHARS QSTRING ';'$/;"	l
by_is_keyword	def/def/defrData.hpp	/^    int  by_is_keyword; $/;"	m	class:defrData
callbacks	def/def/defrData.hpp	/^    const defrCallbacks *callbacks;$/;"	m	class:defrData
callbacks	def/def/defrData.hpp	/^    defrCallbacks         *callbacks;$/;"	m	class:defrContext
canAllocated_	lef/include/lefiArray.hpp	/^  int canAllocated_;$/;"	m	class:lefiArray
canAllocated_	lef/lef/lefiArray.hpp	/^  int canAllocated_;$/;"	m	class:lefiArray
canPlace	lef/lef/lefiArray.cpp	/^lefiArray::canPlace(int index) const$/;"	f	class:lefiArray
canPlace_	lef/include/lefiArray.hpp	/^  lefiSitePattern** canPlace_;$/;"	m	class:lefiArray
canPlace_	lef/lef/lefiArray.hpp	/^  lefiSitePattern** canPlace_;$/;"	m	class:lefiArray
cannotAllocated_	lef/include/lefiArray.hpp	/^  int cannotAllocated_;$/;"	m	class:lefiArray
cannotAllocated_	lef/lef/lefiArray.hpp	/^  int cannotAllocated_;$/;"	m	class:lefiArray
cannotOccupy	lef/lef/lefiArray.cpp	/^lefiArray::cannotOccupy(int index) const$/;"	f	class:lefiArray
cannotOccupy_	lef/include/lefiArray.hpp	/^  lefiSitePattern** cannotOccupy_;$/;"	m	class:lefiArray
cannotOccupy_	lef/lef/lefiArray.hpp	/^  lefiSitePattern** cannotOccupy_;$/;"	m	class:lefiArray
cannotoccupy	def/def/def.y	/^cannotoccupy: K_CANNOTOCCUPY {defData->dumb_mode = 1;defData->no_num = 1; } T_STRING NUMBER NUMBER$/;"	l
canplace	def/def/def.y	/^canplace: K_CANPLACE {defData->dumb_mode = 1;defData->no_num = 1; } T_STRING NUMBER NUMBER$/;"	l
cap	def/def/defiNet.cpp	/^double defiNet::cap() const {$/;"	f	class:defiNet
cap	def/def/defiPinCap.cpp	/^double defiPinCap::cap() const {$/;"	f	class:defiPinCap
capMultiplier	lef/lef/lefiLayer.cpp	/^lefiLayer::capMultiplier() const$/;"	f	class:lefiLayer
capMultiplier_	lef/include/lefiLayer.hpp	/^  double capMultiplier_;$/;"	m	class:lefiLayer
capMultiplier_	lef/lef/lefiLayer.hpp	/^  double capMultiplier_;$/;"	m	class:lefiLayer
cap_	def/def/defiNet.hpp	/^  double       cap_;              \/\/ cap value$/;"	m	class:defiNet
cap_	def/def/defiPinCap.hpp	/^  double cap_;     \/\/ capacitance$/;"	m	class:defiPinCap
cap_list	lef/lef/lef.y	/^cap_list:$/;"	l
cap_point	lef/lef/lef.y	/^cap_point: '(' int_number int_number ')'$/;"	l
cap_points	lef/lef/lef.y	/^cap_points :$/;"	l
capacitance	def/def/defiIOTiming.cpp	/^double defiIOTiming::capacitance() const {$/;"	f	class:defiIOTiming
capacitance	lef/lef/lefiLayer.cpp	/^lefiLayer::capacitance() const$/;"	f	class:lefiLayer
capacitance	lef/lef/lefiMacro.cpp	/^lefiPin::capacitance() const$/;"	f	class:lefiPin
capacitance	lef/lef/lefiUnits.cpp	/^lefiUnits::capacitance() const$/;"	f	class:lefiUnits
capacitanceArray	lef/lef/lefiLayer.cpp	/^lefiLayer::capacitanceArray(int     *numPoints,$/;"	f	class:lefiLayer
capacitancePointsAllocated_	lef/include/lefiLayer.hpp	/^  int capacitancePointsAllocated_;$/;"	m	class:lefiLayer
capacitancePointsAllocated_	lef/lef/lefiLayer.hpp	/^  int capacitancePointsAllocated_;$/;"	m	class:lefiLayer
capacitanceWidths_	lef/include/lefiLayer.hpp	/^  double* capacitanceWidths_;$/;"	m	class:lefiLayer
capacitanceWidths_	lef/lef/lefiLayer.hpp	/^  double* capacitanceWidths_;$/;"	m	class:lefiLayer
capacitance_	def/def/defiIOTiming.hpp	/^  double capacitance_;$/;"	m	class:defiIOTiming
capacitance_	lef/include/lefiLayer.hpp	/^  double capacitance_;$/;"	m	class:lefiLayer
capacitance_	lef/include/lefiMacro.hpp	/^  double capacitance_;$/;"	m	class:lefiPin
capacitance_	lef/include/lefiNonDefault.hpp	/^  double* capacitance_;$/;"	m	class:lefiNonDefault
capacitance_	lef/include/lefiUnits.hpp	/^  double capacitance_;$/;"	m	class:lefiUnits
capacitance_	lef/lef/lefiLayer.hpp	/^  double capacitance_;$/;"	m	class:lefiLayer
capacitance_	lef/lef/lefiMacro.hpp	/^  double capacitance_;$/;"	m	class:lefiPin
capacitance_	lef/lef/lefiNonDefault.hpp	/^  double* capacitance_;$/;"	m	class:lefiNonDefault
capacitance_	lef/lef/lefiUnits.hpp	/^  double capacitance_;$/;"	m	class:lefiUnits
capacitances_	lef/include/lefiLayer.hpp	/^  double* capacitances_;$/;"	m	class:lefiLayer
capacitances_	lef/lef/lefiLayer.hpp	/^  double* capacitances_;$/;"	m	class:lefiLayer
caps_	lef/include/lefiArray.hpp	/^  double* caps_;$/;"	m	class:lefiArray
caps_	lef/lef/lefiArray.hpp	/^  double* caps_;$/;"	m	class:lefiArray
caseSensCB	lef/lefdiff/diffLefRW.cpp	/^int caseSensCB(lefrCallbackType_e c, int caseSense, lefiUserData ud) {$/;"	f
caseSensCB	lef/lefrw/lefrw.cpp	/^int caseSensCB(lefrCallbackType_e c, int caseSense, lefiUserData) {$/;"	f
caseSensitiveWarnings	def/def/defrData.hpp	/^    int  caseSensitiveWarnings; $/;"	m	class:defrData
caseSensitiveWarnings	lef/include/lefrData.hpp	/^    int  caseSensitiveWarnings; $/;"	m	class:lefrData
caseSensitiveWarnings	lef/lef/lefrData.hpp	/^    int  caseSensitiveWarnings; $/;"	m	class:lefrData
case_sens_stmt	def/def/def.y	/^case_sens_stmt: \/\/ empty $/;"	l
case_sensitivity	lef/lef/lef.y	/^case_sensitivity: K_NAMESCASESENSITIVE K_ON ';'$/;"	l
casesens	def/defdiff/diffDefRW.cpp	/^int casesens(defrCallbackType_e c, int d, defiUserData ud) {$/;"	f
casesens	def/defrw/defrw.cpp	/^int casesens(defrCallbackType_e c, int d, defiUserData ud) {$/;"	f
ccr1131444	def/defrw/defrw.cpp	/^static int ccr1131444 = 0;$/;"	v	file:
cellHasOrient	lef/lef/lefiMacro.cpp	/^lefiMacroForeign::cellHasOrient() const$/;"	f	class:lefiMacroForeign
cellHasOrient_	lef/include/lefiMacro.hpp	/^  int        cellHasOrient_;$/;"	m	class:lefiMacroForeign
cellHasOrient_	lef/lef/lefiMacro.hpp	/^  int        cellHasOrient_;$/;"	m	class:lefiMacroForeign
cellHasPts	lef/lef/lefiMacro.cpp	/^lefiMacroForeign::cellHasPts() const$/;"	f	class:lefiMacroForeign
cellHasPts_	lef/include/lefiMacro.hpp	/^  int        cellHasPts_;$/;"	m	class:lefiMacroForeign
cellHasPts_	lef/lef/lefiMacro.hpp	/^  int        cellHasPts_;$/;"	m	class:lefiMacroForeign
cellName	lef/lef/lefiMacro.cpp	/^lefiMacroForeign::cellName() const$/;"	f	class:lefiMacroForeign
cellName_	lef/include/lefiMacro.hpp	/^  const char *cellName_;$/;"	m	class:lefiMacroForeign
cellName_	lef/lef/lefiMacro.hpp	/^  const char *cellName_;$/;"	m	class:lefiMacroForeign
cellOrient	lef/lef/lefiMacro.cpp	/^lefiMacroForeign::cellOrient() const$/;"	f	class:lefiMacroForeign
cellOrient_	lef/include/lefiMacro.hpp	/^  int        cellOrient_;$/;"	m	class:lefiMacroForeign
cellOrient_	lef/lef/lefiMacro.hpp	/^  int        cellOrient_;$/;"	m	class:lefiMacroForeign
ch	def/def/defrData.hpp	/^    char*  ch; $/;"	m	class:defrData
changeIdAndName	def/def/defiComponent.cpp	/^void defiComponent::changeIdAndName(const char* id, const char* name) {$/;"	f	class:defiComponent
changeInstance	def/def/defiNet.cpp	/^void defiNet::changeInstance(const char* instance, int index) {$/;"	f	class:defiNet
changeNetName	def/def/defiNet.cpp	/^void defiNet::changeNetName(const char* name) {$/;"	f	class:defiNet
changePin	def/def/defiNet.cpp	/^void defiNet::changePin(const char* pin, int index) {$/;"	f	class:defiNet
changePinName	def/def/defiPinCap.cpp	/^void defiPin::changePinName(const char* pinName) {$/;"	f	class:defiPin
checkDouble	def/defdiff/diffDefRW.cpp	/^double checkDouble(double num) {$/;"	f
checkErrors	def/def/defrData.hpp	/^defrData::checkErrors()$/;"	f	class:defrData
checkType	def/defdiff/diffDefRW.cpp	/^void checkType(defrCallbackType_e c) {$/;"	f
checkType	def/defrw/defrw.cpp	/^void checkType(defrCallbackType_e c) {$/;"	f
checkType	def/defwrite/defwriteCbs.cpp	/^void checkType(defwCallbackType_e c) {$/;"	f
checkType	lef/lefdiff/diffLefRW.cpp	/^void checkType(lefrCallbackType_e c) {$/;"	f
checkType	lef/lefrw/lefrw.cpp	/^void checkType(lefrCallbackType_e c) {$/;"	f
checkType	lef/lefwrite/lefwriteCbs.cpp	/^void checkType(lefwCallbackType_e c) {$/;"	f
chkNum	lef/lefdiff/diffLefRW.cpp	/^double chkNum(double num) {$/;"	f
class_type	lef/lef/lef.y	/^class_type:$/;"	l
clear	def/def/defiAssertion.cpp	/^void defiAssertion::clear() {$/;"	f	class:defiAssertion
clear	def/def/defiBlockage.cpp	/^void defiBlockage::clear() {$/;"	f	class:defiBlockage
clear	def/def/defiComponent.cpp	/^void defiComponent::clear() {$/;"	f	class:defiComponent
clear	def/def/defiComponent.cpp	/^void defiComponentMaskShiftLayer::clear() {$/;"	f	class:defiComponentMaskShiftLayer
clear	def/def/defiFPC.cpp	/^void defiFPC::clear() {$/;"	f	class:defiFPC
clear	def/def/defiFill.cpp	/^void defiFill::clear() {$/;"	f	class:defiFill
clear	def/def/defiGroup.cpp	/^void defiGroup::clear() {$/;"	f	class:defiGroup
clear	def/def/defiIOTiming.cpp	/^void defiIOTiming::clear() {$/;"	f	class:defiIOTiming
clear	def/def/defiMisc.cpp	/^void defiStyles::clear() {$/;"	f	class:defiStyles
clear	def/def/defiNet.cpp	/^void defiNet::clear() {$/;"	f	class:defiNet
clear	def/def/defiNet.cpp	/^void defiShield::clear() {$/;"	f	class:defiShield
clear	def/def/defiNet.cpp	/^void defiSubnet::clear() {$/;"	f	class:defiSubnet
clear	def/def/defiNet.cpp	/^void defiWire::clear() {$/;"	f	class:defiWire
clear	def/def/defiNonDefault.cpp	/^void defiNonDefault::clear() { $/;"	f	class:defiNonDefault
clear	def/def/defiPartition.cpp	/^void defiPartition::clear() {$/;"	f	class:defiPartition
clear	def/def/defiPath.cpp	/^void defiPath::clear() {$/;"	f	class:defiPath
clear	def/def/defiPinCap.cpp	/^void defiPin::clear() {$/;"	f	class:defiPin
clear	def/def/defiPinCap.cpp	/^void defiPinAntennaModel::clear() {$/;"	f	class:defiPinAntennaModel
clear	def/def/defiPinCap.cpp	/^void defiPinPort::clear() {$/;"	f	class:defiPinPort
clear	def/def/defiPinProp.cpp	/^void defiPinProp::clear() {$/;"	f	class:defiPinProp
clear	def/def/defiProp.cpp	/^void defiProp::clear() {$/;"	f	class:defiProp
clear	def/def/defiRegion.cpp	/^void defiRegion::clear() {$/;"	f	class:defiRegion
clear	def/def/defiRowTrack.cpp	/^void defiRow::clear() {$/;"	f	class:defiRow
clear	def/def/defiScanchain.cpp	/^void defiOrdered::clear() {$/;"	f	class:defiOrdered
clear	def/def/defiScanchain.cpp	/^void defiScanchain::clear() {$/;"	f	class:defiScanchain
clear	def/def/defiSite.cpp	/^void defiSite::clear() {$/;"	f	class:defiSite
clear	def/def/defiSlot.cpp	/^void defiSlot::clear() {$/;"	f	class:defiSlot
clear	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::clear() {$/;"	f	class:defiTimingDisable
clear	def/def/defiVia.cpp	/^void defiVia::clear() {$/;"	f	class:defiVia
clear	lef/lef/lefiArray.cpp	/^lefiArray::clear()$/;"	f	class:lefiArray
clear	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::clear()$/;"	f	class:lefiCorrectionEdge
clear	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::clear()$/;"	f	class:lefiCorrectionResistance
clear	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::clear()$/;"	f	class:lefiCorrectionTable
clear	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::clear()$/;"	f	class:lefiCorrectionVictim
clear	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::clear()$/;"	f	class:lefiNoiseEdge
clear	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::clear()$/;"	f	class:lefiNoiseResistance
clear	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::clear()$/;"	f	class:lefiNoiseTable
clear	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::clear()$/;"	f	class:lefiNoiseVictim
clear	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::clear()$/;"	f	class:lefiAntennaPWL
clear	lef/lef/lefiLayer.cpp	/^lefiLayer::clear()$/;"	f	class:lefiLayer
clear	lef/lef/lefiMacro.cpp	/^lefiDensity::clear()$/;"	f	class:lefiDensity
clear	lef/lef/lefiMacro.cpp	/^lefiMacro::clear()$/;"	f	class:lefiMacro
clear	lef/lef/lefiMacro.cpp	/^lefiObstruction::clear()$/;"	f	class:lefiObstruction
clear	lef/lef/lefiMacro.cpp	/^lefiPin::clear()$/;"	f	class:lefiPin
clear	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::clear()$/;"	f	class:lefiPinAntennaModel
clear	lef/lef/lefiMacro.cpp	/^lefiTiming::clear()$/;"	f	class:lefiTiming
clear	lef/lef/lefiMisc.cpp	/^lefiGeometries::clear()$/;"	f	class:lefiGeometries
clear	lef/lef/lefiMisc.cpp	/^lefiIRDrop::clear()$/;"	f	class:lefiIRDrop
clear	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::clear()$/;"	f	class:lefiTrackPattern
clear	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::clear()$/;"	f	class:lefiNonDefault
clear	lef/lef/lefiProp.cpp	/^lefiProp::clear()$/;"	f	class:lefiProp
clear	lef/lef/lefiUnits.cpp	/^lefiUnits::clear()$/;"	f	class:lefiUnits
clear	lef/lef/lefiVia.cpp	/^lefiVia::clear()$/;"	f	class:lefiVia
clear	lef/lef/lefiViaRule.cpp	/^lefiViaRule::clear()$/;"	f	class:lefiViaRule
clearLayerOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRule::clearLayerOverhang()$/;"	f	class:lefiViaRule
clearLayerOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::clearLayerOverhang()$/;"	f	class:lefiViaRuleLayer
clearPoly	def/def/defiBlockage.cpp	/^void defiBlockage::clearPoly() {$/;"	f	class:defiBlockage
clearPoly	def/def/defiFill.cpp	/^void defiFill::clearPoly() {$/;"	f	class:defiFill
clearPoly	def/def/defiSlot.cpp	/^void defiSlot::clearPoly() {$/;"	f	class:defiSlot
clearPolyItems	lef/lef/lefiMisc.cpp	/^lefiGeometries::clearPolyItems()$/;"	f	class:lefiGeometries
clearPts	def/def/defiFill.cpp	/^void defiFill::clearPts() {$/;"	f	class:defiFill
clearRectPoly	def/def/defiNet.cpp	/^void defiNet::clearRectPoly() {$/;"	f	class:defiNet
clearRectPolyNPath	def/def/defiNet.cpp	/^void defiNet::clearRectPolyNPath() {$/;"	f	class:defiNet
clearVia	def/def/defiNet.cpp	/^void defiNet::clearVia() {$/;"	f	class:defiNet
clearanceCB	lef/lefdiff/diffLefRW.cpp	/^int clearanceCB(lefrCallbackType_e c, const char* name, lefiUserData ud) {$/;"	f
clearanceCB	lef/lefrw/lefrw.cpp	/^int clearanceCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
clearance_type	lef/lef/lef.y	/^clearance_type:$/;"	l
clearancemeasure	lef/lef/lef.y	/^clearancemeasure: K_CLEARANCEMEASURE clearance_type ';'$/;"	l
clockType	lef/lef/lefiMacro.cpp	/^lefiMacro::clockType() const$/;"	f	class:lefiMacro
clockTypeSize_	lef/include/lefiMacro.hpp	/^  int clockTypeSize_;$/;"	m	class:lefiMacro
clockTypeSize_	lef/lef/lefiMacro.hpp	/^  int clockTypeSize_;$/;"	m	class:lefiMacro
clockType_	lef/include/lefiMacro.hpp	/^  char* clockType_;$/;"	m	class:lefiMacro
clockType_	lef/lef/lefiMacro.hpp	/^  char* clockType_;$/;"	m	class:lefiMacro
clone	lef/lef/lefiMisc.cpp	/^lefiSpacing::clone()$/;"	f	class:lefiSpacing
clone	lef/lef/lefiVia.cpp	/^lefiVia::clone()$/;"	f	class:lefiVia
clone	lef/lef/lefiVia.cpp	/^lefiViaLayer::clone()$/;"	f	class:lefiViaLayer
cls	def/defdiff/diffDefRW.cpp	/^int cls(defrCallbackType_e c, void* cl, defiUserData ud) {$/;"	f
cls	def/defrw/defrw.cpp	/^int cls(defrCallbackType_e c, void* cl, defiUserData ud) {$/;"	f
colorMask	lef/clef/lefiTypedefs.h	/^      int    colorMask;$/;"	m	struct:lefiGeomRect
colorMask	lef/clef/lefiTypedefs.h	/^  int     colorMask;$/;"	m	struct:lefiGeomPath
colorMask	lef/clef/lefiTypedefs.h	/^  int     colorMask;$/;"	m	struct:lefiGeomPolygon
colorMask	lef/clef/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomPathIter
colorMask	lef/clef/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomPolygonIter
colorMask	lef/clef/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomRectIter
colorMask	lef/include/lefiMisc.hpp	/^      int    colorMask;$/;"	m	struct:lefiGeomRect
colorMask	lef/include/lefiMisc.hpp	/^  int     colorMask;$/;"	m	struct:lefiGeomPath
colorMask	lef/include/lefiMisc.hpp	/^  int     colorMask;$/;"	m	struct:lefiGeomPolygon
colorMask	lef/include/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomPathIter
colorMask	lef/include/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomPolygonIter
colorMask	lef/include/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomRectIter
colorMask	lef/include/lefiTypedefs.h	/^      int    colorMask;$/;"	m	struct:lefiGeomRect
colorMask	lef/include/lefiTypedefs.h	/^  int     colorMask;$/;"	m	struct:lefiGeomPath
colorMask	lef/include/lefiTypedefs.h	/^  int     colorMask;$/;"	m	struct:lefiGeomPolygon
colorMask	lef/include/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomPathIter
colorMask	lef/include/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomPolygonIter
colorMask	lef/include/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomRectIter
colorMask	lef/lef/lefiMisc.hpp	/^      int    colorMask;$/;"	m	struct:lefiGeomRect
colorMask	lef/lef/lefiMisc.hpp	/^  int     colorMask;$/;"	m	struct:lefiGeomPath
colorMask	lef/lef/lefiMisc.hpp	/^  int     colorMask;$/;"	m	struct:lefiGeomPolygon
colorMask	lef/lef/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomPathIter
colorMask	lef/lef/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomPolygonIter
colorMask	lef/lef/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomRectIter
cols_	def/def/defiVia.hpp	/^  int   cols_;              \/\/ 5.6$/;"	m	class:defiVia
commonInPin	def/def/defiScanchain.cpp	/^const char* defiScanchain::commonInPin() const {$/;"	f	class:defiScanchain
commonInPin_	def/def/defiScanchain.hpp	/^  char* commonInPin_;$/;"	m	class:defiScanchain
commonOutPin	def/def/defiScanchain.cpp	/^const char* defiScanchain::commonOutPin() const {$/;"	f	class:defiScanchain
commonOutPin_	def/def/defiScanchain.hpp	/^  char* commonOutPin_;$/;"	m	class:defiScanchain
comp	def/def/def.y	/^comp: comp_start comp_options ';'$/;"	l
compMSL	def/defdiff/diffDefRW.cpp	/^int compMSL(defrCallbackType_e c, defiComponentMaskShiftLayer* co, defiUserData ud) {$/;"	f
compMSL	def/defrw/defrw.cpp	/^int compMSL(defrCallbackType_e c, defiComponentMaskShiftLayer* co, defiUserData ud) {$/;"	f
comp_blockage_rule	def/def/def.y	/^comp_blockage_rule:$/;"	l
comp_eeq	def/def/def.y	/^comp_eeq: '+' K_EEQMASTER {defData->dumb_mode=1; defData->no_num = 1; } T_STRING$/;"	l
comp_extension_stmt	def/def/def.y	/^comp_extension_stmt: extension_stmt$/;"	l
comp_foreign	def/def/def.y	/^comp_foreign: '+' K_FOREIGN { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING$/;"	l
comp_generate	def/def/def.y	/^comp_generate: '+' K_COMP_GEN { defData->dumb_mode = 2;  defData->no_num = 2; } T_STRING$/;"	l
comp_halo	def/def/def.y	/^comp_halo: '+' K_HALO                    \/\/ 5.7 $/;"	l
comp_id_and_name	def/def/def.y	/^comp_id_and_name: '-' {defData->dumb_mode = DEF_MAX_INT; defData->no_num = DEF_MAX_INT; }$/;"	l
comp_name	def/def/def.y	/^comp_name: '(' {defData->dumb_mode=2; defData->no_num = 2; } T_STRING$/;"	l
comp_names	def/def/def.y	/^comp_names: \/\/ empty $/;"	l
comp_net_list	def/def/def.y	/^comp_net_list: \/\/ empty $/;"	l
comp_num	lef/lef/lef.tab.cpp	/^int comp_num(double s1, int op, double s2)$/;"	f
comp_option	def/def/def.y	/^comp_option:  comp_generate | comp_source | comp_type | weight | maskShift |$/;"	l
comp_options	def/def/def.y	/^comp_options: \/\/ empty $/;"	l
comp_pnt_list	def/def/def.y	/^comp_pnt_list: pt pt$/;"	l
comp_prop	def/def/def.y	/^comp_prop: T_STRING NUMBER$/;"	l
comp_prop_list	def/def/def.y	/^comp_prop_list: comp_prop$/;"	l
comp_property	def/def/def.y	/^comp_property: '+' K_PROPERTY { defData->dumb_mode = DEF_MAX_INT; }$/;"	l
comp_region	def/def/def.y	/^comp_region:$/;"	l
comp_region_start	def/def/def.y	/^comp_region_start: '+' K_REGION$/;"	l
comp_routehalo	def/def/def.y	/^comp_routehalo: '+' K_ROUTEHALO NUMBER { defData->dumb_mode = 2; defData->no_num = 2; } T_STRING T_STRING$/;"	l
comp_source	def/def/def.y	/^comp_source: '+' K_SOURCE source_type $/;"	l
comp_start	def/def/def.y	/^comp_start: comp_id_and_name comp_net_list$/;"	l
comp_str	lef/lef/lef.tab.cpp	/^int comp_str(char *s1, int op, char *s2)$/;"	f
comp_type	def/def/def.y	/^comp_type: placement_status pt orient$/;"	l
compf	def/defdiff/diffDefRW.cpp	/^int compf(defrCallbackType_e c, defiComponent* co, defiUserData ud) {$/;"	f
compf	def/defrw/defrw.cpp	/^int compf(defrCallbackType_e c, defiComponent* co, defiUserData ud) {$/;"	f
componentCB	def/defwrite/defwriteCbs.cpp	/^int componentCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
componentNameLength_	def/def/defiBlockage.hpp	/^  int    componentNameLength_;$/;"	m	class:defiBlockage
componentName_	def/def/defiBlockage.hpp	/^  char*  componentName_;$/;"	m	class:defiBlockage
componentWarnings	def/def/defrData.hpp	/^    int  componentWarnings; $/;"	m	class:defrData
comps_maskShift_section	def/def/def.y	/^comps_maskShift_section : K_COMPSMASKSHIFT  layer_statement ';'$/;"	l
comps_rule	def/def/def.y	/^comps_rule: \/\/ empty $/;"	l
comps_section	def/def/def.y	/^comps_section: start_comps comps_rule end_comps$/;"	l
conn_opt	def/def/def.y	/^conn_opt: \/\/ empty $/;"	l
constrain_what	def/def/def.y	/^constrain_what: '+' K_BOTTOMLEFT$/;"	l
constrain_what_list	def/def/def.y	/^constrain_what_list: \/\/ empty $/;"	l
constraint	def/defdiff/diffDefRW.cpp	/^int constraint(defrCallbackType_e c, defiAssertion* a, defiUserData ud) {$/;"	f
constraint	def/defrw/defrw.cpp	/^int constraint(defrCallbackType_e c, defiAssertion* a, defiUserData ud) {$/;"	f
constraintWarnings	def/def/defrData.hpp	/^    int  constraintWarnings; $/;"	m	class:defrData
constraint_rule	def/def/def.y	/^constraint_rule:   operand_rule $/;"	l
constraint_rules	def/def/def.y	/^constraint_rules: \/\/ empty $/;"	l
constraint_section	def/def/def.y	/^constraint_section: constraints_start constraint_rules constraints_end$/;"	l
constraint_type	def/def/def.y	/^constraint_type: K_ALIGN$/;"	l
constraints_end	def/def/def.y	/^constraints_end: K_END K_CONSTRAINTS$/;"	l
constraints_start	def/def/def.y	/^constraints_start: K_CONSTRAINTS NUMBER ';'$/;"	l
constraintst	def/defrw/defrw.cpp	/^int constraintst(defrCallbackType_e c, int num, defiUserData ud) {$/;"	f
convert_defname2num	def/def/defrData.cpp	/^defrData::convert_defname2num(char *versionName)$/;"	f	class:defrData
convert_name2num	lef/clef/xlefiUtil.cpp	/^double convert_name2num (const char * versionName) {$/;"	f
convert_name2num	lef/lef/lefrReader.cpp	/^convert_name2num(const char *versionName)$/;"	f
core_type	lef/lef/lef.y	/^core_type:$/;"	l
corner_	def/def/defiFPC.hpp	/^  char corner_;   \/\/ Bottomleft or Topright$/;"	m	class:defiFPC
corr_list	lef/lef/lef.y	/^corr_list:$/;"	l
corr_victim	lef/lef/lef.y	/^corr_victim:$/;"	l
corr_victim_list	lef/lef/lef.y	/^corr_victim_list:$/;"	l
correctTableCB	lef/lefdiff/diffLefRW.cpp	/^int correctTableCB(lefrCallbackType_e c, lefiCorrectionTable* table,$/;"	f
correction	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::correction(int index)$/;"	f	class:lefiCorrectionVictim
correctionCB	lef/lefrw/lefrw.cpp	/^int correctionCB(lefrCallbackType_e c, lefiCorrectionTable *, lefiUserData) {$/;"	f
correctionTableWarnings	lef/include/lefrData.hpp	/^    int  correctionTableWarnings; $/;"	m	class:lefrData
correctionTableWarnings	lef/lef/lefrData.hpp	/^    int  correctionTableWarnings; $/;"	m	class:lefrData
correction_table_item	lef/lef/lef.y	/^correction_table_item:$/;"	l
correction_table_list	lef/lef/lef.y	/^correction_table_list:$/;"	l
correctionsAllocated_	lef/include/lefiCrossTalk.hpp	/^  int correctionsAllocated_;$/;"	m	class:lefiCorrectionVictim
correctionsAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int correctionsAllocated_;$/;"	m	class:lefiCorrectionVictim
corrections_	lef/include/lefiCrossTalk.hpp	/^  double* corrections_;$/;"	m	class:lefiCorrectionVictim
corrections_	lef/lef/lefiCrossTalk.hpp	/^  double* corrections_;$/;"	m	class:lefiCorrectionVictim
correctiontable	lef/lef/lef.y	/^correctiontable: K_CORRECTIONTABLE int_number ';'$/;"	l
cover_is_keyword	def/def/defrData.hpp	/^    int  cover_is_keyword; $/;"	m	class:defrData
create	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::create()$/;"	f	class:lefiAntennaPWL
create_file_statement	lef/lef/lef.y	/^create_file_statement:$/;"	l
cs	def/defrw/defrw.cpp	/^int cs(defrCallbackType_e c, int num, defiUserData ud) {$/;"	f
curAntennaModelIndex_	lef/include/lefiMacro.hpp	/^  int curAntennaModelIndex_;     \/\/ save the current index of the antenna$/;"	m	class:lefiPin
curAntennaModelIndex_	lef/lef/lefiMacro.hpp	/^  int curAntennaModelIndex_;     \/\/ save the current index of the antenna$/;"	m	class:lefiPin
curVer	def/defdiff/diffDefRW.cpp	/^static double curVer = 5.7;$/;"	v	file:
curVer	def/defrw/defrw.cpp	/^static double curVer = 0;$/;"	v	file:
current	lef/lef/lefiUnits.cpp	/^lefiUnits::current() const$/;"	f	class:lefiUnits
currentAntennaModel_	lef/include/lefiLayer.hpp	/^  lefiAntennaModel* currentAntennaModel_;$/;"	m	class:lefiLayer
currentAntennaModel_	lef/lef/lefiLayer.hpp	/^  lefiAntennaModel* currentAntennaModel_;$/;"	m	class:lefiLayer
currentDensityArray	lef/lef/lefiLayer.cpp	/^lefiLayer::currentDensityArray(int      *numPoints,$/;"	f	class:lefiLayer
currentDensityPoint	lef/lef/lefiLayer.cpp	/^lefiLayer::currentDensityPoint() const$/;"	f	class:lefiLayer
currentDensity_	lef/include/lefiLayer.hpp	/^  double currentDensity_;$/;"	m	class:lefiLayer
currentDensity_	lef/lef/lefiLayer.hpp	/^  double currentDensity_;$/;"	m	class:lefiLayer
currentPointsAllocated_	lef/include/lefiLayer.hpp	/^  int currentPointsAllocated_;$/;"	m	class:lefiLayer
currentPointsAllocated_	lef/lef/lefiLayer.hpp	/^  int currentPointsAllocated_;$/;"	m	class:lefiLayer
currentSource	lef/lef/lefiMacro.cpp	/^lefiPin::currentSource() const$/;"	f	class:lefiPin
currentSource_	lef/include/lefiMacro.hpp	/^  char currentSource_[12];$/;"	m	class:lefiPin
currentSource_	lef/lef/lefiMacro.hpp	/^  char currentSource_[12];$/;"	m	class:lefiPin
currentType	def/def/defiPath.cpp	/^defiPath::currentType() const$/;"	f	class:defiPath
currentWidths_	lef/include/lefiLayer.hpp	/^  double* currentWidths_;$/;"	m	class:lefiLayer
currentWidths_	lef/lef/lefiLayer.hpp	/^  double* currentWidths_;$/;"	m	class:lefiLayer
current_	lef/include/lefiLayer.hpp	/^  double* current_;$/;"	m	class:lefiLayer
current_	lef/include/lefiUnits.hpp	/^  double current_;$/;"	m	class:lefiUnits
current_	lef/lef/lefiLayer.hpp	/^  double* current_;$/;"	m	class:lefiLayer
current_	lef/lef/lefiUnits.hpp	/^  double current_;$/;"	m	class:lefiUnits
current_buffer	lef/include/lefrData.hpp	/^    char       current_buffer[IN_BUF_SIZE];$/;"	m	class:lefrData
current_buffer	lef/lef/lefrData.hpp	/^    char       current_buffer[IN_BUF_SIZE];$/;"	m	class:lefrData
current_density_pwl	lef/lef/lef.y	/^current_density_pwl: '(' int_number int_number ')'$/;"	l
current_density_pwl_list	lef/lef/lef.y	/^current_density_pwl_list :$/;"	l
current_stack	lef/include/lefrData.hpp	/^    const char *current_stack[20];  \/\/ the stack itself $/;"	m	class:lefrData
current_stack	lef/lef/lefrData.hpp	/^    const char *current_stack[20];  \/\/ the stack itself $/;"	m	class:lefrData
current_token	lef/include/lefrData.hpp	/^    char       *current_token; $/;"	m	class:lefrData
current_token	lef/lef/lefrData.hpp	/^    char       *current_token; $/;"	m	class:lefrData
cutArea	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::cutArea(int index) const$/;"	f	class:lefiLayerDensity
cutLayer	lef/lef/lefiVia.cpp	/^lefiVia::cutLayer() const$/;"	f	class:lefiVia
cutLayerLength_	def/def/defiVia.hpp	/^  int   cutLayerLength_;    \/\/ 5.6$/;"	m	class:defiVia
cutLayerName	def/def/defiNonDefault.cpp	/^const char* defiNonDefault::cutLayerName(int index) const {$/;"	f	class:defiNonDefault
cutLayerName	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::cutLayerName(int index) const$/;"	f	class:lefiNonDefault
cutLayerName_	def/def/defiNonDefault.hpp	/^  char**  cutLayerName_;$/;"	m	class:defiNonDefault
cutLayerName_	lef/include/lefiNonDefault.hpp	/^  char** cutLayerName_;            \/\/ 5.6$/;"	m	class:lefiNonDefault
cutLayerName_	lef/lef/lefiNonDefault.hpp	/^  char** cutLayerName_;            \/\/ 5.6$/;"	m	class:lefiNonDefault
cutLayer_	def/def/defiVia.hpp	/^  char* cutLayer_;          \/\/ 5.6$/;"	m	class:defiVia
cutLayer_	lef/include/lefiVia.hpp	/^  char* cutLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
cutLayer_	lef/lef/lefiVia.hpp	/^  char* cutLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
cutMaskNum	def/def/defiNet.cpp	/^const int defiNet::cutMaskNum(int index) const {$/;"	f	class:defiNet
cutMaskNum	lef/clef/lefiTypedefs.h	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomVia
cutMaskNum	lef/clef/lefiTypedefs.h	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomViaIter
cutMaskNum	lef/include/lefiMisc.hpp	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomVia
cutMaskNum	lef/include/lefiMisc.hpp	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomViaIter
cutMaskNum	lef/include/lefiTypedefs.h	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomVia
cutMaskNum	lef/include/lefiTypedefs.h	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomViaIter
cutMaskNum	lef/lef/lefiMisc.hpp	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomVia
cutMaskNum	lef/lef/lefiMisc.hpp	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomViaIter
cutPattern	def/def/defiVia.cpp	/^const char* defiVia::cutPattern() const {$/;"	f	class:defiVia
cutPattern	lef/lef/lefiVia.cpp	/^lefiVia::cutPattern() const$/;"	f	class:lefiVia
cutPatternLength_	def/def/defiVia.hpp	/^  int   cutPatternLength_;  \/\/ 5.6$/;"	m	class:defiVia
cutPattern_	def/def/defiVia.hpp	/^  char* cutPattern_;        \/\/ 5.6$/;"	m	class:defiVia
cutPattern_	lef/include/lefiVia.hpp	/^  char* cutPattern_;           \/\/ 5.6$/;"	m	class:lefiVia
cutPattern_	lef/lef/lefiVia.hpp	/^  char* cutPattern_;           \/\/ 5.6$/;"	m	class:lefiVia
cutSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::cutSpacing() const$/;"	f	class:lefiLayer
cutSpacing_	lef/include/lefiLayer.hpp	/^  double  cutSpacing_;$/;"	m	class:lefiLayer
cutSpacing_	lef/lef/lefiLayer.hpp	/^  double  cutSpacing_;$/;"	m	class:lefiLayer
cutWithin	lef/lef/lefiLayer.cpp	/^lefiOrthogonal::cutWithin(int index) const$/;"	f	class:lefiOrthogonal
cutWithin_	lef/include/lefiLayer.hpp	/^  double* cutWithin_;$/;"	m	class:lefiLayer
cutWithin_	lef/include/lefiLayer.hpp	/^  double* cutWithin_;$/;"	m	class:lefiOrthogonal
cutWithin_	lef/lef/lefiLayer.hpp	/^  double* cutWithin_;$/;"	m	class:lefiLayer
cutWithin_	lef/lef/lefiLayer.hpp	/^  double* cutWithin_;$/;"	m	class:lefiOrthogonal
cutareas_	lef/include/lefiLayer.hpp	/^  double* cutareas_;$/;"	m	class:lefiLayerDensity
cutareas_	lef/lef/lefiLayer.hpp	/^  double* cutareas_;$/;"	m	class:lefiLayerDensity
dAllMsgs	lef/include/lefrSettings.hpp	/^    int  dAllMsgs; $/;"	m	class:lefrSettings
dAllMsgs	lef/lef/lefrSettings.hpp	/^    int  dAllMsgs; $/;"	m	class:lefrSettings
d_	def/def/defiProp.hpp	/^  double d_;            \/\/ if it is a real or int the number is here.$/;"	m	class:defiProp
d_	lef/include/lefiLayer.hpp	/^  double* d_;$/;"	m	class:lefiAntennaPWL
d_	lef/include/lefiProp.hpp	/^  double d_;            \/\/ if it is a real or int the number is here.$/;"	m	class:lefiProp
d_	lef/lef/lefiLayer.hpp	/^  double* d_;$/;"	m	class:lefiAntennaPWL
d_	lef/lef/lefiProp.hpp	/^  double d_;            \/\/ if it is a real or int the number is here.$/;"	m	class:lefiProp
data	def/def/defiDefs.hpp	/^    int data;$/;"	m	struct:deftoken
data	def/def/defrData.hpp	/^    defrData              *data;$/;"	m	class:defrContext
data	lef/include/lefiDefs.hpp	/^    int data;$/;"	m	struct:token
data	lef/lef/lefiDefs.hpp	/^    int data;$/;"	m	struct:token
dataError	def/defdiff/diffDefRW.cpp	/^void dataError() {$/;"	f
dataError	def/defrw/defrw.cpp	/^void dataError() {$/;"	f
dataError	def/defwrite/defwriteCbs.cpp	/^void dataError() {$/;"	f
dataError	lef/lefdiff/diffLefRW.cpp	/^void dataError() {$/;"	f
dataError	lef/lefrw/lefrw.cpp	/^void dataError() {$/;"	f
dataError	lef/lefwrite/lefwriteCbs.cpp	/^void dataError() {$/;"	f
dataType	def/def/defiProp.cpp	/^char defiProp::dataType() const {$/;"	f	class:defiProp
dataType	lef/lef/lefiProp.cpp	/^lefiProp::dataType() const$/;"	f	class:lefiProp
dataType_	def/def/defiProp.hpp	/^  char dataType_;       \/\/ either I:integer R:real S:string Q:quotedstring.$/;"	m	class:defiProp
dataType_	lef/include/lefiProp.hpp	/^  char dataType_;       \/\/ either I:integer R:real S:string Q:quotedstring.$/;"	m	class:lefiProp
dataType_	lef/lef/lefiProp.hpp	/^  char dataType_;       \/\/ either I:integer R:real S:string Q:quotedstring.$/;"	m	class:lefiProp
data_	def/def/defiPath.hpp	/^  void** data_;         \/\/ extra data$/;"	m	class:defiPath
databaseName	lef/lef/lefiUnits.cpp	/^lefiUnits::databaseName() const$/;"	f	class:lefiUnits
databaseName_	lef/include/lefiUnits.hpp	/^  char* databaseName_;$/;"	m	class:lefiUnits
databaseName_	lef/lef/lefiUnits.hpp	/^  char* databaseName_;$/;"	m	class:lefiUnits
databaseNumber	lef/lef/lefiUnits.cpp	/^lefiUnits::databaseNumber() const$/;"	f	class:lefiUnits
databaseNumber_	lef/include/lefiUnits.hpp	/^  double databaseNumber_;$/;"	m	class:lefiUnits
databaseNumber_	lef/lef/lefiUnits.hpp	/^  double databaseNumber_;$/;"	m	class:lefiUnits
dc_layer_table	lef/lef/lef.y	/^dc_layer_table:$/;"	l
dccurrent	lef/lef/lefiLayer.cpp	/^lefiLayer::dccurrent(int index) const$/;"	f	class:lefiLayer
dccurrentAllocated_	lef/include/lefiLayer.hpp	/^  int dccurrentAllocated_;$/;"	m	class:lefiLayer
dccurrentAllocated_	lef/lef/lefiLayer.hpp	/^  int dccurrentAllocated_;$/;"	m	class:lefiLayer
dccurrents_	lef/include/lefiLayer.hpp	/^  lefiLayerDensity** dccurrents_;$/;"	m	class:lefiLayer
dccurrents_	lef/lef/lefiLayer.hpp	/^  lefiLayerDensity** dccurrents_;$/;"	m	class:lefiLayer
defAliasIterator	def/def/defiAlias.cpp	/^class defAliasIterator {$/;"	c	file:
defAliasMap	def/def/defrData.hpp	/^typedef std::map<std::string, std::string, defCompareStrings> defAliasMap;$/;"	t
defCompareCStrings	def/def/defrSettings.hpp	/^struct defCompareCStrings $/;"	s
defCompareStrings	def/def/defrData.hpp	/^struct defCompareStrings $/;"	s
defContext	def/def/defrData.cpp	/^defrContext defContext;$/;"	v
defData	def/def/defiAlias.hpp	/^  defrData *defData;$/;"	m	class:defiAlias_itr
defData	def/def/defiAssertion.hpp	/^  defrData *defData;$/;"	m	class:defiAssertion
defData	def/def/defiBlockage.hpp	/^  defrData *defData;$/;"	m	class:defiBlockage
defData	def/def/defiComponent.hpp	/^    defrData    *defData;$/;"	m	class:defiComponentMaskShiftLayer
defData	def/def/defiComponent.hpp	/^  defrData *defData;$/;"	m	class:defiComponent
defData	def/def/defiFPC.hpp	/^  defrData *defData;$/;"	m	class:defiFPC
defData	def/def/defiFill.hpp	/^  defrData *defData;$/;"	m	class:defiFill
defData	def/def/defiGroup.hpp	/^  defrData *defData;$/;"	m	class:defiGroup
defData	def/def/defiIOTiming.hpp	/^  defrData *defData;$/;"	m	class:defiIOTiming
defData	def/def/defiMisc.hpp	/^  defrData *defData;$/;"	m	class:defiGeometries
defData	def/def/defiNet.hpp	/^  defrData  *defData;$/;"	m	class:defiWire
defData	def/def/defiNet.hpp	/^  defrData *defData;$/;"	m	class:defiNet
defData	def/def/defiNet.hpp	/^  defrData *defData;$/;"	m	class:defiShield
defData	def/def/defiNet.hpp	/^  defrData *defData;$/;"	m	class:defiSubnet
defData	def/def/defiNet.hpp	/^  defrData *defData;$/;"	m	class:defiVpin
defData	def/def/defiNonDefault.hpp	/^  defrData *defData;$/;"	m	class:defiNonDefault
defData	def/def/defiPartition.hpp	/^  defrData *defData;$/;"	m	class:defiPartition
defData	def/def/defiPath.hpp	/^  defrData *defData;$/;"	m	class:defiPath
defData	def/def/defiPinCap.hpp	/^  defrData *defData;$/;"	m	class:defiPin
defData	def/def/defiPinCap.hpp	/^  defrData *defData;$/;"	m	class:defiPinAntennaModel
defData	def/def/defiPinCap.hpp	/^  defrData *defData;$/;"	m	class:defiPinPort
defData	def/def/defiPinProp.hpp	/^  defrData *defData;$/;"	m	class:defiPinProp
defData	def/def/defiProp.hpp	/^  defrData *defData;$/;"	m	class:defiProp
defData	def/def/defiRegion.hpp	/^  defrData *defData;$/;"	m	class:defiRegion
defData	def/def/defiRowTrack.hpp	/^  defrData *defData;$/;"	m	class:defiGcellGrid
defData	def/def/defiRowTrack.hpp	/^  defrData *defData;$/;"	m	class:defiRow
defData	def/def/defiRowTrack.hpp	/^  defrData *defData;$/;"	m	class:defiTrack
defData	def/def/defiScanchain.hpp	/^  defrData *defData;$/;"	m	class:defiOrdered
defData	def/def/defiScanchain.hpp	/^  defrData *defData;$/;"	m	class:defiScanchain
defData	def/def/defiSite.hpp	/^  defrData *defData;$/;"	m	class:defiSite
defData	def/def/defiSlot.hpp	/^  defrData *defData;$/;"	m	class:defiSlot
defData	def/def/defiTimingDisable.hpp	/^  defrData *defData;$/;"	m	class:defiTimingDisable
defData	def/def/defiVia.hpp	/^  defrData *defData;$/;"	m	class:defiVia
defDefineMap	def/def/defrData.hpp	/^typedef std::map<std::string, std::string, defCompareStrings> defDefineMap;$/;"	t
defError	def/def/def_keywords.cpp	/^defrData::defError(int msgNum, const char *s) {$/;"	f	class:defrData
defGZFile	def/cdefzlib/defzlib.h	/^typedef void* defGZFile;$/;"	t
defGZFile	def/defzlib/defzlib.hpp	/^typedef void* defGZFile;$/;"	t
defGZipClose	def/cdefzlib/cdefzlib.c	/^int defGZipClose(defGZFile filePtr) {$/;"	f
defGZipClose	def/defzlib/defzlib.cpp	/^int defGZipClose(defGZFile filePtr) {$/;"	f
defGZipOpen	def/cdefzlib/cdefzlib.c	/^defGZipOpen(const char *gzipPath, const char* mode) {$/;"	f
defGZipOpen	def/defzlib/defzlib.cpp	/^defGZipOpen(const char *gzipPath, const char* mode) {$/;"	f
defGZip_read	def/cdefzlib/cdefzlib.c	/^size_t defGZip_read(FILE* file, char* buf, size_t len) {$/;"	f
defGZip_read	def/defzlib/defzlib.cpp	/^size_t defGZip_read(FILE* file, char* buf, size_t len) {$/;"	f
defGetAlias	def/def/def_keywords.cpp	/^defrData::defGetAlias(const string &name, string &result) $/;"	f	class:defrData
defGetDefine	def/def/def_keywords.cpp	/^int defrData::defGetDefine(const string &name, string &result) $/;"	f	class:defrData
defGetKeyword	def/def/def_keywords.cpp	/^int defrData::defGetKeyword(const char* name, int *result) $/;"	f	class:defrData
defIgnoreVersion	def/def/defrData.hpp	/^    int  defIgnoreVersion; \/\/ ignore checking version number$/;"	m	class:defrData
defInfo	def/def/def_keywords.cpp	/^defrData::defInfo(int msgNum, const char *s) {$/;"	f	class:defrData
defInvalidChar	def/def/defrData.hpp	/^    int  defInvalidChar; $/;"	m	class:defrData
defKeywordMap	def/def/defrSettings.hpp	/^typedef std::map<const char*, int, defCompareCStrings>  defKeywordMap;$/;"	t
defMsg	def/def/defrData.hpp	/^    char*  defMsg; $/;"	m	class:defrData
defMsgCnt	def/def/defrData.hpp	/^    int  defMsgCnt; $/;"	m	class:defrData
defMsgPrinted	def/def/defrData.hpp	/^    int  defMsgPrinted; \/\/ number of msgs output so far$/;"	m	class:defrData
defPOINT	def/def/defiDefs.hpp	/^typedef struct defpoint defPOINT;$/;"	t	typeref:struct:defpoint
defPrintTokens	def/def/defrData.hpp	/^    int  defPrintTokens; $/;"	m	class:defrData
defPropDefType	def/def/defrData.hpp	/^    char   defPropDefType; \/\/ save the current type of the property$/;"	m	class:defrData
defRECT	def/def/defiDefs.hpp	/^typedef struct defrect defRECT;$/;"	t	typeref:struct:defrect
defRetVal	def/def/defrData.hpp	/^    int  defRetVal; $/;"	m	class:defrData
defTOKEN	def/def/defiDefs.hpp	/^typedef struct deftoken defTOKEN;$/;"	t	typeref:struct:deftoken
defUnusedCallbackCount	def/def/defrReader.cpp	/^defUnusedCallbackCount()$/;"	f
defValidNum	def/def/defrData.cpp	/^defrData::defValidNum(int values) {$/;"	f	class:defrData
defVersionNum	def/def/defwWriter.cpp	/^static double defVersionNum = 5.7;  \/\/ default to 5.7$/;"	v	file:
defWRetVal	def/def/defwWriterCalls.cpp	/^int defWRetVal;$/;"	v
defWarning	def/def/def_keywords.cpp	/^defrData::defWarning(int msgNum, const char *s) {$/;"	f	class:defrData
def_alias_set	def/def/defrData.hpp	/^    defAliasMap        def_alias_set; $/;"	m	class:defrData
def_defines_set	def/def/defrData.hpp	/^    defDefineMap       def_defines_set;$/;"	m	class:defrData
def_file	def/def/def.y	/^def_file: version_stmt case_sens_stmt rules end_design$/;"	l
def_init	def/def/defrReader.cpp	/^def_init(const char  *func)$/;"	f
def_statement	lef/lef/lef.y	/^def_statement:$/;"	l
def_warnings	def/def/defrData.hpp	/^    int  def_warnings; $/;"	m	class:defrData
defaultAllocated_	lef/include/lefiArray.hpp	/^  int defaultAllocated_;$/;"	m	class:lefiArray
defaultAllocated_	lef/lef/lefiArray.hpp	/^  int defaultAllocated_;$/;"	m	class:lefiArray
defaultCap	lef/lef/lefiArray.cpp	/^lefiArray::defaultCap(int index) const$/;"	f	class:lefiArray
defaultCapMinPins	lef/lef/lefiArray.cpp	/^lefiArray::defaultCapMinPins(int index) const$/;"	f	class:lefiArray
defaultCapWarnings	def/def/defrData.hpp	/^    int  defaultCapWarnings; $/;"	m	class:defrData
defaultName	def/defdiff/diffDefRW.cpp	/^char defaultName[64];$/;"	v
defaultName	def/defrw/defrw.cpp	/^char defaultName[64];$/;"	v
defaultName	lef/lefdiff/diffLefRW.cpp	/^char    defaultName[128];$/;"	v
defaultName	lef/lefrw/lefrw.cpp	/^char defaultName[128];$/;"	v
defaultOut	def/defdiff/diffDefRW.cpp	/^char defaultOut[64];$/;"	v
defaultOut	def/defrw/defrw.cpp	/^char defaultOut[64];$/;"	v
defaultOut	def/defwrite/defwrite.cpp	/^char defaultOut[128];$/;"	v
defaultOut	def/defwrite/defwriteCbs.cpp	/^char  defaultOut[128];$/;"	v
defaultOut	lef/lefdiff/diffLefRW.cpp	/^char    defaultOut[128];$/;"	v
defaultOut	lef/lefrw/lefrw.cpp	/^char defaultOut[128];$/;"	v
defaultOut	lef/lefwrite/lefwrite.cpp	/^char defaultOut[128];$/;"	v
defaultOut	lef/lefwrite/lefwriteCbs.cpp	/^char  defaultOut[128];$/;"	v
defiALIAS_h	def/def/defiAlias.hpp	31;"	d
defiAdoptedSubObjects	def/def/defiDefs.hpp	/^  defiAdoptedSubObjects       \/\/ shallow copy + delete$/;"	e	enum:__anon16
defiAlias_itr	def/cdef/defiTypedefs.h	/^typedef void *defiAlias_itr;$/;"	t
defiAlias_itr	def/def/defiAlias.cpp	/^defiAlias_itr::defiAlias_itr(defrData *data) $/;"	f	class:defiAlias_itr
defiAlias_itr	def/def/defiAlias.hpp	/^class defiAlias_itr {$/;"	c
defiAssertPath	def/def/defiAssertion.cpp	/^struct defiAssertPath {$/;"	s	file:
defiAssertion	def/cdef/defiTypedefs.h	/^typedef void *defiAssertion;$/;"	t
defiAssertion	def/def/defiAssertion.cpp	/^defiAssertion::defiAssertion(defrData *data)$/;"	f	class:defiAssertion
defiAssertion	def/def/defiAssertion.hpp	/^class defiAssertion {$/;"	c
defiAssertion_distance	def/cdef/xdefiAssertion.cpp	/^double defiAssertion_distance (const ::defiAssertion* obj) {$/;"	f
defiAssertion_fallMax	def/cdef/xdefiAssertion.cpp	/^double defiAssertion_fallMax (const ::defiAssertion* obj) {$/;"	f
defiAssertion_fallMin	def/cdef/xdefiAssertion.cpp	/^double defiAssertion_fallMin (const ::defiAssertion* obj) {$/;"	f
defiAssertion_h	def/def/defiAssertion.hpp	31;"	d
defiAssertion_hasFallMax	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_hasFallMax (const ::defiAssertion* obj) {$/;"	f
defiAssertion_hasFallMin	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_hasFallMin (const ::defiAssertion* obj) {$/;"	f
defiAssertion_hasRiseMax	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_hasRiseMax (const ::defiAssertion* obj) {$/;"	f
defiAssertion_hasRiseMin	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_hasRiseMin (const ::defiAssertion* obj) {$/;"	f
defiAssertion_isAssertion	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_isAssertion (const ::defiAssertion* obj) {$/;"	f
defiAssertion_isConstraint	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_isConstraint (const ::defiAssertion* obj) {$/;"	f
defiAssertion_isDelay	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_isDelay (const ::defiAssertion* obj) {$/;"	f
defiAssertion_isDiff	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_isDiff (const ::defiAssertion* obj) {$/;"	f
defiAssertion_isNet	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_isNet (const ::defiAssertion* obj, int  index) {$/;"	f
defiAssertion_isPath	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_isPath (const ::defiAssertion* obj, int  index) {$/;"	f
defiAssertion_isSum	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_isSum (const ::defiAssertion* obj) {$/;"	f
defiAssertion_isWiredlogic	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_isWiredlogic (const ::defiAssertion* obj) {$/;"	f
defiAssertion_net	def/cdef/xdefiAssertion.cpp	/^void defiAssertion_net (const ::defiAssertion* obj, int  index, char**  netName) {$/;"	f
defiAssertion_netName	def/cdef/xdefiAssertion.cpp	/^const char* defiAssertion_netName (const ::defiAssertion* obj) {$/;"	f
defiAssertion_numItems	def/cdef/xdefiAssertion.cpp	/^int defiAssertion_numItems (const ::defiAssertion* obj) {$/;"	f
defiAssertion_path	def/cdef/xdefiAssertion.cpp	/^void defiAssertion_path (const ::defiAssertion* obj, int  index, char**  fromInst, char**  fromPin, char**  toInst, char**  toPin) {$/;"	f
defiAssertion_print	def/cdef/xdefiAssertion.cpp	/^void defiAssertion_print (const ::defiAssertion* obj, FILE*  f) {$/;"	f
defiAssertion_riseMax	def/cdef/xdefiAssertion.cpp	/^double defiAssertion_riseMax (const ::defiAssertion* obj) {$/;"	f
defiAssertion_riseMin	def/cdef/xdefiAssertion.cpp	/^double defiAssertion_riseMin (const ::defiAssertion* obj) {$/;"	f
defiBLOCKAGES_h	def/def/defiBlockage.hpp	31;"	d
defiBlockage	def/cdef/defiTypedefs.h	/^typedef void *defiBlockage;$/;"	t
defiBlockage	def/def/defiBlockage.cpp	/^defiBlockage::defiBlockage(defrData *data) $/;"	f	class:defiBlockage
defiBlockage	def/def/defiBlockage.hpp	/^class defiBlockage {$/;"	c
defiBlockage_designRuleWidth	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_designRuleWidth (const ::defiBlockage* obj) {$/;"	f
defiBlockage_getPolygon	def/cdef/xdefiBlockage.cpp	/^::defiPoints defiBlockage_getPolygon (const ::defiBlockage* obj, int  index) {$/;"	f
defiBlockage_hasComponent	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasComponent (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasDesignRuleWidth	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasDesignRuleWidth (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasExceptpgnet	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasExceptpgnet (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasFills	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasFills (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasLayer	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasLayer (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasMask	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasMask (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasPartial	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasPartial (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasPlacement	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasPlacement (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasPushdown	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasPushdown (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasSlots	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasSlots (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasSoft	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasSoft (const ::defiBlockage* obj) {$/;"	f
defiBlockage_hasSpacing	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_hasSpacing (const ::defiBlockage* obj) {$/;"	f
defiBlockage_layerComponentName	def/cdef/xdefiBlockage.cpp	/^const char* defiBlockage_layerComponentName (const ::defiBlockage* obj) {$/;"	f
defiBlockage_layerName	def/cdef/xdefiBlockage.cpp	/^const char* defiBlockage_layerName (const ::defiBlockage* obj) {$/;"	f
defiBlockage_mask	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_mask (const ::defiBlockage* obj) {$/;"	f
defiBlockage_minSpacing	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_minSpacing (const ::defiBlockage* obj) {$/;"	f
defiBlockage_numPolygons	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_numPolygons (const ::defiBlockage* obj) {$/;"	f
defiBlockage_numRectangles	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_numRectangles (const ::defiBlockage* obj) {$/;"	f
defiBlockage_placementComponentName	def/cdef/xdefiBlockage.cpp	/^const char* defiBlockage_placementComponentName (const ::defiBlockage* obj) {$/;"	f
defiBlockage_placementMaxDensity	def/cdef/xdefiBlockage.cpp	/^double defiBlockage_placementMaxDensity (const ::defiBlockage* obj) {$/;"	f
defiBlockage_print	def/cdef/xdefiBlockage.cpp	/^void defiBlockage_print (const ::defiBlockage* obj, FILE*  f) {$/;"	f
defiBlockage_xh	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_xh (const ::defiBlockage* obj, int  index) {$/;"	f
defiBlockage_xl	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_xl (const ::defiBlockage* obj, int  index) {$/;"	f
defiBlockage_yh	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_yh (const ::defiBlockage* obj, int  index) {$/;"	f
defiBlockage_yl	def/cdef/xdefiBlockage.cpp	/^int defiBlockage_yl (const ::defiBlockage* obj, int  index) {$/;"	f
defiBoolean	def/def/defiDefs.hpp	/^typedef int defiBoolean;$/;"	t
defiBox	def/cdef/defiTypedefs.h	/^typedef void *defiBox;$/;"	t
defiBox	def/def/defiSite.cpp	/^defiBox::defiBox() {$/;"	f	class:defiBox
defiBox	def/def/defiSite.hpp	/^class defiBox {$/;"	c
defiBox_getPoint	def/cdef/xdefiSite.cpp	/^::defiPoints defiBox_getPoint (const ::defiBox* obj) {$/;"	f
defiBox_print	def/cdef/xdefiSite.cpp	/^void defiBox_print (const ::defiBox* obj, FILE*  f) {$/;"	f
defiBox_xh	def/cdef/xdefiSite.cpp	/^int defiBox_xh (const ::defiBox* obj) {$/;"	f
defiBox_xl	def/cdef/xdefiSite.cpp	/^int defiBox_xl (const ::defiBox* obj) {$/;"	f
defiBox_yh	def/cdef/xdefiSite.cpp	/^int defiBox_yh (const ::defiBox* obj) {$/;"	f
defiBox_yl	def/cdef/xdefiSite.cpp	/^int defiBox_yl (const ::defiBox* obj) {$/;"	f
defiComponent	def/cdef/defiTypedefs.h	/^typedef void *defiComponent;$/;"	t
defiComponent	def/def/defiComponent.cpp	/^defiComponent::defiComponent(defrData *data) $/;"	f	class:defiComponent
defiComponent	def/def/defiComponent.hpp	/^class defiComponent {$/;"	c
defiComponentMaskShiftLayer	def/cdef/defiTypedefs.h	/^typedef void *defiComponentMaskShiftLayer;$/;"	t
defiComponentMaskShiftLayer	def/def/defiComponent.cpp	/^defiComponentMaskShiftLayer::defiComponentMaskShiftLayer(defrData *data)$/;"	f	class:defiComponentMaskShiftLayer
defiComponentMaskShiftLayer	def/def/defiComponent.hpp	/^class defiComponentMaskShiftLayer {$/;"	c
defiComponentMaskShiftLayer_maskShiftLayer	def/cdef/xdefiComponent.cpp	/^const char* defiComponentMaskShiftLayer_maskShiftLayer (const ::defiComponentMaskShiftLayer* obj, int  index) {$/;"	f
defiComponentMaskShiftLayer_numMaskShiftLayers	def/cdef/xdefiComponent.cpp	/^int defiComponentMaskShiftLayer_numMaskShiftLayers (const ::defiComponentMaskShiftLayer* obj) {$/;"	f
defiComponent_EEQ	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_EEQ (const ::defiComponent* obj) {$/;"	f
defiComponent_foreignName	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_foreignName (const ::defiComponent* obj) {$/;"	f
defiComponent_foreignOri	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_foreignOri (const ::defiComponent* obj) {$/;"	f
defiComponent_foreignOrient	def/cdef/xdefiComponent.cpp	/^int defiComponent_foreignOrient (const ::defiComponent* obj) {$/;"	f
defiComponent_foreignX	def/cdef/xdefiComponent.cpp	/^int defiComponent_foreignX (const ::defiComponent* obj) {$/;"	f
defiComponent_foreignY	def/cdef/xdefiComponent.cpp	/^int defiComponent_foreignY (const ::defiComponent* obj) {$/;"	f
defiComponent_generateName	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_generateName (const ::defiComponent* obj) {$/;"	f
defiComponent_h	def/def/defiComponent.hpp	31;"	d
defiComponent_haloDist	def/cdef/xdefiComponent.cpp	/^int defiComponent_haloDist (const ::defiComponent* obj) {$/;"	f
defiComponent_hasEEQ	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasEEQ (const ::defiComponent* obj) {$/;"	f
defiComponent_hasForeignName	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasForeignName (const ::defiComponent* obj) {$/;"	f
defiComponent_hasFori	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasFori (const ::defiComponent* obj) {$/;"	f
defiComponent_hasGenerate	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasGenerate (const ::defiComponent* obj) {$/;"	f
defiComponent_hasHalo	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasHalo (const ::defiComponent* obj) {$/;"	f
defiComponent_hasHaloSoft	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasHaloSoft (const ::defiComponent* obj) {$/;"	f
defiComponent_hasNets	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasNets (const ::defiComponent* obj) {$/;"	f
defiComponent_hasRegionBounds	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasRegionBounds (const ::defiComponent* obj) {$/;"	f
defiComponent_hasRegionName	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasRegionName (const ::defiComponent* obj) {$/;"	f
defiComponent_hasRouteHalo	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasRouteHalo (const ::defiComponent* obj) {$/;"	f
defiComponent_hasSource	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasSource (const ::defiComponent* obj) {$/;"	f
defiComponent_hasWeight	def/cdef/xdefiComponent.cpp	/^int defiComponent_hasWeight (const ::defiComponent* obj) {$/;"	f
defiComponent_id	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_id (const ::defiComponent* obj) {$/;"	f
defiComponent_isCover	def/cdef/xdefiComponent.cpp	/^int defiComponent_isCover (const ::defiComponent* obj) {$/;"	f
defiComponent_isFixed	def/cdef/xdefiComponent.cpp	/^int defiComponent_isFixed (const ::defiComponent* obj) {$/;"	f
defiComponent_isPlaced	def/cdef/xdefiComponent.cpp	/^int defiComponent_isPlaced (const ::defiComponent* obj) {$/;"	f
defiComponent_isUnplaced	def/cdef/xdefiComponent.cpp	/^int defiComponent_isUnplaced (const ::defiComponent* obj) {$/;"	f
defiComponent_macroName	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_macroName (const ::defiComponent* obj) {$/;"	f
defiComponent_maskShift	def/cdef/xdefiComponent.cpp	/^int defiComponent_maskShift (const ::defiComponent* obj, int  index) {$/;"	f
defiComponent_maskShiftSize	def/cdef/xdefiComponent.cpp	/^int defiComponent_maskShiftSize (const ::defiComponent* obj) {$/;"	f
defiComponent_maxLayer	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_maxLayer (const ::defiComponent* obj) {$/;"	f
defiComponent_minLayer	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_minLayer (const ::defiComponent* obj) {$/;"	f
defiComponent_name	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_name (const ::defiComponent* obj) {$/;"	f
defiComponent_net	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_net (const ::defiComponent* obj, int  index) {$/;"	f
defiComponent_numNets	def/cdef/xdefiComponent.cpp	/^int defiComponent_numNets (const ::defiComponent* obj) {$/;"	f
defiComponent_numProps	def/cdef/xdefiComponent.cpp	/^int defiComponent_numProps (const ::defiComponent* obj) {$/;"	f
defiComponent_placementOrient	def/cdef/xdefiComponent.cpp	/^int defiComponent_placementOrient (const ::defiComponent* obj) {$/;"	f
defiComponent_placementOrientStr	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_placementOrientStr (const ::defiComponent* obj) {$/;"	f
defiComponent_placementStatus	def/cdef/xdefiComponent.cpp	/^int defiComponent_placementStatus (const ::defiComponent* obj) {$/;"	f
defiComponent_placementX	def/cdef/xdefiComponent.cpp	/^int defiComponent_placementX (const ::defiComponent* obj) {$/;"	f
defiComponent_placementY	def/cdef/xdefiComponent.cpp	/^int defiComponent_placementY (const ::defiComponent* obj) {$/;"	f
defiComponent_print	def/cdef/xdefiComponent.cpp	/^void defiComponent_print (const ::defiComponent* obj, FILE*  fout) {$/;"	f
defiComponent_propIsNumber	def/cdef/xdefiComponent.cpp	/^int defiComponent_propIsNumber (const ::defiComponent* obj, int  index) {$/;"	f
defiComponent_propIsString	def/cdef/xdefiComponent.cpp	/^int defiComponent_propIsString (const ::defiComponent* obj, int  index) {$/;"	f
defiComponent_propName	def/cdef/xdefiComponent.cpp	/^char* defiComponent_propName (const ::defiComponent* obj, int  index) {$/;"	f
defiComponent_propNumber	def/cdef/xdefiComponent.cpp	/^double defiComponent_propNumber (const ::defiComponent* obj, int  index) {$/;"	f
defiComponent_propType	def/cdef/xdefiComponent.cpp	/^char defiComponent_propType (const ::defiComponent* obj, int  index) {$/;"	f
defiComponent_propValue	def/cdef/xdefiComponent.cpp	/^char* defiComponent_propValue (const ::defiComponent* obj, int  index) {$/;"	f
defiComponent_regionBounds	def/cdef/xdefiComponent.cpp	/^void defiComponent_regionBounds (const ::defiComponent* obj, int* size, int**  xl, int**  yl, int**  xh, int**  yh) {$/;"	f
defiComponent_regionName	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_regionName (const ::defiComponent* obj) {$/;"	f
defiComponent_source	def/cdef/xdefiComponent.cpp	/^const char* defiComponent_source (const ::defiComponent* obj) {$/;"	f
defiComponent_weight	def/cdef/xdefiComponent.cpp	/^int defiComponent_weight (const ::defiComponent* obj) {$/;"	f
defiDebug	def/cdef/xdefiDebug.cpp	/^int defiDebug (int  num) {$/;"	f
defiDebug	def/def/defiDebug.cpp	/^int defiDebug(int) {$/;"	f
defiDebug_h	def/def/defiDebug.hpp	31;"	d
defiDeltaNumberLines	def/def/defrSettings.hpp	/^    int defiDeltaNumberLines;$/;"	m	class:defrSettings
defiError	def/cdef/xdefiDebug.cpp	/^void defiError (int  check, int  msgNum, const char*  message) {$/;"	f
defiError	def/def/defiDebug.cpp	/^void defiError(int check, int msgNum, const char* mess, defrData *defData) {$/;"	f
defiError	def/def/defrData.cpp	/^defrData::defiError(int check, int msgNum, const char* mess) $/;"	f	class:defrData
defiFILL_h	def/def/defiFill.hpp	31;"	d
defiFPC	def/cdef/defiTypedefs.h	/^typedef void *defiFPC;$/;"	t
defiFPC	def/def/defiFPC.cpp	/^defiFPC::defiFPC(defrData *data)$/;"	f	class:defiFPC
defiFPC	def/def/defiFPC.hpp	/^class defiFPC {$/;"	c
defiFPC_alignMax	def/cdef/xdefiFPC.cpp	/^double defiFPC_alignMax (const ::defiFPC* obj) {$/;"	f
defiFPC_alignMin	def/cdef/xdefiFPC.cpp	/^double defiFPC_alignMin (const ::defiFPC* obj) {$/;"	f
defiFPC_equal	def/cdef/xdefiFPC.cpp	/^double defiFPC_equal (const ::defiFPC* obj) {$/;"	f
defiFPC_getPart	def/cdef/xdefiFPC.cpp	/^void defiFPC_getPart (const ::defiFPC* obj, int  index, int*  corner, int*  typ, char**  name) {$/;"	f
defiFPC_h	def/def/defiFPC.hpp	31;"	d
defiFPC_hasAlign	def/cdef/xdefiFPC.cpp	/^int defiFPC_hasAlign (const ::defiFPC* obj) {$/;"	f
defiFPC_hasEqual	def/cdef/xdefiFPC.cpp	/^int defiFPC_hasEqual (const ::defiFPC* obj) {$/;"	f
defiFPC_hasMax	def/cdef/xdefiFPC.cpp	/^int defiFPC_hasMax (const ::defiFPC* obj) {$/;"	f
defiFPC_hasMin	def/cdef/xdefiFPC.cpp	/^int defiFPC_hasMin (const ::defiFPC* obj) {$/;"	f
defiFPC_isHorizontal	def/cdef/xdefiFPC.cpp	/^int defiFPC_isHorizontal (const ::defiFPC* obj) {$/;"	f
defiFPC_isVertical	def/cdef/xdefiFPC.cpp	/^int defiFPC_isVertical (const ::defiFPC* obj) {$/;"	f
defiFPC_name	def/cdef/xdefiFPC.cpp	/^const char* defiFPC_name (const ::defiFPC* obj) {$/;"	f
defiFPC_numParts	def/cdef/xdefiFPC.cpp	/^int defiFPC_numParts (const ::defiFPC* obj) {$/;"	f
defiFPC_print	def/cdef/xdefiFPC.cpp	/^void defiFPC_print (const ::defiFPC* obj, FILE*  f) {$/;"	f
defiFill	def/cdef/defiTypedefs.h	/^typedef void *defiFill;$/;"	t
defiFill	def/def/defiFill.cpp	/^defiFill::defiFill(defrData *data) $/;"	f	class:defiFill
defiFill	def/def/defiFill.hpp	/^class defiFill {$/;"	c
defiFill_getPolygon	def/cdef/xdefiFill.cpp	/^::defiPoints defiFill_getPolygon (const ::defiFill* obj, int  index) {$/;"	f
defiFill_getViaPts	def/cdef/xdefiFill.cpp	/^::defiPoints defiFill_getViaPts (const ::defiFill* obj, int  index) {$/;"	f
defiFill_hasLayer	def/cdef/xdefiFill.cpp	/^int defiFill_hasLayer (const ::defiFill* obj) {$/;"	f
defiFill_hasLayerOpc	def/cdef/xdefiFill.cpp	/^int defiFill_hasLayerOpc (const ::defiFill* obj) {$/;"	f
defiFill_hasVia	def/cdef/xdefiFill.cpp	/^int defiFill_hasVia (const ::defiFill* obj) {$/;"	f
defiFill_hasViaOpc	def/cdef/xdefiFill.cpp	/^int defiFill_hasViaOpc (const ::defiFill* obj) {$/;"	f
defiFill_layerMask	def/cdef/xdefiFill.cpp	/^int defiFill_layerMask (const ::defiFill* obj) {$/;"	f
defiFill_layerName	def/cdef/xdefiFill.cpp	/^const char* defiFill_layerName (const ::defiFill* obj) {$/;"	f
defiFill_numPolygons	def/cdef/xdefiFill.cpp	/^int defiFill_numPolygons (const ::defiFill* obj) {$/;"	f
defiFill_numRectangles	def/cdef/xdefiFill.cpp	/^int defiFill_numRectangles (const ::defiFill* obj) {$/;"	f
defiFill_numViaPts	def/cdef/xdefiFill.cpp	/^int defiFill_numViaPts (const ::defiFill* obj) {$/;"	f
defiFill_print	def/cdef/xdefiFill.cpp	/^void defiFill_print (const ::defiFill* obj, FILE*  f) {$/;"	f
defiFill_viaBottomMask	def/cdef/xdefiFill.cpp	/^int defiFill_viaBottomMask (const ::defiFill* obj) {$/;"	f
defiFill_viaCutMask	def/cdef/xdefiFill.cpp	/^int defiFill_viaCutMask (const ::defiFill* obj) {$/;"	f
defiFill_viaName	def/cdef/xdefiFill.cpp	/^const char* defiFill_viaName (const ::defiFill* obj) {$/;"	f
defiFill_viaTopMask	def/cdef/xdefiFill.cpp	/^int defiFill_viaTopMask (const ::defiFill* obj) {$/;"	f
defiFill_xh	def/cdef/xdefiFill.cpp	/^int defiFill_xh (const ::defiFill* obj, int  index) {$/;"	f
defiFill_xl	def/cdef/xdefiFill.cpp	/^int defiFill_xl (const ::defiFill* obj, int  index) {$/;"	f
defiFill_yh	def/cdef/xdefiFill.cpp	/^int defiFill_yh (const ::defiFill* obj, int  index) {$/;"	f
defiFill_yl	def/cdef/xdefiFill.cpp	/^int defiFill_yl (const ::defiFill* obj, int  index) {$/;"	f
defiGcellGrid	def/cdef/defiTypedefs.h	/^typedef void *defiGcellGrid;$/;"	t
defiGcellGrid	def/def/defiRowTrack.cpp	/^defiGcellGrid::defiGcellGrid(defrData *data)$/;"	f	class:defiGcellGrid
defiGcellGrid	def/def/defiRowTrack.hpp	/^class defiGcellGrid {$/;"	c
defiGcellGrid_macro	def/cdef/xdefiRowTrack.cpp	/^const char* defiGcellGrid_macro (const ::defiGcellGrid* obj) {$/;"	f
defiGcellGrid_print	def/cdef/xdefiRowTrack.cpp	/^void defiGcellGrid_print (const ::defiGcellGrid* obj, FILE*  f) {$/;"	f
defiGcellGrid_x	def/cdef/xdefiRowTrack.cpp	/^int defiGcellGrid_x (const ::defiGcellGrid* obj) {$/;"	f
defiGcellGrid_xNum	def/cdef/xdefiRowTrack.cpp	/^int defiGcellGrid_xNum (const ::defiGcellGrid* obj) {$/;"	f
defiGcellGrid_xStep	def/cdef/xdefiRowTrack.cpp	/^double defiGcellGrid_xStep (const ::defiGcellGrid* obj) {$/;"	f
defiGeometries	def/cdef/defiTypedefs.h	/^typedef void *defiGeometries;$/;"	t
defiGeometries	def/def/defiMisc.cpp	/^defiGeometries::defiGeometries(defrData *data)$/;"	f	class:defiGeometries
defiGeometries	def/def/defiMisc.hpp	/^class defiGeometries {$/;"	c
defiGeometries_numPoints	def/cdef/xdefiMisc.cpp	/^int defiGeometries_numPoints (const ::defiGeometries* obj) {$/;"	f
defiGeometries_points	def/cdef/xdefiMisc.cpp	/^void defiGeometries_points (const ::defiGeometries* obj, int  index, int*  x, int*  y) {$/;"	f
defiGroup	def/cdef/defiTypedefs.h	/^typedef void *defiGroup;$/;"	t
defiGroup	def/def/defiGroup.cpp	/^defiGroup::defiGroup(defrData *data) $/;"	f	class:defiGroup
defiGroup	def/def/defiGroup.hpp	/^class defiGroup {$/;"	c
defiGroup_h	def/def/defiGroup.hpp	31;"	d
defiGroup_hasMaxX	def/cdef/xdefiGroup.cpp	/^int defiGroup_hasMaxX (const ::defiGroup* obj) {$/;"	f
defiGroup_hasMaxY	def/cdef/xdefiGroup.cpp	/^int defiGroup_hasMaxY (const ::defiGroup* obj) {$/;"	f
defiGroup_hasPerim	def/cdef/xdefiGroup.cpp	/^int defiGroup_hasPerim (const ::defiGroup* obj) {$/;"	f
defiGroup_hasRegionBox	def/cdef/xdefiGroup.cpp	/^int defiGroup_hasRegionBox (const ::defiGroup* obj) {$/;"	f
defiGroup_hasRegionName	def/cdef/xdefiGroup.cpp	/^int defiGroup_hasRegionName (const ::defiGroup* obj) {$/;"	f
defiGroup_maxX	def/cdef/xdefiGroup.cpp	/^int defiGroup_maxX (const ::defiGroup* obj) {$/;"	f
defiGroup_maxY	def/cdef/xdefiGroup.cpp	/^int defiGroup_maxY (const ::defiGroup* obj) {$/;"	f
defiGroup_name	def/cdef/xdefiGroup.cpp	/^const char* defiGroup_name (const ::defiGroup* obj) {$/;"	f
defiGroup_numProps	def/cdef/xdefiGroup.cpp	/^int defiGroup_numProps (const ::defiGroup* obj) {$/;"	f
defiGroup_perim	def/cdef/xdefiGroup.cpp	/^int defiGroup_perim (const ::defiGroup* obj) {$/;"	f
defiGroup_print	def/cdef/xdefiGroup.cpp	/^void defiGroup_print (const ::defiGroup* obj, FILE*  f) {$/;"	f
defiGroup_propIsNumber	def/cdef/xdefiGroup.cpp	/^int defiGroup_propIsNumber (const ::defiGroup* obj, int  index) {$/;"	f
defiGroup_propIsString	def/cdef/xdefiGroup.cpp	/^int defiGroup_propIsString (const ::defiGroup* obj, int  index) {$/;"	f
defiGroup_propName	def/cdef/xdefiGroup.cpp	/^const char* defiGroup_propName (const ::defiGroup* obj, int  index) {$/;"	f
defiGroup_propNumber	def/cdef/xdefiGroup.cpp	/^double defiGroup_propNumber (const ::defiGroup* obj, int  index) {$/;"	f
defiGroup_propType	def/cdef/xdefiGroup.cpp	/^const char defiGroup_propType (const ::defiGroup* obj, int  index) {$/;"	f
defiGroup_propValue	def/cdef/xdefiGroup.cpp	/^const char* defiGroup_propValue (const ::defiGroup* obj, int  index) {$/;"	f
defiGroup_regionName	def/cdef/xdefiGroup.cpp	/^const char* defiGroup_regionName (const ::defiGroup* obj) {$/;"	f
defiGroup_regionRects	def/cdef/xdefiGroup.cpp	/^void defiGroup_regionRects (const ::defiGroup* obj, int*  size, int**  xl, int** yl, int**  xh, int**  yh) {$/;"	f
defiIOTiming	def/cdef/defiTypedefs.h	/^typedef void *defiIOTiming;$/;"	t
defiIOTiming	def/def/defiIOTiming.cpp	/^defiIOTiming::defiIOTiming(defrData *data)$/;"	f	class:defiIOTiming
defiIOTiming	def/def/defiIOTiming.hpp	/^class defiIOTiming {$/;"	c
defiIOTiming_capacitance	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_capacitance (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_driveCell	def/cdef/xdefiIOTiming.cpp	/^const char* defiIOTiming_driveCell (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_from	def/cdef/xdefiIOTiming.cpp	/^const char* defiIOTiming_from (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_h	def/def/defiIOTiming.hpp	31;"	d
defiIOTiming_hasCapacitance	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasCapacitance (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_hasDriveCell	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasDriveCell (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_hasFrom	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasFrom (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_hasParallel	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasParallel (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_hasSlewFall	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasSlewFall (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_hasSlewRise	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasSlewRise (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_hasTo	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasTo (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_hasVariableFall	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasVariableFall (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_hasVariableRise	def/cdef/xdefiIOTiming.cpp	/^int defiIOTiming_hasVariableRise (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_inst	def/cdef/xdefiIOTiming.cpp	/^const char* defiIOTiming_inst (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_parallel	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_parallel (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_pin	def/cdef/xdefiIOTiming.cpp	/^const char* defiIOTiming_pin (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_print	def/cdef/xdefiIOTiming.cpp	/^void defiIOTiming_print (const ::defiIOTiming* obj, FILE*  f) {$/;"	f
defiIOTiming_slewFallMax	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_slewFallMax (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_slewFallMin	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_slewFallMin (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_slewRiseMax	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_slewRiseMax (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_slewRiseMin	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_slewRiseMin (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_to	def/cdef/xdefiIOTiming.cpp	/^const char* defiIOTiming_to (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_variableFallMax	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_variableFallMax (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_variableFallMin	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_variableFallMin (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_variableRiseMax	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_variableRiseMax (const ::defiIOTiming* obj) {$/;"	f
defiIOTiming_variableRiseMin	def/cdef/xdefiIOTiming.cpp	/^double defiIOTiming_variableRiseMin (const ::defiIOTiming* obj) {$/;"	f
defiInvalidMemoryPolicy	def/def/defiDefs.hpp	/^  defiInvalidMemoryPolicy = 23950,$/;"	e	enum:__anon16
defiInvalidObject	def/def/defiDefs.hpp	/^  defiInvalidObject = 41713, $/;"	e	enum:__anon15
defiKRDEFS_h	def/def/defiKRDefs.hpp	31;"	d
defiMemoryPolicy_e	def/def/defiDefs.hpp	/^} defiMemoryPolicy_e;$/;"	t	typeref:enum:__anon16
defiMisc_h	def/def/defiMisc.hpp	31;"	d
defiNet	def/cdef/defiTypedefs.h	/^typedef void *defiNet;$/;"	t
defiNet	def/def/defiNet.cpp	/^defiNet::defiNet(defrData *data)$/;"	f	class:defiNet
defiNet	def/def/defiNet.hpp	/^class defiNet {$/;"	c
defiNet_XTalk	def/cdef/xdefiNet.cpp	/^int defiNet_XTalk (const ::defiNet* obj) {$/;"	f
defiNet_bottomMaskNum	def/cdef/xdefiNet.cpp	/^const int defiNet_bottomMaskNum (const ::defiNet* obj, int  index) {$/;"	f
defiNet_cap	def/cdef/xdefiNet.cpp	/^double defiNet_cap (const ::defiNet* obj) {$/;"	f
defiNet_cutMaskNum	def/cdef/xdefiNet.cpp	/^const int defiNet_cutMaskNum (const ::defiNet* obj, int  index) {$/;"	f
defiNet_frequency	def/cdef/xdefiNet.cpp	/^double defiNet_frequency (const ::defiNet* obj) {$/;"	f
defiNet_getPolygon	def/cdef/xdefiNet.cpp	/^::defiPoints defiNet_getPolygon (const ::defiNet* obj, int  index) {$/;"	f
defiNet_getViaPts	def/cdef/xdefiNet.cpp	/^::defiPoints defiNet_getViaPts (const ::defiNet* obj, int  index) {$/;"	f
defiNet_h	def/def/defiNet.hpp	31;"	d
defiNet_hasCap	def/cdef/xdefiNet.cpp	/^int defiNet_hasCap (const ::defiNet* obj) {$/;"	f
defiNet_hasFixedbump	def/cdef/xdefiNet.cpp	/^int defiNet_hasFixedbump (const ::defiNet* obj) {$/;"	f
defiNet_hasFrequency	def/cdef/xdefiNet.cpp	/^int defiNet_hasFrequency (const ::defiNet* obj) {$/;"	f
defiNet_hasNonDefaultRule	def/cdef/xdefiNet.cpp	/^int defiNet_hasNonDefaultRule (const ::defiNet* obj) {$/;"	f
defiNet_hasOriginal	def/cdef/xdefiNet.cpp	/^int defiNet_hasOriginal (const ::defiNet* obj) {$/;"	f
defiNet_hasPattern	def/cdef/xdefiNet.cpp	/^int defiNet_hasPattern (const ::defiNet* obj) {$/;"	f
defiNet_hasProps	def/cdef/xdefiNet.cpp	/^int defiNet_hasProps (const ::defiNet* obj) {$/;"	f
defiNet_hasSource	def/cdef/xdefiNet.cpp	/^int defiNet_hasSource (const ::defiNet* obj) {$/;"	f
defiNet_hasSpacingRules	def/cdef/xdefiNet.cpp	/^int defiNet_hasSpacingRules (const ::defiNet* obj) {$/;"	f
defiNet_hasStyle	def/cdef/xdefiNet.cpp	/^int defiNet_hasStyle (const ::defiNet* obj) {$/;"	f
defiNet_hasSubnets	def/cdef/xdefiNet.cpp	/^int defiNet_hasSubnets (const ::defiNet* obj) {$/;"	f
defiNet_hasUse	def/cdef/xdefiNet.cpp	/^int defiNet_hasUse (const ::defiNet* obj) {$/;"	f
defiNet_hasVoltage	def/cdef/xdefiNet.cpp	/^int defiNet_hasVoltage (const ::defiNet* obj) {$/;"	f
defiNet_hasWeight	def/cdef/xdefiNet.cpp	/^int defiNet_hasWeight (const ::defiNet* obj) {$/;"	f
defiNet_hasWidthRules	def/cdef/xdefiNet.cpp	/^int defiNet_hasWidthRules (const ::defiNet* obj) {$/;"	f
defiNet_hasXTalk	def/cdef/xdefiNet.cpp	/^int defiNet_hasXTalk (const ::defiNet* obj) {$/;"	f
defiNet_instance	def/cdef/xdefiNet.cpp	/^const char* defiNet_instance (const ::defiNet* obj, int  index) {$/;"	f
defiNet_isCover	def/cdef/xdefiNet.cpp	/^int defiNet_isCover (const ::defiNet* obj) {$/;"	f
defiNet_isFixed	def/cdef/xdefiNet.cpp	/^int defiNet_isFixed (const ::defiNet* obj) {$/;"	f
defiNet_isRouted	def/cdef/xdefiNet.cpp	/^int defiNet_isRouted (const ::defiNet* obj) {$/;"	f
defiNet_name	def/cdef/xdefiNet.cpp	/^const char* defiNet_name (const ::defiNet* obj) {$/;"	f
defiNet_noShield	def/cdef/xdefiNet.cpp	/^const ::defiShield* defiNet_noShield (const ::defiNet* obj, int  index) {$/;"	f
defiNet_nonDefaultRule	def/cdef/xdefiNet.cpp	/^const char* defiNet_nonDefaultRule (const ::defiNet* obj) {$/;"	f
defiNet_numConnections	def/cdef/xdefiNet.cpp	/^int defiNet_numConnections (const ::defiNet* obj) {$/;"	f
defiNet_numNoShields	def/cdef/xdefiNet.cpp	/^int defiNet_numNoShields (const ::defiNet* obj) {$/;"	f
defiNet_numPaths	def/cdef/xdefiNet.cpp	/^int defiNet_numPaths (const ::defiNet* obj) {$/;"	f
defiNet_numPolygons	def/cdef/xdefiNet.cpp	/^int defiNet_numPolygons (const ::defiNet* obj) {$/;"	f
defiNet_numProps	def/cdef/xdefiNet.cpp	/^int defiNet_numProps (const ::defiNet* obj) {$/;"	f
defiNet_numRectangles	def/cdef/xdefiNet.cpp	/^int defiNet_numRectangles (const ::defiNet* obj) {$/;"	f
defiNet_numShieldNets	def/cdef/xdefiNet.cpp	/^int defiNet_numShieldNets (const ::defiNet* obj) {$/;"	f
defiNet_numShields	def/cdef/xdefiNet.cpp	/^int defiNet_numShields (const ::defiNet* obj) {$/;"	f
defiNet_numSpacingRules	def/cdef/xdefiNet.cpp	/^int defiNet_numSpacingRules (const ::defiNet* obj) {$/;"	f
defiNet_numSubnets	def/cdef/xdefiNet.cpp	/^int defiNet_numSubnets (const ::defiNet* obj) {$/;"	f
defiNet_numViaSpecs	def/cdef/xdefiNet.cpp	/^int defiNet_numViaSpecs (const ::defiNet* obj) {$/;"	f
defiNet_numVpins	def/cdef/xdefiNet.cpp	/^int defiNet_numVpins (const ::defiNet* obj) {$/;"	f
defiNet_numWidthRules	def/cdef/xdefiNet.cpp	/^int defiNet_numWidthRules (const ::defiNet* obj) {$/;"	f
defiNet_numWires	def/cdef/xdefiNet.cpp	/^int defiNet_numWires (const ::defiNet* obj) {$/;"	f
defiNet_original	def/cdef/xdefiNet.cpp	/^const char* defiNet_original (const ::defiNet* obj) {$/;"	f
defiNet_path	def/cdef/xdefiNet.cpp	/^const ::defiPath* defiNet_path (const ::defiNet* obj, int  index) {$/;"	f
defiNet_pattern	def/cdef/xdefiNet.cpp	/^const char* defiNet_pattern (const ::defiNet* obj) {$/;"	f
defiNet_pin	def/cdef/xdefiNet.cpp	/^const char* defiNet_pin (const ::defiNet* obj, int  index) {$/;"	f
defiNet_pinIsMustJoin	def/cdef/xdefiNet.cpp	/^int defiNet_pinIsMustJoin (const ::defiNet* obj, int  index) {$/;"	f
defiNet_pinIsSynthesized	def/cdef/xdefiNet.cpp	/^int defiNet_pinIsSynthesized (const ::defiNet* obj, int  index) {$/;"	f
defiNet_polyMask	def/cdef/xdefiNet.cpp	/^int defiNet_polyMask (const ::defiNet* obj, int  index) {$/;"	f
defiNet_polyRouteStatus	def/cdef/xdefiNet.cpp	/^const char* defiNet_polyRouteStatus (const ::defiNet* obj, int  index) {$/;"	f
defiNet_polyRouteStatusShieldName	def/cdef/xdefiNet.cpp	/^const char* defiNet_polyRouteStatusShieldName (const ::defiNet* obj, int  index) {$/;"	f
defiNet_polyShapeType	def/cdef/xdefiNet.cpp	/^const char* defiNet_polyShapeType (const ::defiNet* obj, int  index) {$/;"	f
defiNet_polygonName	def/cdef/xdefiNet.cpp	/^const char* defiNet_polygonName (const ::defiNet* obj, int  index) {$/;"	f
defiNet_print	def/cdef/xdefiNet.cpp	/^void defiNet_print (const ::defiNet* obj, FILE*  f) {$/;"	f
defiNet_propIsNumber	def/cdef/xdefiNet.cpp	/^int defiNet_propIsNumber (const ::defiNet* obj, int  index) {$/;"	f
defiNet_propIsString	def/cdef/xdefiNet.cpp	/^int defiNet_propIsString (const ::defiNet* obj, int  index) {$/;"	f
defiNet_propName	def/cdef/xdefiNet.cpp	/^const char* defiNet_propName (const ::defiNet* obj, int  index) {$/;"	f
defiNet_propNumber	def/cdef/xdefiNet.cpp	/^double defiNet_propNumber (const ::defiNet* obj, int  index) {$/;"	f
defiNet_propType	def/cdef/xdefiNet.cpp	/^const char defiNet_propType (const ::defiNet* obj, int  index) {$/;"	f
defiNet_propValue	def/cdef/xdefiNet.cpp	/^const char* defiNet_propValue (const ::defiNet* obj, int  index) {$/;"	f
defiNet_rectMask	def/cdef/xdefiNet.cpp	/^int defiNet_rectMask (const ::defiNet* obj, int  index) {$/;"	f
defiNet_rectName	def/cdef/xdefiNet.cpp	/^const char* defiNet_rectName (const ::defiNet* obj, int  index) {$/;"	f
defiNet_rectRouteStatus	def/cdef/xdefiNet.cpp	/^const char* defiNet_rectRouteStatus (const ::defiNet* obj, int  index) {$/;"	f
defiNet_rectRouteStatusShieldName	def/cdef/xdefiNet.cpp	/^const char* defiNet_rectRouteStatusShieldName (const ::defiNet* obj, int  index) {$/;"	f
defiNet_rectShapeType	def/cdef/xdefiNet.cpp	/^const char* defiNet_rectShapeType (const ::defiNet* obj, int  index) {$/;"	f
defiNet_shield	def/cdef/xdefiNet.cpp	/^const ::defiShield* defiNet_shield (const ::defiNet* obj, int  index) {$/;"	f
defiNet_shieldNet	def/cdef/xdefiNet.cpp	/^const char* defiNet_shieldNet (const ::defiNet* obj, int  index) {$/;"	f
defiNet_source	def/cdef/xdefiNet.cpp	/^const char* defiNet_source (const ::defiNet* obj) {$/;"	f
defiNet_spacingRule	def/cdef/xdefiNet.cpp	/^void defiNet_spacingRule (const ::defiNet* obj, int  index, char**  layer, double*  dist, double*  left, double*  right) {$/;"	f
defiNet_style	def/cdef/xdefiNet.cpp	/^int defiNet_style (const ::defiNet* obj) {$/;"	f
defiNet_subnet	def/cdef/xdefiNet.cpp	/^const ::defiSubnet* defiNet_subnet (const ::defiNet* obj, int  index) {$/;"	f
defiNet_topMaskNum	def/cdef/xdefiNet.cpp	/^const int defiNet_topMaskNum (const ::defiNet* obj, int  index) {$/;"	f
defiNet_use	def/cdef/xdefiNet.cpp	/^const char* defiNet_use (const ::defiNet* obj) {$/;"	f
defiNet_viaName	def/cdef/xdefiNet.cpp	/^const char* defiNet_viaName (const ::defiNet* obj, int  index) {$/;"	f
defiNet_viaOrient	def/cdef/xdefiNet.cpp	/^const int defiNet_viaOrient (const ::defiNet* obj, int  index) {$/;"	f
defiNet_viaOrientStr	def/cdef/xdefiNet.cpp	/^const char* defiNet_viaOrientStr (const ::defiNet* obj, int  index) {$/;"	f
defiNet_viaRouteStatus	def/cdef/xdefiNet.cpp	/^const char* defiNet_viaRouteStatus (const ::defiNet* obj, int  index) {$/;"	f
defiNet_viaRouteStatusShieldName	def/cdef/xdefiNet.cpp	/^const char* defiNet_viaRouteStatusShieldName (const ::defiNet* obj, int  index) {$/;"	f
defiNet_viaShapeType	def/cdef/xdefiNet.cpp	/^const char* defiNet_viaShapeType (const ::defiNet* obj, int  index) {$/;"	f
defiNet_voltage	def/cdef/xdefiNet.cpp	/^double defiNet_voltage (const ::defiNet* obj) {$/;"	f
defiNet_vpin	def/cdef/xdefiNet.cpp	/^const ::defiVpin* defiNet_vpin (const ::defiNet* obj, int  index) {$/;"	f
defiNet_weight	def/cdef/xdefiNet.cpp	/^int defiNet_weight (const ::defiNet* obj) {$/;"	f
defiNet_widthRule	def/cdef/xdefiNet.cpp	/^void defiNet_widthRule (const ::defiNet* obj, int  index, char**  layer, double*  dist) {$/;"	f
defiNet_wire	def/cdef/xdefiNet.cpp	/^const ::defiWire* defiNet_wire (const ::defiNet* obj, int  index) {$/;"	f
defiNet_xh	def/cdef/xdefiNet.cpp	/^int defiNet_xh (const ::defiNet* obj, int  index) {$/;"	f
defiNet_xl	def/cdef/xdefiNet.cpp	/^int defiNet_xl (const ::defiNet* obj, int  index) {$/;"	f
defiNet_yh	def/cdef/xdefiNet.cpp	/^int defiNet_yh (const ::defiNet* obj, int  index) {$/;"	f
defiNet_yl	def/cdef/xdefiNet.cpp	/^int defiNet_yl (const ::defiNet* obj, int  index) {$/;"	f
defiNonDefault	def/cdef/defiTypedefs.h	/^typedef void *defiNonDefault;$/;"	t
defiNonDefault	def/def/defiNonDefault.cpp	/^defiNonDefault::defiNonDefault(defrData *data)$/;"	f	class:defiNonDefault
defiNonDefault	def/def/defiNonDefault.hpp	/^class defiNonDefault {$/;"	c
defiNonDefault_cutLayerName	def/cdef/xdefiNonDefault.cpp	/^const char* defiNonDefault_cutLayerName (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_h	def/def/defiNonDefault.hpp	31;"	d
defiNonDefault_hasHardspacing	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_hasHardspacing (const ::defiNonDefault* obj) {$/;"	f
defiNonDefault_hasLayerDiagWidth	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_hasLayerDiagWidth (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_hasLayerSpacing	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_hasLayerSpacing (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_hasLayerWireExt	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_hasLayerWireExt (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerDiagWidth	def/cdef/xdefiNonDefault.cpp	/^double defiNonDefault_layerDiagWidth (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerDiagWidthVal	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_layerDiagWidthVal (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerName	def/cdef/xdefiNonDefault.cpp	/^const char* defiNonDefault_layerName (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerSpacing	def/cdef/xdefiNonDefault.cpp	/^double defiNonDefault_layerSpacing (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerSpacingVal	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_layerSpacingVal (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerWidth	def/cdef/xdefiNonDefault.cpp	/^double defiNonDefault_layerWidth (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerWidthVal	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_layerWidthVal (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerWireExt	def/cdef/xdefiNonDefault.cpp	/^double defiNonDefault_layerWireExt (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_layerWireExtVal	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_layerWireExtVal (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_name	def/cdef/xdefiNonDefault.cpp	/^const char* defiNonDefault_name (const ::defiNonDefault* obj) {$/;"	f
defiNonDefault_numCuts	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_numCuts (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_numLayers	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_numLayers (const ::defiNonDefault* obj) {$/;"	f
defiNonDefault_numMinCuts	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_numMinCuts (const ::defiNonDefault* obj) {$/;"	f
defiNonDefault_numProps	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_numProps (const ::defiNonDefault* obj) {$/;"	f
defiNonDefault_numViaRules	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_numViaRules (const ::defiNonDefault* obj) {$/;"	f
defiNonDefault_numVias	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_numVias (const ::defiNonDefault* obj) {$/;"	f
defiNonDefault_print	def/cdef/xdefiNonDefault.cpp	/^void defiNonDefault_print (const ::defiNonDefault* obj, FILE*  f) {$/;"	f
defiNonDefault_propIsNumber	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_propIsNumber (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_propIsString	def/cdef/xdefiNonDefault.cpp	/^int defiNonDefault_propIsString (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_propName	def/cdef/xdefiNonDefault.cpp	/^const char* defiNonDefault_propName (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_propNumber	def/cdef/xdefiNonDefault.cpp	/^double defiNonDefault_propNumber (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_propType	def/cdef/xdefiNonDefault.cpp	/^const char defiNonDefault_propType (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_propValue	def/cdef/xdefiNonDefault.cpp	/^const char* defiNonDefault_propValue (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_viaName	def/cdef/xdefiNonDefault.cpp	/^const char* defiNonDefault_viaName (const ::defiNonDefault* obj, int  index) {$/;"	f
defiNonDefault_viaRuleName	def/cdef/xdefiNonDefault.cpp	/^const char* defiNonDefault_viaRuleName (const ::defiNonDefault* obj, int  index) {$/;"	f
defiObjectType_e	def/def/defiDefs.hpp	/^} defiObjectType_e;$/;"	t	typeref:enum:__anon15
defiOrdered	def/cdef/defiTypedefs.h	/^typedef void *defiOrdered;$/;"	t
defiOrdered	def/def/defiScanchain.cpp	/^defiOrdered::defiOrdered(defrData *data)$/;"	f	class:defiOrdered
defiOrdered	def/def/defiScanchain.hpp	/^class defiOrdered {$/;"	c
defiOrdered_bits	def/cdef/xdefiScanchain.cpp	/^int* defiOrdered_bits (const ::defiOrdered* obj) {$/;"	f
defiOrdered_in	def/cdef/xdefiScanchain.cpp	/^char** defiOrdered_in (const ::defiOrdered* obj) {$/;"	f
defiOrdered_inst	def/cdef/xdefiScanchain.cpp	/^char** defiOrdered_inst (const ::defiOrdered* obj) {$/;"	f
defiOrdered_num	def/cdef/xdefiScanchain.cpp	/^int defiOrdered_num (const ::defiOrdered* obj) {$/;"	f
defiOrdered_out	def/cdef/xdefiScanchain.cpp	/^char** defiOrdered_out (const ::defiOrdered* obj) {$/;"	f
defiOrientStr	def/def/defiUtil.cpp	/^const char* defiOrientStr(int orient) {$/;"	f
defiOrphanSubObjects	def/def/defiDefs.hpp	/^  defiOrphanSubObjects,       \/\/ deep copy, no delete$/;"	e	enum:__anon16
defiPartition	def/cdef/defiTypedefs.h	/^typedef void *defiPartition;$/;"	t
defiPartition	def/def/defiPartition.cpp	/^defiPartition::defiPartition(defrData *data)$/;"	f	class:defiPartition
defiPartition	def/def/defiPartition.hpp	/^class defiPartition {$/;"	c
defiPartition_direction	def/cdef/xdefiPartition.cpp	/^char defiPartition_direction (const ::defiPartition* obj) {$/;"	f
defiPartition_fallMax	def/cdef/xdefiPartition.cpp	/^double defiPartition_fallMax (const ::defiPartition* obj) {$/;"	f
defiPartition_fallMaxLeft	def/cdef/xdefiPartition.cpp	/^double defiPartition_fallMaxLeft (const ::defiPartition* obj) {$/;"	f
defiPartition_fallMaxRight	def/cdef/xdefiPartition.cpp	/^double defiPartition_fallMaxRight (const ::defiPartition* obj) {$/;"	f
defiPartition_fallMin	def/cdef/xdefiPartition.cpp	/^double defiPartition_fallMin (const ::defiPartition* obj) {$/;"	f
defiPartition_fallMinLeft	def/cdef/xdefiPartition.cpp	/^double defiPartition_fallMinLeft (const ::defiPartition* obj) {$/;"	f
defiPartition_fallMinRight	def/cdef/xdefiPartition.cpp	/^double defiPartition_fallMinRight (const ::defiPartition* obj) {$/;"	f
defiPartition_h	def/def/defiPartition.hpp	31;"	d
defiPartition_hasFallMax	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasFallMax (const ::defiPartition* obj) {$/;"	f
defiPartition_hasFallMaxRange	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasFallMaxRange (const ::defiPartition* obj) {$/;"	f
defiPartition_hasFallMin	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasFallMin (const ::defiPartition* obj) {$/;"	f
defiPartition_hasFallMinRange	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasFallMinRange (const ::defiPartition* obj) {$/;"	f
defiPartition_hasMax	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasMax (const ::defiPartition* obj) {$/;"	f
defiPartition_hasMin	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasMin (const ::defiPartition* obj) {$/;"	f
defiPartition_hasRiseMax	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasRiseMax (const ::defiPartition* obj) {$/;"	f
defiPartition_hasRiseMaxRange	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasRiseMaxRange (const ::defiPartition* obj) {$/;"	f
defiPartition_hasRiseMin	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasRiseMin (const ::defiPartition* obj) {$/;"	f
defiPartition_hasRiseMinRange	def/cdef/xdefiPartition.cpp	/^int defiPartition_hasRiseMinRange (const ::defiPartition* obj) {$/;"	f
defiPartition_instName	def/cdef/xdefiPartition.cpp	/^const char* defiPartition_instName (const ::defiPartition* obj) {$/;"	f
defiPartition_isHoldFall	def/cdef/xdefiPartition.cpp	/^int defiPartition_isHoldFall (const ::defiPartition* obj) {$/;"	f
defiPartition_isHoldRise	def/cdef/xdefiPartition.cpp	/^int defiPartition_isHoldRise (const ::defiPartition* obj) {$/;"	f
defiPartition_isSetupFall	def/cdef/xdefiPartition.cpp	/^int defiPartition_isSetupFall (const ::defiPartition* obj) {$/;"	f
defiPartition_isSetupRise	def/cdef/xdefiPartition.cpp	/^int defiPartition_isSetupRise (const ::defiPartition* obj) {$/;"	f
defiPartition_itemType	def/cdef/xdefiPartition.cpp	/^const char* defiPartition_itemType (const ::defiPartition* obj) {$/;"	f
defiPartition_name	def/cdef/xdefiPartition.cpp	/^const char* defiPartition_name (const ::defiPartition* obj) {$/;"	f
defiPartition_numPins	def/cdef/xdefiPartition.cpp	/^int defiPartition_numPins (const ::defiPartition* obj) {$/;"	f
defiPartition_partitionMax	def/cdef/xdefiPartition.cpp	/^double defiPartition_partitionMax (const ::defiPartition* obj) {$/;"	f
defiPartition_partitionMin	def/cdef/xdefiPartition.cpp	/^double defiPartition_partitionMin (const ::defiPartition* obj) {$/;"	f
defiPartition_pin	def/cdef/xdefiPartition.cpp	/^const char* defiPartition_pin (const ::defiPartition* obj, int  index) {$/;"	f
defiPartition_pinName	def/cdef/xdefiPartition.cpp	/^const char* defiPartition_pinName (const ::defiPartition* obj) {$/;"	f
defiPartition_print	def/cdef/xdefiPartition.cpp	/^void defiPartition_print (const ::defiPartition* obj, FILE*  f) {$/;"	f
defiPartition_riseMax	def/cdef/xdefiPartition.cpp	/^double defiPartition_riseMax (const ::defiPartition* obj) {$/;"	f
defiPartition_riseMaxLeft	def/cdef/xdefiPartition.cpp	/^double defiPartition_riseMaxLeft (const ::defiPartition* obj) {$/;"	f
defiPartition_riseMaxRight	def/cdef/xdefiPartition.cpp	/^double defiPartition_riseMaxRight (const ::defiPartition* obj) {$/;"	f
defiPartition_riseMin	def/cdef/xdefiPartition.cpp	/^double defiPartition_riseMin (const ::defiPartition* obj) {$/;"	f
defiPartition_riseMinLeft	def/cdef/xdefiPartition.cpp	/^double defiPartition_riseMinLeft (const ::defiPartition* obj) {$/;"	f
defiPartition_riseMinRight	def/cdef/xdefiPartition.cpp	/^double defiPartition_riseMinRight (const ::defiPartition* obj) {$/;"	f
defiPath	def/cdef/defiTypedefs.h	/^typedef void *defiPath;$/;"	t
defiPath	def/def/defiPath.cpp	/^defiPath::defiPath(defiPath *defiPathRef) $/;"	f	class:defiPath
defiPath	def/def/defiPath.cpp	/^defiPath::defiPath(defrData *data)$/;"	f	class:defiPath
defiPath	def/def/defiPath.hpp	/^class defiPath {$/;"	c
defiPath_e	def/cdef/defiPath.h	/^enum defiPath_e {$/;"	g
defiPath_e	def/def/defiPath.hpp	/^enum defiPath_e {$/;"	g
defiPath_getFlushPoint	def/cdef/xdefiPath.cpp	/^void defiPath_getFlushPoint (const ::defiPath* obj, int*  x, int*  y, int*  ext) {$/;"	f
defiPath_getLayer	def/cdef/xdefiPath.cpp	/^const char* defiPath_getLayer (const ::defiPath* obj) {$/;"	f
defiPath_getMask	def/cdef/xdefiPath.cpp	/^int defiPath_getMask (const ::defiPath* obj) {$/;"	f
defiPath_getPoint	def/cdef/xdefiPath.cpp	/^void defiPath_getPoint (const ::defiPath* obj, int*  x, int*  y) {$/;"	f
defiPath_getRectMask	def/cdef/xdefiPath.cpp	/^int defiPath_getRectMask (const ::defiPath* obj) {$/;"	f
defiPath_getShape	def/cdef/xdefiPath.cpp	/^const char* defiPath_getShape (const ::defiPath* obj) {$/;"	f
defiPath_getStyle	def/cdef/xdefiPath.cpp	/^int defiPath_getStyle (const ::defiPath* obj) {$/;"	f
defiPath_getTaper	def/cdef/xdefiPath.cpp	/^int defiPath_getTaper (const ::defiPath* obj) {$/;"	f
defiPath_getTaperRule	def/cdef/xdefiPath.cpp	/^const char* defiPath_getTaperRule (const ::defiPath* obj) {$/;"	f
defiPath_getVia	def/cdef/xdefiPath.cpp	/^const char* defiPath_getVia (const ::defiPath* obj) {$/;"	f
defiPath_getViaBottomMask	def/cdef/xdefiPath.cpp	/^int defiPath_getViaBottomMask (const ::defiPath* obj) {$/;"	f
defiPath_getViaCutMask	def/cdef/xdefiPath.cpp	/^int defiPath_getViaCutMask (const ::defiPath* obj) {$/;"	f
defiPath_getViaData	def/cdef/xdefiPath.cpp	/^void defiPath_getViaData (const ::defiPath* obj, int*  numX, int*  numY, int*  stepX, int*  stepY) {$/;"	f
defiPath_getViaRect	def/cdef/xdefiPath.cpp	/^void defiPath_getViaRect (const ::defiPath* obj, int*  deltaX1, int*  deltaY1, int*  deltaX2, int*  deltaY2) {$/;"	f
defiPath_getViaRotation	def/cdef/xdefiPath.cpp	/^int defiPath_getViaRotation (const ::defiPath* obj) {$/;"	f
defiPath_getViaRotationStr	def/cdef/xdefiPath.cpp	/^const char* defiPath_getViaRotationStr (const ::defiPath* obj) {$/;"	f
defiPath_getViaTopMask	def/cdef/xdefiPath.cpp	/^int defiPath_getViaTopMask (const ::defiPath* obj) {$/;"	f
defiPath_getVirtualPoint	def/cdef/xdefiPath.cpp	/^void defiPath_getVirtualPoint (const ::defiPath* obj, int*  x, int*  y) {$/;"	f
defiPath_getWidth	def/cdef/xdefiPath.cpp	/^int defiPath_getWidth (const ::defiPath* obj) {$/;"	f
defiPath_h	def/def/defiPath.hpp	31;"	d
defiPath_initTraverse	def/cdef/xdefiPath.cpp	/^void defiPath_initTraverse (const ::defiPath* obj) {$/;"	f
defiPath_initTraverseBackwards	def/cdef/xdefiPath.cpp	/^void defiPath_initTraverseBackwards (const ::defiPath* obj) {$/;"	f
defiPath_next	def/cdef/xdefiPath.cpp	/^int defiPath_next (const ::defiPath* obj) {$/;"	f
defiPath_prev	def/cdef/xdefiPath.cpp	/^int defiPath_prev (const ::defiPath* obj) {$/;"	f
defiPath_print	def/cdef/xdefiPath.cpp	/^void defiPath_print (const ::defiPath* obj, FILE*  fout) {$/;"	f
defiPin	def/cdef/defiTypedefs.h	/^typedef void *defiPin;$/;"	t
defiPin	def/def/defiPinCap.cpp	/^defiPin::defiPin(defrData *data)$/;"	f	class:defiPin
defiPin	def/def/defiPinCap.hpp	/^class defiPin {$/;"	c
defiPinAntennaModel	def/cdef/defiTypedefs.h	/^typedef void *defiPinAntennaModel;$/;"	t
defiPinAntennaModel	def/def/defiPinCap.cpp	/^defiPinAntennaModel::defiPinAntennaModel(defrData *data)$/;"	f	class:defiPinAntennaModel
defiPinAntennaModel	def/def/defiPinCap.hpp	/^class defiPinAntennaModel {$/;"	c
defiPinAntennaModel_APinGateArea	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_APinGateArea (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_APinGateAreaLayer	def/cdef/xdefiPinCap.cpp	/^const char* defiPinAntennaModel_APinGateAreaLayer (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_APinMaxAreaCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_APinMaxAreaCar (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_APinMaxAreaCarLayer	def/cdef/xdefiPinCap.cpp	/^const char* defiPinAntennaModel_APinMaxAreaCarLayer (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_APinMaxCutCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_APinMaxCutCar (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_APinMaxCutCarLayer	def/cdef/xdefiPinCap.cpp	/^const char* defiPinAntennaModel_APinMaxCutCarLayer (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_APinMaxSideAreaCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_APinMaxSideAreaCar (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_APinMaxSideAreaCarLayer	def/cdef/xdefiPinCap.cpp	/^const char* defiPinAntennaModel_APinMaxSideAreaCarLayer (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_antennaOxide	def/cdef/xdefiPinCap.cpp	/^char* defiPinAntennaModel_antennaOxide (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinAntennaModel_hasAPinGateArea	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_hasAPinGateArea (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinAntennaModel_hasAPinGateAreaLayer	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_hasAPinGateAreaLayer (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_hasAPinMaxAreaCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_hasAPinMaxAreaCar (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinAntennaModel_hasAPinMaxAreaCarLayer	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_hasAPinMaxAreaCarLayer (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_hasAPinMaxCutCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_hasAPinMaxCutCar (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinAntennaModel_hasAPinMaxCutCarLayer	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_hasAPinMaxCutCarLayer (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_hasAPinMaxSideAreaCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_hasAPinMaxSideAreaCar (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinAntennaModel_hasAPinMaxSideAreaCarLayer	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_hasAPinMaxSideAreaCarLayer (const ::defiPinAntennaModel* obj, int  index) {$/;"	f
defiPinAntennaModel_numAPinGateArea	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_numAPinGateArea (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinAntennaModel_numAPinMaxAreaCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_numAPinMaxAreaCar (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinAntennaModel_numAPinMaxCutCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_numAPinMaxCutCar (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinAntennaModel_numAPinMaxSideAreaCar	def/cdef/xdefiPinCap.cpp	/^int defiPinAntennaModel_numAPinMaxSideAreaCar (const ::defiPinAntennaModel* obj) {$/;"	f
defiPinCap	def/cdef/defiTypedefs.h	/^typedef void *defiPinCap;$/;"	t
defiPinCap	def/def/defiPinCap.hpp	/^class defiPinCap {$/;"	c
defiPinCap_cap	def/cdef/xdefiPinCap.cpp	/^double defiPinCap_cap (const ::defiPinCap* obj) {$/;"	f
defiPinCap_h	def/def/defiPinCap.hpp	31;"	d
defiPinCap_pin	def/cdef/xdefiPinCap.cpp	/^int defiPinCap_pin (const ::defiPinCap* obj) {$/;"	f
defiPinCap_print	def/cdef/xdefiPinCap.cpp	/^void defiPinCap_print (const ::defiPinCap* obj, FILE*  f) {$/;"	f
defiPinPort	def/cdef/defiTypedefs.h	/^typedef void *defiPinPort;$/;"	t
defiPinPort	def/def/defiPinCap.cpp	/^defiPinPort::defiPinPort(defrData *data)$/;"	f	class:defiPinPort
defiPinPort	def/def/defiPinCap.hpp	/^class defiPinPort {                      \/\/ 5.7$/;"	c
defiPinPort_bounds	def/cdef/xdefiPinCap.cpp	/^void defiPinPort_bounds (const ::defiPinPort* obj, int  index, int*  xl, int*  yl, int*  xh, int*  yh) {$/;"	f
defiPinPort_getPolygon	def/cdef/xdefiPinCap.cpp	/^::defiPoints defiPinPort_getPolygon (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_hasLayerDesignRuleWidth	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_hasLayerDesignRuleWidth (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_hasLayerSpacing	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_hasLayerSpacing (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_hasPlacement	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_hasPlacement (const ::defiPinPort* obj) {$/;"	f
defiPinPort_hasPolygonDesignRuleWidth	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_hasPolygonDesignRuleWidth (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_hasPolygonSpacing	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_hasPolygonSpacing (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_isCover	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_isCover (const ::defiPinPort* obj) {$/;"	f
defiPinPort_isFixed	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_isFixed (const ::defiPinPort* obj) {$/;"	f
defiPinPort_isPlaced	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_isPlaced (const ::defiPinPort* obj) {$/;"	f
defiPinPort_layer	def/cdef/xdefiPinCap.cpp	/^const char* defiPinPort_layer (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_layerDesignRuleWidth	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_layerDesignRuleWidth (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_layerMask	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_layerMask (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_layerSpacing	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_layerSpacing (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_numLayer	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_numLayer (const ::defiPinPort* obj) {$/;"	f
defiPinPort_numPolygons	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_numPolygons (const ::defiPinPort* obj) {$/;"	f
defiPinPort_numVias	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_numVias (const ::defiPinPort* obj) {$/;"	f
defiPinPort_orient	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_orient (const ::defiPinPort* obj) {$/;"	f
defiPinPort_orientStr	def/cdef/xdefiPinCap.cpp	/^const char* defiPinPort_orientStr (const ::defiPinPort* obj) {$/;"	f
defiPinPort_placementX	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_placementX (const ::defiPinPort* obj) {$/;"	f
defiPinPort_placementY	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_placementY (const ::defiPinPort* obj) {$/;"	f
defiPinPort_polygonDesignRuleWidth	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_polygonDesignRuleWidth (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_polygonMask	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_polygonMask (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_polygonName	def/cdef/xdefiPinCap.cpp	/^const char* defiPinPort_polygonName (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_polygonSpacing	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_polygonSpacing (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_viaBottomMask	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_viaBottomMask (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_viaCutMask	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_viaCutMask (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_viaName	def/cdef/xdefiPinCap.cpp	/^const char* defiPinPort_viaName (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_viaPtX	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_viaPtX (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_viaPtY	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_viaPtY (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinPort_viaTopMask	def/cdef/xdefiPinCap.cpp	/^int defiPinPort_viaTopMask (const ::defiPinPort* obj, int  index) {$/;"	f
defiPinProp	def/cdef/defiTypedefs.h	/^typedef void *defiPinProp;$/;"	t
defiPinProp	def/def/defiPinProp.cpp	/^defiPinProp::defiPinProp(defrData *data)$/;"	f	class:defiPinProp
defiPinProp	def/def/defiPinProp.hpp	/^class defiPinProp {$/;"	c
defiPinProp_h	def/def/defiPinProp.hpp	31;"	d
defiPinProp_instName	def/cdef/xdefiPinProp.cpp	/^const char* defiPinProp_instName (const ::defiPinProp* obj) {$/;"	f
defiPinProp_isPin	def/cdef/xdefiPinProp.cpp	/^int defiPinProp_isPin (const ::defiPinProp* obj) {$/;"	f
defiPinProp_numProps	def/cdef/xdefiPinProp.cpp	/^int defiPinProp_numProps (const ::defiPinProp* obj) {$/;"	f
defiPinProp_pinName	def/cdef/xdefiPinProp.cpp	/^const char* defiPinProp_pinName (const ::defiPinProp* obj) {$/;"	f
defiPinProp_print	def/cdef/xdefiPinProp.cpp	/^void defiPinProp_print (const ::defiPinProp* obj, FILE*  f) {$/;"	f
defiPinProp_propIsNumber	def/cdef/xdefiPinProp.cpp	/^int defiPinProp_propIsNumber (const ::defiPinProp* obj, int  index) {$/;"	f
defiPinProp_propIsString	def/cdef/xdefiPinProp.cpp	/^int defiPinProp_propIsString (const ::defiPinProp* obj, int  index) {$/;"	f
defiPinProp_propName	def/cdef/xdefiPinProp.cpp	/^const char* defiPinProp_propName (const ::defiPinProp* obj, int  index) {$/;"	f
defiPinProp_propNumber	def/cdef/xdefiPinProp.cpp	/^double defiPinProp_propNumber (const ::defiPinProp* obj, int  index) {$/;"	f
defiPinProp_propType	def/cdef/xdefiPinProp.cpp	/^const char defiPinProp_propType (const ::defiPinProp* obj, int  index) {$/;"	f
defiPinProp_propValue	def/cdef/xdefiPinProp.cpp	/^const char* defiPinProp_propValue (const ::defiPinProp* obj, int  index) {$/;"	f
defiPin_APinDiffArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_APinDiffArea (const ::defiPin* obj, int  index) {$/;"	f
defiPin_APinDiffAreaLayer	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_APinDiffAreaLayer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_APinPartialCutArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_APinPartialCutArea (const ::defiPin* obj, int  index) {$/;"	f
defiPin_APinPartialCutAreaLayer	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_APinPartialCutAreaLayer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_APinPartialMetalArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_APinPartialMetalArea (const ::defiPin* obj, int  index) {$/;"	f
defiPin_APinPartialMetalAreaLayer	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_APinPartialMetalAreaLayer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_APinPartialMetalSideArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_APinPartialMetalSideArea (const ::defiPin* obj, int  index) {$/;"	f
defiPin_APinPartialMetalSideAreaLayer	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_APinPartialMetalSideAreaLayer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_antennaModel	def/cdef/xdefiPinCap.cpp	/^const ::defiPinAntennaModel* defiPin_antennaModel (const ::defiPin* obj, int  index) {$/;"	f
defiPin_bounds	def/cdef/xdefiPinCap.cpp	/^void defiPin_bounds (const ::defiPin* obj, int  index, int*  xl, int*  yl, int*  xh, int*  yh) {$/;"	f
defiPin_direction	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_direction (const ::defiPin* obj) {$/;"	f
defiPin_getPolygon	def/cdef/xdefiPinCap.cpp	/^::defiPoints defiPin_getPolygon (const ::defiPin* obj, int  index) {$/;"	f
defiPin_groundSensitivity	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_groundSensitivity (const ::defiPin* obj) {$/;"	f
defiPin_hasAPinDiffArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasAPinDiffArea (const ::defiPin* obj) {$/;"	f
defiPin_hasAPinDiffAreaLayer	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasAPinDiffAreaLayer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_hasAPinPartialCutArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasAPinPartialCutArea (const ::defiPin* obj) {$/;"	f
defiPin_hasAPinPartialCutAreaLayer	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasAPinPartialCutAreaLayer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_hasAPinPartialMetalArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasAPinPartialMetalArea (const ::defiPin* obj) {$/;"	f
defiPin_hasAPinPartialMetalAreaLayer	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasAPinPartialMetalAreaLayer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_hasAPinPartialMetalSideArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasAPinPartialMetalSideArea (const ::defiPin* obj) {$/;"	f
defiPin_hasAPinPartialMetalSideAreaLayer	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasAPinPartialMetalSideAreaLayer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_hasDirection	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasDirection (const ::defiPin* obj) {$/;"	f
defiPin_hasGroundSensitivity	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasGroundSensitivity (const ::defiPin* obj) {$/;"	f
defiPin_hasLayer	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasLayer (const ::defiPin* obj) {$/;"	f
defiPin_hasLayerDesignRuleWidth	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasLayerDesignRuleWidth (const ::defiPin* obj, int  index) {$/;"	f
defiPin_hasLayerSpacing	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasLayerSpacing (const ::defiPin* obj, int  index) {$/;"	f
defiPin_hasNetExpr	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasNetExpr (const ::defiPin* obj) {$/;"	f
defiPin_hasPlacement	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasPlacement (const ::defiPin* obj) {$/;"	f
defiPin_hasPolygonDesignRuleWidth	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasPolygonDesignRuleWidth (const ::defiPin* obj, int  index) {$/;"	f
defiPin_hasPolygonSpacing	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasPolygonSpacing (const ::defiPin* obj, int  index) {$/;"	f
defiPin_hasPort	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasPort (const ::defiPin* obj) {$/;"	f
defiPin_hasSpecial	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasSpecial (const ::defiPin* obj) {$/;"	f
defiPin_hasSupplySensitivity	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasSupplySensitivity (const ::defiPin* obj) {$/;"	f
defiPin_hasUse	def/cdef/xdefiPinCap.cpp	/^int defiPin_hasUse (const ::defiPin* obj) {$/;"	f
defiPin_isCover	def/cdef/xdefiPinCap.cpp	/^int defiPin_isCover (const ::defiPin* obj) {$/;"	f
defiPin_isFixed	def/cdef/xdefiPinCap.cpp	/^int defiPin_isFixed (const ::defiPin* obj) {$/;"	f
defiPin_isPlaced	def/cdef/xdefiPinCap.cpp	/^int defiPin_isPlaced (const ::defiPin* obj) {$/;"	f
defiPin_isUnplaced	def/cdef/xdefiPinCap.cpp	/^int defiPin_isUnplaced (const ::defiPin* obj) {$/;"	f
defiPin_layer	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_layer (const ::defiPin* obj, int  index) {$/;"	f
defiPin_layerDesignRuleWidth	def/cdef/xdefiPinCap.cpp	/^int defiPin_layerDesignRuleWidth (const ::defiPin* obj, int  index) {$/;"	f
defiPin_layerMask	def/cdef/xdefiPinCap.cpp	/^int defiPin_layerMask (const ::defiPin* obj, int  index) {$/;"	f
defiPin_layerSpacing	def/cdef/xdefiPinCap.cpp	/^int defiPin_layerSpacing (const ::defiPin* obj, int  index) {$/;"	f
defiPin_netExpr	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_netExpr (const ::defiPin* obj) {$/;"	f
defiPin_netName	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_netName (const ::defiPin* obj) {$/;"	f
defiPin_numAPinDiffArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_numAPinDiffArea (const ::defiPin* obj) {$/;"	f
defiPin_numAPinPartialCutArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_numAPinPartialCutArea (const ::defiPin* obj) {$/;"	f
defiPin_numAPinPartialMetalArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_numAPinPartialMetalArea (const ::defiPin* obj) {$/;"	f
defiPin_numAPinPartialMetalSideArea	def/cdef/xdefiPinCap.cpp	/^int defiPin_numAPinPartialMetalSideArea (const ::defiPin* obj) {$/;"	f
defiPin_numAntennaModel	def/cdef/xdefiPinCap.cpp	/^int defiPin_numAntennaModel (const ::defiPin* obj) {$/;"	f
defiPin_numLayer	def/cdef/xdefiPinCap.cpp	/^int defiPin_numLayer (const ::defiPin* obj) {$/;"	f
defiPin_numPolygons	def/cdef/xdefiPinCap.cpp	/^int defiPin_numPolygons (const ::defiPin* obj) {$/;"	f
defiPin_numPorts	def/cdef/xdefiPinCap.cpp	/^int defiPin_numPorts (const ::defiPin* obj) {$/;"	f
defiPin_numVias	def/cdef/xdefiPinCap.cpp	/^int defiPin_numVias (const ::defiPin* obj) {$/;"	f
defiPin_orient	def/cdef/xdefiPinCap.cpp	/^int defiPin_orient (const ::defiPin* obj) {$/;"	f
defiPin_orientStr	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_orientStr (const ::defiPin* obj) {$/;"	f
defiPin_pinName	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_pinName (const ::defiPin* obj) {$/;"	f
defiPin_pinPort	def/cdef/xdefiPinCap.cpp	/^const ::defiPinPort* defiPin_pinPort (const ::defiPin* obj, int  index) {$/;"	f
defiPin_placementX	def/cdef/xdefiPinCap.cpp	/^int defiPin_placementX (const ::defiPin* obj) {$/;"	f
defiPin_placementY	def/cdef/xdefiPinCap.cpp	/^int defiPin_placementY (const ::defiPin* obj) {$/;"	f
defiPin_polygonDesignRuleWidth	def/cdef/xdefiPinCap.cpp	/^int defiPin_polygonDesignRuleWidth (const ::defiPin* obj, int  index) {$/;"	f
defiPin_polygonMask	def/cdef/xdefiPinCap.cpp	/^int defiPin_polygonMask (const ::defiPin* obj, int  index) {$/;"	f
defiPin_polygonName	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_polygonName (const ::defiPin* obj, int  index) {$/;"	f
defiPin_polygonSpacing	def/cdef/xdefiPinCap.cpp	/^int defiPin_polygonSpacing (const ::defiPin* obj, int  index) {$/;"	f
defiPin_print	def/cdef/xdefiPinCap.cpp	/^void defiPin_print (const ::defiPin* obj, FILE*  f) {$/;"	f
defiPin_supplySensitivity	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_supplySensitivity (const ::defiPin* obj) {$/;"	f
defiPin_use	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_use (const ::defiPin* obj) {$/;"	f
defiPin_viaBottomMask	def/cdef/xdefiPinCap.cpp	/^int defiPin_viaBottomMask (const ::defiPin* obj, int  index) {$/;"	f
defiPin_viaCutMask	def/cdef/xdefiPinCap.cpp	/^int defiPin_viaCutMask (const ::defiPin* obj, int  index) {$/;"	f
defiPin_viaName	def/cdef/xdefiPinCap.cpp	/^const char* defiPin_viaName (const ::defiPin* obj, int  index) {$/;"	f
defiPin_viaPtX	def/cdef/xdefiPinCap.cpp	/^int defiPin_viaPtX (const ::defiPin* obj, int  index) {$/;"	f
defiPin_viaPtY	def/cdef/xdefiPinCap.cpp	/^int defiPin_viaPtY (const ::defiPin* obj, int  index) {$/;"	f
defiPin_viaTopMask	def/cdef/xdefiPinCap.cpp	/^int defiPin_viaTopMask (const ::defiPin* obj, int  index) {$/;"	f
defiPnt	def/cdef/defiTypedefs.h	/^struct defiPnt {$/;"	s
defiPnt	def/def/defiPath.hpp	/^struct defiPnt {$/;"	s
defiPoints	def/cdef/defiTypedefs.h	/^struct defiPoints {$/;"	s
defiPoints	def/def/defiMisc.hpp	/^struct defiPoints {$/;"	s
defiPrivateSubObjects	def/def/defiDefs.hpp	/^  defiPrivateSubObjects,      \/\/ deep copy + delete$/;"	e	enum:__anon16
defiProp	def/cdef/defiTypedefs.h	/^typedef void *defiProp;$/;"	t
defiProp	def/def/defiProp.cpp	/^defiProp::defiProp(defrData *data)$/;"	f	class:defiProp
defiProp	def/def/defiProp.hpp	/^class defiProp {$/;"	c
defiPropType	def/cdef/defiTypedefs.h	/^typedef void *defiPropType;$/;"	t
defiPropType	def/def/defiPropType.cpp	/^defiPropType::defiPropType() {$/;"	f	class:defiPropType
defiPropType	def/def/defiPropType.hpp	/^class defiPropType {$/;"	c
defiPropType_h	def/def/defiPropType.hpp	31;"	d
defiPropType_propType	def/cdef/xdefiPropType.cpp	/^const char defiPropType_propType (const ::defiPropType* obj, char*  name) {$/;"	f
defiProp_dataType	def/cdef/xdefiProp.cpp	/^char defiProp_dataType (const ::defiProp* obj) {$/;"	f
defiProp_h	def/def/defiProp.hpp	31;"	d
defiProp_hasNameMapString	def/cdef/xdefiProp.cpp	/^int defiProp_hasNameMapString (const ::defiProp* obj) {$/;"	f
defiProp_hasNumber	def/cdef/xdefiProp.cpp	/^int defiProp_hasNumber (const ::defiProp* obj) {$/;"	f
defiProp_hasRange	def/cdef/xdefiProp.cpp	/^int defiProp_hasRange (const ::defiProp* obj) {$/;"	f
defiProp_hasString	def/cdef/xdefiProp.cpp	/^int defiProp_hasString (const ::defiProp* obj) {$/;"	f
defiProp_left	def/cdef/xdefiProp.cpp	/^double defiProp_left (const ::defiProp* obj) {$/;"	f
defiProp_number	def/cdef/xdefiProp.cpp	/^double defiProp_number (const ::defiProp* obj) {$/;"	f
defiProp_print	def/cdef/xdefiProp.cpp	/^void defiProp_print (const ::defiProp* obj, FILE*  f) {$/;"	f
defiProp_propName	def/cdef/xdefiProp.cpp	/^const char* defiProp_propName (const ::defiProp* obj) {$/;"	f
defiProp_propType	def/cdef/xdefiProp.cpp	/^const char* defiProp_propType (const ::defiProp* obj) {$/;"	f
defiProp_right	def/cdef/xdefiProp.cpp	/^double defiProp_right (const ::defiProp* obj) {$/;"	f
defiProp_string	def/cdef/xdefiProp.cpp	/^const char* defiProp_string (const ::defiProp* obj) {$/;"	f
defiReferencedSubObjects	def/def/defiDefs.hpp	/^  defiReferencedSubObjects,   \/\/ shallow copy, no delete$/;"	e	enum:__anon16
defiRegion	def/cdef/defiTypedefs.h	/^typedef void *defiRegion;$/;"	t
defiRegion	def/def/defiRegion.cpp	/^defiRegion::defiRegion(defrData *data)$/;"	f	class:defiRegion
defiRegion	def/def/defiRegion.hpp	/^class defiRegion {$/;"	c
defiRegion_h	def/def/defiRegion.hpp	31;"	d
defiRegion_hasType	def/cdef/xdefiRegion.cpp	/^int defiRegion_hasType (const ::defiRegion* obj) {$/;"	f
defiRegion_name	def/cdef/xdefiRegion.cpp	/^const char* defiRegion_name (const ::defiRegion* obj) {$/;"	f
defiRegion_numProps	def/cdef/xdefiRegion.cpp	/^int defiRegion_numProps (const ::defiRegion* obj) {$/;"	f
defiRegion_numRectangles	def/cdef/xdefiRegion.cpp	/^int defiRegion_numRectangles (const ::defiRegion* obj) {$/;"	f
defiRegion_print	def/cdef/xdefiRegion.cpp	/^void defiRegion_print (const ::defiRegion* obj, FILE*  f) {$/;"	f
defiRegion_propIsNumber	def/cdef/xdefiRegion.cpp	/^int defiRegion_propIsNumber (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_propIsString	def/cdef/xdefiRegion.cpp	/^int defiRegion_propIsString (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_propName	def/cdef/xdefiRegion.cpp	/^const char* defiRegion_propName (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_propNumber	def/cdef/xdefiRegion.cpp	/^double defiRegion_propNumber (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_propType	def/cdef/xdefiRegion.cpp	/^const char defiRegion_propType (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_propValue	def/cdef/xdefiRegion.cpp	/^const char* defiRegion_propValue (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_type	def/cdef/xdefiRegion.cpp	/^const char* defiRegion_type (const ::defiRegion* obj) {$/;"	f
defiRegion_xh	def/cdef/xdefiRegion.cpp	/^int defiRegion_xh (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_xl	def/cdef/xdefiRegion.cpp	/^int defiRegion_xl (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_yh	def/cdef/xdefiRegion.cpp	/^int defiRegion_yh (const ::defiRegion* obj, int  index) {$/;"	f
defiRegion_yl	def/cdef/xdefiRegion.cpp	/^int defiRegion_yl (const ::defiRegion* obj, int  index) {$/;"	f
defiRow	def/cdef/defiTypedefs.h	/^typedef void *defiRow;$/;"	t
defiRow	def/def/defiRowTrack.cpp	/^defiRow::defiRow(defrData *data)$/;"	f	class:defiRow
defiRow	def/def/defiRowTrack.hpp	/^class defiRow{$/;"	c
defiRowTrack_h	def/def/defiRowTrack.hpp	31;"	d
defiRow_hasDo	def/cdef/xdefiRowTrack.cpp	/^int defiRow_hasDo (const ::defiRow* obj) {$/;"	f
defiRow_hasDoStep	def/cdef/xdefiRowTrack.cpp	/^int defiRow_hasDoStep (const ::defiRow* obj) {$/;"	f
defiRow_macro	def/cdef/xdefiRowTrack.cpp	/^const char* defiRow_macro (const ::defiRow* obj) {$/;"	f
defiRow_name	def/cdef/xdefiRowTrack.cpp	/^const char* defiRow_name (const ::defiRow* obj) {$/;"	f
defiRow_numProps	def/cdef/xdefiRowTrack.cpp	/^int defiRow_numProps (const ::defiRow* obj) {$/;"	f
defiRow_orient	def/cdef/xdefiRowTrack.cpp	/^int defiRow_orient (const ::defiRow* obj) {$/;"	f
defiRow_orientStr	def/cdef/xdefiRowTrack.cpp	/^const char* defiRow_orientStr (const ::defiRow* obj) {$/;"	f
defiRow_print	def/cdef/xdefiRowTrack.cpp	/^void defiRow_print (const ::defiRow* obj, FILE*  f) {$/;"	f
defiRow_propIsNumber	def/cdef/xdefiRowTrack.cpp	/^int defiRow_propIsNumber (const ::defiRow* obj, int  index) {$/;"	f
defiRow_propIsString	def/cdef/xdefiRowTrack.cpp	/^int defiRow_propIsString (const ::defiRow* obj, int  index) {$/;"	f
defiRow_propName	def/cdef/xdefiRowTrack.cpp	/^const char* defiRow_propName (const ::defiRow* obj, int  index) {$/;"	f
defiRow_propNumber	def/cdef/xdefiRowTrack.cpp	/^double defiRow_propNumber (const ::defiRow* obj, int  index) {$/;"	f
defiRow_propType	def/cdef/xdefiRowTrack.cpp	/^const char defiRow_propType (const ::defiRow* obj, int  index) {$/;"	f
defiRow_propValue	def/cdef/xdefiRowTrack.cpp	/^const char* defiRow_propValue (const ::defiRow* obj, int  index) {$/;"	f
defiRow_x	def/cdef/xdefiRowTrack.cpp	/^double defiRow_x (const ::defiRow* obj) {$/;"	f
defiRow_xNum	def/cdef/xdefiRowTrack.cpp	/^double defiRow_xNum (const ::defiRow* obj) {$/;"	f
defiRow_xStep	def/cdef/xdefiRowTrack.cpp	/^double defiRow_xStep (const ::defiRow* obj) {$/;"	f
defiRow_y	def/cdef/xdefiRowTrack.cpp	/^double defiRow_y (const ::defiRow* obj) {$/;"	f
defiRow_yNum	def/cdef/xdefiRowTrack.cpp	/^double defiRow_yNum (const ::defiRow* obj) {$/;"	f
defiRow_yStep	def/cdef/xdefiRowTrack.cpp	/^double defiRow_yStep (const ::defiRow* obj) {$/;"	f
defiSLOT_h	def/def/defiSlot.hpp	31;"	d
defiScanchain	def/cdef/defiTypedefs.h	/^typedef void *defiScanchain;$/;"	t
defiScanchain	def/def/defiScanchain.cpp	/^defiScanchain::defiScanchain(defrData *data)$/;"	f	class:defiScanchain
defiScanchain	def/def/defiScanchain.hpp	/^class defiScanchain {$/;"	c
defiScanchain_commonInPin	def/cdef/xdefiScanchain.cpp	/^const char* defiScanchain_commonInPin (const ::defiScanchain* obj) {$/;"	f
defiScanchain_commonOutPin	def/cdef/xdefiScanchain.cpp	/^const char* defiScanchain_commonOutPin (const ::defiScanchain* obj) {$/;"	f
defiScanchain_floating	def/cdef/xdefiScanchain.cpp	/^void defiScanchain_floating (const ::defiScanchain* obj, int*  size, char***  inst, char***  inPin, char***  outPin, int**  bits) {$/;"	f
defiScanchain_h	def/def/defiScanchain.hpp	31;"	d
defiScanchain_hasCommonInPin	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_hasCommonInPin (const ::defiScanchain* obj) {$/;"	f
defiScanchain_hasCommonOutPin	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_hasCommonOutPin (const ::defiScanchain* obj) {$/;"	f
defiScanchain_hasFloating	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_hasFloating (const ::defiScanchain* obj) {$/;"	f
defiScanchain_hasOrdered	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_hasOrdered (const ::defiScanchain* obj) {$/;"	f
defiScanchain_hasPartition	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_hasPartition (const ::defiScanchain* obj) {$/;"	f
defiScanchain_hasPartitionMaxBits	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_hasPartitionMaxBits (const ::defiScanchain* obj) {$/;"	f
defiScanchain_hasStart	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_hasStart (const ::defiScanchain* obj) {$/;"	f
defiScanchain_hasStop	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_hasStop (const ::defiScanchain* obj) {$/;"	f
defiScanchain_name	def/cdef/xdefiScanchain.cpp	/^const char* defiScanchain_name (const ::defiScanchain* obj) {$/;"	f
defiScanchain_numOrderedLists	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_numOrderedLists (const ::defiScanchain* obj) {$/;"	f
defiScanchain_ordered	def/cdef/xdefiScanchain.cpp	/^void defiScanchain_ordered (const ::defiScanchain* obj, int  index, int*  size, char***  inst, char***  inPin, char***  outPin, int**  bits) {$/;"	f
defiScanchain_partitionMaxBits	def/cdef/xdefiScanchain.cpp	/^int defiScanchain_partitionMaxBits (const ::defiScanchain* obj) {$/;"	f
defiScanchain_partitionName	def/cdef/xdefiScanchain.cpp	/^const char* defiScanchain_partitionName (const ::defiScanchain* obj) {$/;"	f
defiScanchain_print	def/cdef/xdefiScanchain.cpp	/^void defiScanchain_print (const ::defiScanchain* obj, FILE*  f) {$/;"	f
defiScanchain_start	def/cdef/xdefiScanchain.cpp	/^void defiScanchain_start (const ::defiScanchain* obj, char**  inst, char**  pin) {$/;"	f
defiScanchain_stop	def/cdef/xdefiScanchain.cpp	/^void defiScanchain_stop (const ::defiScanchain* obj, char**  inst, char**  pin) {$/;"	f
defiSetDebug	def/cdef/xdefiDebug.cpp	/^void defiSetDebug (int  num, int  value) {$/;"	f
defiSetDebug	def/def/defiDebug.cpp	/^void defiSetDebug(int, int) {$/;"	f
defiShield	def/cdef/defiTypedefs.h	/^typedef void *defiShield;$/;"	t
defiShield	def/def/defiNet.cpp	/^defiShield::defiShield(defrData *data)$/;"	f	class:defiShield
defiShield	def/def/defiNet.hpp	/^class defiShield {$/;"	c
defiShield_numPaths	def/cdef/xdefiNet.cpp	/^int defiShield_numPaths (const ::defiShield* obj) {$/;"	f
defiShield_path	def/cdef/xdefiNet.cpp	/^const ::defiPath* defiShield_path (const ::defiShield* obj, int  index) {$/;"	f
defiShield_shieldName	def/cdef/xdefiNet.cpp	/^const char* defiShield_shieldName (const ::defiShield* obj) {$/;"	f
defiSite	def/cdef/defiTypedefs.h	/^typedef void *defiSite;$/;"	t
defiSite	def/def/defiSite.cpp	/^defiSite::defiSite(defrData *data)$/;"	f	class:defiSite
defiSite	def/def/defiSite.hpp	/^class defiSite {$/;"	c
defiSite_h	def/def/defiSite.hpp	31;"	d
defiSite_name	def/cdef/xdefiSite.cpp	/^const char* defiSite_name (const ::defiSite* obj) {$/;"	f
defiSite_orient	def/cdef/xdefiSite.cpp	/^int defiSite_orient (const ::defiSite* obj) {$/;"	f
defiSite_orientStr	def/cdef/xdefiSite.cpp	/^const char* defiSite_orientStr (const ::defiSite* obj) {$/;"	f
defiSite_print	def/cdef/xdefiSite.cpp	/^void defiSite_print (const ::defiSite* obj, FILE*  f) {$/;"	f
defiSite_x_num	def/cdef/xdefiSite.cpp	/^double defiSite_x_num (const ::defiSite* obj) {$/;"	f
defiSite_x_orig	def/cdef/xdefiSite.cpp	/^double defiSite_x_orig (const ::defiSite* obj) {$/;"	f
defiSite_x_step	def/cdef/xdefiSite.cpp	/^double defiSite_x_step (const ::defiSite* obj) {$/;"	f
defiSite_y_num	def/cdef/xdefiSite.cpp	/^double defiSite_y_num (const ::defiSite* obj) {$/;"	f
defiSite_y_orig	def/cdef/xdefiSite.cpp	/^double defiSite_y_orig (const ::defiSite* obj) {$/;"	f
defiSite_y_step	def/cdef/xdefiSite.cpp	/^double defiSite_y_step (const ::defiSite* obj) {$/;"	f
defiSlot	def/cdef/defiTypedefs.h	/^typedef void *defiSlot;$/;"	t
defiSlot	def/def/defiSlot.cpp	/^defiSlot::defiSlot(defrData *data)$/;"	f	class:defiSlot
defiSlot	def/def/defiSlot.hpp	/^class defiSlot {$/;"	c
defiSlot_getPolygon	def/cdef/xdefiSlot.cpp	/^::defiPoints defiSlot_getPolygon (const ::defiSlot* obj, int  index) {$/;"	f
defiSlot_hasLayer	def/cdef/xdefiSlot.cpp	/^int defiSlot_hasLayer (const ::defiSlot* obj) {$/;"	f
defiSlot_layerName	def/cdef/xdefiSlot.cpp	/^const char* defiSlot_layerName (const ::defiSlot* obj) {$/;"	f
defiSlot_numPolygons	def/cdef/xdefiSlot.cpp	/^int defiSlot_numPolygons (const ::defiSlot* obj) {$/;"	f
defiSlot_numRectangles	def/cdef/xdefiSlot.cpp	/^int defiSlot_numRectangles (const ::defiSlot* obj) {$/;"	f
defiSlot_print	def/cdef/xdefiSlot.cpp	/^void defiSlot_print (const ::defiSlot* obj, FILE*  f) {$/;"	f
defiSlot_xh	def/cdef/xdefiSlot.cpp	/^int defiSlot_xh (const ::defiSlot* obj, int  index) {$/;"	f
defiSlot_xl	def/cdef/xdefiSlot.cpp	/^int defiSlot_xl (const ::defiSlot* obj, int  index) {$/;"	f
defiSlot_yh	def/cdef/xdefiSlot.cpp	/^int defiSlot_yh (const ::defiSlot* obj, int  index) {$/;"	f
defiSlot_yl	def/cdef/xdefiSlot.cpp	/^int defiSlot_yl (const ::defiSlot* obj, int  index) {$/;"	f
defiStyles	def/cdef/defiTypedefs.h	/^typedef void *defiStyles;$/;"	t
defiStyles	def/def/defiMisc.cpp	/^defiStyles::defiStyles() {$/;"	f	class:defiStyles
defiStyles	def/def/defiMisc.hpp	/^class defiStyles {$/;"	c
defiStyles_getPolygon	def/cdef/xdefiMisc.cpp	/^::defiPoints defiStyles_getPolygon (const ::defiStyles* obj) {$/;"	f
defiStyles_style	def/cdef/xdefiMisc.cpp	/^int defiStyles_style (const ::defiStyles* obj) {$/;"	f
defiSubnet	def/cdef/defiTypedefs.h	/^typedef void *defiSubnet;$/;"	t
defiSubnet	def/def/defiNet.cpp	/^defiSubnet::defiSubnet(defrData *data)$/;"	f	class:defiSubnet
defiSubnet	def/def/defiNet.hpp	/^class defiSubnet {$/;"	c
defiSubnet_hasNonDefaultRule	def/cdef/xdefiNet.cpp	/^int defiSubnet_hasNonDefaultRule (const ::defiSubnet* obj) {$/;"	f
defiSubnet_instance	def/cdef/xdefiNet.cpp	/^const char* defiSubnet_instance (const ::defiSubnet* obj, int  index) {$/;"	f
defiSubnet_isCover	def/cdef/xdefiNet.cpp	/^int defiSubnet_isCover (const ::defiSubnet* obj) {$/;"	f
defiSubnet_isFixed	def/cdef/xdefiNet.cpp	/^int defiSubnet_isFixed (const ::defiSubnet* obj) {$/;"	f
defiSubnet_isRouted	def/cdef/xdefiNet.cpp	/^int defiSubnet_isRouted (const ::defiSubnet* obj) {$/;"	f
defiSubnet_name	def/cdef/xdefiNet.cpp	/^const char* defiSubnet_name (const ::defiSubnet* obj) {$/;"	f
defiSubnet_nonDefaultRule	def/cdef/xdefiNet.cpp	/^const char* defiSubnet_nonDefaultRule (const ::defiSubnet* obj) {$/;"	f
defiSubnet_numConnections	def/cdef/xdefiNet.cpp	/^int defiSubnet_numConnections (const ::defiSubnet* obj) {$/;"	f
defiSubnet_numPaths	def/cdef/xdefiNet.cpp	/^int defiSubnet_numPaths (const ::defiSubnet* obj) {$/;"	f
defiSubnet_numWires	def/cdef/xdefiNet.cpp	/^int defiSubnet_numWires (const ::defiSubnet* obj) {$/;"	f
defiSubnet_path	def/cdef/xdefiNet.cpp	/^const ::defiPath* defiSubnet_path (const ::defiSubnet* obj, int  index) {$/;"	f
defiSubnet_pin	def/cdef/xdefiNet.cpp	/^const char* defiSubnet_pin (const ::defiSubnet* obj, int  index) {$/;"	f
defiSubnet_pinIsMustJoin	def/cdef/xdefiNet.cpp	/^int defiSubnet_pinIsMustJoin (const ::defiSubnet* obj, int  index) {$/;"	f
defiSubnet_pinIsSynthesized	def/cdef/xdefiNet.cpp	/^int defiSubnet_pinIsSynthesized (const ::defiSubnet* obj, int  index) {$/;"	f
defiSubnet_print	def/cdef/xdefiNet.cpp	/^void defiSubnet_print (const ::defiSubnet* obj, FILE*  f) {$/;"	f
defiSubnet_wire	def/cdef/xdefiNet.cpp	/^const ::defiWire* defiSubnet_wire (const ::defiSubnet* obj, int  index) {$/;"	f
defiTimingDisable	def/cdef/defiTypedefs.h	/^typedef void *defiTimingDisable;$/;"	t
defiTimingDisable	def/def/defiTimingDisable.cpp	/^defiTimingDisable::defiTimingDisable(defrData *data)$/;"	f	class:defiTimingDisable
defiTimingDisable	def/def/defiTimingDisable.hpp	/^class defiTimingDisable {$/;"	c
defiTimingDisable_fromInst	def/cdef/xdefiTimingDisable.cpp	/^const char* defiTimingDisable_fromInst (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_fromPin	def/cdef/xdefiTimingDisable.cpp	/^const char* defiTimingDisable_fromPin (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_h	def/def/defiTimingDisable.hpp	31;"	d
defiTimingDisable_hasFromTo	def/cdef/xdefiTimingDisable.cpp	/^int defiTimingDisable_hasFromTo (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_hasMacroFromTo	def/cdef/xdefiTimingDisable.cpp	/^int defiTimingDisable_hasMacroFromTo (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_hasMacroThru	def/cdef/xdefiTimingDisable.cpp	/^int defiTimingDisable_hasMacroThru (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_hasReentrantPathsFlag	def/cdef/xdefiTimingDisable.cpp	/^int defiTimingDisable_hasReentrantPathsFlag (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_hasThru	def/cdef/xdefiTimingDisable.cpp	/^int defiTimingDisable_hasThru (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_macroName	def/cdef/xdefiTimingDisable.cpp	/^const char* defiTimingDisable_macroName (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_print	def/cdef/xdefiTimingDisable.cpp	/^void defiTimingDisable_print (const ::defiTimingDisable* obj, FILE*  f) {$/;"	f
defiTimingDisable_thruInst	def/cdef/xdefiTimingDisable.cpp	/^const char* defiTimingDisable_thruInst (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_thruPin	def/cdef/xdefiTimingDisable.cpp	/^const char* defiTimingDisable_thruPin (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_toInst	def/cdef/xdefiTimingDisable.cpp	/^const char* defiTimingDisable_toInst (const ::defiTimingDisable* obj) {$/;"	f
defiTimingDisable_toPin	def/cdef/xdefiTimingDisable.cpp	/^const char* defiTimingDisable_toPin (const ::defiTimingDisable* obj) {$/;"	f
defiTrack	def/cdef/defiTypedefs.h	/^typedef void *defiTrack;$/;"	t
defiTrack	def/def/defiRowTrack.cpp	/^defiTrack::defiTrack(defrData *data)$/;"	f	class:defiTrack
defiTrack	def/def/defiRowTrack.hpp	/^class defiTrack{$/;"	c
defiTrack_firstTrackMask	def/cdef/xdefiRowTrack.cpp	/^int defiTrack_firstTrackMask (const ::defiTrack* obj) {$/;"	f
defiTrack_layer	def/cdef/xdefiRowTrack.cpp	/^const char* defiTrack_layer (const ::defiTrack* obj, int  index) {$/;"	f
defiTrack_macro	def/cdef/xdefiRowTrack.cpp	/^const char* defiTrack_macro (const ::defiTrack* obj) {$/;"	f
defiTrack_numLayers	def/cdef/xdefiRowTrack.cpp	/^int defiTrack_numLayers (const ::defiTrack* obj) {$/;"	f
defiTrack_print	def/cdef/xdefiRowTrack.cpp	/^void defiTrack_print (const ::defiTrack* obj, FILE*  f) {$/;"	f
defiTrack_sameMask	def/cdef/xdefiRowTrack.cpp	/^int defiTrack_sameMask (const ::defiTrack* obj) {$/;"	f
defiTrack_x	def/cdef/xdefiRowTrack.cpp	/^double defiTrack_x (const ::defiTrack* obj) {$/;"	f
defiTrack_xNum	def/cdef/xdefiRowTrack.cpp	/^double defiTrack_xNum (const ::defiTrack* obj) {$/;"	f
defiTrack_xStep	def/cdef/xdefiRowTrack.cpp	/^double defiTrack_xStep (const ::defiTrack* obj) {$/;"	f
defiUnknownObject	def/def/defiDefs.hpp	/^  defiUnknownObject \/* void * *\/$/;"	e	enum:__anon15
defiUserData	def/cdef/defiTypedefs.h	42;"	d
defiUserData	def/def/defiDefs.hpp	164;"	d
defiUserDataHandle	def/cdef/defiTypedefs.h	43;"	d
defiUserDataHandle	def/def/defiDefs.hpp	165;"	d
defiUtil_h	def/def/defiUtil.hpp	31;"	d
defiVia	def/cdef/defiTypedefs.h	/^typedef void *defiVia;$/;"	t
defiVia	def/def/defiVia.cpp	/^defiVia::defiVia(defrData *data) $/;"	f	class:defiVia
defiVia	def/def/defiVia.hpp	/^class defiVia {$/;"	c
defiViaData	def/cdef/defiTypedefs.h	/^struct defiViaData {$/;"	s
defiViaData	def/def/defiPath.hpp	/^struct defiViaData {$/;"	s
defiViaRect	def/cdef/defiTypedefs.h	/^struct defiViaRect {$/;"	s
defiViaRect	def/def/defiPath.hpp	/^struct defiViaRect {$/;"	s
defiVia_cutPattern	def/cdef/xdefiVia.cpp	/^const char* defiVia_cutPattern (const ::defiVia* obj) {$/;"	f
defiVia_getPolygon	def/cdef/xdefiVia.cpp	/^::defiPoints defiVia_getPolygon (const ::defiVia* obj, int  index) {$/;"	f
defiVia_h	def/def/defiVia.hpp	31;"	d
defiVia_hasCutPattern	def/cdef/xdefiVia.cpp	/^int defiVia_hasCutPattern (const ::defiVia* obj) {$/;"	f
defiVia_hasOffset	def/cdef/xdefiVia.cpp	/^int defiVia_hasOffset (const ::defiVia* obj) {$/;"	f
defiVia_hasOrigin	def/cdef/xdefiVia.cpp	/^int defiVia_hasOrigin (const ::defiVia* obj) {$/;"	f
defiVia_hasPattern	def/cdef/xdefiVia.cpp	/^int defiVia_hasPattern (const ::defiVia* obj) {$/;"	f
defiVia_hasPolyMask	def/cdef/xdefiVia.cpp	/^int defiVia_hasPolyMask (const ::defiVia* obj, int  index) {$/;"	f
defiVia_hasRectMask	def/cdef/xdefiVia.cpp	/^int defiVia_hasRectMask (const ::defiVia* obj, int  index) {$/;"	f
defiVia_hasRowCol	def/cdef/xdefiVia.cpp	/^int defiVia_hasRowCol (const ::defiVia* obj) {$/;"	f
defiVia_hasViaRule	def/cdef/xdefiVia.cpp	/^int defiVia_hasViaRule (const ::defiVia* obj) {$/;"	f
defiVia_layer	def/cdef/xdefiVia.cpp	/^void defiVia_layer (const ::defiVia* obj, int  index, char**  layer, int*  xl, int*  yl, int*  xh, int*  yh) {$/;"	f
defiVia_name	def/cdef/xdefiVia.cpp	/^const char* defiVia_name (const ::defiVia* obj) {$/;"	f
defiVia_numLayers	def/cdef/xdefiVia.cpp	/^int defiVia_numLayers (const ::defiVia* obj) {$/;"	f
defiVia_numPolygons	def/cdef/xdefiVia.cpp	/^int defiVia_numPolygons (const ::defiVia* obj) {$/;"	f
defiVia_offset	def/cdef/xdefiVia.cpp	/^void defiVia_offset (const ::defiVia* obj, int*  xBotOffset, int*  yBotOffset, int*  xTopOffset, int*  yTopOffset) {$/;"	f
defiVia_origin	def/cdef/xdefiVia.cpp	/^void defiVia_origin (const ::defiVia* obj, int*  xOffset, int*  yOffset) {$/;"	f
defiVia_pattern	def/cdef/xdefiVia.cpp	/^const char* defiVia_pattern (const ::defiVia* obj) {$/;"	f
defiVia_polyMask	def/cdef/xdefiVia.cpp	/^int defiVia_polyMask (const ::defiVia* obj, int  index) {$/;"	f
defiVia_polygonName	def/cdef/xdefiVia.cpp	/^const char* defiVia_polygonName (const ::defiVia* obj, int  index) {$/;"	f
defiVia_print	def/cdef/xdefiVia.cpp	/^void defiVia_print (const ::defiVia* obj, FILE*  f) {$/;"	f
defiVia_rectMask	def/cdef/xdefiVia.cpp	/^int defiVia_rectMask (const ::defiVia* obj, int  index) {$/;"	f
defiVia_rowCol	def/cdef/xdefiVia.cpp	/^void defiVia_rowCol (const ::defiVia* obj, int*  numCutRows, int*  numCutCols) {$/;"	f
defiVia_viaRule	def/cdef/xdefiVia.cpp	/^void defiVia_viaRule (const ::defiVia* obj, char**  viaRuleName, int*  xSize, int*  ySize, char**  botLayer, char**  cutLayer, char**  topLayer, int*  xCutSpacing, int*  yCutSpacing, int*  xBotEnc, int*  yBotEnc, int*  xTopEnc, int*  yTopEnc) {$/;"	f
defiVpin	def/cdef/defiTypedefs.h	/^typedef void *defiVpin;$/;"	t
defiVpin	def/def/defiNet.cpp	/^defiVpin::defiVpin(defrData *data)$/;"	f	class:defiVpin
defiVpin	def/def/defiNet.hpp	/^class defiVpin {$/;"	c
defiVpin_layer	def/cdef/xdefiNet.cpp	/^const char* defiVpin_layer (const ::defiVpin* obj) {$/;"	f
defiVpin_name	def/cdef/xdefiNet.cpp	/^const char* defiVpin_name (const ::defiVpin* obj) {$/;"	f
defiVpin_orient	def/cdef/xdefiNet.cpp	/^int defiVpin_orient (const ::defiVpin* obj) {$/;"	f
defiVpin_orientStr	def/cdef/xdefiNet.cpp	/^const char* defiVpin_orientStr (const ::defiVpin* obj) {$/;"	f
defiVpin_status	def/cdef/xdefiNet.cpp	/^char defiVpin_status (const ::defiVpin* obj) {$/;"	f
defiVpin_xLoc	def/cdef/xdefiNet.cpp	/^int defiVpin_xLoc (const ::defiVpin* obj) {$/;"	f
defiVpin_xh	def/cdef/xdefiNet.cpp	/^int defiVpin_xh (const ::defiVpin* obj) {$/;"	f
defiVpin_xl	def/cdef/xdefiNet.cpp	/^int defiVpin_xl (const ::defiVpin* obj) {$/;"	f
defiVpin_yLoc	def/cdef/xdefiNet.cpp	/^int defiVpin_yLoc (const ::defiVpin* obj) {$/;"	f
defiVpin_yh	def/cdef/xdefiNet.cpp	/^int defiVpin_yh (const ::defiVpin* obj) {$/;"	f
defiVpin_yl	def/cdef/xdefiNet.cpp	/^int defiVpin_yl (const ::defiVpin* obj) {$/;"	f
defiWire	def/cdef/defiTypedefs.h	/^typedef void *defiWire;$/;"	t
defiWire	def/def/defiNet.cpp	/^defiWire::defiWire(defrData *data)$/;"	f	class:defiWire
defiWire	def/def/defiNet.hpp	/^class defiWire {$/;"	c
defiWire_numPaths	def/cdef/xdefiNet.cpp	/^int defiWire_numPaths (const ::defiWire* obj) {$/;"	f
defiWire_path	def/cdef/xdefiNet.cpp	/^const ::defiPath* defiWire_path (const ::defiWire* obj, int  index) {$/;"	f
defiWire_wireShieldNetName	def/cdef/xdefiNet.cpp	/^const char* defiWire_wireShieldNetName (const ::defiWire* obj) {$/;"	f
defiWire_wireType	def/cdef/xdefiNet.cpp	/^const char* defiWire_wireType (const ::defiWire* obj) {$/;"	f
define_set	lef/include/lefrData.hpp	/^    lefDoubleMap        define_set; $/;"	m	class:lefrData
define_set	lef/lef/lefrData.hpp	/^    lefDoubleMap        define_set; $/;"	m	class:lefrData
defineb_set	lef/include/lefrData.hpp	/^    lefIntMap           defineb_set; $/;"	m	class:lefrData
defineb_set	lef/lef/lefrData.hpp	/^    lefIntMap           defineb_set; $/;"	m	class:lefrData
defines_set	lef/include/lefrData.hpp	/^    lefStringMap        defines_set; $/;"	m	class:lefrData
defines_set	lef/lef/lefrData.hpp	/^    lefStringMap        defines_set; $/;"	m	class:lefrData
defkywd	def/def/def_keywords.cpp	/^defrData::defkywd(int num)$/;"	f	class:defrData
defpoint	def/def/defiDefs.hpp	/^struct defpoint {$/;"	s
defrAddAlias	def/cdef/xdefrReader.cpp	/^void defrAddAlias (const char*  key, const char*  value, int  marked) {$/;"	f
defrAddAlias	def/def/defrReader.cpp	/^defrAddAlias(const char     *key,$/;"	f
defrArrayNameCbkType	def/cdef/defrReader.h	/^  defrArrayNameCbkType = 7,$/;"	e	enum:__anon13
defrArrayNameCbkType	def/def/defrReader.hpp	/^  defrArrayNameCbkType,$/;"	e	enum:__anon18
defrAssertionCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrAssertionCbkFnType) (defrCallbackType_e, defiAssertion *, defiUserData);$/;"	t
defrAssertionCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrAssertionCbkFnType) (defrCallbackType_e, defiAssertion *, defiUserData);$/;"	t
defrAssertionCbkType	def/cdef/defrReader.h	/^  defrAssertionCbkType = 62,$/;"	e	enum:__anon13
defrAssertionCbkType	def/def/defrReader.hpp	/^  defrAssertionCbkType,$/;"	e	enum:__anon18
defrAssertionsEndCbkType	def/cdef/defrReader.h	/^  defrAssertionsEndCbkType = 63,$/;"	e	enum:__anon13
defrAssertionsEndCbkType	def/def/defrReader.hpp	/^  defrAssertionsEndCbkType,$/;"	e	enum:__anon18
defrAssertionsStartCbkType	def/cdef/defrReader.h	/^  defrAssertionsStartCbkType = 61,$/;"	e	enum:__anon13
defrAssertionsStartCbkType	def/def/defrReader.hpp	/^  defrAssertionsStartCbkType,$/;"	e	enum:__anon18
defrBlockageCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrBlockageCbkFnType) (defrCallbackType_e, defiBlockage *, defiUserData);$/;"	t
defrBlockageCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrBlockageCbkFnType) (defrCallbackType_e, defiBlockage *, defiUserData);$/;"	t
defrBlockageCbkType	def/cdef/defrReader.h	/^  defrBlockageCbkType = 86,$/;"	e	enum:__anon13
defrBlockageCbkType	def/def/defrReader.hpp	/^  defrBlockageCbkType,$/;"	e	enum:__anon18
defrBlockageEndCbkType	def/cdef/defrReader.h	/^  defrBlockageEndCbkType = 87,$/;"	e	enum:__anon13
defrBlockageEndCbkType	def/def/defrReader.hpp	/^  defrBlockageEndCbkType,$/;"	e	enum:__anon18
defrBlockageStartCbkType	def/cdef/defrReader.h	/^  defrBlockageStartCbkType = 85,$/;"	e	enum:__anon13
defrBlockageStartCbkType	def/def/defrReader.hpp	/^  defrBlockageStartCbkType,$/;"	e	enum:__anon18
defrBoxCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrBoxCbkFnType) (defrCallbackType_e, defiBox *box, defiUserData);$/;"	t
defrBoxCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrBoxCbkFnType) (defrCallbackType_e, defiBox *box, defiUserData);$/;"	t
defrBusBitCbkType	def/cdef/defrReader.h	/^  defrBusBitCbkType = 10,$/;"	e	enum:__anon13
defrBusBitCbkType	def/def/defrReader.hpp	/^  defrBusBitCbkType,$/;"	e	enum:__anon18
defrCallbackType_e	def/cdef/defrReader.h	/^} defrCallbackType_e;$/;"	t	typeref:enum:__anon13
defrCallbackType_e	def/def/defrReader.hpp	/^} defrCallbackType_e;$/;"	t	typeref:enum:__anon18
defrCallbacks	def/def/defrCallBacks.hpp	/^class defrCallbacks {$/;"	c
defrCallbacks	def/def/defrCallbacks.cpp	/^defrCallbacks::defrCallbacks()$/;"	f	class:defrCallbacks
defrCannotOccupyCbkType	def/cdef/defrReader.h	/^  defrCannotOccupyCbkType = 36,$/;"	e	enum:__anon13
defrCannotOccupyCbkType	def/def/defrReader.hpp	/^  defrCannotOccupyCbkType,$/;"	e	enum:__anon18
defrCanplaceCbkType	def/cdef/defrReader.h	/^  defrCanplaceCbkType = 35,$/;"	e	enum:__anon13
defrCanplaceCbkType	def/def/defrReader.hpp	/^  defrCanplaceCbkType,$/;"	e	enum:__anon18
defrCaseSensitiveCbkType	def/cdef/defrReader.h	/^  defrCaseSensitiveCbkType = 94,$/;"	e	enum:__anon13
defrCaseSensitiveCbkType	def/def/defrReader.hpp	/^  defrCaseSensitiveCbkType,$/;"	e	enum:__anon18
defrCatchAll	def/def/defrReader.cpp	/^defrCatchAll(defrCallbackType_e typ, void*, defiUserData)$/;"	f
defrClear	def/cdef/xdefrReader.cpp	/^int defrClear () {$/;"	f
defrClear	def/def/defrReader.cpp	/^defrClear()$/;"	f
defrClearSession	def/def/defrReader.cpp	/^defrClearSession()$/;"	f
defrComponentCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrComponentCbkFnType) (defrCallbackType_e, defiComponent *comp, defiUserData);$/;"	t
defrComponentCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrComponentCbkFnType) (defrCallbackType_e, defiComponent *comp, defiUserData);$/;"	t
defrComponentCbkType	def/cdef/defrReader.h	/^  defrComponentCbkType = 13,$/;"	e	enum:__anon13
defrComponentCbkType	def/def/defrReader.hpp	/^  defrComponentCbkType,$/;"	e	enum:__anon18
defrComponentEndCbkType	def/cdef/defrReader.h	/^  defrComponentEndCbkType = 14,$/;"	e	enum:__anon13
defrComponentEndCbkType	def/def/defrReader.hpp	/^  defrComponentEndCbkType,$/;"	e	enum:__anon18
defrComponentExtCbkType	def/cdef/defrReader.h	/^  defrComponentExtCbkType = 24,$/;"	e	enum:__anon13
defrComponentExtCbkType	def/def/defrReader.hpp	/^  defrComponentExtCbkType,$/;"	e	enum:__anon18
defrComponentMaskShiftLayerCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrComponentMaskShiftLayerCbkFnType) (defrCallbackType_e, defiComponentMaskShiftLayer *comp, defiUserData);$/;"	t
defrComponentMaskShiftLayerCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrComponentMaskShiftLayerCbkFnType) (defrCallbackType_e, defiComponentMaskShiftLayer *comp, defiUserData);$/;"	t
defrComponentMaskShiftLayerCbkType	def/cdef/defrReader.h	/^  defrComponentMaskShiftLayerCbkType = 102,$/;"	e	enum:__anon13
defrComponentMaskShiftLayerCbkType	def/def/defrReader.hpp	/^  defrComponentMaskShiftLayerCbkType,$/;"	e	enum:__anon18
defrComponentStartCbkType	def/cdef/defrReader.h	/^  defrComponentStartCbkType = 12,$/;"	e	enum:__anon13
defrComponentStartCbkType	def/def/defrReader.hpp	/^  defrComponentStartCbkType,$/;"	e	enum:__anon18
defrConstraintCbkType	def/cdef/defrReader.h	/^  defrConstraintCbkType = 65,$/;"	e	enum:__anon13
defrConstraintCbkType	def/def/defrReader.hpp	/^  defrConstraintCbkType,$/;"	e	enum:__anon18
defrConstraintsEndCbkType	def/cdef/defrReader.h	/^  defrConstraintsEndCbkType = 66,$/;"	e	enum:__anon13
defrConstraintsEndCbkType	def/def/defrReader.hpp	/^  defrConstraintsEndCbkType,$/;"	e	enum:__anon18
defrConstraintsStartCbkType	def/cdef/defrReader.h	/^  defrConstraintsStartCbkType = 64,$/;"	e	enum:__anon13
defrConstraintsStartCbkType	def/def/defrReader.hpp	/^  defrConstraintsStartCbkType,$/;"	e	enum:__anon18
defrContext	def/def/defrData.cpp	/^defrContext::defrContext(int ownConf)$/;"	f	class:defrContext
defrContext	def/def/defrData.hpp	/^class defrContext {$/;"	c
defrCountUnused	def/def/defrReader.cpp	/^defrCountUnused(defrCallbackType_e  e,$/;"	f
defrData	def/cdef/defiTypedefs.h	/^typedef void *defrData;$/;"	t
defrData	def/def/defrData.cpp	/^defrData::defrData(const defrCallbacks *pCallbacks,$/;"	f	class:defrData
defrData	def/def/defrData.hpp	/^class defrData {$/;"	c
defrData_h	def/def/defrData.hpp	40;"	d
defrDefaultCapCbkType	def/cdef/defrReader.h	/^  defrDefaultCapCbkType = 38,$/;"	e	enum:__anon13
defrDefaultCapCbkType	def/def/defrReader.hpp	/^  defrDefaultCapCbkType,$/;"	e	enum:__anon18
defrDesignEndCbkType	def/cdef/defrReader.h	/^  defrDesignEndCbkType = 103$/;"	e	enum:__anon13
defrDesignEndCbkType	def/def/defrReader.hpp	/^  defrDesignEndCbkType$/;"	e	enum:__anon18
defrDesignStartCbkType	def/cdef/defrReader.h	/^  defrDesignStartCbkType = 1,$/;"	e	enum:__anon13
defrDesignStartCbkType	def/def/defrReader.hpp	/^  defrDesignStartCbkType,$/;"	e	enum:__anon18
defrDieAreaCbkType	def/cdef/defrReader.h	/^  defrDieAreaCbkType = 34,$/;"	e	enum:__anon13
defrDieAreaCbkType	def/def/defrReader.hpp	/^  defrDieAreaCbkType,$/;"	e	enum:__anon18
defrDisableParserMsgs	def/cdef/xdefrReader.cpp	/^void defrDisableParserMsgs (int  nMsg, int*  msgs) {$/;"	f
defrDisableParserMsgs	def/def/defrReader.cpp	/^defrDisableParserMsgs(int   nMsg,$/;"	f
defrDisablePropStrProcess	def/cdef/xdefrReader.cpp	/^void defrDisablePropStrProcess () {$/;"	f
defrDisablePropStrProcess	def/def/defrReader.cpp	/^defrDisablePropStrProcess()$/;"	f
defrDividerCbkType	def/cdef/defrReader.h	/^  defrDividerCbkType = 9,$/;"	e	enum:__anon13
defrDividerCbkType	def/def/defrReader.hpp	/^  defrDividerCbkType,$/;"	e	enum:__anon18
defrDoubleCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrDoubleCbkFnType) (defrCallbackType_e, double number, defiUserData);$/;"	t
defrDoubleCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrDoubleCbkFnType) (defrCallbackType_e, double number, defiUserData);$/;"	t
defrEnableAllMsgs	def/cdef/xdefrReader.cpp	/^void defrEnableAllMsgs () {$/;"	f
defrEnableAllMsgs	def/def/defrReader.cpp	/^defrEnableAllMsgs()$/;"	f
defrEnableParserMsgs	def/cdef/xdefrReader.cpp	/^void defrEnableParserMsgs (int  nMsg, int*  msgs) {$/;"	f
defrEnableParserMsgs	def/def/defrReader.cpp	/^defrEnableParserMsgs(int    nMsg,$/;"	f
defrExtensionCbkType	def/cdef/defrReader.h	/^  defrExtensionCbkType = 101,$/;"	e	enum:__anon13
defrExtensionCbkType	def/def/defrReader.hpp	/^  defrExtensionCbkType,$/;"	e	enum:__anon18
defrFName	def/def/defrReader.cpp	/^defrFName()$/;"	f
defrFPCCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrFPCCbkFnType) (defrCallbackType_e, defiFPC *, defiUserData);$/;"	t
defrFPCCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrFPCCbkFnType) (defrCallbackType_e, defiFPC *, defiUserData);$/;"	t
defrFPCCbkType	def/cdef/defrReader.h	/^  defrFPCCbkType = 74,$/;"	e	enum:__anon13
defrFPCCbkType	def/def/defrReader.hpp	/^  defrFPCCbkType,$/;"	e	enum:__anon18
defrFPCEndCbkType	def/cdef/defrReader.h	/^  defrFPCEndCbkType = 75,$/;"	e	enum:__anon13
defrFPCEndCbkType	def/def/defrReader.hpp	/^  defrFPCEndCbkType,$/;"	e	enum:__anon18
defrFPCStartCbkType	def/cdef/defrReader.h	/^  defrFPCStartCbkType = 73,$/;"	e	enum:__anon13
defrFPCStartCbkType	def/def/defrReader.hpp	/^  defrFPCStartCbkType,$/;"	e	enum:__anon18
defrFillCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrFillCbkFnType) (defrCallbackType_e, defiFill *, defiUserData);$/;"	t
defrFillCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrFillCbkFnType) (defrCallbackType_e, defiFill *, defiUserData);$/;"	t
defrFillCbkType	def/cdef/defrReader.h	/^  defrFillCbkType = 92,$/;"	e	enum:__anon13
defrFillCbkType	def/def/defrReader.hpp	/^  defrFillCbkType,$/;"	e	enum:__anon18
defrFillEndCbkType	def/cdef/defrReader.h	/^  defrFillEndCbkType = 93,$/;"	e	enum:__anon13
defrFillEndCbkType	def/def/defrReader.hpp	/^  defrFillEndCbkType,$/;"	e	enum:__anon18
defrFillStartCbkType	def/cdef/defrReader.h	/^  defrFillStartCbkType = 91,$/;"	e	enum:__anon13
defrFillStartCbkType	def/def/defrReader.hpp	/^  defrFillStartCbkType,$/;"	e	enum:__anon18
defrFloorPlanNameCbkType	def/cdef/defrReader.h	/^  defrFloorPlanNameCbkType = 6,$/;"	e	enum:__anon13
defrFloorPlanNameCbkType	def/def/defrReader.hpp	/^  defrFloorPlanNameCbkType,$/;"	e	enum:__anon18
defrGZipClose	def/defzlib/defzlib.cpp	/^int defrGZipClose(defGZFile filePtr) {$/;"	f
defrGZipOpen	def/defzlib/defzlib.cpp	/^defrGZipOpen(const char *gzipPath, const char* mode)$/;"	f
defrGcellGridCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrGcellGridCbkFnType) (defrCallbackType_e, defiGcellGrid *grid, defiUserData);$/;"	t
defrGcellGridCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrGcellGridCbkFnType) (defrCallbackType_e, defiGcellGrid *grid, defiUserData);$/;"	t
defrGcellGridCbkType	def/cdef/defrReader.h	/^  defrGcellGridCbkType = 44,$/;"	e	enum:__anon13
defrGcellGridCbkType	def/def/defrReader.hpp	/^  defrGcellGridCbkType,$/;"	e	enum:__anon18
defrGetAllowComponentNets	def/cdef/xdefrReader.cpp	/^int defrGetAllowComponentNets () {$/;"	f
defrGetAllowComponentNets	def/def/defrReader.cpp	/^defrGetAllowComponentNets()$/;"	f
defrGetUserData	def/cdef/xdefrReader.cpp	/^defiUserData defrGetUserData () {$/;"	f
defrGetUserData	def/def/defrReader.cpp	/^defrGetUserData()$/;"	f
defrGroupCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrGroupCbkFnType) (defrCallbackType_e, defiGroup *, defiUserData);$/;"	t
defrGroupCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrGroupCbkFnType) (defrCallbackType_e, defiGroup *, defiUserData);$/;"	t
defrGroupCbkType	def/cdef/defrReader.h	/^  defrGroupCbkType = 59,$/;"	e	enum:__anon13
defrGroupCbkType	def/def/defrReader.hpp	/^  defrGroupCbkType,$/;"	e	enum:__anon18
defrGroupExtCbkType	def/cdef/defrReader.h	/^  defrGroupExtCbkType = 29,$/;"	e	enum:__anon13
defrGroupExtCbkType	def/def/defrReader.hpp	/^  defrGroupExtCbkType,$/;"	e	enum:__anon18
defrGroupMemberCbkType	def/cdef/defrReader.h	/^  defrGroupMemberCbkType = 58,$/;"	e	enum:__anon13
defrGroupMemberCbkType	def/def/defrReader.hpp	/^  defrGroupMemberCbkType,$/;"	e	enum:__anon18
defrGroupNameCbkType	def/cdef/defrReader.h	/^  defrGroupNameCbkType = 57,$/;"	e	enum:__anon13
defrGroupNameCbkType	def/def/defrReader.hpp	/^  defrGroupNameCbkType,$/;"	e	enum:__anon18
defrGroupsEndCbkType	def/cdef/defrReader.h	/^  defrGroupsEndCbkType = 60,$/;"	e	enum:__anon13
defrGroupsEndCbkType	def/def/defrReader.hpp	/^  defrGroupsEndCbkType,$/;"	e	enum:__anon18
defrGroupsStartCbkType	def/cdef/defrReader.h	/^  defrGroupsStartCbkType = 56,$/;"	e	enum:__anon13
defrGroupsStartCbkType	def/def/defrReader.hpp	/^  defrGroupsStartCbkType,$/;"	e	enum:__anon18
defrHistoryCbkType	def/cdef/defrReader.h	/^  defrHistoryCbkType = 33,$/;"	e	enum:__anon13
defrHistoryCbkType	def/def/defrReader.hpp	/^  defrHistoryCbkType,$/;"	e	enum:__anon18
defrIOTimingCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrIOTimingCbkFnType) (defrCallbackType_e, defiIOTiming *, defiUserData);$/;"	t
defrIOTimingCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrIOTimingCbkFnType) (defrCallbackType_e, defiIOTiming *, defiUserData);$/;"	t
defrIOTimingCbkType	def/cdef/defrReader.h	/^  defrIOTimingCbkType = 71,$/;"	e	enum:__anon13
defrIOTimingCbkType	def/def/defrReader.hpp	/^  defrIOTimingCbkType,$/;"	e	enum:__anon18
defrIOTimingsEndCbkType	def/cdef/defrReader.h	/^  defrIOTimingsEndCbkType = 72,$/;"	e	enum:__anon13
defrIOTimingsEndCbkType	def/def/defrReader.hpp	/^  defrIOTimingsEndCbkType,$/;"	e	enum:__anon18
defrIOTimingsStartCbkType	def/cdef/defrReader.h	/^  defrIOTimingsStartCbkType = 70,$/;"	e	enum:__anon13
defrIOTimingsStartCbkType	def/def/defrReader.hpp	/^  defrIOTimingsStartCbkType,$/;"	e	enum:__anon18
defrInit	def/cdef/xdefrReader.cpp	/^int defrInit () {$/;"	f
defrInit	def/def/defrReader.cpp	/^defrInit()$/;"	f
defrInitSession	def/cdef/xdefrReader.cpp	/^int defrInitSession (int  startSession) {$/;"	f
defrInitSession	def/def/defrReader.cpp	/^defrInitSession(int startSession)$/;"	f
defrIntegerCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrIntegerCbkFnType) (defrCallbackType_e, int number, defiUserData);$/;"	t
defrIntegerCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrIntegerCbkFnType) (defrCallbackType_e, int number, defiUserData);$/;"	t
defrIoTimingsExtCbkType	def/cdef/defrReader.h	/^  defrIoTimingsExtCbkType = 31,$/;"	e	enum:__anon13
defrIoTimingsExtCbkType	def/def/defrReader.hpp	/^  defrIoTimingsExtCbkType,$/;"	e	enum:__anon18
defrLineNumber	def/cdef/xdefrReader.cpp	/^int defrLineNumber () {$/;"	f
defrLineNumber	def/def/defrReader.cpp	/^int defrLineNumber() $/;"	f
defrLog	def/def/defrData.hpp	/^    FILE*  defrLog; $/;"	m	class:defrData
defrLongLineNumber	def/cdef/xdefrReader.cpp	/^long long defrLongLineNumber () {$/;"	f
defrLongLineNumber	def/def/defrReader.cpp	/^long long defrLongLineNumber() {$/;"	f
defrNetCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrNetCbkFnType) (defrCallbackType_e, defiNet *net, defiUserData);$/;"	t
defrNetCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrNetCbkFnType) (defrCallbackType_e, defiNet *net, defiUserData);$/;"	t
defrNetCbkType	def/cdef/defrReader.h	/^  defrNetCbkType = 16,$/;"	e	enum:__anon13
defrNetCbkType	def/def/defrReader.hpp	/^  defrNetCbkType,$/;"	e	enum:__anon18
defrNetConnectionExtCbkType	def/cdef/defrReader.h	/^  defrNetConnectionExtCbkType = 27,$/;"	e	enum:__anon13
defrNetConnectionExtCbkType	def/def/defrReader.hpp	/^  defrNetConnectionExtCbkType,$/;"	e	enum:__anon18
defrNetEndCbkType	def/cdef/defrReader.h	/^  defrNetEndCbkType = 20,$/;"	e	enum:__anon13
defrNetEndCbkType	def/def/defrReader.hpp	/^  defrNetEndCbkType,$/;"	e	enum:__anon18
defrNetExtCbkType	def/cdef/defrReader.h	/^  defrNetExtCbkType = 28,$/;"	e	enum:__anon13
defrNetExtCbkType	def/def/defrReader.hpp	/^  defrNetExtCbkType,$/;"	e	enum:__anon18
defrNetNameCbkType	def/cdef/defrReader.h	/^  defrNetNameCbkType = 17,$/;"	e	enum:__anon13
defrNetNameCbkType	def/def/defrReader.hpp	/^  defrNetNameCbkType,$/;"	e	enum:__anon18
defrNetNonDefaultRuleCbkType	def/cdef/defrReader.h	/^  defrNetNonDefaultRuleCbkType = 18,$/;"	e	enum:__anon13
defrNetNonDefaultRuleCbkType	def/def/defrReader.hpp	/^  defrNetNonDefaultRuleCbkType,$/;"	e	enum:__anon18
defrNetStartCbkType	def/cdef/defrReader.h	/^  defrNetStartCbkType = 15,$/;"	e	enum:__anon13
defrNetStartCbkType	def/def/defrReader.hpp	/^  defrNetStartCbkType,$/;"	e	enum:__anon18
defrNetSubnetNameCbkType	def/cdef/defrReader.h	/^  defrNetSubnetNameCbkType = 19,$/;"	e	enum:__anon13
defrNetSubnetNameCbkType	def/def/defrReader.hpp	/^  defrNetSubnetNameCbkType,$/;"	e	enum:__anon18
defrNonDefaultCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrNonDefaultCbkFnType) (defrCallbackType_e, defiNonDefault *, defiUserData);$/;"	t
defrNonDefaultCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrNonDefaultCbkFnType) (defrCallbackType_e, defiNonDefault *, defiUserData);$/;"	t
defrNonDefaultCbkType	def/cdef/defrReader.h	/^  defrNonDefaultCbkType = 96,$/;"	e	enum:__anon13
defrNonDefaultCbkType	def/def/defrReader.hpp	/^  defrNonDefaultCbkType,$/;"	e	enum:__anon18
defrNonDefaultEndCbkType	def/cdef/defrReader.h	/^  defrNonDefaultEndCbkType = 97,$/;"	e	enum:__anon13
defrNonDefaultEndCbkType	def/def/defrReader.hpp	/^  defrNonDefaultEndCbkType,$/;"	e	enum:__anon18
defrNonDefaultStartCbkType	def/cdef/defrReader.h	/^  defrNonDefaultStartCbkType = 95,$/;"	e	enum:__anon13
defrNonDefaultStartCbkType	def/def/defrReader.hpp	/^  defrNonDefaultStartCbkType,$/;"	e	enum:__anon18
defrPartitionCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrPartitionCbkFnType) (defrCallbackType_e, defiPartition *, defiUserData);$/;"	t
defrPartitionCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrPartitionCbkFnType) (defrCallbackType_e, defiPartition *, defiUserData);$/;"	t
defrPartitionCbkType	def/cdef/defrReader.h	/^  defrPartitionCbkType = 80,$/;"	e	enum:__anon13
defrPartitionCbkType	def/def/defrReader.hpp	/^  defrPartitionCbkType,$/;"	e	enum:__anon18
defrPartitionsEndCbkType	def/cdef/defrReader.h	/^  defrPartitionsEndCbkType = 81,$/;"	e	enum:__anon13
defrPartitionsEndCbkType	def/def/defrReader.hpp	/^  defrPartitionsEndCbkType,$/;"	e	enum:__anon18
defrPartitionsExtCbkType	def/cdef/defrReader.h	/^  defrPartitionsExtCbkType = 32,$/;"	e	enum:__anon13
defrPartitionsExtCbkType	def/def/defrReader.hpp	/^  defrPartitionsExtCbkType,$/;"	e	enum:__anon18
defrPartitionsStartCbkType	def/cdef/defrReader.h	/^  defrPartitionsStartCbkType = 79,$/;"	e	enum:__anon13
defrPartitionsStartCbkType	def/def/defrReader.hpp	/^  defrPartitionsStartCbkType,$/;"	e	enum:__anon18
defrPathCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrPathCbkFnType) (defrCallbackType_e, defiPath *path, defiUserData);$/;"	t
defrPathCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrPathCbkFnType) (defrCallbackType_e, defiPath *path, defiUserData);$/;"	t
defrPathCbkType	def/cdef/defrReader.h	/^  defrPathCbkType = 21,$/;"	e	enum:__anon13
defrPathCbkType	def/def/defrReader.hpp	/^  defrPathCbkType,$/;"	e	enum:__anon18
defrPinCapCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrPinCapCbkFnType) (defrCallbackType_e, defiPinCap *pincap, defiUserData);$/;"	t
defrPinCapCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrPinCapCbkFnType) (defrCallbackType_e, defiPinCap *pincap, defiUserData);$/;"	t
defrPinCapCbkType	def/cdef/defrReader.h	/^  defrPinCapCbkType = 37,$/;"	e	enum:__anon13
defrPinCapCbkType	def/def/defrReader.hpp	/^  defrPinCapCbkType,$/;"	e	enum:__anon18
defrPinCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrPinCbkFnType) (defrCallbackType_e, defiPin *pin, defiUserData);$/;"	t
defrPinCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrPinCbkFnType) (defrCallbackType_e, defiPin *pin, defiUserData);$/;"	t
defrPinCbkType	def/cdef/defrReader.h	/^  defrPinCbkType = 40,$/;"	e	enum:__anon13
defrPinCbkType	def/def/defrReader.hpp	/^  defrPinCbkType,$/;"	e	enum:__anon18
defrPinEndCbkType	def/cdef/defrReader.h	/^  defrPinEndCbkType = 41,$/;"	e	enum:__anon13
defrPinEndCbkType	def/def/defrReader.hpp	/^  defrPinEndCbkType,$/;"	e	enum:__anon18
defrPinExtCbkType	def/cdef/defrReader.h	/^  defrPinExtCbkType = 25,$/;"	e	enum:__anon13
defrPinExtCbkType	def/def/defrReader.hpp	/^  defrPinExtCbkType,$/;"	e	enum:__anon18
defrPinPropCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrPinPropCbkFnType) (defrCallbackType_e, defiPinProp *, defiUserData);$/;"	t
defrPinPropCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrPinPropCbkFnType) (defrCallbackType_e, defiPinProp *, defiUserData);$/;"	t
defrPinPropCbkType	def/cdef/defrReader.h	/^  defrPinPropCbkType = 83,$/;"	e	enum:__anon13
defrPinPropCbkType	def/def/defrReader.hpp	/^  defrPinPropCbkType,$/;"	e	enum:__anon18
defrPinPropEndCbkType	def/cdef/defrReader.h	/^  defrPinPropEndCbkType = 84,$/;"	e	enum:__anon13
defrPinPropEndCbkType	def/def/defrReader.hpp	/^  defrPinPropEndCbkType,$/;"	e	enum:__anon18
defrPinPropStartCbkType	def/cdef/defrReader.h	/^  defrPinPropStartCbkType = 82,$/;"	e	enum:__anon13
defrPinPropStartCbkType	def/def/defrReader.hpp	/^  defrPinPropStartCbkType,$/;"	e	enum:__anon18
defrPrintUnusedCallbacks	def/cdef/xdefrReader.cpp	/^void defrPrintUnusedCallbacks (FILE*  log) {$/;"	f
defrPrintUnusedCallbacks	def/def/defrReader.cpp	/^defrPrintUnusedCallbacks(FILE *log)$/;"	f
defrPropCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrPropCbkFnType) (defrCallbackType_e, defiProp *prop, defiUserData);$/;"	t
defrPropCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrPropCbkFnType) (defrCallbackType_e, defiProp *prop, defiUserData);$/;"	t
defrPropCbkType	def/cdef/defrReader.h	/^  defrPropCbkType = 3,$/;"	e	enum:__anon13
defrPropCbkType	def/def/defrReader.hpp	/^  defrPropCbkType,$/;"	e	enum:__anon18
defrPropDefEndCbkType	def/cdef/defrReader.h	/^  defrPropDefEndCbkType = 4,$/;"	e	enum:__anon13
defrPropDefEndCbkType	def/def/defrReader.hpp	/^  defrPropDefEndCbkType,$/;"	e	enum:__anon18
defrPropDefStartCbkType	def/cdef/defrReader.h	/^  defrPropDefStartCbkType = 5,$/;"	e	enum:__anon13
defrPropDefStartCbkType	def/def/defrReader.hpp	/^  defrPropDefStartCbkType,$/;"	e	enum:__anon18
defrRead	def/cdef/xdefrReader.cpp	/^int defrRead (FILE * file, const char * fileName, defiUserData  userData, int  case_sensitive) {$/;"	f
defrRead	def/def/defrReader.cpp	/^defrRead(FILE           *f,$/;"	f
defrReadGZip	def/cdefzlib/cdefzlib.c	/^int defrReadGZip(defGZFile file, const char* gzipFile, defiUserData uData) {$/;"	f
defrReadGZip	def/defzlib/defzlib.cpp	/^int defrReadGZip(defGZFile file, const char* gzipFile, defiUserData uData) {$/;"	f
defrRegionCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrRegionCbkFnType) (defrCallbackType_e, defiRegion *, defiUserData);$/;"	t
defrRegionCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrRegionCbkFnType) (defrCallbackType_e, defiRegion *, defiUserData);$/;"	t
defrRegionCbkType	def/cdef/defrReader.h	/^  defrRegionCbkType = 49,$/;"	e	enum:__anon13
defrRegionCbkType	def/def/defrReader.hpp	/^  defrRegionCbkType,$/;"	e	enum:__anon18
defrRegionEndCbkType	def/cdef/defrReader.h	/^  defrRegionEndCbkType = 50,$/;"	e	enum:__anon13
defrRegionEndCbkType	def/def/defrReader.hpp	/^  defrRegionEndCbkType,$/;"	e	enum:__anon18
defrRegionStartCbkType	def/cdef/defrReader.h	/^  defrRegionStartCbkType = 48,$/;"	e	enum:__anon13
defrRegionStartCbkType	def/def/defrReader.hpp	/^  defrRegionStartCbkType,$/;"	e	enum:__anon18
defrReleaseNResetMemory	def/cdef/xdefrReader.cpp	/^int  defrReleaseNResetMemory () {$/;"	f
defrReleaseNResetMemory	def/def/defrReader.cpp	/^defrReleaseNResetMemory()$/;"	f
defrReset	def/cdef/xdefrReader.cpp	/^int defrReset () {$/;"	f
defrReset	def/def/defrReader.cpp	/^defrReset()$/;"	f
defrRowCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrRowCbkFnType) (defrCallbackType_e, defiRow *row, defiUserData);$/;"	t
defrRowCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrRowCbkFnType) (defrCallbackType_e, defiRow *row, defiUserData);$/;"	t
defrRowCbkType	def/cdef/defrReader.h	/^  defrRowCbkType = 42,$/;"	e	enum:__anon13
defrRowCbkType	def/def/defrReader.hpp	/^  defrRowCbkType,$/;"	e	enum:__anon18
defrSNetCbkType	def/cdef/defrReader.h	/^  defrSNetCbkType = 52,$/;"	e	enum:__anon13
defrSNetCbkType	def/def/defrReader.hpp	/^  defrSNetCbkType,$/;"	e	enum:__anon18
defrSNetEndCbkType	def/cdef/defrReader.h	/^  defrSNetEndCbkType = 55,$/;"	e	enum:__anon13
defrSNetEndCbkType	def/def/defrReader.hpp	/^  defrSNetEndCbkType,$/;"	e	enum:__anon18
defrSNetPartialPathCbkType	def/cdef/defrReader.h	/^  defrSNetPartialPathCbkType = 53,$/;"	e	enum:__anon13
defrSNetPartialPathCbkType	def/def/defrReader.hpp	/^  defrSNetPartialPathCbkType,$/;"	e	enum:__anon18
defrSNetStartCbkType	def/cdef/defrReader.h	/^  defrSNetStartCbkType = 51,$/;"	e	enum:__anon13
defrSNetStartCbkType	def/def/defrReader.hpp	/^  defrSNetStartCbkType,$/;"	e	enum:__anon18
defrSNetWireCbkType	def/cdef/defrReader.h	/^  defrSNetWireCbkType = 54,$/;"	e	enum:__anon13
defrSNetWireCbkType	def/def/defrReader.hpp	/^  defrSNetWireCbkType,$/;"	e	enum:__anon18
defrScanChainExtCbkType	def/cdef/defrReader.h	/^  defrScanChainExtCbkType = 30,$/;"	e	enum:__anon13
defrScanChainExtCbkType	def/def/defrReader.hpp	/^  defrScanChainExtCbkType,$/;"	e	enum:__anon18
defrScanchainCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrScanchainCbkFnType) (defrCallbackType_e, defiScanchain *, defiUserData);$/;"	t
defrScanchainCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrScanchainCbkFnType) (defrCallbackType_e, defiScanchain *, defiUserData);$/;"	t
defrScanchainCbkType	def/cdef/defrReader.h	/^  defrScanchainCbkType = 68,$/;"	e	enum:__anon13
defrScanchainCbkType	def/def/defrReader.hpp	/^  defrScanchainCbkType,$/;"	e	enum:__anon18
defrScanchainsEndCbkType	def/cdef/defrReader.h	/^  defrScanchainsEndCbkType = 69,$/;"	e	enum:__anon13
defrScanchainsEndCbkType	def/def/defrReader.hpp	/^  defrScanchainsEndCbkType,$/;"	e	enum:__anon18
defrScanchainsStartCbkType	def/cdef/defrReader.h	/^  defrScanchainsStartCbkType = 67,$/;"	e	enum:__anon13
defrScanchainsStartCbkType	def/def/defrReader.hpp	/^  defrScanchainsStartCbkType,$/;"	e	enum:__anon18
defrSession	def/def/defrSettings.cpp	/^defrSession::defrSession() $/;"	f	class:defrSession
defrSession	def/def/defrSettings.hpp	/^class defrSession {$/;"	c
defrSetAddPathToNet	def/cdef/xdefrReader.cpp	/^void defrSetAddPathToNet () {$/;"	f
defrSetAddPathToNet	def/def/defrReader.cpp	/^defrSetAddPathToNet()$/;"	f
defrSetAllowComponentNets	def/cdef/xdefrReader.cpp	/^void defrSetAllowComponentNets () {$/;"	f
defrSetAllowComponentNets	def/def/defrReader.cpp	/^defrSetAllowComponentNets()$/;"	f
defrSetArrayNameCbk	def/cdef/xdefrReader.cpp	/^void defrSetArrayNameCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetArrayNameCbk	def/def/defrReader.cpp	/^defrSetArrayNameCbk(defrStringCbkFnType f)$/;"	f
defrSetAssertionCbk	def/cdef/xdefrReader.cpp	/^void defrSetAssertionCbk (::defrAssertionCbkFnType p0) {$/;"	f
defrSetAssertionCbk	def/def/defrReader.cpp	/^defrSetAssertionCbk(defrAssertionCbkFnType f)$/;"	f
defrSetAssertionWarnings	def/cdef/xdefrReader.cpp	/^void defrSetAssertionWarnings (int  warn) {$/;"	f
defrSetAssertionWarnings	def/def/defrReader.cpp	/^defrSetAssertionWarnings(int warn)$/;"	f
defrSetAssertionsEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetAssertionsEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetAssertionsEndCbk	def/def/defrReader.cpp	/^defrSetAssertionsEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetAssertionsStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetAssertionsStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetAssertionsStartCbk	def/def/defrReader.cpp	/^defrSetAssertionsStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetBlockageCbk	def/cdef/xdefrReader.cpp	/^void defrSetBlockageCbk (::defrBlockageCbkFnType p0) {$/;"	f
defrSetBlockageCbk	def/def/defrReader.cpp	/^defrSetBlockageCbk(defrBlockageCbkFnType f)$/;"	f
defrSetBlockageEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetBlockageEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetBlockageEndCbk	def/def/defrReader.cpp	/^defrSetBlockageEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetBlockageStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetBlockageStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetBlockageStartCbk	def/def/defrReader.cpp	/^defrSetBlockageStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetBlockageWarnings	def/cdef/xdefrReader.cpp	/^void defrSetBlockageWarnings (int  warn) {$/;"	f
defrSetBlockageWarnings	def/def/defrReader.cpp	/^defrSetBlockageWarnings(int warn)$/;"	f
defrSetBusBitCbk	def/cdef/xdefrReader.cpp	/^void defrSetBusBitCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetBusBitCbk	def/def/defrReader.cpp	/^defrSetBusBitCbk(defrStringCbkFnType f)$/;"	f
defrSetCannotOccupyCbk	def/cdef/xdefrReader.cpp	/^void defrSetCannotOccupyCbk (::defrSiteCbkFnType p0) {$/;"	f
defrSetCannotOccupyCbk	def/def/defrReader.cpp	/^defrSetCannotOccupyCbk(defrSiteCbkFnType f)$/;"	f
defrSetCanplaceCbk	def/cdef/xdefrReader.cpp	/^void defrSetCanplaceCbk (::defrSiteCbkFnType p0) {$/;"	f
defrSetCanplaceCbk	def/def/defrReader.cpp	/^defrSetCanplaceCbk(defrSiteCbkFnType f)$/;"	f
defrSetCaseSensitiveCbk	def/cdef/xdefrReader.cpp	/^void defrSetCaseSensitiveCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetCaseSensitiveCbk	def/def/defrReader.cpp	/^defrSetCaseSensitiveCbk(defrIntegerCbkFnType f)$/;"	f
defrSetCaseSensitiveWarnings	def/cdef/xdefrReader.cpp	/^void defrSetCaseSensitiveWarnings (int  warn) {$/;"	f
defrSetCaseSensitiveWarnings	def/def/defrReader.cpp	/^defrSetCaseSensitiveWarnings(int warn)$/;"	f
defrSetCaseSensitivity	def/cdef/xdefrReader.cpp	/^void defrSetCaseSensitivity (int  caseSense) {$/;"	f
defrSetCaseSensitivity	def/def/defrReader.cpp	/^defrSetCaseSensitivity(int caseSense)$/;"	f
defrSetCommentChar	def/cdef/xdefrReader.cpp	/^void defrSetCommentChar (char  c) {$/;"	f
defrSetCommentChar	def/def/defrReader.cpp	/^defrSetCommentChar(char c)$/;"	f
defrSetComponentCbk	def/cdef/xdefrReader.cpp	/^void defrSetComponentCbk (::defrComponentCbkFnType p0) {$/;"	f
defrSetComponentCbk	def/def/defrReader.cpp	/^defrSetComponentCbk(defrComponentCbkFnType f)$/;"	f
defrSetComponentEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetComponentEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetComponentEndCbk	def/def/defrReader.cpp	/^defrSetComponentEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetComponentExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetComponentExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetComponentExtCbk	def/def/defrReader.cpp	/^defrSetComponentExtCbk(defrStringCbkFnType f)$/;"	f
defrSetComponentMaskShiftLayerCbk	def/cdef/xdefrReader.cpp	/^void defrSetComponentMaskShiftLayerCbk (::defrComponentMaskShiftLayerCbkFnType p0) {$/;"	f
defrSetComponentMaskShiftLayerCbk	def/def/defrReader.cpp	/^defrSetComponentMaskShiftLayerCbk(defrComponentMaskShiftLayerCbkFnType f)$/;"	f
defrSetComponentStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetComponentStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetComponentStartCbk	def/def/defrReader.cpp	/^defrSetComponentStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetComponentWarnings	def/cdef/xdefrReader.cpp	/^void defrSetComponentWarnings (int  warn) {$/;"	f
defrSetComponentWarnings	def/def/defrReader.cpp	/^defrSetComponentWarnings(int warn)$/;"	f
defrSetConstraintCbk	def/cdef/xdefrReader.cpp	/^void defrSetConstraintCbk (::defrAssertionCbkFnType p0) {$/;"	f
defrSetConstraintCbk	def/def/defrReader.cpp	/^defrSetConstraintCbk(defrAssertionCbkFnType f)$/;"	f
defrSetConstraintWarnings	def/cdef/xdefrReader.cpp	/^void defrSetConstraintWarnings (int  warn) {$/;"	f
defrSetConstraintWarnings	def/def/defrReader.cpp	/^defrSetConstraintWarnings(int warn)$/;"	f
defrSetConstraintsEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetConstraintsEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetConstraintsEndCbk	def/def/defrReader.cpp	/^defrSetConstraintsEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetConstraintsStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetConstraintsStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetConstraintsStartCbk	def/def/defrReader.cpp	/^defrSetConstraintsStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetContextLogFunction	def/def/defrReader.cpp	/^defrSetContextLogFunction(DEFI_CONTEXT_LOG_FUNCTION f)$/;"	f
defrSetContextWarningLogFunction	def/def/defrReader.cpp	/^defrSetContextWarningLogFunction(DEFI_CONTEXT_WARNING_LOG_FUNCTION f)$/;"	f
defrSetDefaultCapCbk	def/cdef/xdefrReader.cpp	/^void defrSetDefaultCapCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetDefaultCapCbk	def/def/defrReader.cpp	/^defrSetDefaultCapCbk(defrIntegerCbkFnType f)$/;"	f
defrSetDefaultCapWarnings	def/cdef/xdefrReader.cpp	/^void defrSetDefaultCapWarnings (int  warn) {$/;"	f
defrSetDefaultCapWarnings	def/def/defrReader.cpp	/^defrSetDefaultCapWarnings(int warn)$/;"	f
defrSetDeltaNumberLines	def/cdef/xdefrReader.cpp	/^void defrSetDeltaNumberLines (int p0) {$/;"	f
defrSetDeltaNumberLines	def/def/defrReader.cpp	/^defrSetDeltaNumberLines(int numLines)$/;"	f
defrSetDesignCbk	def/cdef/xdefrReader.cpp	/^void defrSetDesignCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetDesignCbk	def/def/defrReader.cpp	/^defrSetDesignCbk(defrStringCbkFnType f)$/;"	f
defrSetDesignEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetDesignEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetDesignEndCbk	def/def/defrReader.cpp	/^defrSetDesignEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetDieAreaCbk	def/cdef/xdefrReader.cpp	/^void defrSetDieAreaCbk (::defrBoxCbkFnType p0) {$/;"	f
defrSetDieAreaCbk	def/def/defrReader.cpp	/^defrSetDieAreaCbk(defrBoxCbkFnType f)$/;"	f
defrSetDividerCbk	def/cdef/xdefrReader.cpp	/^void defrSetDividerCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetDividerCbk	def/def/defrReader.cpp	/^defrSetDividerCbk(defrStringCbkFnType f)$/;"	f
defrSetExtensionCbk	def/cdef/xdefrReader.cpp	/^void defrSetExtensionCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetExtensionCbk	def/def/defrReader.cpp	/^defrSetExtensionCbk(defrStringCbkFnType f)$/;"	f
defrSetFPCCbk	def/cdef/xdefrReader.cpp	/^void defrSetFPCCbk (::defrFPCCbkFnType p0) {$/;"	f
defrSetFPCCbk	def/def/defrReader.cpp	/^defrSetFPCCbk(defrFPCCbkFnType f)$/;"	f
defrSetFPCEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetFPCEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetFPCEndCbk	def/def/defrReader.cpp	/^defrSetFPCEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetFPCStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetFPCStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetFPCStartCbk	def/def/defrReader.cpp	/^defrSetFPCStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetFillCbk	def/cdef/xdefrReader.cpp	/^void defrSetFillCbk (::defrFillCbkFnType p0) {$/;"	f
defrSetFillCbk	def/def/defrReader.cpp	/^defrSetFillCbk(defrFillCbkFnType f)$/;"	f
defrSetFillEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetFillEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetFillEndCbk	def/def/defrReader.cpp	/^defrSetFillEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetFillStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetFillStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetFillStartCbk	def/def/defrReader.cpp	/^defrSetFillStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetFloorPlanNameCbk	def/cdef/xdefrReader.cpp	/^void defrSetFloorPlanNameCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetFloorPlanNameCbk	def/def/defrReader.cpp	/^defrSetFloorPlanNameCbk(defrStringCbkFnType f)$/;"	f
defrSetFreeFunction	def/cdef/xdefrReader.cpp	/^void defrSetFreeFunction (::DEFI_FREE_FUNCTION p0) {$/;"	f
defrSetFreeFunction	def/def/defrReader.cpp	/^defrSetFreeFunction(DEFI_FREE_FUNCTION f)$/;"	f
defrSetGZipReadFunction	def/defzlib/defzlib.cpp	/^defrSetGZipReadFunction()$/;"	f
defrSetGcellGridCbk	def/cdef/xdefrReader.cpp	/^void defrSetGcellGridCbk (::defrGcellGridCbkFnType p0) {$/;"	f
defrSetGcellGridCbk	def/def/defrReader.cpp	/^defrSetGcellGridCbk(defrGcellGridCbkFnType f)$/;"	f
defrSetGcellGridWarnings	def/cdef/xdefrReader.cpp	/^void defrSetGcellGridWarnings (int  warn) {$/;"	f
defrSetGcellGridWarnings	def/def/defrReader.cpp	/^defrSetGcellGridWarnings(int warn)$/;"	f
defrSetGroupCbk	def/cdef/xdefrReader.cpp	/^void defrSetGroupCbk (::defrGroupCbkFnType p0) {$/;"	f
defrSetGroupCbk	def/def/defrReader.cpp	/^defrSetGroupCbk(defrGroupCbkFnType f)$/;"	f
defrSetGroupExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetGroupExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetGroupExtCbk	def/def/defrReader.cpp	/^defrSetGroupExtCbk(defrStringCbkFnType f)$/;"	f
defrSetGroupMemberCbk	def/cdef/xdefrReader.cpp	/^void defrSetGroupMemberCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetGroupMemberCbk	def/def/defrReader.cpp	/^defrSetGroupMemberCbk(defrStringCbkFnType f)$/;"	f
defrSetGroupNameCbk	def/cdef/xdefrReader.cpp	/^void defrSetGroupNameCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetGroupNameCbk	def/def/defrReader.cpp	/^defrSetGroupNameCbk(defrStringCbkFnType f)$/;"	f
defrSetGroupsEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetGroupsEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetGroupsEndCbk	def/def/defrReader.cpp	/^defrSetGroupsEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetGroupsStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetGroupsStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetGroupsStartCbk	def/def/defrReader.cpp	/^defrSetGroupsStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetHistoryCbk	def/cdef/xdefrReader.cpp	/^void defrSetHistoryCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetHistoryCbk	def/def/defrReader.cpp	/^defrSetHistoryCbk(defrStringCbkFnType f)$/;"	f
defrSetIOTimingCbk	def/cdef/xdefrReader.cpp	/^void defrSetIOTimingCbk (::defrIOTimingCbkFnType p0) {$/;"	f
defrSetIOTimingCbk	def/def/defrReader.cpp	/^defrSetIOTimingCbk(defrIOTimingCbkFnType f)$/;"	f
defrSetIOTimingWarnings	def/cdef/xdefrReader.cpp	/^void defrSetIOTimingWarnings (int  warn) {$/;"	f
defrSetIOTimingWarnings	def/def/defrReader.cpp	/^defrSetIOTimingWarnings(int warn)$/;"	f
defrSetIOTimingsEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetIOTimingsEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetIOTimingsEndCbk	def/def/defrReader.cpp	/^defrSetIOTimingsEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetIOTimingsStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetIOTimingsStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetIOTimingsStartCbk	def/def/defrReader.cpp	/^defrSetIOTimingsStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetIoTimingsExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetIoTimingsExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetIoTimingsExtCbk	def/def/defrReader.cpp	/^defrSetIoTimingsExtCbk(defrStringCbkFnType f)$/;"	f
defrSetLimitPerMsg	def/cdef/xdefrReader.cpp	/^void defrSetLimitPerMsg (int  msgId, int  numMsg) {$/;"	f
defrSetLimitPerMsg	def/def/defrReader.cpp	/^defrSetLimitPerMsg(int  msgId,$/;"	f
defrSetLineNumberFunction	def/cdef/xdefrReader.cpp	/^void defrSetLineNumberFunction (::DEFI_LINE_NUMBER_FUNCTION p0) {$/;"	f
defrSetLineNumberFunction	def/def/defrReader.cpp	/^defrSetLineNumberFunction(DEFI_LINE_NUMBER_FUNCTION f)$/;"	f
defrSetLogFunction	def/cdef/xdefrReader.cpp	/^void defrSetLogFunction (::DEFI_LOG_FUNCTION p0) {$/;"	f
defrSetLogFunction	def/def/defrReader.cpp	/^defrSetLogFunction(DEFI_LOG_FUNCTION f)$/;"	f
defrSetLongLineNumberFunction	def/cdef/xdefrReader.cpp	/^void defrSetLongLineNumberFunction (::DEFI_LONG_LINE_NUMBER_FUNCTION p0) {$/;"	f
defrSetLongLineNumberFunction	def/def/defrReader.cpp	/^defrSetLongLineNumberFunction(DEFI_LONG_LINE_NUMBER_FUNCTION f)$/;"	f
defrSetMagicCommentFoundFunction	def/cdef/xdefrReader.cpp	/^void defrSetMagicCommentFoundFunction (::DEFI_MAGIC_COMMENT_FOUND_FUNCTION p0) {$/;"	f
defrSetMagicCommentFoundFunction	def/def/defrReader.cpp	/^defrSetMagicCommentFoundFunction(DEFI_MAGIC_COMMENT_FOUND_FUNCTION f)$/;"	f
defrSetMagicCommentString	def/cdef/xdefrReader.cpp	/^void defrSetMagicCommentString (char * p0) {$/;"	f
defrSetMagicCommentString	def/def/defrReader.cpp	/^defrSetMagicCommentString(char *s)$/;"	f
defrSetMallocFunction	def/cdef/xdefrReader.cpp	/^void defrSetMallocFunction (::DEFI_MALLOC_FUNCTION p0) {$/;"	f
defrSetMallocFunction	def/def/defrReader.cpp	/^defrSetMallocFunction(DEFI_MALLOC_FUNCTION f)$/;"	f
defrSetNLines	def/cdef/xdefrReader.cpp	/^void defrSetNLines (long long  n) {$/;"	f
defrSetNLines	def/def/defrReader.cpp	/^defrSetNLines(long long n)$/;"	f
defrSetNetCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetCbk (::defrNetCbkFnType p0) {$/;"	f
defrSetNetCbk	def/def/defrReader.cpp	/^defrSetNetCbk(defrNetCbkFnType f)$/;"	f
defrSetNetConnectionExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetConnectionExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetNetConnectionExtCbk	def/def/defrReader.cpp	/^defrSetNetConnectionExtCbk(defrStringCbkFnType f)$/;"	f
defrSetNetEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetNetEndCbk	def/def/defrReader.cpp	/^defrSetNetEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetNetExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetNetExtCbk	def/def/defrReader.cpp	/^defrSetNetExtCbk(defrStringCbkFnType f)$/;"	f
defrSetNetNameCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetNameCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetNetNameCbk	def/def/defrReader.cpp	/^defrSetNetNameCbk(defrStringCbkFnType f)$/;"	f
defrSetNetNonDefaultRuleCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetNonDefaultRuleCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetNetNonDefaultRuleCbk	def/def/defrReader.cpp	/^defrSetNetNonDefaultRuleCbk(defrStringCbkFnType f)$/;"	f
defrSetNetPartialPathCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetPartialPathCbk (::defrNetCbkFnType p0) {$/;"	f
defrSetNetPartialPathCbk	def/def/defrReader.cpp	/^defrSetNetPartialPathCbk(defrNetCbkFnType f)$/;"	f
defrSetNetStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetNetStartCbk	def/def/defrReader.cpp	/^defrSetNetStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetNetSubnetNameCbk	def/cdef/xdefrReader.cpp	/^void defrSetNetSubnetNameCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetNetSubnetNameCbk	def/def/defrReader.cpp	/^defrSetNetSubnetNameCbk(defrStringCbkFnType f)$/;"	f
defrSetNetWarnings	def/cdef/xdefrReader.cpp	/^void defrSetNetWarnings (int  warn) {$/;"	f
defrSetNetWarnings	def/def/defrReader.cpp	/^defrSetNetWarnings(int warn)$/;"	f
defrSetNonDefaultCbk	def/cdef/xdefrReader.cpp	/^void defrSetNonDefaultCbk (::defrNonDefaultCbkFnType p0) {$/;"	f
defrSetNonDefaultCbk	def/def/defrReader.cpp	/^defrSetNonDefaultCbk(defrNonDefaultCbkFnType f)$/;"	f
defrSetNonDefaultEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetNonDefaultEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetNonDefaultEndCbk	def/def/defrReader.cpp	/^defrSetNonDefaultEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetNonDefaultStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetNonDefaultStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetNonDefaultStartCbk	def/def/defrReader.cpp	/^defrSetNonDefaultStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetNonDefaultWarnings	def/cdef/xdefrReader.cpp	/^void defrSetNonDefaultWarnings (int  warn) {$/;"	f
defrSetNonDefaultWarnings	def/def/defrReader.cpp	/^defrSetNonDefaultWarnings(int warn)$/;"	f
defrSetOpenLogFileAppend	def/cdef/xdefrReader.cpp	/^void defrSetOpenLogFileAppend () {$/;"	f
defrSetOpenLogFileAppend	def/def/defrReader.cpp	/^defrSetOpenLogFileAppend()$/;"	f
defrSetPartitionCbk	def/cdef/xdefrReader.cpp	/^void defrSetPartitionCbk (::defrPartitionCbkFnType p0) {$/;"	f
defrSetPartitionCbk	def/def/defrReader.cpp	/^defrSetPartitionCbk(defrPartitionCbkFnType f)$/;"	f
defrSetPartitionsEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetPartitionsEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetPartitionsEndCbk	def/def/defrReader.cpp	/^defrSetPartitionsEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetPartitionsExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetPartitionsExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetPartitionsExtCbk	def/def/defrReader.cpp	/^defrSetPartitionsExtCbk(defrStringCbkFnType f)$/;"	f
defrSetPartitionsStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetPartitionsStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetPartitionsStartCbk	def/def/defrReader.cpp	/^defrSetPartitionsStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetPathCbk	def/cdef/xdefrReader.cpp	/^void defrSetPathCbk (::defrPathCbkFnType p0) {$/;"	f
defrSetPathCbk	def/def/defrReader.cpp	/^defrSetPathCbk(defrPathCbkFnType f)$/;"	f
defrSetPinCapCbk	def/cdef/xdefrReader.cpp	/^void defrSetPinCapCbk (::defrPinCapCbkFnType p0) {$/;"	f
defrSetPinCapCbk	def/def/defrReader.cpp	/^defrSetPinCapCbk(defrPinCapCbkFnType f)$/;"	f
defrSetPinCbk	def/cdef/xdefrReader.cpp	/^void defrSetPinCbk (::defrPinCbkFnType p0) {$/;"	f
defrSetPinCbk	def/def/defrReader.cpp	/^defrSetPinCbk(defrPinCbkFnType f)$/;"	f
defrSetPinEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetPinEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetPinEndCbk	def/def/defrReader.cpp	/^defrSetPinEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetPinExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetPinExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetPinExtCbk	def/def/defrReader.cpp	/^defrSetPinExtCbk(defrStringCbkFnType f)$/;"	f
defrSetPinExtWarnings	def/cdef/xdefrReader.cpp	/^void defrSetPinExtWarnings (int  warn) {$/;"	f
defrSetPinExtWarnings	def/def/defrReader.cpp	/^defrSetPinExtWarnings(int warn)$/;"	f
defrSetPinPropCbk	def/cdef/xdefrReader.cpp	/^void defrSetPinPropCbk (::defrPinPropCbkFnType p0) {$/;"	f
defrSetPinPropCbk	def/def/defrReader.cpp	/^defrSetPinPropCbk(defrPinPropCbkFnType f)$/;"	f
defrSetPinPropEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetPinPropEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetPinPropEndCbk	def/def/defrReader.cpp	/^defrSetPinPropEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetPinPropStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetPinPropStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetPinPropStartCbk	def/def/defrReader.cpp	/^defrSetPinPropStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetPinWarnings	def/cdef/xdefrReader.cpp	/^void defrSetPinWarnings (int  warn) {$/;"	f
defrSetPinWarnings	def/def/defrReader.cpp	/^defrSetPinWarnings(int warn)$/;"	f
defrSetPropCbk	def/cdef/xdefrReader.cpp	/^void defrSetPropCbk (::defrPropCbkFnType p0) {$/;"	f
defrSetPropCbk	def/def/defrReader.cpp	/^defrSetPropCbk(defrPropCbkFnType f)$/;"	f
defrSetPropDefEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetPropDefEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetPropDefEndCbk	def/def/defrReader.cpp	/^defrSetPropDefEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetPropDefStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetPropDefStartCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetPropDefStartCbk	def/def/defrReader.cpp	/^defrSetPropDefStartCbk(defrVoidCbkFnType f)$/;"	f
defrSetReadFunction	def/cdef/xdefrReader.cpp	/^void defrSetReadFunction (::DEFI_READ_FUNCTION p0) {$/;"	f
defrSetReadFunction	def/def/defrReader.cpp	/^defrSetReadFunction(DEFI_READ_FUNCTION f)$/;"	f
defrSetReallocFunction	def/cdef/xdefrReader.cpp	/^void defrSetReallocFunction (::DEFI_REALLOC_FUNCTION p0) {$/;"	f
defrSetReallocFunction	def/def/defrReader.cpp	/^defrSetReallocFunction(DEFI_REALLOC_FUNCTION f)$/;"	f
defrSetRegionCbk	def/cdef/xdefrReader.cpp	/^void defrSetRegionCbk (::defrRegionCbkFnType p0) {$/;"	f
defrSetRegionCbk	def/def/defrReader.cpp	/^defrSetRegionCbk(defrRegionCbkFnType f)$/;"	f
defrSetRegionEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetRegionEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetRegionEndCbk	def/def/defrReader.cpp	/^defrSetRegionEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetRegionStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetRegionStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetRegionStartCbk	def/def/defrReader.cpp	/^defrSetRegionStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetRegionWarnings	def/cdef/xdefrReader.cpp	/^void defrSetRegionWarnings (int  warn) {$/;"	f
defrSetRegionWarnings	def/def/defrReader.cpp	/^defrSetRegionWarnings(int warn)$/;"	f
defrSetRegisterUnusedCallbacks	def/cdef/xdefrReader.cpp	/^void defrSetRegisterUnusedCallbacks () {$/;"	f
defrSetRegisterUnusedCallbacks	def/def/defrReader.cpp	/^defrSetRegisterUnusedCallbacks()$/;"	f
defrSetRowCbk	def/cdef/xdefrReader.cpp	/^void defrSetRowCbk (::defrRowCbkFnType p0) {$/;"	f
defrSetRowCbk	def/def/defrReader.cpp	/^defrSetRowCbk(defrRowCbkFnType f)$/;"	f
defrSetRowWarnings	def/cdef/xdefrReader.cpp	/^void defrSetRowWarnings (int  warn) {$/;"	f
defrSetRowWarnings	def/def/defrReader.cpp	/^defrSetRowWarnings(int warn)$/;"	f
defrSetSNetCbk	def/cdef/xdefrReader.cpp	/^void defrSetSNetCbk (::defrNetCbkFnType p0) {$/;"	f
defrSetSNetCbk	def/def/defrReader.cpp	/^defrSetSNetCbk(defrNetCbkFnType f)$/;"	f
defrSetSNetEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetSNetEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetSNetEndCbk	def/def/defrReader.cpp	/^defrSetSNetEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetSNetPartialPathCbk	def/cdef/xdefrReader.cpp	/^void defrSetSNetPartialPathCbk (::defrNetCbkFnType p0) {$/;"	f
defrSetSNetPartialPathCbk	def/def/defrReader.cpp	/^defrSetSNetPartialPathCbk(defrNetCbkFnType f)$/;"	f
defrSetSNetStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetSNetStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetSNetStartCbk	def/def/defrReader.cpp	/^defrSetSNetStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetSNetWarnings	def/cdef/xdefrReader.cpp	/^void defrSetSNetWarnings (int  warn) {$/;"	f
defrSetSNetWarnings	def/def/defrReader.cpp	/^defrSetSNetWarnings(int warn)$/;"	f
defrSetSNetWireCbk	def/cdef/xdefrReader.cpp	/^void defrSetSNetWireCbk (::defrNetCbkFnType p0) {$/;"	f
defrSetSNetWireCbk	def/def/defrReader.cpp	/^defrSetSNetWireCbk(defrNetCbkFnType f)$/;"	f
defrSetScanChainExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetScanChainExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetScanChainExtCbk	def/def/defrReader.cpp	/^defrSetScanChainExtCbk(defrStringCbkFnType f)$/;"	f
defrSetScanchainCbk	def/cdef/xdefrReader.cpp	/^void defrSetScanchainCbk (::defrScanchainCbkFnType p0) {$/;"	f
defrSetScanchainCbk	def/def/defrReader.cpp	/^defrSetScanchainCbk(defrScanchainCbkFnType f)$/;"	f
defrSetScanchainWarnings	def/cdef/xdefrReader.cpp	/^void defrSetScanchainWarnings (int  warn) {$/;"	f
defrSetScanchainWarnings	def/def/defrReader.cpp	/^defrSetScanchainWarnings(int warn)$/;"	f
defrSetScanchainsEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetScanchainsEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetScanchainsEndCbk	def/def/defrReader.cpp	/^defrSetScanchainsEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetScanchainsStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetScanchainsStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetScanchainsStartCbk	def/def/defrReader.cpp	/^defrSetScanchainsStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetSiteCbk	def/cdef/xdefrReader.cpp	/^void defrSetSiteCbk (::defrSiteCbkFnType p0) {$/;"	f
defrSetSiteCbk	def/def/defrReader.cpp	/^defrSetSiteCbk(defrSiteCbkFnType f)$/;"	f
defrSetSlotCbk	def/cdef/xdefrReader.cpp	/^void defrSetSlotCbk (::defrSlotCbkFnType p0) {$/;"	f
defrSetSlotCbk	def/def/defrReader.cpp	/^defrSetSlotCbk(defrSlotCbkFnType f)$/;"	f
defrSetSlotEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetSlotEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetSlotEndCbk	def/def/defrReader.cpp	/^defrSetSlotEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetSlotStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetSlotStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetSlotStartCbk	def/def/defrReader.cpp	/^defrSetSlotStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetStartPinsCbk	def/cdef/xdefrReader.cpp	/^void defrSetStartPinsCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetStartPinsCbk	def/def/defrReader.cpp	/^defrSetStartPinsCbk(defrIntegerCbkFnType f)$/;"	f
defrSetStylesCbk	def/cdef/xdefrReader.cpp	/^void defrSetStylesCbk (::defrStylesCbkFnType p0) {$/;"	f
defrSetStylesCbk	def/def/defrReader.cpp	/^defrSetStylesCbk(defrStylesCbkFnType f)$/;"	f
defrSetStylesEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetStylesEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetStylesEndCbk	def/def/defrReader.cpp	/^defrSetStylesEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetStylesStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetStylesStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetStylesStartCbk	def/def/defrReader.cpp	/^defrSetStylesStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetStylesWarnings	def/cdef/xdefrReader.cpp	/^void defrSetStylesWarnings (int  warn) {$/;"	f
defrSetStylesWarnings	def/def/defrReader.cpp	/^defrSetStylesWarnings(int warn)$/;"	f
defrSetTechnologyCbk	def/cdef/xdefrReader.cpp	/^void defrSetTechnologyCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetTechnologyCbk	def/def/defrReader.cpp	/^defrSetTechnologyCbk(defrStringCbkFnType f)$/;"	f
defrSetTimingDisableCbk	def/cdef/xdefrReader.cpp	/^void defrSetTimingDisableCbk (::defrTimingDisableCbkFnType p0) {$/;"	f
defrSetTimingDisableCbk	def/def/defrReader.cpp	/^defrSetTimingDisableCbk(defrTimingDisableCbkFnType f)$/;"	f
defrSetTimingDisablesEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetTimingDisablesEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetTimingDisablesEndCbk	def/def/defrReader.cpp	/^defrSetTimingDisablesEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetTimingDisablesStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetTimingDisablesStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetTimingDisablesStartCbk	def/def/defrReader.cpp	/^defrSetTimingDisablesStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetTotalMsgLimit	def/cdef/xdefrReader.cpp	/^void defrSetTotalMsgLimit (int  totNumMsgs) {$/;"	f
defrSetTotalMsgLimit	def/def/defrReader.cpp	/^defrSetTotalMsgLimit(int totNumMsgs)$/;"	f
defrSetTrackCbk	def/cdef/xdefrReader.cpp	/^void defrSetTrackCbk (::defrTrackCbkFnType p0) {$/;"	f
defrSetTrackCbk	def/def/defrReader.cpp	/^defrSetTrackCbk(defrTrackCbkFnType f)$/;"	f
defrSetTrackWarnings	def/cdef/xdefrReader.cpp	/^void defrSetTrackWarnings (int  warn) {$/;"	f
defrSetTrackWarnings	def/def/defrReader.cpp	/^defrSetTrackWarnings(int warn)$/;"	f
defrSetUnitsCbk	def/cdef/xdefrReader.cpp	/^void defrSetUnitsCbk (::defrDoubleCbkFnType p0) {$/;"	f
defrSetUnitsCbk	def/def/defrReader.cpp	/^defrSetUnitsCbk(defrDoubleCbkFnType f)$/;"	f
defrSetUnitsWarnings	def/cdef/xdefrReader.cpp	/^void defrSetUnitsWarnings (int  warn) {$/;"	f
defrSetUnitsWarnings	def/def/defrReader.cpp	/^defrSetUnitsWarnings(int warn)$/;"	f
defrSetUnusedCallbacks	def/cdef/xdefrReader.cpp	/^void defrSetUnusedCallbacks (::defrVoidCbkFnType  func) {$/;"	f
defrSetUnusedCallbacks	def/def/defrReader.cpp	/^defrSetUnusedCallbacks(defrVoidCbkFnType f)$/;"	f
defrSetUserData	def/cdef/xdefrReader.cpp	/^void defrSetUserData (defiUserData p0) {$/;"	f
defrSetUserData	def/def/defrReader.cpp	/^defrSetUserData(defiUserData ud)$/;"	f
defrSetVersionCbk	def/cdef/xdefrReader.cpp	/^void defrSetVersionCbk (::defrDoubleCbkFnType p0) {$/;"	f
defrSetVersionCbk	def/def/defrReader.cpp	/^defrSetVersionCbk(defrDoubleCbkFnType f)$/;"	f
defrSetVersionStrCbk	def/cdef/xdefrReader.cpp	/^void defrSetVersionStrCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetVersionStrCbk	def/def/defrReader.cpp	/^defrSetVersionStrCbk(defrStringCbkFnType f)$/;"	f
defrSetVersionWarnings	def/cdef/xdefrReader.cpp	/^void defrSetVersionWarnings (int  warn) {$/;"	f
defrSetVersionWarnings	def/def/defrReader.cpp	/^defrSetVersionWarnings(int warn)$/;"	f
defrSetViaCbk	def/cdef/xdefrReader.cpp	/^void defrSetViaCbk (::defrViaCbkFnType p0) {$/;"	f
defrSetViaCbk	def/def/defrReader.cpp	/^defrSetViaCbk(defrViaCbkFnType f)$/;"	f
defrSetViaEndCbk	def/cdef/xdefrReader.cpp	/^void defrSetViaEndCbk (::defrVoidCbkFnType p0) {$/;"	f
defrSetViaEndCbk	def/def/defrReader.cpp	/^defrSetViaEndCbk(defrVoidCbkFnType f)$/;"	f
defrSetViaExtCbk	def/cdef/xdefrReader.cpp	/^void defrSetViaExtCbk (::defrStringCbkFnType p0) {$/;"	f
defrSetViaExtCbk	def/def/defrReader.cpp	/^defrSetViaExtCbk(defrStringCbkFnType f)$/;"	f
defrSetViaStartCbk	def/cdef/xdefrReader.cpp	/^void defrSetViaStartCbk (::defrIntegerCbkFnType p0) {$/;"	f
defrSetViaStartCbk	def/def/defrReader.cpp	/^defrSetViaStartCbk(defrIntegerCbkFnType f)$/;"	f
defrSetViaWarnings	def/cdef/xdefrReader.cpp	/^void defrSetViaWarnings (int  warn) {$/;"	f
defrSetViaWarnings	def/def/defrReader.cpp	/^defrSetViaWarnings(int warn)$/;"	f
defrSetWarningLogFunction	def/cdef/xdefrReader.cpp	/^void defrSetWarningLogFunction (::DEFI_WARNING_LOG_FUNCTION p0) {$/;"	f
defrSetWarningLogFunction	def/def/defrReader.cpp	/^defrSetWarningLogFunction(DEFI_WARNING_LOG_FUNCTION f)$/;"	f
defrSettings	def/def/defrSettings.cpp	/^defrSettings::defrSettings()$/;"	f	class:defrSettings
defrSettings	def/def/defrSettings.hpp	/^class defrSettings {$/;"	c
defrSettings_h	def/def/defrSettings.hpp	31;"	d
defrSiteCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrSiteCbkFnType) (defrCallbackType_e, defiSite *site, defiUserData);$/;"	t
defrSiteCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrSiteCbkFnType) (defrCallbackType_e, defiSite *site, defiUserData);$/;"	t
defrSiteCbkType	def/cdef/defrReader.h	/^  defrSiteCbkType = 11,$/;"	e	enum:__anon13
defrSiteCbkType	def/def/defrReader.hpp	/^  defrSiteCbkType,$/;"	e	enum:__anon18
defrSlotCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrSlotCbkFnType) (defrCallbackType_e, defiSlot *, defiUserData);$/;"	t
defrSlotCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrSlotCbkFnType) (defrCallbackType_e, defiSlot *, defiUserData);$/;"	t
defrSlotCbkType	def/cdef/defrReader.h	/^  defrSlotCbkType = 89,$/;"	e	enum:__anon13
defrSlotCbkType	def/def/defrReader.hpp	/^  defrSlotCbkType,$/;"	e	enum:__anon18
defrSlotEndCbkType	def/cdef/defrReader.h	/^  defrSlotEndCbkType = 90,$/;"	e	enum:__anon13
defrSlotEndCbkType	def/def/defrReader.hpp	/^  defrSlotEndCbkType,$/;"	e	enum:__anon18
defrSlotStartCbkType	def/cdef/defrReader.h	/^  defrSlotStartCbkType = 88,$/;"	e	enum:__anon13
defrSlotStartCbkType	def/def/defrReader.hpp	/^  defrSlotStartCbkType,$/;"	e	enum:__anon18
defrStartPinsCbkType	def/cdef/defrReader.h	/^  defrStartPinsCbkType = 39,$/;"	e	enum:__anon13
defrStartPinsCbkType	def/def/defrReader.hpp	/^  defrStartPinsCbkType,$/;"	e	enum:__anon18
defrStringCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrStringCbkFnType) (defrCallbackType_e, const char *string, defiUserData);$/;"	t
defrStringCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrStringCbkFnType) (defrCallbackType_e, const char *string, defiUserData);$/;"	t
defrStylesCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrStylesCbkFnType) (defrCallbackType_e, defiStyles *, defiUserData);$/;"	t
defrStylesCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrStylesCbkFnType) (defrCallbackType_e, defiStyles *, defiUserData);$/;"	t
defrStylesCbkType	def/cdef/defrReader.h	/^  defrStylesCbkType = 99,$/;"	e	enum:__anon13
defrStylesCbkType	def/def/defrReader.hpp	/^  defrStylesCbkType,$/;"	e	enum:__anon18
defrStylesEndCbkType	def/cdef/defrReader.h	/^  defrStylesEndCbkType = 100,$/;"	e	enum:__anon13
defrStylesEndCbkType	def/def/defrReader.hpp	/^  defrStylesEndCbkType,$/;"	e	enum:__anon18
defrStylesStartCbkType	def/cdef/defrReader.h	/^  defrStylesStartCbkType = 98,$/;"	e	enum:__anon13
defrStylesStartCbkType	def/def/defrReader.hpp	/^  defrStylesStartCbkType,$/;"	e	enum:__anon18
defrTechNameCbkType	def/cdef/defrReader.h	/^  defrTechNameCbkType = 2,$/;"	e	enum:__anon13
defrTechNameCbkType	def/def/defrReader.hpp	/^  defrTechNameCbkType,$/;"	e	enum:__anon18
defrTimingDisableCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrTimingDisableCbkFnType) (defrCallbackType_e, defiTimingDisable *, defiUserData);$/;"	t
defrTimingDisableCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrTimingDisableCbkFnType) (defrCallbackType_e, defiTimingDisable *, defiUserData);$/;"	t
defrTimingDisableCbkType	def/cdef/defrReader.h	/^  defrTimingDisableCbkType = 77,$/;"	e	enum:__anon13
defrTimingDisableCbkType	def/def/defrReader.hpp	/^  defrTimingDisableCbkType,$/;"	e	enum:__anon18
defrTimingDisablesEndCbkType	def/cdef/defrReader.h	/^  defrTimingDisablesEndCbkType = 78,$/;"	e	enum:__anon13
defrTimingDisablesEndCbkType	def/def/defrReader.hpp	/^  defrTimingDisablesEndCbkType,$/;"	e	enum:__anon18
defrTimingDisablesStartCbkType	def/cdef/defrReader.h	/^  defrTimingDisablesStartCbkType = 76,$/;"	e	enum:__anon13
defrTimingDisablesStartCbkType	def/def/defrReader.hpp	/^  defrTimingDisablesStartCbkType,$/;"	e	enum:__anon18
defrTrackCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrTrackCbkFnType) (defrCallbackType_e, defiTrack *track, defiUserData);$/;"	t
defrTrackCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrTrackCbkFnType) (defrCallbackType_e, defiTrack *track, defiUserData);$/;"	t
defrTrackCbkType	def/cdef/defrReader.h	/^  defrTrackCbkType = 43,$/;"	e	enum:__anon13
defrTrackCbkType	def/def/defrReader.hpp	/^  defrTrackCbkType,$/;"	e	enum:__anon18
defrUnitsCbkType	def/cdef/defrReader.h	/^  defrUnitsCbkType = 8,$/;"	e	enum:__anon13
defrUnitsCbkType	def/def/defrReader.hpp	/^  defrUnitsCbkType,$/;"	e	enum:__anon18
defrUnsetArrayNameCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetArrayNameCbk () {$/;"	f
defrUnsetArrayNameCbk	def/def/defrReader.cpp	/^defrUnsetArrayNameCbk()$/;"	f
defrUnsetAssertionCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetAssertionCbk () {$/;"	f
defrUnsetAssertionCbk	def/def/defrReader.cpp	/^defrUnsetAssertionCbk()$/;"	f
defrUnsetAssertionsEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetAssertionsEndCbk () {$/;"	f
defrUnsetAssertionsEndCbk	def/def/defrReader.cpp	/^defrUnsetAssertionsEndCbk()$/;"	f
defrUnsetAssertionsStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetAssertionsStartCbk () {$/;"	f
defrUnsetAssertionsStartCbk	def/def/defrReader.cpp	/^defrUnsetAssertionsStartCbk()$/;"	f
defrUnsetBlockageCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetBlockageCbk () {$/;"	f
defrUnsetBlockageCbk	def/def/defrReader.cpp	/^defrUnsetBlockageCbk()$/;"	f
defrUnsetBlockageEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetBlockageEndCbk () {$/;"	f
defrUnsetBlockageEndCbk	def/def/defrReader.cpp	/^defrUnsetBlockageEndCbk()$/;"	f
defrUnsetBlockageStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetBlockageStartCbk () {$/;"	f
defrUnsetBlockageStartCbk	def/def/defrReader.cpp	/^defrUnsetBlockageStartCbk()$/;"	f
defrUnsetBusBitCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetBusBitCbk () {$/;"	f
defrUnsetBusBitCbk	def/def/defrReader.cpp	/^defrUnsetBusBitCbk()$/;"	f
defrUnsetCallbacks	def/cdef/xdefrReader.cpp	/^void defrUnsetCallbacks () {$/;"	f
defrUnsetCallbacks	def/def/defrReader.cpp	/^defrUnsetCallbacks()$/;"	f
defrUnsetCannotOccupyCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetCannotOccupyCbk () {$/;"	f
defrUnsetCannotOccupyCbk	def/def/defrReader.cpp	/^defrUnsetCannotOccupyCbk()$/;"	f
defrUnsetCanplaceCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetCanplaceCbk () {$/;"	f
defrUnsetCanplaceCbk	def/def/defrReader.cpp	/^defrUnsetCanplaceCbk()$/;"	f
defrUnsetCaseSensitiveCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetCaseSensitiveCbk () {$/;"	f
defrUnsetCaseSensitiveCbk	def/def/defrReader.cpp	/^defrUnsetCaseSensitiveCbk()$/;"	f
defrUnsetComponentCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetComponentCbk () {$/;"	f
defrUnsetComponentCbk	def/def/defrReader.cpp	/^defrUnsetComponentCbk()$/;"	f
defrUnsetComponentEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetComponentEndCbk () {$/;"	f
defrUnsetComponentEndCbk	def/def/defrReader.cpp	/^defrUnsetComponentEndCbk()$/;"	f
defrUnsetComponentExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetComponentExtCbk () {$/;"	f
defrUnsetComponentExtCbk	def/def/defrReader.cpp	/^defrUnsetComponentExtCbk()$/;"	f
defrUnsetComponentMaskShiftLayerCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetComponentMaskShiftLayerCbk () {$/;"	f
defrUnsetComponentMaskShiftLayerCbk	def/def/defrReader.cpp	/^defrUnsetComponentMaskShiftLayerCbk()$/;"	f
defrUnsetComponentStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetComponentStartCbk () {$/;"	f
defrUnsetComponentStartCbk	def/def/defrReader.cpp	/^defrUnsetComponentStartCbk()$/;"	f
defrUnsetConstraintCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetConstraintCbk () {$/;"	f
defrUnsetConstraintCbk	def/def/defrReader.cpp	/^defrUnsetConstraintCbk()$/;"	f
defrUnsetConstraintsEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetConstraintsEndCbk () {$/;"	f
defrUnsetConstraintsEndCbk	def/def/defrReader.cpp	/^defrUnsetConstraintsEndCbk()$/;"	f
defrUnsetConstraintsStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetConstraintsStartCbk () {$/;"	f
defrUnsetConstraintsStartCbk	def/def/defrReader.cpp	/^defrUnsetConstraintsStartCbk()$/;"	f
defrUnsetDefaultCapCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetDefaultCapCbk () {$/;"	f
defrUnsetDefaultCapCbk	def/def/defrReader.cpp	/^defrUnsetDefaultCapCbk()$/;"	f
defrUnsetDesignCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetDesignCbk () {$/;"	f
defrUnsetDesignCbk	def/def/defrReader.cpp	/^defrUnsetDesignCbk()$/;"	f
defrUnsetDesignEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetDesignEndCbk () {$/;"	f
defrUnsetDesignEndCbk	def/def/defrReader.cpp	/^defrUnsetDesignEndCbk()$/;"	f
defrUnsetDieAreaCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetDieAreaCbk () {$/;"	f
defrUnsetDieAreaCbk	def/def/defrReader.cpp	/^defrUnsetDieAreaCbk()$/;"	f
defrUnsetDividerCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetDividerCbk () {$/;"	f
defrUnsetDividerCbk	def/def/defrReader.cpp	/^defrUnsetDividerCbk()$/;"	f
defrUnsetExtensionCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetExtensionCbk () {$/;"	f
defrUnsetExtensionCbk	def/def/defrReader.cpp	/^defrUnsetExtensionCbk()$/;"	f
defrUnsetFPCCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetFPCCbk () {$/;"	f
defrUnsetFPCCbk	def/def/defrReader.cpp	/^defrUnsetFPCCbk()$/;"	f
defrUnsetFPCEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetFPCEndCbk () {$/;"	f
defrUnsetFPCEndCbk	def/def/defrReader.cpp	/^defrUnsetFPCEndCbk()$/;"	f
defrUnsetFPCStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetFPCStartCbk () {$/;"	f
defrUnsetFPCStartCbk	def/def/defrReader.cpp	/^defrUnsetFPCStartCbk()$/;"	f
defrUnsetFillCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetFillCbk () {$/;"	f
defrUnsetFillCbk	def/def/defrReader.cpp	/^defrUnsetFillCbk()$/;"	f
defrUnsetFillEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetFillEndCbk () {$/;"	f
defrUnsetFillEndCbk	def/def/defrReader.cpp	/^defrUnsetFillEndCbk()$/;"	f
defrUnsetFillStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetFillStartCbk () {$/;"	f
defrUnsetFillStartCbk	def/def/defrReader.cpp	/^defrUnsetFillStartCbk()$/;"	f
defrUnsetFloorPlanNameCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetFloorPlanNameCbk () {$/;"	f
defrUnsetFloorPlanNameCbk	def/def/defrReader.cpp	/^defrUnsetFloorPlanNameCbk()$/;"	f
defrUnsetGcellGridCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetGcellGridCbk () {$/;"	f
defrUnsetGcellGridCbk	def/def/defrReader.cpp	/^defrUnsetGcellGridCbk()$/;"	f
defrUnsetGroupCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetGroupCbk () {$/;"	f
defrUnsetGroupCbk	def/def/defrReader.cpp	/^defrUnsetGroupCbk()$/;"	f
defrUnsetGroupExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetGroupExtCbk () {$/;"	f
defrUnsetGroupExtCbk	def/def/defrReader.cpp	/^defrUnsetGroupExtCbk()$/;"	f
defrUnsetGroupMemberCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetGroupMemberCbk () {$/;"	f
defrUnsetGroupMemberCbk	def/def/defrReader.cpp	/^defrUnsetGroupMemberCbk()$/;"	f
defrUnsetGroupNameCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetGroupNameCbk () {$/;"	f
defrUnsetGroupNameCbk	def/def/defrReader.cpp	/^defrUnsetGroupNameCbk()$/;"	f
defrUnsetGroupsEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetGroupsEndCbk () {$/;"	f
defrUnsetGroupsEndCbk	def/def/defrReader.cpp	/^defrUnsetGroupsEndCbk()$/;"	f
defrUnsetGroupsStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetGroupsStartCbk () {$/;"	f
defrUnsetGroupsStartCbk	def/def/defrReader.cpp	/^defrUnsetGroupsStartCbk()$/;"	f
defrUnsetHistoryCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetHistoryCbk () {$/;"	f
defrUnsetHistoryCbk	def/def/defrReader.cpp	/^defrUnsetHistoryCbk()$/;"	f
defrUnsetIOTimingCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetIOTimingCbk () {$/;"	f
defrUnsetIOTimingCbk	def/def/defrReader.cpp	/^defrUnsetIOTimingCbk()$/;"	f
defrUnsetIOTimingsEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetIOTimingsEndCbk () {$/;"	f
defrUnsetIOTimingsEndCbk	def/def/defrReader.cpp	/^defrUnsetIOTimingsEndCbk()$/;"	f
defrUnsetIOTimingsExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetIOTimingsExtCbk () {$/;"	f
defrUnsetIOTimingsExtCbk	def/def/defrReader.cpp	/^defrUnsetIOTimingsExtCbk()$/;"	f
defrUnsetIOTimingsStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetIOTimingsStartCbk () {$/;"	f
defrUnsetIOTimingsStartCbk	def/def/defrReader.cpp	/^defrUnsetIOTimingsStartCbk()$/;"	f
defrUnsetNetCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetCbk () {$/;"	f
defrUnsetNetCbk	def/def/defrReader.cpp	/^defrUnsetNetCbk()$/;"	f
defrUnsetNetConnectionExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetConnectionExtCbk () {$/;"	f
defrUnsetNetConnectionExtCbk	def/def/defrReader.cpp	/^defrUnsetNetConnectionExtCbk()$/;"	f
defrUnsetNetEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetEndCbk () {$/;"	f
defrUnsetNetEndCbk	def/def/defrReader.cpp	/^defrUnsetNetEndCbk()$/;"	f
defrUnsetNetExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetExtCbk () {$/;"	f
defrUnsetNetExtCbk	def/def/defrReader.cpp	/^defrUnsetNetExtCbk()$/;"	f
defrUnsetNetNameCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetNameCbk () {$/;"	f
defrUnsetNetNameCbk	def/def/defrReader.cpp	/^defrUnsetNetNameCbk()$/;"	f
defrUnsetNetNonDefaultRuleCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetNonDefaultRuleCbk () {$/;"	f
defrUnsetNetNonDefaultRuleCbk	def/def/defrReader.cpp	/^defrUnsetNetNonDefaultRuleCbk()$/;"	f
defrUnsetNetPartialPathCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetPartialPathCbk () {$/;"	f
defrUnsetNetPartialPathCbk	def/def/defrReader.cpp	/^defrUnsetNetPartialPathCbk()$/;"	f
defrUnsetNetStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetStartCbk () {$/;"	f
defrUnsetNetStartCbk	def/def/defrReader.cpp	/^defrUnsetNetStartCbk()$/;"	f
defrUnsetNetSubnetNameCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNetSubnetNameCbk () {$/;"	f
defrUnsetNetSubnetNameCbk	def/def/defrReader.cpp	/^defrUnsetNetSubnetNameCbk()$/;"	f
defrUnsetNonDefaultCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNonDefaultCbk () {$/;"	f
defrUnsetNonDefaultCbk	def/def/defrReader.cpp	/^defrUnsetNonDefaultCbk()$/;"	f
defrUnsetNonDefaultEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNonDefaultEndCbk () {$/;"	f
defrUnsetNonDefaultEndCbk	def/def/defrReader.cpp	/^defrUnsetNonDefaultEndCbk()$/;"	f
defrUnsetNonDefaultStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetNonDefaultStartCbk () {$/;"	f
defrUnsetNonDefaultStartCbk	def/def/defrReader.cpp	/^defrUnsetNonDefaultStartCbk()$/;"	f
defrUnsetOpenLogFileAppend	def/cdef/xdefrReader.cpp	/^void defrUnsetOpenLogFileAppend () {$/;"	f
defrUnsetOpenLogFileAppend	def/def/defrReader.cpp	/^defrUnsetOpenLogFileAppend()$/;"	f
defrUnsetPartitionCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPartitionCbk () {$/;"	f
defrUnsetPartitionCbk	def/def/defrReader.cpp	/^defrUnsetPartitionCbk()$/;"	f
defrUnsetPartitionsEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPartitionsEndCbk () {$/;"	f
defrUnsetPartitionsEndCbk	def/def/defrReader.cpp	/^defrUnsetPartitionsEndCbk()$/;"	f
defrUnsetPartitionsExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPartitionsExtCbk () {$/;"	f
defrUnsetPartitionsExtCbk	def/def/defrReader.cpp	/^defrUnsetPartitionsExtCbk()$/;"	f
defrUnsetPartitionsStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPartitionsStartCbk () {$/;"	f
defrUnsetPartitionsStartCbk	def/def/defrReader.cpp	/^defrUnsetPartitionsStartCbk()$/;"	f
defrUnsetPathCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPathCbk () {$/;"	f
defrUnsetPathCbk	def/def/defrReader.cpp	/^defrUnsetPathCbk()$/;"	f
defrUnsetPinCapCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPinCapCbk () {$/;"	f
defrUnsetPinCapCbk	def/def/defrReader.cpp	/^defrUnsetPinCapCbk()$/;"	f
defrUnsetPinCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPinCbk () {$/;"	f
defrUnsetPinCbk	def/def/defrReader.cpp	/^defrUnsetPinCbk()$/;"	f
defrUnsetPinEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPinEndCbk () {$/;"	f
defrUnsetPinEndCbk	def/def/defrReader.cpp	/^defrUnsetPinEndCbk()$/;"	f
defrUnsetPinExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPinExtCbk () {$/;"	f
defrUnsetPinExtCbk	def/def/defrReader.cpp	/^defrUnsetPinExtCbk()$/;"	f
defrUnsetPinPropCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPinPropCbk () {$/;"	f
defrUnsetPinPropCbk	def/def/defrReader.cpp	/^defrUnsetPinPropCbk()$/;"	f
defrUnsetPinPropEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPinPropEndCbk () {$/;"	f
defrUnsetPinPropEndCbk	def/def/defrReader.cpp	/^defrUnsetPinPropEndCbk()$/;"	f
defrUnsetPinPropStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPinPropStartCbk () {$/;"	f
defrUnsetPinPropStartCbk	def/def/defrReader.cpp	/^defrUnsetPinPropStartCbk()$/;"	f
defrUnsetPropCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPropCbk () {$/;"	f
defrUnsetPropCbk	def/def/defrReader.cpp	/^defrUnsetPropCbk()$/;"	f
defrUnsetPropDefEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPropDefEndCbk () {$/;"	f
defrUnsetPropDefEndCbk	def/def/defrReader.cpp	/^defrUnsetPropDefEndCbk()$/;"	f
defrUnsetPropDefStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetPropDefStartCbk () {$/;"	f
defrUnsetPropDefStartCbk	def/def/defrReader.cpp	/^defrUnsetPropDefStartCbk()$/;"	f
defrUnsetReadFunction	def/cdef/xdefrReader.cpp	/^void defrUnsetReadFunction () {$/;"	f
defrUnsetReadFunction	def/def/defrReader.cpp	/^defrUnsetReadFunction()$/;"	f
defrUnsetRegionCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetRegionCbk () {$/;"	f
defrUnsetRegionCbk	def/def/defrReader.cpp	/^defrUnsetRegionCbk()$/;"	f
defrUnsetRegionEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetRegionEndCbk () {$/;"	f
defrUnsetRegionEndCbk	def/def/defrReader.cpp	/^defrUnsetRegionEndCbk()$/;"	f
defrUnsetRegionStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetRegionStartCbk () {$/;"	f
defrUnsetRegionStartCbk	def/def/defrReader.cpp	/^defrUnsetRegionStartCbk()$/;"	f
defrUnsetRowCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetRowCbk () {$/;"	f
defrUnsetRowCbk	def/def/defrReader.cpp	/^defrUnsetRowCbk()$/;"	f
defrUnsetSNetCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSNetCbk () {$/;"	f
defrUnsetSNetCbk	def/def/defrReader.cpp	/^defrUnsetSNetCbk()$/;"	f
defrUnsetSNetEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSNetEndCbk () {$/;"	f
defrUnsetSNetEndCbk	def/def/defrReader.cpp	/^defrUnsetSNetEndCbk()$/;"	f
defrUnsetSNetPartialPathCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSNetPartialPathCbk () {$/;"	f
defrUnsetSNetPartialPathCbk	def/def/defrReader.cpp	/^defrUnsetSNetPartialPathCbk()$/;"	f
defrUnsetSNetStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSNetStartCbk () {$/;"	f
defrUnsetSNetStartCbk	def/def/defrReader.cpp	/^defrUnsetSNetStartCbk()$/;"	f
defrUnsetSNetWireCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSNetWireCbk () {$/;"	f
defrUnsetSNetWireCbk	def/def/defrReader.cpp	/^defrUnsetSNetWireCbk()$/;"	f
defrUnsetScanChainExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetScanChainExtCbk () {$/;"	f
defrUnsetScanChainExtCbk	def/def/defrReader.cpp	/^defrUnsetScanChainExtCbk()$/;"	f
defrUnsetScanchainCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetScanchainCbk () {$/;"	f
defrUnsetScanchainCbk	def/def/defrReader.cpp	/^defrUnsetScanchainCbk()$/;"	f
defrUnsetScanchainsEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetScanchainsEndCbk () {$/;"	f
defrUnsetScanchainsEndCbk	def/def/defrReader.cpp	/^defrUnsetScanchainsEndCbk()$/;"	f
defrUnsetScanchainsStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetScanchainsStartCbk () {$/;"	f
defrUnsetScanchainsStartCbk	def/def/defrReader.cpp	/^defrUnsetScanchainsStartCbk()$/;"	f
defrUnsetSiteCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSiteCbk () {$/;"	f
defrUnsetSiteCbk	def/def/defrReader.cpp	/^defrUnsetSiteCbk()$/;"	f
defrUnsetSlotCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSlotCbk () {$/;"	f
defrUnsetSlotCbk	def/def/defrReader.cpp	/^defrUnsetSlotCbk()$/;"	f
defrUnsetSlotEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSlotEndCbk () {$/;"	f
defrUnsetSlotEndCbk	def/def/defrReader.cpp	/^defrUnsetSlotEndCbk()$/;"	f
defrUnsetSlotStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetSlotStartCbk () {$/;"	f
defrUnsetSlotStartCbk	def/def/defrReader.cpp	/^defrUnsetSlotStartCbk()$/;"	f
defrUnsetStartPinsCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetStartPinsCbk () {$/;"	f
defrUnsetStartPinsCbk	def/def/defrReader.cpp	/^defrUnsetStartPinsCbk()$/;"	f
defrUnsetStylesCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetStylesCbk () {$/;"	f
defrUnsetStylesCbk	def/def/defrReader.cpp	/^defrUnsetStylesCbk()$/;"	f
defrUnsetStylesEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetStylesEndCbk () {$/;"	f
defrUnsetStylesEndCbk	def/def/defrReader.cpp	/^defrUnsetStylesEndCbk()$/;"	f
defrUnsetStylesStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetStylesStartCbk () {$/;"	f
defrUnsetStylesStartCbk	def/def/defrReader.cpp	/^defrUnsetStylesStartCbk()$/;"	f
defrUnsetTechnologyCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetTechnologyCbk () {$/;"	f
defrUnsetTechnologyCbk	def/def/defrReader.cpp	/^defrUnsetTechnologyCbk()$/;"	f
defrUnsetTimingDisableCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetTimingDisableCbk () {$/;"	f
defrUnsetTimingDisableCbk	def/def/defrReader.cpp	/^defrUnsetTimingDisableCbk()$/;"	f
defrUnsetTimingDisablesEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetTimingDisablesEndCbk () {$/;"	f
defrUnsetTimingDisablesEndCbk	def/def/defrReader.cpp	/^defrUnsetTimingDisablesEndCbk()$/;"	f
defrUnsetTimingDisablesStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetTimingDisablesStartCbk () {$/;"	f
defrUnsetTimingDisablesStartCbk	def/def/defrReader.cpp	/^defrUnsetTimingDisablesStartCbk()$/;"	f
defrUnsetTrackCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetTrackCbk () {$/;"	f
defrUnsetTrackCbk	def/def/defrReader.cpp	/^defrUnsetTrackCbk()$/;"	f
defrUnsetUnitsCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetUnitsCbk () {$/;"	f
defrUnsetUnitsCbk	def/def/defrReader.cpp	/^defrUnsetUnitsCbk()$/;"	f
defrUnsetVersionCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetVersionCbk () {$/;"	f
defrUnsetVersionCbk	def/def/defrReader.cpp	/^defrUnsetVersionCbk()$/;"	f
defrUnsetVersionStrCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetVersionStrCbk () {$/;"	f
defrUnsetVersionStrCbk	def/def/defrReader.cpp	/^defrUnsetVersionStrCbk()$/;"	f
defrUnsetViaCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetViaCbk () {$/;"	f
defrUnsetViaCbk	def/def/defrReader.cpp	/^defrUnsetViaCbk()$/;"	f
defrUnsetViaEndCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetViaEndCbk () {$/;"	f
defrUnsetViaEndCbk	def/def/defrReader.cpp	/^defrUnsetViaEndCbk()$/;"	f
defrUnsetViaExtCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetViaExtCbk () {$/;"	f
defrUnsetViaExtCbk	def/def/defrReader.cpp	/^defrUnsetViaExtCbk()$/;"	f
defrUnsetViaStartCbk	def/cdef/xdefrReader.cpp	/^void defrUnsetViaStartCbk () {$/;"	f
defrUnsetViaStartCbk	def/def/defrReader.cpp	/^defrUnsetViaStartCbk()$/;"	f
defrUnspecifiedCbkType	def/cdef/defrReader.h	/^  defrUnspecifiedCbkType = 0,$/;"	e	enum:__anon13
defrUnspecifiedCbkType	def/def/defrReader.hpp	/^  defrUnspecifiedCbkType = 0,$/;"	e	enum:__anon18
defrVersionCbkType	def/cdef/defrReader.h	/^  defrVersionCbkType = 22,$/;"	e	enum:__anon13
defrVersionCbkType	def/def/defrReader.hpp	/^  defrVersionCbkType,$/;"	e	enum:__anon18
defrVersionStrCbkType	def/cdef/defrReader.h	/^  defrVersionStrCbkType = 23,$/;"	e	enum:__anon13
defrVersionStrCbkType	def/def/defrReader.hpp	/^  defrVersionStrCbkType,$/;"	e	enum:__anon18
defrViaCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrViaCbkFnType) (defrCallbackType_e, defiVia *, defiUserData);$/;"	t
defrViaCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrViaCbkFnType) (defrCallbackType_e, defiVia *, defiUserData);$/;"	t
defrViaCbkType	def/cdef/defrReader.h	/^  defrViaCbkType = 46,$/;"	e	enum:__anon13
defrViaCbkType	def/def/defrReader.hpp	/^  defrViaCbkType,$/;"	e	enum:__anon18
defrViaEndCbkType	def/cdef/defrReader.h	/^  defrViaEndCbkType = 47,$/;"	e	enum:__anon13
defrViaEndCbkType	def/def/defrReader.hpp	/^  defrViaEndCbkType,$/;"	e	enum:__anon18
defrViaExtCbkType	def/cdef/defrReader.h	/^  defrViaExtCbkType = 26,$/;"	e	enum:__anon13
defrViaExtCbkType	def/def/defrReader.hpp	/^  defrViaExtCbkType,$/;"	e	enum:__anon18
defrViaStartCbkType	def/cdef/defrReader.h	/^  defrViaStartCbkType = 45,$/;"	e	enum:__anon13
defrViaStartCbkType	def/def/defrReader.hpp	/^  defrViaStartCbkType,$/;"	e	enum:__anon18
defrVoidCbkFnType	def/cdef/defrReader.h	/^typedef int (*defrVoidCbkFnType) (defrCallbackType_e, void* v, defiUserData);$/;"	t
defrVoidCbkFnType	def/def/defrReader.hpp	/^typedef int (*defrVoidCbkFnType) (defrCallbackType_e, void* v, defiUserData);$/;"	t
defrect	def/def/defiDefs.hpp	/^struct defrect {$/;"	s
deftoken	def/def/defiDefs.hpp	/^struct deftoken {$/;"	s
deftoken	def/def/defrData.hpp	/^    char*  deftoken; $/;"	m	class:defrData
deftokenLength	def/def/defrData.hpp	/^    int  deftokenLength;$/;"	m	class:defrData
defwAddComment	def/cdef/xdefwWriter.cpp	/^void defwAddComment (const char*  comment) {$/;"	f
defwAddComment	def/def/defwWriter.cpp	/^defwAddComment(const char *comment)$/;"	f
defwAddIndent	def/cdef/xdefwWriter.cpp	/^void defwAddIndent () {$/;"	f
defwAddIndent	def/def/defwWriter.cpp	/^defwAddIndent()$/;"	f
defwAddr	def/def/defwWriter.cpp	/^defwAddr(const char *x)$/;"	f
defwArray	def/cdef/xdefwWriter.cpp	/^int defwArray (const char*  array) {$/;"	f
defwArray	def/def/defwWriter.cpp	/^defwArray(const char *array)$/;"	f
defwArrayCbk	def/def/defwWriterCalls.cpp	66;"	d	file:
defwArrayCbkType	def/cdef/defwWriterCalls.h	/^  defwArrayCbkType = 7,$/;"	e	enum:__anon14
defwArrayCbkType	def/def/defwWriterCalls.hpp	/^  defwArrayCbkType,$/;"	e	enum:__anon19
defwAssertionCbk	def/def/defwWriterCalls.cpp	88;"	d	file:
defwAssertionCbkType	def/cdef/defwWriterCalls.h	/^  defwAssertionCbkType = 29,$/;"	e	enum:__anon14
defwAssertionCbkType	def/def/defwWriterCalls.hpp	/^  defwAssertionCbkType,    \/\/ pre 5.2$/;"	e	enum:__anon19
defwBeginextCreator	def/cdef/xdefwWriter.cpp	/^int defwBeginextCreator (const char*  creatorName) {$/;"	f
defwBeginextCreator	def/def/defwWriter.cpp	/^defwBeginextCreator(const char *creatorName)$/;"	f
defwBeginextDate	def/cdef/xdefwWriter.cpp	/^int defwBeginextDate () {$/;"	f
defwBeginextDate	def/def/defwWriter.cpp	/^defwBeginextDate()$/;"	f
defwBeginextRevision	def/cdef/xdefwWriter.cpp	/^int defwBeginextRevision (int  vers1, int  vers2) {$/;"	f
defwBeginextRevision	def/def/defwWriter.cpp	/^defwBeginextRevision(int    vers1,$/;"	f
defwBeginextSyntax	def/cdef/xdefwWriter.cpp	/^int defwBeginextSyntax (const char*  title, const char*  string) {$/;"	f
defwBeginextSyntax	def/def/defwWriter.cpp	/^defwBeginextSyntax(const char   *title,$/;"	f
defwBlockageCbk	def/def/defwWriterCalls.cpp	90;"	d	file:
defwBlockageCbkType	def/cdef/defwWriterCalls.h	/^  defwBlockageCbkType = 31,$/;"	e	enum:__anon14
defwBlockageCbkType	def/def/defwWriterCalls.hpp	/^  defwBlockageCbkType,     \/\/ 5.4$/;"	e	enum:__anon19
defwBlockageDesignRuleWidth	def/cdef/xdefwWriter.cpp	/^int defwBlockageDesignRuleWidth (int  effectiveWidth) {$/;"	f
defwBlockageDesignRuleWidth	def/def/defwWriter.cpp	/^defwBlockageDesignRuleWidth(int effectiveWidth)$/;"	f
defwBlockageHasSD	def/def/defwWriter.cpp	/^static int defwBlockageHasSD = 0;\/\/ keep track only Spacing|Designrulewidth$/;"	v	file:
defwBlockageHasSF	def/def/defwWriter.cpp	/^static int defwBlockageHasSF = 0;\/\/ keep track only SLOTS|FILLS$/;"	v	file:
defwBlockageHasSP	def/def/defwWriter.cpp	/^static int defwBlockageHasSP = 0;\/\/ keep track only SOFT|PARTIAL$/;"	v	file:
defwBlockageLayer	def/cdef/xdefwWriter.cpp	/^int defwBlockageLayer (const char*  layerName, const char*  compName) {$/;"	f
defwBlockageLayer	def/def/defwWriter.cpp	/^defwBlockageLayer(const char    *layerName,$/;"	f
defwBlockageLayerExceptpgnet	def/cdef/xdefwWriter.cpp	/^int defwBlockageLayerExceptpgnet (const char*  layerName) {$/;"	f
defwBlockageLayerExceptpgnet	def/def/defwWriter.cpp	/^defwBlockageLayerExceptpgnet(const char *layerName)$/;"	f
defwBlockageLayerFills	def/cdef/xdefwWriter.cpp	/^int defwBlockageLayerFills (const char*  layerName) {$/;"	f
defwBlockageLayerFills	def/def/defwWriter.cpp	/^defwBlockageLayerFills(const char *layerName)$/;"	f
defwBlockageLayerPushdown	def/cdef/xdefwWriter.cpp	/^int defwBlockageLayerPushdown (const char*  layerName) {$/;"	f
defwBlockageLayerPushdown	def/def/defwWriter.cpp	/^defwBlockageLayerPushdown(const char *layerName)$/;"	f
defwBlockageLayerSlots	def/cdef/xdefwWriter.cpp	/^int defwBlockageLayerSlots (const char*  layerName) {$/;"	f
defwBlockageLayerSlots	def/def/defwWriter.cpp	/^defwBlockageLayerSlots(const char *layerName)$/;"	f
defwBlockageMask	def/cdef/xdefwWriter.cpp	/^int defwBlockageMask (int  maskColor) {$/;"	f
defwBlockageMask	def/def/defwWriter.cpp	/^defwBlockageMask(int colorMask)$/;"	f
defwBlockagePlacement	def/cdef/xdefwWriter.cpp	/^int defwBlockagePlacement () {$/;"	f
defwBlockagePlacement	def/def/defwWriter.cpp	/^defwBlockagePlacement()$/;"	f
defwBlockagePlacementComponent	def/cdef/xdefwWriter.cpp	/^int defwBlockagePlacementComponent (const char*  compName) {$/;"	f
defwBlockagePlacementComponent	def/def/defwWriter.cpp	/^defwBlockagePlacementComponent(const char *compName)$/;"	f
defwBlockagePlacementPartial	def/cdef/xdefwWriter.cpp	/^int defwBlockagePlacementPartial (double  maxDensity) {$/;"	f
defwBlockagePlacementPartial	def/def/defwWriter.cpp	/^defwBlockagePlacementPartial(double maxDensity)$/;"	f
defwBlockagePlacementPushdown	def/cdef/xdefwWriter.cpp	/^int defwBlockagePlacementPushdown () {$/;"	f
defwBlockagePlacementPushdown	def/def/defwWriter.cpp	/^defwBlockagePlacementPushdown()$/;"	f
defwBlockagePlacementSoft	def/cdef/xdefwWriter.cpp	/^int defwBlockagePlacementSoft () {$/;"	f
defwBlockagePlacementSoft	def/def/defwWriter.cpp	/^defwBlockagePlacementSoft()$/;"	f
defwBlockagePolygon	def/cdef/xdefwWriter.cpp	/^int defwBlockagePolygon (int  num_polys, int*  xl, int*  yl) {$/;"	f
defwBlockagePolygon	def/def/defwWriter.cpp	/^defwBlockagePolygon(int num_polys,$/;"	f
defwBlockageRect	def/cdef/xdefwWriter.cpp	/^int defwBlockageRect (int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwBlockageRect	def/def/defwWriter.cpp	/^defwBlockageRect(int    xl,$/;"	f
defwBlockageSpacing	def/cdef/xdefwWriter.cpp	/^int defwBlockageSpacing (int  minSpacing) {$/;"	f
defwBlockageSpacing	def/def/defwWriter.cpp	/^defwBlockageSpacing(int minSpacing)$/;"	f
defwBlockagesLayer	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayer (const char*  layerName) {$/;"	f
defwBlockagesLayer	def/def/defwWriter.cpp	/^defwBlockagesLayer(const char *layerName)$/;"	f
defwBlockagesLayerComponent	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayerComponent (const char*  compName) {$/;"	f
defwBlockagesLayerComponent	def/def/defwWriter.cpp	/^defwBlockagesLayerComponent(const char *compName)$/;"	f
defwBlockagesLayerDesignRuleWidth	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayerDesignRuleWidth (int  effectiveWidth) {$/;"	f
defwBlockagesLayerDesignRuleWidth	def/def/defwWriter.cpp	/^defwBlockagesLayerDesignRuleWidth(int effectiveWidth)$/;"	f
defwBlockagesLayerExceptpgnet	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayerExceptpgnet () {$/;"	f
defwBlockagesLayerExceptpgnet	def/def/defwWriter.cpp	/^defwBlockagesLayerExceptpgnet()$/;"	f
defwBlockagesLayerFills	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayerFills () {$/;"	f
defwBlockagesLayerFills	def/def/defwWriter.cpp	/^defwBlockagesLayerFills()$/;"	f
defwBlockagesLayerMask	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayerMask (int  maskColor) {$/;"	f
defwBlockagesLayerMask	def/def/defwWriter.cpp	/^defwBlockagesLayerMask(int colorMask)$/;"	f
defwBlockagesLayerPushdown	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayerPushdown () {$/;"	f
defwBlockagesLayerPushdown	def/def/defwWriter.cpp	/^defwBlockagesLayerPushdown()$/;"	f
defwBlockagesLayerSlots	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayerSlots () {$/;"	f
defwBlockagesLayerSlots	def/def/defwWriter.cpp	/^defwBlockagesLayerSlots()$/;"	f
defwBlockagesLayerSpacing	def/cdef/xdefwWriter.cpp	/^int defwBlockagesLayerSpacing (int  minSpacing) {$/;"	f
defwBlockagesLayerSpacing	def/def/defwWriter.cpp	/^defwBlockagesLayerSpacing(int minSpacing)$/;"	f
defwBlockagesPlacement	def/cdef/xdefwWriter.cpp	/^int defwBlockagesPlacement () {$/;"	f
defwBlockagesPlacement	def/def/defwWriter.cpp	/^defwBlockagesPlacement()$/;"	f
defwBlockagesPlacementComponent	def/cdef/xdefwWriter.cpp	/^int defwBlockagesPlacementComponent (const char*  compName) {$/;"	f
defwBlockagesPlacementComponent	def/def/defwWriter.cpp	/^defwBlockagesPlacementComponent(const char *compName)$/;"	f
defwBlockagesPlacementPartial	def/cdef/xdefwWriter.cpp	/^int defwBlockagesPlacementPartial (double  maxDensity) {$/;"	f
defwBlockagesPlacementPartial	def/def/defwWriter.cpp	/^defwBlockagesPlacementPartial(double maxDensity)$/;"	f
defwBlockagesPlacementPushdown	def/cdef/xdefwWriter.cpp	/^int defwBlockagesPlacementPushdown () {$/;"	f
defwBlockagesPlacementPushdown	def/def/defwWriter.cpp	/^defwBlockagesPlacementPushdown()$/;"	f
defwBlockagesPlacementSoft	def/cdef/xdefwWriter.cpp	/^int defwBlockagesPlacementSoft () {$/;"	f
defwBlockagesPlacementSoft	def/def/defwWriter.cpp	/^defwBlockagesPlacementSoft()$/;"	f
defwBlockagesPolygon	def/cdef/xdefwWriter.cpp	/^int defwBlockagesPolygon (int  num_polys, int*  xl, int*  yl) {$/;"	f
defwBlockagesPolygon	def/def/defwWriter.cpp	/^defwBlockagesPolygon(int    num_polys,$/;"	f
defwBlockagesRect	def/cdef/xdefwWriter.cpp	/^int defwBlockagesRect (int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwBlockagesRect	def/def/defwWriter.cpp	/^defwBlockagesRect(int   xl,$/;"	f
defwBusBitCbk	def/def/defwWriterCalls.cpp	63;"	d	file:
defwBusBitCbkType	def/cdef/defwWriterCalls.h	/^  defwBusBitCbkType = 3,$/;"	e	enum:__anon14
defwBusBitCbkType	def/def/defwWriterCalls.hpp	/^  defwBusBitCbkType,$/;"	e	enum:__anon19
defwBusBitChars	def/cdef/xdefwWriter.cpp	/^int defwBusBitChars (const char*  busBitChars) {$/;"	f
defwBusBitChars	def/def/defwWriter.cpp	/^defwBusBitChars(const char *busBitChars)$/;"	f
defwCallbackType_e	def/cdef/defwWriterCalls.h	/^} defwCallbackType_e;$/;"	t	typeref:enum:__anon14
defwCallbackType_e	def/def/defwWriterCalls.hpp	/^} defwCallbackType_e;$/;"	t	typeref:enum:__anon19
defwCallbacksReq	def/def/defwWriterCalls.cpp	/^int defwCallbacksReq[MAXCBS][2] = {{0, 0},  \/\/ Version$/;"	v
defwCallbacksSeq	def/def/defwWriterCalls.cpp	/^defwVoidCbkFnType defwCallbacksSeq[MAXCBS] = {0,  \/\/ defwVersionCbk$/;"	v
defwCallbacksType	def/def/defwWriterCalls.cpp	/^defwCallbackType_e defwCallbacksType[MAXCBS] = {defwVersionCbkType,$/;"	v
defwCanPlace	def/cdef/xdefwWriter.cpp	/^int defwCanPlace (const char*  master, int  xOrig, int  yOrig, int  orient, int  doCnt, int  doInc, int  xStep, int  yStep) {$/;"	f
defwCanPlace	def/def/defwWriter.cpp	/^defwCanPlace(const char *master,$/;"	f
defwCanPlaceStr	def/cdef/xdefwWriter.cpp	/^int defwCanPlaceStr (const char*  master, int  xOrig, int  yOrig, const char*  orient, int  doCnt, int  doInc, int  xStep, int  yStep) {$/;"	f
defwCanPlaceStr	def/def/defwWriter.cpp	/^defwCanPlaceStr(const char  *master,$/;"	f
defwCannotOccupy	def/cdef/xdefwWriter.cpp	/^int defwCannotOccupy (const char*  master, int  xOrig, int  yOrig, int  orient, int  doCnt, int  doInc, int  xStep, int  yStep) {$/;"	f
defwCannotOccupy	def/def/defwWriter.cpp	/^defwCannotOccupy(const char *master,$/;"	f
defwCannotOccupyCbk	def/def/defwWriterCalls.cpp	77;"	d	file:
defwCannotOccupyCbkType	def/cdef/defwWriterCalls.h	/^  defwCannotOccupyCbkType = 18,$/;"	e	enum:__anon14
defwCannotOccupyCbkType	def/def/defwWriterCalls.hpp	/^  defwCannotOccupyCbkType,$/;"	e	enum:__anon19
defwCannotOccupyStr	def/cdef/xdefwWriter.cpp	/^int defwCannotOccupyStr (const char*  master, int  xOrig, int  yOrig, const char*  orient, int  doCnt, int  doInc, int  xStep, int  yStep) {$/;"	f
defwCannotOccupyStr	def/def/defwWriter.cpp	/^defwCannotOccupyStr(const char  *master,$/;"	f
defwCanplaceCbk	def/def/defwWriterCalls.cpp	76;"	d	file:
defwCanplaceCbkType	def/cdef/defwWriterCalls.h	/^  defwCanplaceCbkType = 17,$/;"	e	enum:__anon14
defwCanplaceCbkType	def/def/defwWriterCalls.hpp	/^  defwCanplaceCbkType,$/;"	e	enum:__anon19
defwCaseSensitive	def/cdef/xdefwWriter.cpp	/^int defwCaseSensitive (const char*  caseSensitive) {$/;"	f
defwCaseSensitive	def/def/defwWriter.cpp	/^defwCaseSensitive(const char *caseSensitive)$/;"	f
defwCaseSensitiveCbk	def/def/defwWriterCalls.cpp	61;"	d	file:
defwCaseSensitiveCbkType	def/cdef/defwWriterCalls.h	/^  defwCaseSensitiveCbkType = 2,$/;"	e	enum:__anon14
defwCaseSensitiveCbkType	def/def/defwWriterCalls.hpp	/^  defwCaseSensitiveCbkType,$/;"	e	enum:__anon19
defwComponent	def/cdef/xdefwWriter.cpp	/^int defwComponent (const char*  instance, const char*  master, int    numNetName, const char**  netNames, const char*  eeq, const char*  genName, const char*  genParemeters, const char*  source, int  numForeign, const char**  foreigns, int*  foreignX, int*  foreignY, int*  foreignOrients, const char*  status, int  statusX, int  statusY, int  statusOrient, double  weight, const char*  region, int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwComponent	def/def/defwWriter.cpp	/^defwComponent(const char    *instance,$/;"	f
defwComponentCbk	def/def/defwWriterCalls.cpp	80;"	d	file:
defwComponentCbkType	def/cdef/defwWriterCalls.h	/^  defwComponentCbkType = 21,$/;"	e	enum:__anon14
defwComponentCbkType	def/def/defwWriterCalls.hpp	/^  defwComponentCbkType,$/;"	e	enum:__anon19
defwComponentHalo	def/cdef/xdefwWriter.cpp	/^int defwComponentHalo (int  left, int  bottom, int  right, int  top) {$/;"	f
defwComponentHalo	def/def/defwWriter.cpp	/^defwComponentHalo(int   left,$/;"	f
defwComponentHaloSoft	def/cdef/xdefwWriter.cpp	/^int defwComponentHaloSoft (int  left, int  bottom, int  right, int  top) {$/;"	f
defwComponentHaloSoft	def/def/defwWriter.cpp	/^defwComponentHaloSoft(int   left,$/;"	f
defwComponentMaskShift	def/cdef/xdefwWriter.cpp	/^int defwComponentMaskShift (int  shiftLayerMasks) {$/;"	f
defwComponentMaskShift	def/def/defwWriter.cpp	/^defwComponentMaskShift(int shiftLayerMasks)$/;"	f
defwComponentMaskShiftLayers	def/cdef/xdefwWriter.cpp	/^int defwComponentMaskShiftLayers (const char**  layerNames, int           numLayerName) {$/;"	f
defwComponentMaskShiftLayers	def/def/defwWriter.cpp	/^defwComponentMaskShiftLayers(const char **layerNames,$/;"	f
defwComponentRouteHalo	def/cdef/xdefwWriter.cpp	/^int defwComponentRouteHalo (int  haloDist, const char*  minLayer, const char*  maxLayer) {$/;"	f
defwComponentRouteHalo	def/def/defwWriter.cpp	/^defwComponentRouteHalo(int          haloDist,$/;"	f
defwComponentStr	def/cdef/xdefwWriter.cpp	/^int defwComponentStr (const char*  instance, const char*  master, int    numNetName, const char**  netNames, const char*  eeq, const char*  genName, const char*  genParemeters, const char*  source, int  numForeign, const char**  foreigns, int*  foreignX, int*  foreignY, const char**  foreignOrients, const char*  status, int  statusX, int  statusY, const char*  statusOrient, double  weight, const char*  region, int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwComponentStr	def/def/defwWriter.cpp	/^defwComponentStr(const char *instance,$/;"	f
defwConstraintCbk	def/def/defwWriterCalls.cpp	87;"	d	file:
defwConstraintCbkType	def/cdef/defwWriterCalls.h	/^  defwConstraintCbkType = 28,$/;"	e	enum:__anon14
defwConstraintCbkType	def/def/defwWriterCalls.hpp	/^  defwConstraintCbkType,$/;"	e	enum:__anon19
defwConstraintOperand	def/cdef/xdefwWriter.cpp	/^int defwConstraintOperand () {$/;"	f
defwConstraintOperand	def/def/defwWriter.cpp	/^defwConstraintOperand()$/;"	f
defwConstraintOperandEnd	def/cdef/xdefwWriter.cpp	/^int defwConstraintOperandEnd () {$/;"	f
defwConstraintOperandEnd	def/def/defwWriter.cpp	/^defwConstraintOperandEnd()$/;"	f
defwConstraintOperandNet	def/cdef/xdefwWriter.cpp	/^int defwConstraintOperandNet (const char*  netName) {$/;"	f
defwConstraintOperandNet	def/def/defwWriter.cpp	/^defwConstraintOperandNet(const char *netName)$/;"	f
defwConstraintOperandPath	def/cdef/xdefwWriter.cpp	/^int defwConstraintOperandPath (const char*  comp1, const char*  fromPin, const char*  comp2, const char*  toPin) {$/;"	f
defwConstraintOperandPath	def/def/defwWriter.cpp	/^defwConstraintOperandPath(const char    *comp1,$/;"	f
defwConstraintOperandSum	def/cdef/xdefwWriter.cpp	/^int defwConstraintOperandSum () {$/;"	f
defwConstraintOperandSum	def/def/defwWriter.cpp	/^defwConstraintOperandSum()$/;"	f
defwConstraintOperandSumEnd	def/cdef/xdefwWriter.cpp	/^int defwConstraintOperandSumEnd () {$/;"	f
defwConstraintOperandSumEnd	def/def/defwWriter.cpp	/^defwConstraintOperandSumEnd()$/;"	f
defwConstraintOperandTime	def/cdef/xdefwWriter.cpp	/^int defwConstraintOperandTime (const char*  timeType, int  time) {$/;"	f
defwConstraintOperandTime	def/def/defwWriter.cpp	/^defwConstraintOperandTime(const char    *timeType,$/;"	f
defwConstraintWiredlogic	def/cdef/xdefwWriter.cpp	/^int defwConstraintWiredlogic (const char*  netName, int  distance) {$/;"	f
defwConstraintWiredlogic	def/def/defwWriter.cpp	/^defwConstraintWiredlogic(const char *netName,$/;"	f
defwCountFunc	def/def/defwWriterCalls.cpp	/^int defwCountFunc(defwCallbackType_e e, defiUserData d) {$/;"	f
defwCounter	def/def/defwWriter.cpp	/^int defwCounter = 0;  \/\/ number of nets, components in section$/;"	v
defwCurrentLineNumber	def/cdef/xdefwWriter.cpp	/^int defwCurrentLineNumber () {$/;"	f
defwCurrentLineNumber	def/def/defwWriter.cpp	/^defwCurrentLineNumber()$/;"	f
defwDefaultCap	def/cdef/xdefwWriter.cpp	/^int defwDefaultCap (int  pins, double  cap) {$/;"	f
defwDefaultCap	def/def/defwWriter.cpp	/^defwDefaultCap(int      pins,$/;"	f
defwDefaultCapCbk	def/def/defwWriterCalls.cpp	75;"	d	file:
defwDefaultCapCbkType	def/cdef/defwWriterCalls.h	/^  defwDefaultCapCbkType = 16,$/;"	e	enum:__anon14
defwDefaultCapCbkType	def/def/defwWriterCalls.hpp	/^  defwDefaultCapCbkType,$/;"	e	enum:__anon19
defwDesignCbk	def/def/defwWriterCalls.cpp	64;"	d	file:
defwDesignCbkType	def/cdef/defwWriterCalls.h	/^  defwDesignCbkType = 5,$/;"	e	enum:__anon14
defwDesignCbkType	def/def/defwWriterCalls.hpp	/^  defwDesignCbkType,$/;"	e	enum:__anon19
defwDesignEndCbk	def/def/defwWriterCalls.cpp	92;"	d	file:
defwDesignEndCbkType	def/cdef/defwWriterCalls.h	/^  defwDesignEndCbkType = 33$/;"	e	enum:__anon14
defwDesignEndCbkType	def/def/defwWriterCalls.hpp	/^  defwDesignEndCbkType$/;"	e	enum:__anon19
defwDesignName	def/cdef/xdefwWriter.cpp	/^int defwDesignName (const char*  name) {$/;"	f
defwDesignName	def/def/defwWriter.cpp	/^defwDesignName(const char *name)$/;"	f
defwDidComponents	def/def/defwWriter.cpp	/^int defwDidComponents = 0;  \/\/ required section$/;"	v
defwDidInit	def/def/defwWriter.cpp	/^int defwDidInit = 0;  \/\/ required section$/;"	v
defwDidNets	def/def/defwWriter.cpp	/^int defwDidNets = 0;  \/\/ required section$/;"	v
defwDieArea	def/cdef/xdefwWriter.cpp	/^int defwDieArea (int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwDieArea	def/def/defwWriter.cpp	/^defwDieArea(int xl,$/;"	f
defwDieAreaCbk	def/def/defwWriterCalls.cpp	71;"	d	file:
defwDieAreaCbkType	def/cdef/defwWriterCalls.h	/^  defwDieAreaCbkType = 12,$/;"	e	enum:__anon14
defwDieAreaCbkType	def/def/defwWriterCalls.hpp	/^  defwDieAreaCbkType,$/;"	e	enum:__anon19
defwDieAreaList	def/cdef/xdefwWriter.cpp	/^int defwDieAreaList (int  num_points, int*  xl, int*  yh) {$/;"	f
defwDieAreaList	def/def/defwWriter.cpp	/^defwDieAreaList(int num_points,$/;"	f
defwDividerCbk	def/def/defwWriterCalls.cpp	62;"	d	file:
defwDividerCbkType	def/cdef/defwWriterCalls.h	/^  defwDividerCbkType = 4,$/;"	e	enum:__anon14
defwDividerCbkType	def/def/defwWriterCalls.hpp	/^  defwDividerCbkType,$/;"	e	enum:__anon19
defwDividerChar	def/cdef/xdefwWriter.cpp	/^int defwDividerChar (const char*  dividerChar) {$/;"	f
defwDividerChar	def/def/defwWriter.cpp	/^defwDividerChar(const char *dividerChar)$/;"	f
defwEnd	def/cdef/xdefwWriter.cpp	/^int defwEnd () {$/;"	f
defwEnd	def/def/defwWriter.cpp	/^defwEnd()$/;"	f
defwEndBeginext	def/cdef/xdefwWriter.cpp	/^int defwEndBeginext () {$/;"	f
defwEndBeginext	def/def/defwWriter.cpp	/^defwEndBeginext()$/;"	f
defwEndBlockages	def/cdef/xdefwWriter.cpp	/^int defwEndBlockages () {$/;"	f
defwEndBlockages	def/def/defwWriter.cpp	/^defwEndBlockages()$/;"	f
defwEndComponents	def/cdef/xdefwWriter.cpp	/^int defwEndComponents () {$/;"	f
defwEndComponents	def/def/defwWriter.cpp	/^defwEndComponents()$/;"	f
defwEndConstraints	def/cdef/xdefwWriter.cpp	/^int defwEndConstraints () {$/;"	f
defwEndConstraints	def/def/defwWriter.cpp	/^defwEndConstraints()$/;"	f
defwEndDefaultCap	def/cdef/xdefwWriter.cpp	/^int defwEndDefaultCap () {$/;"	f
defwEndDefaultCap	def/def/defwWriter.cpp	/^defwEndDefaultCap()$/;"	f
defwEndFills	def/cdef/xdefwWriter.cpp	/^int defwEndFills () {$/;"	f
defwEndFills	def/def/defwWriter.cpp	/^defwEndFills()$/;"	f
defwEndGroups	def/cdef/xdefwWriter.cpp	/^int defwEndGroups () {$/;"	f
defwEndGroups	def/def/defwWriter.cpp	/^defwEndGroups()$/;"	f
defwEndIOTimings	def/cdef/xdefwWriter.cpp	/^int defwEndIOTimings () {$/;"	f
defwEndIOTimings	def/def/defwWriter.cpp	/^defwEndIOTimings()$/;"	f
defwEndNets	def/cdef/xdefwWriter.cpp	/^int defwEndNets () {$/;"	f
defwEndNets	def/def/defwWriter.cpp	/^defwEndNets()$/;"	f
defwEndNonDefaultRules	def/cdef/xdefwWriter.cpp	/^int defwEndNonDefaultRules () {$/;"	f
defwEndNonDefaultRules	def/def/defwWriter.cpp	/^defwEndNonDefaultRules()$/;"	f
defwEndPinProperties	def/cdef/xdefwWriter.cpp	/^int defwEndPinProperties () {$/;"	f
defwEndPinProperties	def/def/defwWriter.cpp	/^defwEndPinProperties()$/;"	f
defwEndPins	def/cdef/xdefwWriter.cpp	/^int defwEndPins () {$/;"	f
defwEndPins	def/def/defwWriter.cpp	/^defwEndPins()$/;"	f
defwEndPropDef	def/cdef/xdefwWriter.cpp	/^int defwEndPropDef () {$/;"	f
defwEndPropDef	def/def/defwWriter.cpp	/^defwEndPropDef()$/;"	f
defwEndRegions	def/cdef/xdefwWriter.cpp	/^int defwEndRegions () {$/;"	f
defwEndRegions	def/def/defwWriter.cpp	/^defwEndRegions()$/;"	f
defwEndScanchain	def/cdef/xdefwWriter.cpp	/^int defwEndScanchain () {$/;"	f
defwEndScanchain	def/def/defwWriter.cpp	/^defwEndScanchain()$/;"	f
defwEndSlots	def/cdef/xdefwWriter.cpp	/^int defwEndSlots () {$/;"	f
defwEndSlots	def/def/defwWriter.cpp	/^defwEndSlots()$/;"	f
defwEndSpecialNets	def/cdef/xdefwWriter.cpp	/^int defwEndSpecialNets () {$/;"	f
defwEndSpecialNets	def/def/defwWriter.cpp	/^defwEndSpecialNets()$/;"	f
defwEndStyles	def/cdef/xdefwWriter.cpp	/^int defwEndStyles () {$/;"	f
defwEndStyles	def/def/defwWriter.cpp	/^defwEndStyles()$/;"	f
defwEndVias	def/cdef/xdefwWriter.cpp	/^int defwEndVias () {$/;"	f
defwEndVias	def/def/defwWriter.cpp	/^defwEndVias()$/;"	f
defwErrorLogFunction	def/def/defwWriterCalls.cpp	/^DEFI_LOG_FUNCTION defwErrorLogFunction;$/;"	v
defwExtCbk	def/def/defwWriterCalls.cpp	91;"	d	file:
defwExtCbkType	def/cdef/defwWriterCalls.h	/^  defwExtCbkType = 32,$/;"	e	enum:__anon14
defwExtCbkType	def/def/defwWriterCalls.hpp	/^  defwExtCbkType,$/;"	e	enum:__anon19
defwFName	def/def/defwWriterCalls.cpp	/^const char* defwFName() {$/;"	f
defwFPC	def/def/defwWriter.cpp	/^int defwFPC = 0;  \/\/ Current number of items in constraints\/operand\/sum$/;"	v
defwFile	def/def/defwWriter.cpp	/^FILE *defwFile = 0;   \/\/ File to write to.$/;"	v
defwFileName	def/def/defwWriterCalls.cpp	/^static char* defwFileName = 0;$/;"	v	file:
defwFillLayer	def/cdef/xdefwWriter.cpp	/^int defwFillLayer (const char*  layerName) {$/;"	f
defwFillLayer	def/def/defwWriter.cpp	/^defwFillLayer(const char *layerName)$/;"	f
defwFillLayerMask	def/cdef/xdefwWriter.cpp	/^int defwFillLayerMask (int  maskColor) {$/;"	f
defwFillLayerMask	def/def/defwWriter.cpp	/^defwFillLayerMask(int colorMask)$/;"	f
defwFillLayerOPC	def/cdef/xdefwWriter.cpp	/^int defwFillLayerOPC () {$/;"	f
defwFillLayerOPC	def/def/defwWriter.cpp	/^defwFillLayerOPC()$/;"	f
defwFillPoints	def/cdef/xdefwWriter.cpp	/^int defwFillPoints (int  num_points, double*  xl, double*  yl) {$/;"	f
defwFillPoints	def/def/defwWriter.cpp	/^defwFillPoints(int      num_points,$/;"	f
defwFillPolygon	def/cdef/xdefwWriter.cpp	/^int defwFillPolygon (int  num_polys, double*  xl, double*  yl) {$/;"	f
defwFillPolygon	def/def/defwWriter.cpp	/^defwFillPolygon(int     num_polys,$/;"	f
defwFillRect	def/cdef/xdefwWriter.cpp	/^int defwFillRect (int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwFillRect	def/def/defwWriter.cpp	/^defwFillRect(int    xl,$/;"	f
defwFillVia	def/cdef/xdefwWriter.cpp	/^int defwFillVia (const char*  viaName) {$/;"	f
defwFillVia	def/def/defwWriter.cpp	/^defwFillVia(const char *viaName)$/;"	f
defwFillViaMask	def/cdef/xdefwWriter.cpp	/^int defwFillViaMask (int  colorMask) {$/;"	f
defwFillViaMask	def/def/defwWriter.cpp	/^defwFillViaMask(int maskColor)$/;"	f
defwFillViaOPC	def/cdef/xdefwWriter.cpp	/^int defwFillViaOPC () {$/;"	f
defwFillViaOPC	def/def/defwWriter.cpp	/^defwFillViaOPC()$/;"	f
defwFloorPlanCbk	def/def/defwWriterCalls.cpp	67;"	d	file:
defwFloorPlanCbkType	def/cdef/defwWriterCalls.h	/^  defwFloorPlanCbkType = 8,$/;"	e	enum:__anon14
defwFloorPlanCbkType	def/def/defwWriterCalls.hpp	/^  defwFloorPlanCbkType,$/;"	e	enum:__anon19
defwFloorplan	def/cdef/xdefwWriter.cpp	/^int defwFloorplan (const char*  floorplan) {$/;"	f
defwFloorplan	def/def/defwWriter.cpp	/^defwFloorplan(const char *floorplan)$/;"	f
defwFunc	def/def/defwWriter.cpp	/^int defwFunc = DEFW_UNINIT;   \/\/ Current function of writer$/;"	v
defwGcellGrid	def/cdef/xdefwWriter.cpp	/^int defwGcellGrid (const char*  master, int  doStart, int  doCount, int  doStep) {$/;"	f
defwGcellGrid	def/def/defwWriter.cpp	/^defwGcellGrid(const char    *master,$/;"	f
defwGcellGridCbk	def/def/defwWriterCalls.cpp	74;"	d	file:
defwGcellGridCbkType	def/cdef/defwWriterCalls.h	/^  defwGcellGridCbkType = 15,$/;"	e	enum:__anon14
defwGcellGridCbkType	def/def/defwWriterCalls.hpp	/^  defwGcellGridCbkType,$/;"	e	enum:__anon19
defwGetUserData	def/cdef/xdefwWriterCalls.cpp	/^defiUserData defwGetUserData () {$/;"	f
defwGetUserData	def/def/defwWriterCalls.cpp	/^defiUserData defwGetUserData() {$/;"	f
defwGroup	def/cdef/xdefwWriter.cpp	/^int defwGroup (const char*  groupName, int  numExpr, const char**  groupExpr) {$/;"	f
defwGroup	def/def/defwWriter.cpp	/^defwGroup(const char    *groupName,$/;"	f
defwGroupCbk	def/def/defwWriterCalls.cpp	89;"	d	file:
defwGroupCbkType	def/cdef/defwWriterCalls.h	/^  defwGroupCbkType = 30,$/;"	e	enum:__anon14
defwGroupCbkType	def/def/defwWriterCalls.hpp	/^  defwGroupCbkType,$/;"	e	enum:__anon19
defwGroupRegion	def/cdef/xdefwWriter.cpp	/^int defwGroupRegion (int  xl, int  yl, int  xh, int  yh, const char*  regionName) {$/;"	f
defwGroupRegion	def/def/defwWriter.cpp	/^defwGroupRegion(int         xl,$/;"	f
defwGroupSoft	def/cdef/xdefwWriter.cpp	/^int defwGroupSoft (const char*  type1, double  value1, const char*  type2, double  value2, const char*  type3, double  value3) {$/;"	f
defwGroupSoft	def/def/defwWriter.cpp	/^defwGroupSoft(const char    *type1,$/;"	f
defwHasInit	def/def/defwWriter.cpp	/^int defwHasInit = 0;    \/\/ for defwInit has called$/;"	v
defwHasInitCbk	def/def/defwWriter.cpp	/^int defwHasInitCbk = 0; \/\/ for defwInitCbk has called$/;"	v
defwHistory	def/cdef/xdefwWriter.cpp	/^int defwHistory (const char*  string) {$/;"	f
defwHistory	def/def/defwWriter.cpp	/^defwHistory(const char *string)$/;"	f
defwHistoryCbk	def/def/defwWriterCalls.cpp	69;"	d	file:
defwHistoryCbkType	def/cdef/defwWriterCalls.h	/^  defwHistoryCbkType = 10,$/;"	e	enum:__anon14
defwHistoryCbkType	def/def/defwWriterCalls.hpp	/^  defwHistoryCbkType,$/;"	e	enum:__anon19
defwIOTiming	def/cdef/xdefwWriter.cpp	/^int defwIOTiming (const char*  inst, const char*  pin) {$/;"	f
defwIOTiming	def/def/defwWriter.cpp	/^defwIOTiming(const char *instance,$/;"	f
defwIOTimingCapacitance	def/cdef/xdefwWriter.cpp	/^int defwIOTimingCapacitance (double  num) {$/;"	f
defwIOTimingCapacitance	def/def/defwWriter.cpp	/^defwIOTimingCapacitance(double num)$/;"	f
defwIOTimingCbk	def/def/defwWriterCalls.cpp	85;"	d	file:
defwIOTimingCbkType	def/cdef/defwWriterCalls.h	/^  defwIOTimingCbkType = 26,$/;"	e	enum:__anon14
defwIOTimingCbkType	def/def/defwWriterCalls.hpp	/^  defwIOTimingCbkType,$/;"	e	enum:__anon19
defwIOTimingDrivecell	def/cdef/xdefwWriter.cpp	/^int defwIOTimingDrivecell (const char*  name, const char*  fromPin, const char*  toPin, int  numDrivers) {$/;"	f
defwIOTimingDrivecell	def/def/defwWriter.cpp	/^defwIOTimingDrivecell(const char    *name,$/;"	f
defwIOTimingSlewrate	def/cdef/xdefwWriter.cpp	/^int defwIOTimingSlewrate (const char*  riseFall, int  num1, int  num2) {$/;"	f
defwIOTimingSlewrate	def/def/defwWriter.cpp	/^defwIOTimingSlewrate(const char *riseFall,$/;"	f
defwIOTimingVariable	def/cdef/xdefwWriter.cpp	/^int defwIOTimingVariable (const char*  riseFall, int  num1, int  num2) {$/;"	f
defwIOTimingVariable	def/def/defwWriter.cpp	/^defwIOTimingVariable(const char *riseFall,$/;"	f
defwInit	def/cdef/xdefwWriter.cpp	/^int defwInit (FILE*  f, int  vers1, int  version2, const char*  caseSensitive, const char*  dividerChar, const char*  busBitChars, const char*  designName, const char*  technology, const char*  array, const char*  floorplan, double  units) {$/;"	f
defwInit	def/def/defwWriter.cpp	/^defwInit(FILE       *f,$/;"	f
defwInitCbk	def/cdef/xdefwWriter.cpp	/^int defwInitCbk (FILE*  f) {$/;"	f
defwInitCbk	def/def/defwWriter.cpp	/^defwInitCbk(FILE *f)$/;"	f
defwIntPropDef	def/cdef/xdefwWriter.cpp	/^int defwIntPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, int     propValue) {$/;"	f
defwIntPropDef	def/def/defwWriter.cpp	/^defwIntPropDef(const char   *objType,$/;"	f
defwIntProperty	def/cdef/xdefwWriter.cpp	/^int defwIntProperty (const char*  propName, int  propValue) {$/;"	f
defwIntProperty	def/def/defwWriter.cpp	/^defwIntProperty(const char  *propName,$/;"	f
defwIsPropObjType	def/def/defwWriter.cpp	/^defwIsPropObjType(const char *objType)$/;"	f
defwIsPropState	def/def/defwWriter.cpp	/^defwIsPropState()$/;"	f
defwLineItemCounter	def/def/defwWriter.cpp	/^int defwLineItemCounter = 0; \/\/ number of items on current line$/;"	v
defwLines	def/def/defwWriter.cpp	/^int defwLines = 0;    \/\/ number of lines written$/;"	v
defwNet	def/cdef/xdefwWriter.cpp	/^int defwNet (const char*  name) {$/;"	f
defwNet	def/def/defwWriter.cpp	/^defwNet(const char *name)$/;"	f
defwNetCbk	def/def/defwWriterCalls.cpp	84;"	d	file:
defwNetCbkType	def/cdef/defwWriterCalls.h	/^  defwNetCbkType = 25,$/;"	e	enum:__anon14
defwNetCbkType	def/def/defwWriterCalls.hpp	/^  defwNetCbkType,$/;"	e	enum:__anon19
defwNetConnection	def/cdef/xdefwWriter.cpp	/^int defwNetConnection (const char*  inst, const char*  pin, int  synthesized) {$/;"	f
defwNetConnection	def/def/defwWriter.cpp	/^defwNetConnection(const char    *inst,$/;"	f
defwNetEndOneNet	def/cdef/xdefwWriter.cpp	/^int defwNetEndOneNet () {$/;"	f
defwNetEndOneNet	def/def/defwWriter.cpp	/^defwNetEndOneNet()$/;"	f
defwNetEstCap	def/cdef/xdefwWriter.cpp	/^int defwNetEstCap (double  value) {$/;"	f
defwNetEstCap	def/def/defwWriter.cpp	/^defwNetEstCap(double d)$/;"	f
defwNetFixedbump	def/cdef/xdefwWriter.cpp	/^int defwNetFixedbump () {$/;"	f
defwNetFixedbump	def/def/defwWriter.cpp	/^defwNetFixedbump()$/;"	f
defwNetFrequency	def/cdef/xdefwWriter.cpp	/^int defwNetFrequency (double  frequency) {$/;"	f
defwNetFrequency	def/def/defwWriter.cpp	/^defwNetFrequency(double frequency)$/;"	f
defwNetMustjoinConnection	def/cdef/xdefwWriter.cpp	/^int defwNetMustjoinConnection (const char*  inst, const char*  pin) {$/;"	f
defwNetMustjoinConnection	def/def/defwWriter.cpp	/^defwNetMustjoinConnection(const char    *inst,$/;"	f
defwNetNondefaultRule	def/cdef/xdefwWriter.cpp	/^int defwNetNondefaultRule (const char*  name) {$/;"	f
defwNetNondefaultRule	def/def/defwWriter.cpp	/^defwNetNondefaultRule(const char *name)$/;"	f
defwNetNoshieldEnd	def/cdef/xdefwWriter.cpp	/^int defwNetNoshieldEnd () {$/;"	f
defwNetNoshieldEnd	def/def/defwWriter.cpp	/^defwNetNoshieldEnd()$/;"	f
defwNetNoshieldPoint	def/cdef/xdefwWriter.cpp	/^int defwNetNoshieldPoint (int  numPts, const char**  pointx, const char**  pointy) {$/;"	f
defwNetNoshieldPoint	def/def/defwWriter.cpp	/^defwNetNoshieldPoint(int        numPts,$/;"	f
defwNetNoshieldStart	def/cdef/xdefwWriter.cpp	/^int defwNetNoshieldStart (const char*  name) {$/;"	f
defwNetNoshieldStart	def/def/defwWriter.cpp	/^defwNetNoshieldStart(const char *name)$/;"	f
defwNetNoshieldVia	def/cdef/xdefwWriter.cpp	/^int defwNetNoshieldVia (const char*  name) {$/;"	f
defwNetNoshieldVia	def/def/defwWriter.cpp	/^defwNetNoshieldVia(const char *name)$/;"	f
defwNetOptions	def/def/defwWriter.cpp	/^defwNetOptions()$/;"	f
defwNetOriginal	def/cdef/xdefwWriter.cpp	/^int defwNetOriginal (const char*  name) {$/;"	f
defwNetOriginal	def/def/defwWriter.cpp	/^defwNetOriginal(const char *name)$/;"	f
defwNetPathEnd	def/cdef/xdefwWriter.cpp	/^int defwNetPathEnd () {$/;"	f
defwNetPathEnd	def/def/defwWriter.cpp	/^defwNetPathEnd()$/;"	f
defwNetPathLayer	def/cdef/xdefwWriter.cpp	/^int defwNetPathLayer (const char*  name, int  isTaper, const char*  rulename) {$/;"	f
defwNetPathLayer	def/def/defwWriter.cpp	/^defwNetPathLayer(const char *name,$/;"	f
defwNetPathMask	def/cdef/xdefwWriter.cpp	/^int defwNetPathMask (int  maskNum) {$/;"	f
defwNetPathMask	def/def/defwWriter.cpp	/^defwNetPathMask(int colorMask)$/;"	f
defwNetPathPoint	def/cdef/xdefwWriter.cpp	/^int defwNetPathPoint (int  numPts, double*  pointx, double*  pointy) {$/;"	f
defwNetPathPoint	def/def/defwWriter.cpp	/^defwNetPathPoint(int    numPts,$/;"	f
defwNetPathPointWithExt	def/cdef/xdefwWriter.cpp	/^int defwNetPathPointWithExt (int  numPts, double*  pointx, double*  pointy, double*  optValue) {$/;"	f
defwNetPathPointWithExt	def/def/defwWriter.cpp	/^defwNetPathPointWithExt(int     numPts,$/;"	f
defwNetPathRect	def/cdef/xdefwWriter.cpp	/^int defwNetPathRect (int  deltaX1, int  deltaY1, int  deltaX2, int  deltaY2) {$/;"	f
defwNetPathRect	def/def/defwWriter.cpp	/^defwNetPathRect(int deltaX1,$/;"	f
defwNetPathStart	def/cdef/xdefwWriter.cpp	/^int defwNetPathStart (const char*  typ) {$/;"	f
defwNetPathStart	def/def/defwWriter.cpp	/^defwNetPathStart(const char *typ)$/;"	f
defwNetPathStyle	def/cdef/xdefwWriter.cpp	/^int defwNetPathStyle (int  styleNum) {$/;"	f
defwNetPathStyle	def/def/defwWriter.cpp	/^defwNetPathStyle(int styleNum)$/;"	f
defwNetPathVia	def/cdef/xdefwWriter.cpp	/^int defwNetPathVia (const char*  name) {$/;"	f
defwNetPathVia	def/def/defwWriter.cpp	/^defwNetPathVia(const char *name)$/;"	f
defwNetPathViaWithOrient	def/cdef/xdefwWriter.cpp	/^int defwNetPathViaWithOrient (const char*  name, int  orient) {$/;"	f
defwNetPathViaWithOrient	def/def/defwWriter.cpp	/^defwNetPathViaWithOrient(const char *name,$/;"	f
defwNetPathViaWithOrientStr	def/cdef/xdefwWriter.cpp	/^int defwNetPathViaWithOrientStr (const char*  name, const char*  orient) {$/;"	f
defwNetPathViaWithOrientStr	def/def/defwWriter.cpp	/^defwNetPathViaWithOrientStr(const char  *name,$/;"	f
defwNetPathVirtual	def/cdef/xdefwWriter.cpp	/^int defwNetPathVirtual (int  x, int  y) {$/;"	f
defwNetPathVirtual	def/def/defwWriter.cpp	/^defwNetPathVirtual(int  x,$/;"	f
defwNetPathWidth	def/cdef/xdefwWriter.cpp	/^int defwNetPathWidth (int  w) {$/;"	f
defwNetPathWidth	def/def/defwWriter.cpp	/^defwNetPathWidth(int w)$/;"	f
defwNetPattern	def/cdef/xdefwWriter.cpp	/^int defwNetPattern (const char*  name) {$/;"	f
defwNetPattern	def/def/defwWriter.cpp	/^defwNetPattern(const char *name)$/;"	f
defwNetShieldnet	def/cdef/xdefwWriter.cpp	/^int defwNetShieldnet (const char*  name) {$/;"	f
defwNetShieldnet	def/def/defwWriter.cpp	/^defwNetShieldnet(const char *name)$/;"	f
defwNetSource	def/cdef/xdefwWriter.cpp	/^int defwNetSource (const char*  name) {$/;"	f
defwNetSource	def/def/defwWriter.cpp	/^defwNetSource(const char *name)$/;"	f
defwNetSubnetEnd	def/cdef/xdefwWriter.cpp	/^int defwNetSubnetEnd () {$/;"	f
defwNetSubnetEnd	def/def/defwWriter.cpp	/^defwNetSubnetEnd()$/;"	f
defwNetSubnetPin	def/cdef/xdefwWriter.cpp	/^int defwNetSubnetPin (const char*  compName, const char*  pinName) {$/;"	f
defwNetSubnetPin	def/def/defwWriter.cpp	/^defwNetSubnetPin(const char *compName,$/;"	f
defwNetSubnetStart	def/cdef/xdefwWriter.cpp	/^int defwNetSubnetStart (const char*  name) {$/;"	f
defwNetSubnetStart	def/def/defwWriter.cpp	/^defwNetSubnetStart(const char *name)$/;"	f
defwNetUse	def/cdef/xdefwWriter.cpp	/^int defwNetUse (const char*  name) {$/;"	f
defwNetUse	def/def/defwWriter.cpp	/^defwNetUse(const char *name)$/;"	f
defwNetVpin	def/cdef/xdefwWriter.cpp	/^int defwNetVpin (const char*  vpinName, const char*  layerName, int  layerXl, int  layerYl, int  layerXh, int  layerYh, const char*  status, int  statusX, int  statusY, int  orient) {$/;"	f
defwNetVpin	def/def/defwWriter.cpp	/^defwNetVpin(const char  *vpinName,$/;"	f
defwNetVpinStr	def/cdef/xdefwWriter.cpp	/^int defwNetVpinStr (const char*  vpinName, const char*  layerName, int  layerXl, int  layerYl, int  layerXh, int  layerYh, const char*  status, int  statusX, int  statusY, const char*  orient) {$/;"	f
defwNetVpinStr	def/def/defwWriter.cpp	/^defwNetVpinStr(const char   *vpinName,$/;"	f
defwNetWeight	def/cdef/xdefwWriter.cpp	/^int defwNetWeight (double  value) {$/;"	f
defwNetWeight	def/def/defwWriter.cpp	/^defwNetWeight(double d)$/;"	f
defwNetXtalk	def/cdef/xdefwWriter.cpp	/^int defwNetXtalk (int  xtalk) {$/;"	f
defwNetXtalk	def/def/defwWriter.cpp	/^defwNetXtalk(int xtalk)$/;"	f
defwNewLine	def/cdef/xdefwWriter.cpp	/^int defwNewLine () {$/;"	f
defwNewLine	def/def/defwWriter.cpp	/^defwNewLine()$/;"	f
defwNonDefaultRule	def/cdef/xdefwWriter.cpp	/^int defwNonDefaultRule (const char*  ruleName, int  hardSpacing) {$/;"	f
defwNonDefaultRule	def/def/defwWriter.cpp	/^defwNonDefaultRule(const char   *ruleName,$/;"	f
defwNonDefaultRuleLayer	def/cdef/xdefwWriter.cpp	/^int defwNonDefaultRuleLayer (const char*  layerName, int  width, int  diagWidth, int  spacing, int  wireExt) {$/;"	f
defwNonDefaultRuleLayer	def/def/defwWriter.cpp	/^defwNonDefaultRuleLayer(const char  *layerName,$/;"	f
defwNonDefaultRuleMinCuts	def/cdef/xdefwWriter.cpp	/^int defwNonDefaultRuleMinCuts (const char*  cutLayerName, int  numCutS) {$/;"	f
defwNonDefaultRuleMinCuts	def/def/defwWriter.cpp	/^defwNonDefaultRuleMinCuts(const char    *cutLayerName,$/;"	f
defwNonDefaultRuleVia	def/cdef/xdefwWriter.cpp	/^int defwNonDefaultRuleVia (const char*  viaName) {$/;"	f
defwNonDefaultRuleVia	def/def/defwWriter.cpp	/^defwNonDefaultRuleVia(const char *viaName)$/;"	f
defwNonDefaultRuleViaRule	def/cdef/xdefwWriter.cpp	/^int defwNonDefaultRuleViaRule (const char*  viaRuleName) {$/;"	f
defwNonDefaultRuleViaRule	def/def/defwWriter.cpp	/^defwNonDefaultRuleViaRule(const char *viaRuleName)$/;"	f
defwObsoleteNum	def/def/defwWriter.cpp	/^static int defwObsoleteNum = -1; \/\/ keep track the obsolete syntax for error$/;"	v	file:
defwOneViaEnd	def/cdef/xdefwWriter.cpp	/^int defwOneViaEnd () {$/;"	f
defwOneViaEnd	def/def/defwWriter.cpp	/^defwOneViaEnd()$/;"	f
defwOrient	def/def/defwWriter.cpp	/^defwOrient(int num)$/;"	f
defwPin	def/cdef/xdefwWriter.cpp	/^int defwPin (const char*  name, const char*  net, int  special, const char*  direction, const char*  use, const char*  status, int  statusX, int  statusY, int  orient, const char*  layer, int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwPin	def/def/defwWriter.cpp	/^defwPin(const char  *name,$/;"	f
defwPinAntennaModel	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaModel (const char*  oxide) {$/;"	f
defwPinAntennaModel	def/def/defwWriter.cpp	/^defwPinAntennaModel(const char *oxide)$/;"	f
defwPinAntennaPinDiffArea	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaPinDiffArea (int  value, const char*  layerName) {$/;"	f
defwPinAntennaPinDiffArea	def/def/defwWriter.cpp	/^defwPinAntennaPinDiffArea(int           value,$/;"	f
defwPinAntennaPinGateArea	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaPinGateArea (int  value, const char*  layerName) {$/;"	f
defwPinAntennaPinGateArea	def/def/defwWriter.cpp	/^defwPinAntennaPinGateArea(int           value,$/;"	f
defwPinAntennaPinMaxAreaCar	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaPinMaxAreaCar (int  value, const char*  layerName) {$/;"	f
defwPinAntennaPinMaxAreaCar	def/def/defwWriter.cpp	/^defwPinAntennaPinMaxAreaCar(int         value,$/;"	f
defwPinAntennaPinMaxCutCar	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaPinMaxCutCar (int  value, const char*  layerName) {$/;"	f
defwPinAntennaPinMaxCutCar	def/def/defwWriter.cpp	/^defwPinAntennaPinMaxCutCar(int          value,$/;"	f
defwPinAntennaPinMaxSideAreaCar	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaPinMaxSideAreaCar (int  value, const char*  layerName) {$/;"	f
defwPinAntennaPinMaxSideAreaCar	def/def/defwWriter.cpp	/^defwPinAntennaPinMaxSideAreaCar(int         value,$/;"	f
defwPinAntennaPinPartialCutArea	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaPinPartialCutArea (int  value, const char*  layerName) {$/;"	f
defwPinAntennaPinPartialCutArea	def/def/defwWriter.cpp	/^defwPinAntennaPinPartialCutArea(int         value,$/;"	f
defwPinAntennaPinPartialMetalArea	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaPinPartialMetalArea (int  value, const char*  layerName) {$/;"	f
defwPinAntennaPinPartialMetalArea	def/def/defwWriter.cpp	/^defwPinAntennaPinPartialMetalArea(int           value,$/;"	f
defwPinAntennaPinPartialMetalSideArea	def/cdef/xdefwWriter.cpp	/^int defwPinAntennaPinPartialMetalSideArea (int  value, const char*  layerName) {$/;"	f
defwPinAntennaPinPartialMetalSideArea	def/def/defwWriter.cpp	/^defwPinAntennaPinPartialMetalSideArea(int           value,$/;"	f
defwPinCbk	def/def/defwWriterCalls.cpp	81;"	d	file:
defwPinCbkType	def/cdef/defwWriterCalls.h	/^  defwPinCbkType = 22,$/;"	e	enum:__anon14
defwPinCbkType	def/def/defwWriterCalls.hpp	/^  defwPinCbkType,$/;"	e	enum:__anon19
defwPinGroundSensitivity	def/cdef/xdefwWriter.cpp	/^int defwPinGroundSensitivity (const char*  pinName) {$/;"	f
defwPinGroundSensitivity	def/def/defwWriter.cpp	/^defwPinGroundSensitivity(const char *pinName)$/;"	f
defwPinLayer	def/cdef/xdefwWriter.cpp	/^int defwPinLayer (const char*  layerName, int  spacing, int  designRuleWidth, int  xl, int  yl, int  xh, int  yh, int  mask) {$/;"	f
defwPinLayer	def/def/defwWriter.cpp	/^defwPinLayer(const char *layerName,$/;"	f
defwPinNetExpr	def/cdef/xdefwWriter.cpp	/^int defwPinNetExpr (const char*  pinExpr) {$/;"	f
defwPinNetExpr	def/def/defwWriter.cpp	/^defwPinNetExpr(const char *pinExpr)$/;"	f
defwPinPolygon	def/cdef/xdefwWriter.cpp	/^int defwPinPolygon (const char*  layerName, int  spacing, int  designRuleWidth, int  num_polys, double*  xl, double*  yl, int  mask) {$/;"	f
defwPinPolygon	def/def/defwWriter.cpp	/^defwPinPolygon(const char   *layerName,$/;"	f
defwPinPort	def/cdef/xdefwWriter.cpp	/^int defwPinPort () {$/;"	f
defwPinPort	def/def/defwWriter.cpp	/^defwPinPort()$/;"	f
defwPinPortLayer	def/cdef/xdefwWriter.cpp	/^int defwPinPortLayer (const char*  layerName, int  spacing, int  designRuleWidth, int  xl, int  yl, int  xh, int  yh, int  mask) {$/;"	f
defwPinPortLayer	def/def/defwWriter.cpp	/^defwPinPortLayer(const char *layerName,$/;"	f
defwPinPortLocation	def/cdef/xdefwWriter.cpp	/^int defwPinPortLocation (const char*  status, int  statusX, int  statusY, const char*  orient) {$/;"	f
defwPinPortLocation	def/def/defwWriter.cpp	/^defwPinPortLocation(const char  *status,$/;"	f
defwPinPortPolygon	def/cdef/xdefwWriter.cpp	/^int defwPinPortPolygon (const char*  layerName, int  spacing, int  designRuleWidth, int  num_polys, double*  xl, double*  yl, int  mask) {$/;"	f
defwPinPortPolygon	def/def/defwWriter.cpp	/^defwPinPortPolygon(const char   *layerName,$/;"	f
defwPinPortVia	def/cdef/xdefwWriter.cpp	/^int defwPinPortVia (const char*  viaName, int  xl, int  yl, int  mask) {$/;"	f
defwPinPortVia	def/def/defwWriter.cpp	/^defwPinPortVia(const char   *viaName,$/;"	f
defwPinPropCbk	def/def/defwWriterCalls.cpp	82;"	d	file:
defwPinPropCbkType	def/cdef/defwWriterCalls.h	/^  defwPinPropCbkType = 23,$/;"	e	enum:__anon14
defwPinPropCbkType	def/def/defwWriterCalls.hpp	/^  defwPinPropCbkType,$/;"	e	enum:__anon19
defwPinProperty	def/cdef/xdefwWriter.cpp	/^int defwPinProperty (const char*  name, const char*  pinName) {$/;"	f
defwPinProperty	def/def/defwWriter.cpp	/^defwPinProperty(const char  *name,$/;"	f
defwPinStr	def/cdef/xdefwWriter.cpp	/^int defwPinStr (const char*  name, const char*  net, int  special, const char*  direction, const char*  use, const char*  status, int  statusX, int  statusY, const char*  orient, const char*  layer, int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwPinStr	def/def/defwWriter.cpp	/^defwPinStr(const char   *name,$/;"	f
defwPinSupplySensitivity	def/cdef/xdefwWriter.cpp	/^int defwPinSupplySensitivity (const char*  pinName) {$/;"	f
defwPinSupplySensitivity	def/def/defwWriter.cpp	/^defwPinSupplySensitivity(const char *pinName)$/;"	f
defwPinVia	def/cdef/xdefwWriter.cpp	/^int defwPinVia (const char*  viaName, int  xl, int  yl, int  mask) {$/;"	f
defwPinVia	def/def/defwWriter.cpp	/^defwPinVia(const char   *viaName,$/;"	f
defwPrintError	def/cdef/xdefwWriter.cpp	/^void defwPrintError (int  status) {$/;"	f
defwPrintError	def/def/defwWriter.cpp	/^defwPrintError(int status)$/;"	f
defwPrintUnusedCallbacks	def/cdef/xdefwWriterCalls.cpp	/^void defwPrintUnusedCallbacks (FILE*  log) {$/;"	f
defwPrintUnusedCallbacks	def/def/defwWriterCalls.cpp	/^void defwPrintUnusedCallbacks(FILE* f) {$/;"	f
defwPropDefCbk	def/def/defwWriterCalls.cpp	70;"	d	file:
defwPropDefCbkType	def/cdef/defwWriterCalls.h	/^  defwPropDefCbkType = 11,$/;"	e	enum:__anon14
defwPropDefCbkType	def/def/defwWriterCalls.hpp	/^  defwPropDefCbkType,$/;"	e	enum:__anon19
defwRealPropDef	def/cdef/xdefwWriter.cpp	/^int defwRealPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, double  propValue) {$/;"	f
defwRealPropDef	def/def/defwWriter.cpp	/^defwRealPropDef(const char  *objType,$/;"	f
defwRealProperty	def/cdef/xdefwWriter.cpp	/^int defwRealProperty (const char*  propName, double  propValue) {$/;"	f
defwRealProperty	def/def/defwWriter.cpp	/^defwRealProperty(const char *propName,$/;"	f
defwRegionCbk	def/def/defwWriterCalls.cpp	79;"	d	file:
defwRegionCbkType	def/cdef/defwWriterCalls.h	/^  defwRegionCbkType = 20,$/;"	e	enum:__anon14
defwRegionCbkType	def/def/defwWriterCalls.hpp	/^  defwRegionCbkType,$/;"	e	enum:__anon19
defwRegionName	def/cdef/xdefwWriter.cpp	/^int defwRegionName (const char*  name) {$/;"	f
defwRegionName	def/def/defwWriter.cpp	/^defwRegionName(const char *name)$/;"	f
defwRegionPoints	def/cdef/xdefwWriter.cpp	/^int defwRegionPoints (int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwRegionPoints	def/def/defwWriter.cpp	/^defwRegionPoints(int    xl,$/;"	f
defwRegionType	def/cdef/xdefwWriter.cpp	/^int defwRegionType (const char*  type) {$/;"	f
defwRegionType	def/def/defwWriter.cpp	/^defwRegionType(const char *type)$/;"	f
defwRegisterUnused	def/def/defwWriterCalls.cpp	/^static int defwRegisterUnused = 0;$/;"	v	file:
defwRow	def/cdef/xdefwWriter.cpp	/^int defwRow (const char*  rowName, const char*  rowType, int  x_orig, int  y_orig, int  orient, int  do_count, int  do_increment, int  xstep, int  ystep) {$/;"	f
defwRow	def/def/defwWriter.cpp	/^defwRow(const char  *rowName,$/;"	f
defwRowCbk	def/def/defwWriterCalls.cpp	72;"	d	file:
defwRowCbkType	def/cdef/defwWriterCalls.h	/^  defwRowCbkType = 13,$/;"	e	enum:__anon14
defwRowCbkType	def/def/defwWriterCalls.hpp	/^  defwRowCbkType,$/;"	e	enum:__anon19
defwRowStr	def/cdef/xdefwWriter.cpp	/^int defwRowStr (const char*  rowName, const char*  rowType, int  x_orig, int  y_orig, const char*  orient, int  do_count, int  do_increment, int  xstep, int  ystep) {$/;"	f
defwRowStr	def/def/defwWriter.cpp	/^defwRowStr(const char   *rowName,$/;"	f
defwSNetCbk	def/def/defwWriterCalls.cpp	83;"	d	file:
defwSNetCbkType	def/cdef/defwWriterCalls.h	/^  defwSNetCbkType = 24,$/;"	e	enum:__anon14
defwSNetCbkType	def/def/defwWriterCalls.hpp	/^  defwSNetCbkType,$/;"	e	enum:__anon19
defwScanchain	def/cdef/xdefwWriter.cpp	/^int defwScanchain (const char*  name) {$/;"	f
defwScanchain	def/def/defwWriter.cpp	/^defwScanchain(const char *name)$/;"	f
defwScanchainCbk	def/def/defwWriterCalls.cpp	86;"	d	file:
defwScanchainCbkType	def/cdef/defwWriterCalls.h	/^  defwScanchainCbkType = 27,$/;"	e	enum:__anon14
defwScanchainCbkType	def/def/defwWriterCalls.hpp	/^  defwScanchainCbkType,$/;"	e	enum:__anon19
defwScanchainCommonscanpins	def/cdef/xdefwWriter.cpp	/^int defwScanchainCommonscanpins (const char*  inst1, const char*  pin1, const char*  inst2, const char*  pin2) {$/;"	f
defwScanchainCommonscanpins	def/def/defwWriter.cpp	/^defwScanchainCommonscanpins(const char  *inst1,$/;"	f
defwScanchainFloating	def/cdef/xdefwWriter.cpp	/^int defwScanchainFloating (const char*  name, const char*  inst1, const char*  pin1, const char*  inst2, const char*  pin2) {$/;"	f
defwScanchainFloating	def/def/defwWriter.cpp	/^defwScanchainFloating(const char    *name,$/;"	f
defwScanchainFloatingBits	def/cdef/xdefwWriter.cpp	/^int defwScanchainFloatingBits (const char*  name, const char*  inst1, const char*  pin1, const char*  inst2, const char*  pin2, int    bits) {$/;"	f
defwScanchainFloatingBits	def/def/defwWriter.cpp	/^defwScanchainFloatingBits(const char    *name,$/;"	f
defwScanchainOrdered	def/cdef/xdefwWriter.cpp	/^int defwScanchainOrdered (const char*  name1, const char*  inst1, const char*  pin1, const char*  inst2, const char*  pin2, const char*  name2, const char*  inst3, const char*  pin3, const char*  inst4, const char*  pin4) {$/;"	f
defwScanchainOrdered	def/def/defwWriter.cpp	/^defwScanchainOrdered(const char *name1,$/;"	f
defwScanchainOrderedBits	def/cdef/xdefwWriter.cpp	/^int defwScanchainOrderedBits (const char*  name1, const char*  inst1, const char*  pin1, const char*  inst2, const char*  pin2, int    bits1, const char*  name2, const char*  inst3, const char*  pin3, const char*  inst4, const char*  pin4, int    bits2) {$/;"	f
defwScanchainOrderedBits	def/def/defwWriter.cpp	/^defwScanchainOrderedBits(const char *name1,$/;"	f
defwScanchainPartition	def/cdef/xdefwWriter.cpp	/^int defwScanchainPartition (const char*  name, int  maxBits) {$/;"	f
defwScanchainPartition	def/def/defwWriter.cpp	/^defwScanchainPartition(const char   *name,$/;"	f
defwScanchainStart	def/cdef/xdefwWriter.cpp	/^int defwScanchainStart (const char*  inst, const char*  pin) {$/;"	f
defwScanchainStart	def/def/defwWriter.cpp	/^defwScanchainStart(const char   *inst,$/;"	f
defwScanchainStop	def/cdef/xdefwWriter.cpp	/^int defwScanchainStop (const char*  inst, const char*  pin) {$/;"	f
defwScanchainStop	def/def/defwWriter.cpp	/^defwScanchainStop(const char    *inst,$/;"	f
defwSectionNames	def/def/defwWriterCalls.cpp	/^char defwSectionNames[MAXCBS] [80] = {"Version",$/;"	v
defwSetArrayCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetArrayCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetArrayCbk	def/def/defwWriterCalls.cpp	/^void defwSetArrayCbk(defwVoidCbkFnType f) {$/;"	f
defwSetAssertionCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetAssertionCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetAssertionCbk	def/def/defwWriterCalls.cpp	/^void defwSetAssertionCbk(defwVoidCbkFnType f) {$/;"	f
defwSetBlockageCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetBlockageCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetBlockageCbk	def/def/defwWriterCalls.cpp	/^void defwSetBlockageCbk(defwVoidCbkFnType f) {$/;"	f
defwSetBusBitCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetBusBitCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetBusBitCbk	def/def/defwWriterCalls.cpp	/^void defwSetBusBitCbk(defwVoidCbkFnType f) {$/;"	f
defwSetCannotOccupyCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetCannotOccupyCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetCannotOccupyCbk	def/def/defwWriterCalls.cpp	/^void defwSetCannotOccupyCbk(defwVoidCbkFnType f) {$/;"	f
defwSetCanplaceCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetCanplaceCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetCanplaceCbk	def/def/defwWriterCalls.cpp	/^void defwSetCanplaceCbk(defwVoidCbkFnType f) {$/;"	f
defwSetCaseSensitiveCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetCaseSensitiveCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetCaseSensitiveCbk	def/def/defwWriterCalls.cpp	/^void defwSetCaseSensitiveCbk(defwVoidCbkFnType f) {$/;"	f
defwSetComponentCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetComponentCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetComponentCbk	def/def/defwWriterCalls.cpp	/^void defwSetComponentCbk(defwVoidCbkFnType f) {$/;"	f
defwSetConstraintCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetConstraintCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetConstraintCbk	def/def/defwWriterCalls.cpp	/^void defwSetConstraintCbk(defwVoidCbkFnType f) {$/;"	f
defwSetDefaultCapCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetDefaultCapCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetDefaultCapCbk	def/def/defwWriterCalls.cpp	/^void defwSetDefaultCapCbk(defwVoidCbkFnType f) {$/;"	f
defwSetDesignCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetDesignCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetDesignCbk	def/def/defwWriterCalls.cpp	/^void defwSetDesignCbk(defwVoidCbkFnType f) {$/;"	f
defwSetDesignEndCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetDesignEndCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetDesignEndCbk	def/def/defwWriterCalls.cpp	/^void defwSetDesignEndCbk(defwVoidCbkFnType f) {$/;"	f
defwSetDieAreaCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetDieAreaCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetDieAreaCbk	def/def/defwWriterCalls.cpp	/^void defwSetDieAreaCbk(defwVoidCbkFnType f) {$/;"	f
defwSetDividerCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetDividerCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetDividerCbk	def/def/defwWriterCalls.cpp	/^void defwSetDividerCbk(defwVoidCbkFnType f) {$/;"	f
defwSetExtCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetExtCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetExtCbk	def/def/defwWriterCalls.cpp	/^void defwSetExtCbk(defwVoidCbkFnType f) {$/;"	f
defwSetFloorPlanCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetFloorPlanCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetFloorPlanCbk	def/def/defwWriterCalls.cpp	/^void defwSetFloorPlanCbk(defwVoidCbkFnType f) {$/;"	f
defwSetGcellGridCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetGcellGridCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetGcellGridCbk	def/def/defwWriterCalls.cpp	/^void defwSetGcellGridCbk(defwVoidCbkFnType f) {$/;"	f
defwSetGroupCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetGroupCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetGroupCbk	def/def/defwWriterCalls.cpp	/^void defwSetGroupCbk(defwVoidCbkFnType f) {$/;"	f
defwSetHistoryCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetHistoryCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetHistoryCbk	def/def/defwWriterCalls.cpp	/^void defwSetHistoryCbk(defwVoidCbkFnType f) {$/;"	f
defwSetIOTimingCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetIOTimingCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetIOTimingCbk	def/def/defwWriterCalls.cpp	/^void defwSetIOTimingCbk(defwVoidCbkFnType f) {$/;"	f
defwSetLogFunction	def/cdef/xdefwWriterCalls.cpp	/^void defwSetLogFunction (::DEFI_LOG_FUNCTION  p0) {$/;"	f
defwSetLogFunction	def/def/defwWriterCalls.cpp	/^void defwSetLogFunction(DEFI_LOG_FUNCTION f) {$/;"	f
defwSetNetCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetNetCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetNetCbk	def/def/defwWriterCalls.cpp	/^void defwSetNetCbk(defwVoidCbkFnType f) {$/;"	f
defwSetPinCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetPinCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetPinCbk	def/def/defwWriterCalls.cpp	/^void defwSetPinCbk(defwVoidCbkFnType f) {$/;"	f
defwSetPinPropCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetPinPropCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetPinPropCbk	def/def/defwWriterCalls.cpp	/^void defwSetPinPropCbk(defwVoidCbkFnType f) {$/;"	f
defwSetPropDefCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetPropDefCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetPropDefCbk	def/def/defwWriterCalls.cpp	/^void defwSetPropDefCbk(defwVoidCbkFnType f) {$/;"	f
defwSetRegionCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetRegionCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetRegionCbk	def/def/defwWriterCalls.cpp	/^void defwSetRegionCbk(defwVoidCbkFnType f) {$/;"	f
defwSetRegisterUnusedCallbacks	def/cdef/xdefwWriterCalls.cpp	/^void defwSetRegisterUnusedCallbacks () {$/;"	f
defwSetRegisterUnusedCallbacks	def/def/defwWriterCalls.cpp	/^void defwSetRegisterUnusedCallbacks() {$/;"	f
defwSetRowCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetRowCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetRowCbk	def/def/defwWriterCalls.cpp	/^void defwSetRowCbk(defwVoidCbkFnType f) {$/;"	f
defwSetSNetCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetSNetCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetSNetCbk	def/def/defwWriterCalls.cpp	/^void defwSetSNetCbk(defwVoidCbkFnType f) {$/;"	f
defwSetScanchainCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetScanchainCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetScanchainCbk	def/def/defwWriterCalls.cpp	/^void defwSetScanchainCbk(defwVoidCbkFnType f) {$/;"	f
defwSetTechnologyCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetTechnologyCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetTechnologyCbk	def/def/defwWriterCalls.cpp	/^void defwSetTechnologyCbk(defwVoidCbkFnType f) {$/;"	f
defwSetTrackCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetTrackCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetTrackCbk	def/def/defwWriterCalls.cpp	/^void defwSetTrackCbk(defwVoidCbkFnType f) {$/;"	f
defwSetUnitsCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetUnitsCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetUnitsCbk	def/def/defwWriterCalls.cpp	/^void defwSetUnitsCbk(defwVoidCbkFnType f) {$/;"	f
defwSetUnusedCallbacks	def/cdef/xdefwWriterCalls.cpp	/^void defwSetUnusedCallbacks (::defwVoidCbkFnType  func) {$/;"	f
defwSetUnusedCallbacks	def/def/defwWriterCalls.cpp	/^void defwSetUnusedCallbacks(defwVoidCbkFnType func) {$/;"	f
defwSetUserData	def/cdef/xdefwWriterCalls.cpp	/^void defwSetUserData (defiUserData  p0) {$/;"	f
defwSetUserData	def/def/defwWriterCalls.cpp	/^void defwSetUserData(defiUserData d) {$/;"	f
defwSetVersionCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetVersionCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetVersionCbk	def/def/defwWriterCalls.cpp	/^void defwSetVersionCbk(defwVoidCbkFnType f) {$/;"	f
defwSetViaCbk	def/cdef/xdefwWriterCalls.cpp	/^void defwSetViaCbk (::defwVoidCbkFnType p0) {$/;"	f
defwSetViaCbk	def/def/defwWriterCalls.cpp	/^void defwSetViaCbk(defwVoidCbkFnType f) {$/;"	f
defwSetWarningLogFunction	def/cdef/xdefwWriterCalls.cpp	/^void defwSetWarningLogFunction (::DEFI_WARNING_LOG_FUNCTION  p0) {$/;"	f
defwSetWarningLogFunction	def/def/defwWriterCalls.cpp	/^void defwSetWarningLogFunction(DEFI_WARNING_LOG_FUNCTION f) {$/;"	f
defwSlotLayer	def/cdef/xdefwWriter.cpp	/^int defwSlotLayer (const char*  layerName) {$/;"	f
defwSlotLayer	def/def/defwWriter.cpp	/^defwSlotLayer(const char *layerName)$/;"	f
defwSlotPolygon	def/cdef/xdefwWriter.cpp	/^int defwSlotPolygon (int  num_polys, double*  xl, double*  yl) {$/;"	f
defwSlotPolygon	def/def/defwWriter.cpp	/^defwSlotPolygon(int     num_polys,$/;"	f
defwSlotRect	def/cdef/xdefwWriter.cpp	/^int defwSlotRect (int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwSlotRect	def/def/defwWriter.cpp	/^defwSlotRect(int    xl,$/;"	f
defwSpNetShield	def/def/defwWriter.cpp	/^int defwSpNetShield = 0; \/\/ for special net shieldNetName$/;"	v
defwSpecialNet	def/cdef/xdefwWriter.cpp	/^int defwSpecialNet (const char*  name) {$/;"	f
defwSpecialNet	def/def/defwWriter.cpp	/^defwSpecialNet(const char *name)$/;"	f
defwSpecialNetConnection	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetConnection (const char*  inst, const char*  pin, int  synthesized) {$/;"	f
defwSpecialNetConnection	def/def/defwWriter.cpp	/^defwSpecialNetConnection(const char *inst,$/;"	f
defwSpecialNetEndOneNet	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetEndOneNet () {$/;"	f
defwSpecialNetEndOneNet	def/def/defwWriter.cpp	/^defwSpecialNetEndOneNet()$/;"	f
defwSpecialNetEstCap	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetEstCap (double  value) {$/;"	f
defwSpecialNetEstCap	def/def/defwWriter.cpp	/^defwSpecialNetEstCap(double d)$/;"	f
defwSpecialNetFixedbump	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetFixedbump () {$/;"	f
defwSpecialNetFixedbump	def/def/defwWriter.cpp	/^defwSpecialNetFixedbump()$/;"	f
defwSpecialNetOptions	def/def/defwWriter.cpp	/^defwSpecialNetOptions()$/;"	f
defwSpecialNetOriginal	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetOriginal (const char*  name) {$/;"	f
defwSpecialNetOriginal	def/def/defwWriter.cpp	/^defwSpecialNetOriginal(const char *name)$/;"	f
defwSpecialNetPathEnd	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathEnd () {$/;"	f
defwSpecialNetPathEnd	def/def/defwWriter.cpp	/^defwSpecialNetPathEnd()$/;"	f
defwSpecialNetPathLayer	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathLayer (const char*  name) {$/;"	f
defwSpecialNetPathLayer	def/def/defwWriter.cpp	/^defwSpecialNetPathLayer(const char *name)$/;"	f
defwSpecialNetPathMask	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathMask (int  colorMask) {$/;"	f
defwSpecialNetPathMask	def/def/defwWriter.cpp	/^defwSpecialNetPathMask(int colorMask)$/;"	f
defwSpecialNetPathPoint	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathPoint (int  numPts, double*  pointx, double*  pointy) {$/;"	f
defwSpecialNetPathPoint	def/def/defwWriter.cpp	/^defwSpecialNetPathPoint(int     numPts,$/;"	f
defwSpecialNetPathPointWithWireExt	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathPointWithWireExt (int  numPts, double*  pointx, double*  pointy, double*  optValue) {$/;"	f
defwSpecialNetPathPointWithWireExt	def/def/defwWriter.cpp	/^defwSpecialNetPathPointWithWireExt(int      numPts,$/;"	f
defwSpecialNetPathShape	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathShape (const char*  shapeType) {$/;"	f
defwSpecialNetPathShape	def/def/defwWriter.cpp	/^defwSpecialNetPathShape(const char *typ)$/;"	f
defwSpecialNetPathStart	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathStart (const char*  typ) {$/;"	f
defwSpecialNetPathStart	def/def/defwWriter.cpp	/^defwSpecialNetPathStart(const char *typ)$/;"	f
defwSpecialNetPathStyle	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathStyle (int  styleNum) {$/;"	f
defwSpecialNetPathStyle	def/def/defwWriter.cpp	/^defwSpecialNetPathStyle(int styleNum)$/;"	f
defwSpecialNetPathVia	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathVia (const char*  name) {$/;"	f
defwSpecialNetPathVia	def/def/defwWriter.cpp	/^defwSpecialNetPathVia(const char *name)$/;"	f
defwSpecialNetPathViaData	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathViaData (int  numX, int  numY, int  stepX, int  stepY) {$/;"	f
defwSpecialNetPathViaData	def/def/defwWriter.cpp	/^defwSpecialNetPathViaData(int   numX,$/;"	f
defwSpecialNetPathWidth	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPathWidth (int  width) {$/;"	f
defwSpecialNetPathWidth	def/def/defwWriter.cpp	/^defwSpecialNetPathWidth(int w)$/;"	f
defwSpecialNetPattern	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPattern (const char*  name) {$/;"	f
defwSpecialNetPattern	def/def/defwWriter.cpp	/^defwSpecialNetPattern(const char *name)$/;"	f
defwSpecialNetPolygon	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetPolygon (const char*  layerName, int  num_polys, double*  xl, double*  yl) {$/;"	f
defwSpecialNetPolygon	def/def/defwWriter.cpp	/^defwSpecialNetPolygon(const char* layerName,$/;"	f
defwSpecialNetRect	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetRect (const char*  layerName, int  xl, int  yl, int  xh, int  yh) {$/;"	f
defwSpecialNetRect	def/def/defwWriter.cpp	/^defwSpecialNetRect(const char   *layerName,$/;"	f
defwSpecialNetShieldEnd	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldEnd () {$/;"	f
defwSpecialNetShieldEnd	def/def/defwWriter.cpp	/^defwSpecialNetShieldEnd()$/;"	f
defwSpecialNetShieldLayer	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldLayer (const char*  name) {$/;"	f
defwSpecialNetShieldLayer	def/def/defwWriter.cpp	/^defwSpecialNetShieldLayer(const char *name)$/;"	f
defwSpecialNetShieldNetName	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldNetName (const char*  name) {$/;"	f
defwSpecialNetShieldNetName	def/def/defwWriter.cpp	/^defwSpecialNetShieldNetName(const char *name)$/;"	f
defwSpecialNetShieldPoint	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldPoint (int  numPts, double*  pointx, double*  pointy) {$/;"	f
defwSpecialNetShieldPoint	def/def/defwWriter.cpp	/^defwSpecialNetShieldPoint(int       numPts,$/;"	f
defwSpecialNetShieldShape	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldShape (const char*  shapeType) {$/;"	f
defwSpecialNetShieldShape	def/def/defwWriter.cpp	/^defwSpecialNetShieldShape(const char *typ)$/;"	f
defwSpecialNetShieldStart	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldStart (const char*  name) {$/;"	f
defwSpecialNetShieldStart	def/def/defwWriter.cpp	/^defwSpecialNetShieldStart(const char *name)$/;"	f
defwSpecialNetShieldVia	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldVia (const char*  name) {$/;"	f
defwSpecialNetShieldVia	def/def/defwWriter.cpp	/^defwSpecialNetShieldVia(const char *name)$/;"	f
defwSpecialNetShieldViaData	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldViaData (int  numX, int  numY, int  stepX, int  stepY) {$/;"	f
defwSpecialNetShieldViaData	def/def/defwWriter.cpp	/^defwSpecialNetShieldViaData(int numX,$/;"	f
defwSpecialNetShieldWidth	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetShieldWidth (int  width) {$/;"	f
defwSpecialNetShieldWidth	def/def/defwWriter.cpp	/^defwSpecialNetShieldWidth(int w)$/;"	f
defwSpecialNetSource	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetSource (const char*  name) {$/;"	f
defwSpecialNetSource	def/def/defwWriter.cpp	/^defwSpecialNetSource(const char *name)$/;"	f
defwSpecialNetSpacing	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetSpacing (const char*  layer, int  spacing, double  minwidth, double  maxwidth) {$/;"	f
defwSpecialNetSpacing	def/def/defwWriter.cpp	/^defwSpecialNetSpacing(const char    *layer,$/;"	f
defwSpecialNetUse	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetUse (const char*  name) {$/;"	f
defwSpecialNetUse	def/def/defwWriter.cpp	/^defwSpecialNetUse(const char *name)$/;"	f
defwSpecialNetVia	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetVia (const char*  layerName) {$/;"	f
defwSpecialNetVia	def/def/defwWriter.cpp	/^defwSpecialNetVia(const char *layerName)$/;"	f
defwSpecialNetViaPoints	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetViaPoints (int  num_points, double*  xl, double*  yl) {$/;"	f
defwSpecialNetViaPoints	def/def/defwWriter.cpp	/^defwSpecialNetViaPoints(int     num_points,$/;"	f
defwSpecialNetViaWithOrient	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetViaWithOrient (const char*  layerName, int  orient) {$/;"	f
defwSpecialNetViaWithOrient	def/def/defwWriter.cpp	/^defwSpecialNetViaWithOrient(const char  *layerName,$/;"	f
defwSpecialNetVoltage	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetVoltage (double  v) {$/;"	f
defwSpecialNetVoltage	def/def/defwWriter.cpp	/^defwSpecialNetVoltage(double d)$/;"	f
defwSpecialNetWeight	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetWeight (double  value) {$/;"	f
defwSpecialNetWeight	def/def/defwWriter.cpp	/^defwSpecialNetWeight(double d)$/;"	f
defwSpecialNetWidth	def/cdef/xdefwWriter.cpp	/^int defwSpecialNetWidth (const char*  layer, int  width) {$/;"	f
defwSpecialNetWidth	def/def/defwWriter.cpp	/^defwSpecialNetWidth(const char  *layer,$/;"	f
defwStartBeginext	def/cdef/xdefwWriter.cpp	/^int defwStartBeginext (const char*  name) {$/;"	f
defwStartBeginext	def/def/defwWriter.cpp	/^defwStartBeginext(const char *name)$/;"	f
defwStartBlockages	def/cdef/xdefwWriter.cpp	/^int defwStartBlockages (int  count) {$/;"	f
defwStartBlockages	def/def/defwWriter.cpp	/^defwStartBlockages(int count)$/;"	f
defwStartComponents	def/cdef/xdefwWriter.cpp	/^int defwStartComponents (int  count) {$/;"	f
defwStartComponents	def/def/defwWriter.cpp	/^defwStartComponents(int count)$/;"	f
defwStartConstraints	def/cdef/xdefwWriter.cpp	/^int defwStartConstraints (int  count) {$/;"	f
defwStartConstraints	def/def/defwWriter.cpp	/^defwStartConstraints(int count)$/;"	f
defwStartDefaultCap	def/cdef/xdefwWriter.cpp	/^int defwStartDefaultCap (int  count) {$/;"	f
defwStartDefaultCap	def/def/defwWriter.cpp	/^defwStartDefaultCap(int count)$/;"	f
defwStartFills	def/cdef/xdefwWriter.cpp	/^int defwStartFills (int  count) {$/;"	f
defwStartFills	def/def/defwWriter.cpp	/^defwStartFills(int count)$/;"	f
defwStartGroups	def/cdef/xdefwWriter.cpp	/^int defwStartGroups (int  count) {$/;"	f
defwStartGroups	def/def/defwWriter.cpp	/^defwStartGroups(int count)$/;"	f
defwStartIOTimings	def/cdef/xdefwWriter.cpp	/^int defwStartIOTimings (int  count) {$/;"	f
defwStartIOTimings	def/def/defwWriter.cpp	/^defwStartIOTimings(int count)$/;"	f
defwStartNets	def/cdef/xdefwWriter.cpp	/^int defwStartNets (int  count) {$/;"	f
defwStartNets	def/def/defwWriter.cpp	/^defwStartNets(int count)$/;"	f
defwStartNonDefaultRules	def/cdef/xdefwWriter.cpp	/^int defwStartNonDefaultRules (int  count) {$/;"	f
defwStartNonDefaultRules	def/def/defwWriter.cpp	/^defwStartNonDefaultRules(int count)$/;"	f
defwStartPinProperties	def/cdef/xdefwWriter.cpp	/^int defwStartPinProperties (int  count) {$/;"	f
defwStartPinProperties	def/def/defwWriter.cpp	/^defwStartPinProperties(int count)$/;"	f
defwStartPins	def/cdef/xdefwWriter.cpp	/^int defwStartPins (int  count) {$/;"	f
defwStartPins	def/def/defwWriter.cpp	/^defwStartPins(int count)$/;"	f
defwStartPropDef	def/cdef/xdefwWriter.cpp	/^int defwStartPropDef () {$/;"	f
defwStartPropDef	def/def/defwWriter.cpp	/^defwStartPropDef()$/;"	f
defwStartRegions	def/cdef/xdefwWriter.cpp	/^int defwStartRegions (int  count) {$/;"	f
defwStartRegions	def/def/defwWriter.cpp	/^defwStartRegions(int count)$/;"	f
defwStartScanchains	def/cdef/xdefwWriter.cpp	/^int defwStartScanchains (int  count) {$/;"	f
defwStartScanchains	def/def/defwWriter.cpp	/^defwStartScanchains(int count)$/;"	f
defwStartSlots	def/cdef/xdefwWriter.cpp	/^int defwStartSlots (int  count) {$/;"	f
defwStartSlots	def/def/defwWriter.cpp	/^defwStartSlots(int count)$/;"	f
defwStartSpecialNets	def/cdef/xdefwWriter.cpp	/^int defwStartSpecialNets (int  count) {$/;"	f
defwStartSpecialNets	def/def/defwWriter.cpp	/^defwStartSpecialNets(int count)$/;"	f
defwStartStyles	def/cdef/xdefwWriter.cpp	/^int defwStartStyles (int  count) {$/;"	f
defwStartStyles	def/def/defwWriter.cpp	/^defwStartStyles(int count)$/;"	f
defwStartVias	def/cdef/xdefwWriter.cpp	/^int defwStartVias (int  count) {$/;"	f
defwStartVias	def/def/defwWriter.cpp	/^defwStartVias(int count)$/;"	f
defwState	def/def/defwWriter.cpp	/^int defwState = DEFW_UNINIT;  \/\/ Current state of writer$/;"	v
defwStateStr	def/def/defwWriter.cpp	/^char defwStateStr[MAXSYN] [80] = {$/;"	v
defwStringPropDef	def/cdef/xdefwWriter.cpp	/^int defwStringPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, const char*  propValue) {$/;"	f
defwStringPropDef	def/def/defwWriter.cpp	/^defwStringPropDef(const char    *objType,$/;"	f
defwStringProperty	def/cdef/xdefwWriter.cpp	/^int defwStringProperty (const char*  propName, const char*  propValue) {$/;"	f
defwStringProperty	def/def/defwWriter.cpp	/^defwStringProperty(const char   *propName,$/;"	f
defwStyles	def/cdef/xdefwWriter.cpp	/^int defwStyles (int  styleNums, int  num_points, double*  xp, double*  yp) {$/;"	f
defwStyles	def/def/defwWriter.cpp	/^defwStyles(int      styleNums,$/;"	f
defwTechCbk	def/def/defwWriterCalls.cpp	65;"	d	file:
defwTechCbkType	def/cdef/defwWriterCalls.h	/^  defwTechCbkType = 6,$/;"	e	enum:__anon14
defwTechCbkType	def/def/defwWriterCalls.hpp	/^  defwTechCbkType,$/;"	e	enum:__anon19
defwTechnology	def/cdef/xdefwWriter.cpp	/^int defwTechnology (const char*  technology) {$/;"	f
defwTechnology	def/def/defwWriter.cpp	/^defwTechnology(const char *technology)$/;"	f
defwTrackCbk	def/def/defwWriterCalls.cpp	73;"	d	file:
defwTrackCbkType	def/cdef/defwWriterCalls.h	/^  defwTrackCbkType = 14,$/;"	e	enum:__anon14
defwTrackCbkType	def/def/defwWriterCalls.hpp	/^  defwTrackCbkType,$/;"	e	enum:__anon19
defwTracks	def/cdef/xdefwWriter.cpp	/^int defwTracks (const char*  master, int  doStart, int  doCount, int  doStep, int  numLayers, const char**  layers, int  mask, int  sameMask) {$/;"	f
defwTracks	def/def/defwWriter.cpp	/^defwTracks(const char   *master,$/;"	f
defwUnits	def/cdef/xdefwWriter.cpp	/^int defwUnits (int  units) {$/;"	f
defwUnits	def/def/defwWriter.cpp	/^defwUnits(int units)$/;"	f
defwUnitsCbk	def/def/defwWriterCalls.cpp	68;"	d	file:
defwUnitsCbkType	def/cdef/defwWriterCalls.h	/^  defwUnitsCbkType = 9,$/;"	e	enum:__anon14
defwUnitsCbkType	def/def/defwWriterCalls.hpp	/^  defwUnitsCbkType,$/;"	e	enum:__anon19
defwUnspecifiedCbkType	def/cdef/defwWriterCalls.h	/^  defwUnspecifiedCbkType = 0,$/;"	e	enum:__anon14
defwUnspecifiedCbkType	def/def/defwWriterCalls.hpp	/^  defwUnspecifiedCbkType = 0,$/;"	e	enum:__anon19
defwUnusedCount	def/def/defwWriterCalls.cpp	/^static int defwUnusedCount[100];$/;"	v	file:
defwUserData	def/def/defwWriterCalls.cpp	/^defiUserData defwUserData = 0;$/;"	v
defwVersion	def/cdef/xdefwWriter.cpp	/^int defwVersion (int  vers1, int  vers2) {$/;"	f
defwVersion	def/def/defwWriter.cpp	/^defwVersion(int vers1,$/;"	f
defwVersionCbk	def/def/defwWriterCalls.cpp	60;"	d	file:
defwVersionCbkType	def/cdef/defwWriterCalls.h	/^  defwVersionCbkType = 1,$/;"	e	enum:__anon14
defwVersionCbkType	def/def/defwWriterCalls.hpp	/^  defwVersionCbkType,$/;"	e	enum:__anon19
defwViaCbk	def/def/defwWriterCalls.cpp	78;"	d	file:
defwViaCbkType	def/cdef/defwWriterCalls.h	/^  defwViaCbkType = 19,$/;"	e	enum:__anon14
defwViaCbkType	def/def/defwWriterCalls.hpp	/^  defwViaCbkType,$/;"	e	enum:__anon19
defwViaHasVal	def/def/defwWriter.cpp	/^static int defwViaHasVal = 0;    \/\/ keep track only ViaRule|Pattern$/;"	v	file:
defwViaName	def/cdef/xdefwWriter.cpp	/^int defwViaName (const char*  name) {$/;"	f
defwViaName	def/def/defwWriter.cpp	/^defwViaName(const char *name)$/;"	f
defwViaPattern	def/cdef/xdefwWriter.cpp	/^int defwViaPattern (const char*  patternName) {$/;"	f
defwViaPattern	def/def/defwWriter.cpp	/^defwViaPattern(const char *pattern)$/;"	f
defwViaPolygon	def/cdef/xdefwWriter.cpp	/^int defwViaPolygon (const char*  layerName, int  num_polys, double*  xl, double*  yl, int  mask) {$/;"	f
defwViaPolygon	def/def/defwWriter.cpp	/^defwViaPolygon(const char   *layerName,$/;"	f
defwViaRect	def/cdef/xdefwWriter.cpp	/^int defwViaRect (const char*  layerName, int  xl, int  yl, int  xh, int  yh, int  mask) {$/;"	f
defwViaRect	def/def/defwWriter.cpp	/^defwViaRect(const char  *layerNames,$/;"	f
defwViaViarule	def/cdef/xdefwWriter.cpp	/^int defwViaViarule (const char*  viaRuleName, double  xCutSize, double  yCutSize, const char*  botMetalLayer, const char*  cutLayer, const char*  topMetalLayer, double  xCutSpacing, double  yCutSpacing, double  xBotEnc, double  yBotEnc, double  xTopEnc, double  yTopEnc) {$/;"	f
defwViaViarule	def/def/defwWriter.cpp	/^defwViaViarule(const char   *viaRuleName,$/;"	f
defwViaViaruleOffset	def/cdef/xdefwWriter.cpp	/^int defwViaViaruleOffset (int  xBotOffset, int  yBotOffset, int  xTopOffset, int  yTopOffset) {$/;"	f
defwViaViaruleOffset	def/def/defwWriter.cpp	/^defwViaViaruleOffset(int    xBotOffset,$/;"	f
defwViaViaruleOrigin	def/cdef/xdefwWriter.cpp	/^int defwViaViaruleOrigin (int  xOffset, int  yOffset) {$/;"	f
defwViaViaruleOrigin	def/def/defwWriter.cpp	/^defwViaViaruleOrigin(int    xOffset,$/;"	f
defwViaViarulePattern	def/cdef/xdefwWriter.cpp	/^int defwViaViarulePattern (const char*  cutPattern) {$/;"	f
defwViaViarulePattern	def/def/defwWriter.cpp	/^defwViaViarulePattern(const char *cutPattern)$/;"	f
defwViaViaruleRowCol	def/cdef/xdefwWriter.cpp	/^int defwViaViaruleRowCol (int  numCutRows, int  numCutCols) {$/;"	f
defwViaViaruleRowCol	def/def/defwWriter.cpp	/^defwViaViaruleRowCol(int    numCutRows,$/;"	f
defwVoidCbkFnType	def/cdef/defwWriterCalls.h	/^typedef int (*defwVoidCbkFnType) ( defwCallbackType_e, defiUserData );$/;"	t
defwVoidCbkFnType	def/def/defwWriterCalls.hpp	/^typedef int (*defwVoidCbkFnType) ( defwCallbackType_e, defiUserData );$/;"	t
defwWarningLogFunction	def/def/defwWriterCalls.cpp	/^DEFI_WARNING_LOG_FUNCTION defwWarningLogFunction;$/;"	v
defwWrite	def/cdef/xdefwWriterCalls.cpp	/^int defwWrite (FILE * file, const char * fileName, defiUserData  userData) {$/;"	f
defwWrite	def/def/defwWriterCalls.cpp	/^int defwWrite(FILE* f, const char* fName, defiUserData uData) {$/;"	f
defyyerror	def/def/def_keywords.cpp	/^defrData::defyyerror(const char *s) {$/;"	f	class:defrData
defyylex	def/def/def_keywords.cpp	/^defrData::defyylex(YYSTYPE *pYylval) {$/;"	f	class:defrData
delayRiseOrFall	lef/lef/lefiMacro.cpp	/^lefiTiming::delayRiseOrFall()$/;"	f	class:lefiTiming
delayRiseOrFall_	lef/include/lefiMacro.hpp	/^  char* delayRiseOrFall_;$/;"	m	class:lefiTiming
delayRiseOrFall_	lef/lef/lefiMacro.hpp	/^  char* delayRiseOrFall_;$/;"	m	class:lefiTiming
delayTableOne	lef/lef/lefiMacro.cpp	/^lefiTiming::delayTableOne()$/;"	f	class:lefiTiming
delayTableOne_	lef/include/lefiMacro.hpp	/^  double delayTableOne_;$/;"	m	class:lefiTiming
delayTableOne_	lef/lef/lefiMacro.hpp	/^  double delayTableOne_;$/;"	m	class:lefiTiming
delayTableThree	lef/lef/lefiMacro.cpp	/^lefiTiming::delayTableThree()$/;"	f	class:lefiTiming
delayTableThree_	lef/include/lefiMacro.hpp	/^  double delayTableThree_;$/;"	m	class:lefiTiming
delayTableThree_	lef/lef/lefiMacro.hpp	/^  double delayTableThree_;$/;"	m	class:lefiTiming
delayTableTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::delayTableTwo()$/;"	f	class:lefiTiming
delayTableTwo_	lef/include/lefiMacro.hpp	/^  double delayTableTwo_;$/;"	m	class:lefiTiming
delayTableTwo_	lef/lef/lefiMacro.hpp	/^  double delayTableTwo_;$/;"	m	class:lefiTiming
delayUnateness	lef/lef/lefiMacro.cpp	/^lefiTiming::delayUnateness()$/;"	f	class:lefiTiming
delayUnateness_	lef/include/lefiMacro.hpp	/^  char* delayUnateness_;$/;"	m	class:lefiTiming
delayUnateness_	lef/lef/lefiMacro.hpp	/^  char* delayUnateness_;$/;"	m	class:lefiTiming
delay_or_transition	lef/lef/lef.y	/^delay_or_transition :$/;"	l
delay_spec	def/def/def.y	/^delay_spec: '+' K_RISEMIN NUMBER $/;"	l
delay_specs	def/def/def.y	/^delay_specs: \/\/ empty $/;"	l
deltaX1	def/cdef/defiTypedefs.h	/^  int deltaX1;$/;"	m	struct:defiViaRect
deltaX1	def/def/defiPath.hpp	/^  int deltaX1;$/;"	m	struct:defiViaRect
deltaX2	def/cdef/defiTypedefs.h	/^  int deltaX2;$/;"	m	struct:defiViaRect
deltaX2	def/def/defiPath.hpp	/^  int deltaX2;$/;"	m	struct:defiViaRect
deltaX_	def/def/defiPath.hpp	/^  int deltaX_;$/;"	m	class:defiPath
deltaY1	def/cdef/defiTypedefs.h	/^  int deltaY1;$/;"	m	struct:defiViaRect
deltaY1	def/def/defiPath.hpp	/^  int deltaY1;$/;"	m	struct:defiViaRect
deltaY2	def/cdef/defiTypedefs.h	/^  int deltaY2;$/;"	m	struct:defiViaRect
deltaY2	def/def/defiPath.hpp	/^  int deltaY2;$/;"	m	struct:defiViaRect
deltaY_	def/def/defiPath.hpp	/^  int deltaY_;$/;"	m	class:defiPath
densityCB	lef/lefdiff/diffLefRW.cpp	/^int densityCB(lefrCallbackType_e c, lefiDensity* density,$/;"	f
densityCB	lef/lefrw/lefrw.cpp	/^int densityCB(lefrCallbackType_e c, lefiDensity* density,$/;"	f
densityCheckStep	lef/lef/lefiLayer.cpp	/^lefiLayer::densityCheckStep() const$/;"	f	class:lefiLayer
densityCheckStep_	lef/include/lefiLayer.hpp	/^  double densityCheckStep_; $/;"	m	class:lefiLayer
densityCheckStep_	lef/lef/lefiLayer.hpp	/^  double densityCheckStep_; $/;"	m	class:lefiLayer
densityCheckWindowLength	lef/lef/lefiLayer.cpp	/^lefiLayer::densityCheckWindowLength() const$/;"	f	class:lefiLayer
densityCheckWindowLength_	lef/include/lefiLayer.hpp	/^  double densityCheckWindowLength_; $/;"	m	class:lefiLayer
densityCheckWindowLength_	lef/lef/lefiLayer.hpp	/^  double densityCheckWindowLength_; $/;"	m	class:lefiLayer
densityCheckWindowWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::densityCheckWindowWidth() const$/;"	f	class:lefiLayer
densityCheckWindowWidth_	lef/include/lefiLayer.hpp	/^  double densityCheckWindowWidth_; $/;"	m	class:lefiLayer
densityCheckWindowWidth_	lef/lef/lefiLayer.hpp	/^  double densityCheckWindowWidth_; $/;"	m	class:lefiLayer
densityValue	lef/lef/lefiMacro.cpp	/^lefiDensity::densityValue(int   index,$/;"	f	class:lefiDensity
densityValue_	lef/include/lefiMacro.hpp	/^  double**       densityValue_;$/;"	m	class:lefiDensity
densityValue_	lef/lef/lefiMacro.hpp	/^  double**       densityValue_;$/;"	m	class:lefiDensity
density_layer	lef/lef/lef.y	/^density_layer: K_LAYER { lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
density_layer_rect	lef/lef/lef.y	/^density_layer_rect: K_RECT pt pt int_number ';'$/;"	l
density_layer_rects	lef/lef/lef.y	/^density_layer_rects: \/\/ empty $/;"	l
density_layers	lef/lef/lef.y	/^density_layers: \/\/ empty $/;"	l
designCB	def/defwrite/defwriteCbs.cpp	/^int designCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
designRuleWidth	def/def/defiBlockage.cpp	/^int defiBlockage::designRuleWidth() const {$/;"	f	class:defiBlockage
design_name	def/def/def.y	/^design_name: K_DESIGN {defData->dumb_mode = 1; defData->no_num = 1; } T_STRING ';' $/;"	l
design_section	def/def/def.y	/^design_section: array_name | bus_bit_chars | canplace | cannotoccupy |$/;"	l
designendCB	def/defwrite/defwriteCbs.cpp	/^static int designendCB(defwCallbackType_e c, defiUserData ud) {$/;"	f	file:
diagMinEdgeLength	lef/lef/lefiLayer.cpp	/^lefiLayer::diagMinEdgeLength() const$/;"	f	class:lefiLayer
diagMinEdgeLength_	lef/include/lefiLayer.hpp	/^  double  diagMinEdgeLength_;$/;"	m	class:lefiLayer
diagMinEdgeLength_	lef/lef/lefiLayer.hpp	/^  double  diagMinEdgeLength_;$/;"	m	class:lefiLayer
diagPitch	lef/lef/lefiLayer.cpp	/^lefiLayer::diagPitch() const$/;"	f	class:lefiLayer
diagPitchX	lef/lef/lefiLayer.cpp	/^lefiLayer::diagPitchX() const$/;"	f	class:lefiLayer
diagPitchX_	lef/include/lefiLayer.hpp	/^  double diagPitchX_;                 \/\/ 5.6$/;"	m	class:lefiLayer
diagPitchX_	lef/lef/lefiLayer.hpp	/^  double diagPitchX_;                 \/\/ 5.6$/;"	m	class:lefiLayer
diagPitchY	lef/lef/lefiLayer.cpp	/^lefiLayer::diagPitchY() const$/;"	f	class:lefiLayer
diagPitchY_	lef/include/lefiLayer.hpp	/^  double diagPitchY_;                 \/\/ 5.6$/;"	m	class:lefiLayer
diagPitchY_	lef/lef/lefiLayer.hpp	/^  double diagPitchY_;                 \/\/ 5.6$/;"	m	class:lefiLayer
diagSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::diagSpacing() const$/;"	f	class:lefiLayer
diagSpacing_	lef/include/lefiLayer.hpp	/^  double diagSpacing_;                \/\/ 5.6$/;"	m	class:lefiLayer
diagSpacing_	lef/lef/lefiLayer.hpp	/^  double diagSpacing_;                \/\/ 5.6$/;"	m	class:lefiLayer
diagWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::diagWidth() const$/;"	f	class:lefiLayer
diagWidth_	def/def/defiNonDefault.hpp	/^  double* diagWidth_;$/;"	m	class:defiNonDefault
diagWidth_	lef/include/lefiLayer.hpp	/^  double diagWidth_;                  \/\/ 5.6$/;"	m	class:lefiLayer
diagWidth_	lef/include/lefiNonDefault.hpp	/^  double* diagWidth_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
diagWidth_	lef/lef/lefiLayer.hpp	/^  double diagWidth_;                  \/\/ 5.6$/;"	m	class:lefiLayer
diagWidth_	lef/lef/lefiNonDefault.hpp	/^  double* diagWidth_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
die_area	def/def/def.y	/^die_area: K_DIEAREA$/;"	l
dieareaCB	def/defwrite/defwriteCbs.cpp	/^int dieareaCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
dielectric	lef/lef/lef.y	/^dielectric: K_DIELECTRIC int_number ';'$/;"	l
dielectricCB	lef/lefdiff/diffLefRW.cpp	/^int dielectricCB(lefrCallbackType_e c, double dielectric, lefiUserData ud) {$/;"	f
dielectricCB	lef/lefrw/lefrw.cpp	/^int dielectricCB(lefrCallbackType_e c, double dielectric, lefiUserData) {$/;"	f
dielectricWarnings	lef/include/lefrData.hpp	/^    int  dielectricWarnings; $/;"	m	class:lefrData
dielectricWarnings	lef/lef/lefrData.hpp	/^    int  dielectricWarnings; $/;"	m	class:lefrData
diffDefReadFile	def/defdiff/diffDefRW.cpp	/^int diffDefReadFile(char* inFile, char* outFile, char* ignorePinExtra,$/;"	f
diffLefReadFile	lef/lefdiff/diffLefRW.cpp	/^int diffLefReadFile(char* inFile, char* outFile) {$/;"	f
diffUsage	def/defdiff/differDef.cpp	/^void diffUsage() {$/;"	f
diffUsage	lef/lefdiff/differLef.cpp	/^void diffUsage() {$/;"	f
direction	def/def/defiPartition.cpp	/^char defiPartition::direction() const {$/;"	f	class:defiPartition
direction	def/def/defiPinCap.cpp	/^const char* defiPin::direction() const {$/;"	f	class:defiPin
direction	lef/lef/lefiLayer.cpp	/^lefiLayer::direction() const$/;"	f	class:lefiLayer
direction	lef/lef/lefiMacro.cpp	/^lefiPin::direction() const$/;"	f	class:lefiPin
directionLength_	def/def/defiPinCap.hpp	/^  int directionLength_;  \/\/ allocated size of direction$/;"	m	class:defiPin
direction_	def/def/defiFPC.hpp	/^  char direction_; \/\/ H or V$/;"	m	class:defiFPC
direction_	def/def/defiPartition.hpp	/^  char direction_;   \/\/ 'F' or 'T'$/;"	m	class:defiPartition
direction_	def/def/defiPinCap.hpp	/^  char* direction_;$/;"	m	class:defiPin
direction_	lef/include/lefiLayer.hpp	/^  char*  direction_;$/;"	m	class:lefiLayer
direction_	lef/include/lefiMacro.hpp	/^  char direction_[32];$/;"	m	class:lefiPin
direction_	lef/include/lefiViaRule.hpp	/^  char direction_;$/;"	m	class:lefiViaRuleLayer
direction_	lef/lef/lefiLayer.hpp	/^  char*  direction_;$/;"	m	class:lefiLayer
direction_	lef/lef/lefiMacro.hpp	/^  char direction_[32];$/;"	m	class:lefiPin
direction_	lef/lef/lefiViaRule.hpp	/^  char direction_;$/;"	m	class:lefiViaRuleLayer
disableDMsgs	def/def/defrSettings.hpp	/^    int* disableDMsgs;$/;"	m	class:defrSettings
disableMsg	lef/lef/lefrSettings.cpp	/^lefrSettings::disableMsg(int msgId)$/;"	f	class:lefrSettings
distance	def/def/defiAssertion.cpp	/^double defiAssertion::distance() const {$/;"	f	class:defiAssertion
distance	lef/lef/lefiLayer.cpp	/^lefiInfluence::distance(int index) const$/;"	f	class:lefiInfluence
distance	lef/lef/lefiMisc.cpp	/^lefiSpacing::distance() const$/;"	f	class:lefiSpacing
distance_	lef/include/lefiLayer.hpp	/^  double* distance_;$/;"	m	class:lefiInfluence
distance_	lef/include/lefiMisc.hpp	/^  double distance_;$/;"	m	class:lefiSpacing
distance_	lef/lef/lefiLayer.hpp	/^  double* distance_;$/;"	m	class:lefiInfluence
distance_	lef/lef/lefiMisc.hpp	/^  double distance_;$/;"	m	class:lefiSpacing
dividerCB	def/defwrite/defwriteCbs.cpp	/^int dividerCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
dividerCB	lef/lefdiff/diffLefRW.cpp	/^int dividerCB(lefrCallbackType_e c, const char* divideChar, lefiUserData ud) {$/;"	f
dividerCB	lef/lefrw/lefrw.cpp	/^int dividerCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
dividerCB	lef/lefwrite/lefwriteCbs.cpp	/^int dividerCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
divider_char	def/def/def.y	/^divider_char: K_DIVIDERCHAR QSTRING ';'$/;"	l
dividerchar	lef/lef/lef.y	/^dividerchar: K_DIVIDERCHAR QSTRING ';'$/;"	l
dn	def/defdiff/diffDefRW.cpp	/^int dn(defrCallbackType_e c, const char* h, defiUserData ud) {$/;"	f
dn	def/defrw/defrw.cpp	/^int dn(defrCallbackType_e c, const char* h, defiUserData ud) {$/;"	f
dname	def/defdiff/diffDefRW.cpp	/^int dname(defrCallbackType_e c, const char* string, defiUserData ud) {$/;"	f
dname	def/defrw/defrw.cpp	/^int dname(defrCallbackType_e c, const char* string, defiUserData ud) {$/;"	f
do_is_keyword	def/def/defrData.hpp	/^    int  do_is_keyword; $/;"	m	class:defrData
done	def/defrw/defrw.cpp	/^int done(defrCallbackType_e c, void*, defiUserData ud) {$/;"	f
doneCB	lef/lefrw/lefrw.cpp	/^int doneCB(lefrCallbackType_e c, void*, lefiUserData) {$/;"	f
doneDesign	def/def/defrData.hpp	/^    int doneDesign;      \/\/ keep track if the Design is done parsing$/;"	m	class:defrData
doneLib	lef/include/lefrData.hpp	/^    int  doneLib; \/\/ keep track if the library is done parsing$/;"	m	class:lefrData
doneLib	lef/lef/lefrData.hpp	/^    int  doneLib; \/\/ keep track if the library is done parsing$/;"	m	class:lefrData
driveCell	def/def/defiIOTiming.cpp	/^const char* defiIOTiming::driveCell() const {$/;"	f	class:defiIOTiming
driveCellLength_	def/def/defiIOTiming.hpp	/^  char driveCellLength_;$/;"	m	class:defiIOTiming
driveCell_	def/def/defiIOTiming.hpp	/^  char* driveCell_;$/;"	m	class:defiIOTiming
dtrm	lef/lef/lef.y	/^dtrm:$/;"	l
dumb_mode	def/def/defrData.hpp	/^    int  dumb_mode; $/;"	m	class:defrData
dval	def/def/defrData.hpp	/^        double dval ;$/;"	m	union:__anon17
dval	lef/lef/lef.tab.cpp	/^        double    dval ;$/;"	m	union:YYSTYPE	file:
dval	lef/lef/lef.tab.h	/^        double    dval ;$/;"	m	union:YYSTYPE
dvalues_	def/def/defiComponent.hpp	/^  double* dvalues_;$/;"	m	class:defiComponent
dvalues_	def/def/defiNonDefault.hpp	/^  double* dvalues_;$/;"	m	class:defiNonDefault
dvalues_	lef/include/lefiLayer.hpp	/^  double* dvalues_;$/;"	m	class:lefiLayer
dvalues_	lef/include/lefiNonDefault.hpp	/^  double* dvalues_;$/;"	m	class:lefiNonDefault
dvalues_	lef/include/lefiViaRule.hpp	/^  double* dvalues_;$/;"	m	class:lefiViaRule
dvalues_	lef/lef/lefiLayer.hpp	/^  double* dvalues_;$/;"	m	class:lefiLayer
dvalues_	lef/lef/lefiNonDefault.hpp	/^  double* dvalues_;$/;"	m	class:lefiNonDefault
dvalues_	lef/lef/lefiViaRule.hpp	/^  double* dvalues_;$/;"	m	class:lefiViaRule
edge	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::edge()$/;"	f	class:lefiCorrectionEdge
edge	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::edge(int index)$/;"	f	class:lefiCorrectionTable
edge	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::edge()$/;"	f	class:lefiNoiseEdge
edge	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::edge(int index)$/;"	f	class:lefiNoiseTable
edge1CB	lef/lefrw/lefrw.cpp	/^int edge1CB(lefrCallbackType_e c, double name, lefiUserData) {$/;"	f
edge2CB	lef/lefrw/lefrw.cpp	/^int edge2CB(lefrCallbackType_e c, double name, lefiUserData) {$/;"	f
edgeCap	lef/lef/lefiLayer.cpp	/^lefiLayer::edgeCap() const$/;"	f	class:lefiLayer
edgeCap_	lef/include/lefiLayer.hpp	/^  double edgeCap_;$/;"	m	class:lefiLayer
edgeCap_	lef/include/lefiNonDefault.hpp	/^  double* edgeCap_;$/;"	m	class:lefiNonDefault
edgeCap_	lef/lef/lefiLayer.hpp	/^  double edgeCap_;$/;"	m	class:lefiLayer
edgeCap_	lef/lef/lefiNonDefault.hpp	/^  double* edgeCap_;$/;"	m	class:lefiNonDefault
edgeRate1CB	lef/lefdiff/diffLefRW.cpp	/^int edgeRate1CB(lefrCallbackType_e c, double rate, lefiUserData ud) {$/;"	f
edgeRate2CB	lef/lefdiff/diffLefRW.cpp	/^int edgeRate2CB(lefrCallbackType_e c, double rate, lefiUserData ud) {$/;"	f
edgeRateCB	lef/lefdiff/diffLefRW.cpp	/^int edgeRateCB(lefrCallbackType_e c, double rate, lefiUserData ud) {$/;"	f
edgeRateScaleFactorWarnings	lef/include/lefrData.hpp	/^    int  edgeRateScaleFactorWarnings; $/;"	m	class:lefrData
edgeRateScaleFactorWarnings	lef/lef/lefrData.hpp	/^    int  edgeRateScaleFactorWarnings; $/;"	m	class:lefrData
edgeRateThreshold1Warnings	lef/include/lefrData.hpp	/^    int  edgeRateThreshold1Warnings; $/;"	m	class:lefrData
edgeRateThreshold1Warnings	lef/lef/lefrData.hpp	/^    int  edgeRateThreshold1Warnings; $/;"	m	class:lefrData
edgeRateThreshold2Warnings	lef/include/lefrData.hpp	/^    int  edgeRateThreshold2Warnings; $/;"	m	class:lefrData
edgeRateThreshold2Warnings	lef/lef/lefrData.hpp	/^    int  edgeRateThreshold2Warnings; $/;"	m	class:lefrData
edgeScaleCB	lef/lefrw/lefrw.cpp	/^int edgeScaleCB(lefrCallbackType_e c, double name, lefiUserData) {$/;"	f
edge_	lef/include/lefiCrossTalk.hpp	/^  double edge_;$/;"	m	class:lefiCorrectionEdge
edge_	lef/include/lefiCrossTalk.hpp	/^  double edge_;$/;"	m	class:lefiNoiseEdge
edge_	lef/lef/lefiCrossTalk.hpp	/^  double edge_;$/;"	m	class:lefiCorrectionEdge
edge_	lef/lef/lefiCrossTalk.hpp	/^  double edge_;$/;"	m	class:lefiNoiseEdge
edgeratescalefactor	lef/lef/lef.y	/^edgeratescalefactor: K_EDGERATESCALEFACTOR int_number ';'$/;"	l
edgeratethreshold1	lef/lef/lef.y	/^edgeratethreshold1: K_EDGERATETHRESHOLD1 int_number ';'$/;"	l
edgeratethreshold2	lef/lef/lef.y	/^edgeratethreshold2: K_EDGERATETHRESHOLD2 int_number ';'$/;"	l
edgesAllocated_	lef/include/lefiCrossTalk.hpp	/^  int edgesAllocated_;$/;"	m	class:lefiCorrectionTable
edgesAllocated_	lef/include/lefiCrossTalk.hpp	/^  int edgesAllocated_;$/;"	m	class:lefiNoiseTable
edgesAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int edgesAllocated_;$/;"	m	class:lefiCorrectionTable
edgesAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int edgesAllocated_;$/;"	m	class:lefiNoiseTable
edges_	lef/include/lefiCrossTalk.hpp	/^  lefiCorrectionEdge** edges_;$/;"	m	class:lefiCorrectionTable
edges_	lef/include/lefiCrossTalk.hpp	/^  lefiNoiseEdge** edges_;$/;"	m	class:lefiNoiseTable
edges_	lef/lef/lefiCrossTalk.hpp	/^  lefiCorrectionEdge** edges_;$/;"	m	class:lefiCorrectionTable
edges_	lef/lef/lefiCrossTalk.hpp	/^  lefiNoiseEdge** edges_;$/;"	m	class:lefiNoiseTable
electrical_direction	lef/lef/lef.y	/^electrical_direction:$/;"	l
else	lef/lef/lef.y	/^else:$/;"	l
enableAllMsgs	lef/lef/lefrSettings.cpp	/^lefrSettings::enableAllMsgs()$/;"	f	class:lefrSettings
enableMsg	lef/lef/lefrSettings.cpp	/^lefrSettings::enableMsg(int msgId)$/;"	f	class:lefrSettings
encClearBuf	lef/lef/crypt.cpp	/^encClearBuf(FILE *fp)$/;"	f
encCloseFile	lef/lef/crypt.cpp	/^encCloseFile(FILE *fp)$/;"	f
encFgetc	lef/lef/crypt.cpp	/^encFgetc(FILE *fp)$/;"	f
encFputc	lef/lef/crypt.cpp	/^encFputc(char   c,$/;"	f
encIsEncrypted	lef/lef/crypt.cpp	/^encIsEncrypted(unsigned char *buf)$/;"	f
encOpenFileForRead	lef/lef/crypt.cpp	/^encOpenFileForRead(char *filename)$/;"	f
encOpenFileForWrite	lef/lef/crypt.cpp	/^encOpenFileForWrite(char    *filename,$/;"	f
encPrint	lef/lef/crypt.cpp	/^encPrint(FILE   *fp,$/;"	f
encReadingEncrypted	lef/lef/crypt.cpp	/^encReadingEncrypted()$/;"	f
encWritingEncrypted	lef/lef/crypt.cpp	/^encWritingEncrypted()$/;"	f
enclosureAllocated_	lef/include/lefiLayer.hpp	/^  int enclosureAllocated_;$/;"	m	class:lefiLayer
enclosureAllocated_	lef/lef/lefiLayer.hpp	/^  int enclosureAllocated_;$/;"	m	class:lefiLayer
enclosureExceptExtraCut	lef/lef/lefiLayer.cpp	/^lefiLayer::enclosureExceptExtraCut(int index) const$/;"	f	class:lefiLayer
enclosureMinLength	lef/lef/lefiLayer.cpp	/^lefiLayer::enclosureMinLength(int index) const$/;"	f	class:lefiLayer
enclosureMinWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::enclosureMinWidth(int index) const$/;"	f	class:lefiLayer
enclosureOverhang1	lef/lef/lefiLayer.cpp	/^lefiLayer::enclosureOverhang1(int index) const$/;"	f	class:lefiLayer
enclosureOverhang1	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::enclosureOverhang1() const$/;"	f	class:lefiViaRuleLayer
enclosureOverhang2	lef/lef/lefiLayer.cpp	/^lefiLayer::enclosureOverhang2(int index) const$/;"	f	class:lefiLayer
enclosureOverhang2	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::enclosureOverhang2() const$/;"	f	class:lefiViaRuleLayer
enclosureRule	lef/lef/lefiLayer.cpp	/^lefiLayer::enclosureRule(int index)$/;"	f	class:lefiLayer
enclosureRules_	lef/include/lefiLayer.hpp	/^  char** enclosureRules_;$/;"	m	class:lefiLayer
enclosureRules_	lef/lef/lefiLayer.hpp	/^  char** enclosureRules_;$/;"	m	class:lefiLayer
encminWidth_	lef/include/lefiLayer.hpp	/^  double* encminWidth_;$/;"	m	class:lefiLayer
encminWidth_	lef/lef/lefiLayer.hpp	/^  double* encminWidth_;$/;"	m	class:lefiLayer
encrypted	lef/include/lefrData.hpp	/^    int  encrypted; $/;"	m	class:lefrData
encrypted	lef/lef/lefrData.hpp	/^    int  encrypted; $/;"	m	class:lefrData
end	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::end()$/;"	f	class:lefiNonDefault
endLibCB	lef/lefwrite/lefwriteCbs.cpp	/^int endLibCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
endOfNotchWidth_	lef/include/lefiLayer.hpp	/^  double* endOfNotchWidth_;$/;"	m	class:lefiLayer
endOfNotchWidth_	lef/lef/lefiLayer.hpp	/^  double* endOfNotchWidth_;$/;"	m	class:lefiLayer
end_array	lef/lef/lef.y	/^end_array: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
end_comps	def/def/def.y	/^end_comps: K_END K_COMPS$/;"	l
end_correctiontable	lef/lef/lef.y	/^end_correctiontable:$/;"	l
end_def_cap	def/def/def.y	/^end_def_cap: K_END K_DEFAULTCAP $/;"	l
end_design	def/def/def.y	/^end_design: K_END K_DESIGN$/;"	l
end_irdrop	lef/lef/lef.y	/^end_irdrop: K_END K_IRDROP$/;"	l
end_layer	lef/lef/lef.y	/^end_layer: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING$/;"	l
end_library	lef/lef/lef.y	/^end_library:$/;"	l
end_macro	lef/lef/lef.y	/^end_macro: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
end_macro_pin	lef/lef/lef.y	/^end_macro_pin: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
end_nd_rule	lef/lef/lef.y	/^end_nd_rule: K_END$/;"	l
end_nets	def/def/def.y	/^end_nets: K_END K_NETS $/;"	l
end_noisetable	lef/lef/lef.y	/^end_noisetable:$/;"	l
end_pin_props	def/def/def.y	/^end_pin_props: K_END K_PINPROPERTIES$/;"	l
end_pins	def/def/def.y	/^end_pins: K_END K_PINS$/;"	l
end_site	lef/lef/lef.y	/^end_site: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
end_snets	def/def/def.y	/^end_snets: K_END K_SNETS $/;"	l
end_spacing	lef/lef/lef.y	/^end_spacing: K_END K_SPACING$/;"	l
end_timing	lef/lef/lef.y	/^end_timing: K_END K_TIMING $/;"	l
end_via	lef/lef/lef.y	/^end_via: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING $/;"	l
end_viarule	lef/lef/lef.y	/^end_viarule: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;}  T_STRING $/;"	l
endcap_type	lef/lef/lef.y	/^endcap_type:$/;"	l
endfunc	def/defrw/defrw.cpp	/^int endfunc(defrCallbackType_e c, void*, defiUserData ud) {$/;"	f
eolWidth_	lef/include/lefiLayer.hpp	/^  double* eolWidth_;$/;"	m	class:lefiLayer
eolWidth_	lef/lef/lefiLayer.hpp	/^  double* eolWidth_;$/;"	m	class:lefiLayer
eolWithin_	lef/include/lefiLayer.hpp	/^  double* eolWithin_;$/;"	m	class:lefiLayer
eolWithin_	lef/lef/lefiLayer.hpp	/^  double* eolWithin_;$/;"	m	class:lefiLayer
eonotchLength_	lef/include/lefiLayer.hpp	/^  double* eonotchLength_;$/;"	m	class:lefiLayer
eonotchLength_	lef/lef/lefiLayer.hpp	/^  double* eonotchLength_;$/;"	m	class:lefiLayer
equal	def/def/defiFPC.cpp	/^double defiFPC::equal() const {$/;"	f	class:defiFPC
errorCB	lef/lefrw/lefrw.cpp	/^void errorCB(const char* msg) {$/;"	f
errors	def/def/defrData.hpp	/^    int  errors; $/;"	m	class:defrData
exeName	def/defdiff/differDef.cpp	/^char * exeName;   \/\/ use to save the executable name$/;"	v
exeName	lef/lefdiff/differLef.cpp	/^char * exeName;    \/\/ use to save the executable name$/;"	v
expression	lef/lef/lef.y	/^expression:$/;"	l
ext	def/cdef/defiTypedefs.h	/^  int ext;$/;"	m	struct:defiPnt
ext	def/def/defiPath.hpp	/^  int ext;$/;"	m	struct:defiPnt
ext	def/defdiff/diffDefRW.cpp	/^int ext(defrCallbackType_e t, const char* c, defiUserData ud) {$/;"	f
ext	def/defrw/defrw.cpp	/^int ext(defrCallbackType_e t, const char* c, defiUserData ud) {$/;"	f
extCB	lef/lefwrite/lefwriteCbs.cpp	/^int extCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
extension	def/defrw/defrw.cpp	/^int extension(defrCallbackType_e c, const char* extsn, defiUserData ud) {$/;"	f
extension	lef/lef/lef.y	/^extension: K_BEGINEXT$/;"	l
extensionCB	def/defwrite/defwriteCbs.cpp	/^int extensionCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
extensionCB	lef/lefrw/lefrw.cpp	/^int extensionCB(lefrCallbackType_e c, const char* extsn, lefiUserData) {$/;"	f
extension_opt	lef/lef/lef.y	/^extension_opt:  \/\/ empty $/;"	l
extension_section	def/def/def.y	/^extension_section: K_BEGINEXT$/;"	l
extension_stmt	def/def/def.y	/^extension_stmt: '+' K_BEGINEXT$/;"	l
fallAtt1One	lef/lef/lefiMacro.cpp	/^lefiTiming::fallAtt1One()$/;"	f	class:lefiTiming
fallAtt1One_	lef/include/lefiMacro.hpp	/^  double fallAtt1One_;$/;"	m	class:lefiTiming
fallAtt1One_	lef/lef/lefiMacro.hpp	/^  double fallAtt1One_;$/;"	m	class:lefiTiming
fallAtt1Two	lef/lef/lefiMacro.cpp	/^lefiTiming::fallAtt1Two()$/;"	f	class:lefiTiming
fallAtt1Two_	lef/include/lefiMacro.hpp	/^  double fallAtt1Two_;$/;"	m	class:lefiTiming
fallAtt1Two_	lef/lef/lefiMacro.hpp	/^  double fallAtt1Two_;$/;"	m	class:lefiTiming
fallCSOne	lef/lef/lefiMacro.cpp	/^lefiTiming::fallCSOne()$/;"	f	class:lefiTiming
fallCSOne_	lef/include/lefiMacro.hpp	/^  double fallCSOne_;$/;"	m	class:lefiTiming
fallCSOne_	lef/lef/lefiMacro.hpp	/^  double fallCSOne_;$/;"	m	class:lefiTiming
fallCSTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::fallCSTwo()$/;"	f	class:lefiTiming
fallCSTwo_	lef/include/lefiMacro.hpp	/^  double fallCSTwo_;$/;"	m	class:lefiTiming
fallCSTwo_	lef/lef/lefiMacro.hpp	/^  double fallCSTwo_;$/;"	m	class:lefiTiming
fallIntrinsicFour	lef/lef/lefiMacro.cpp	/^lefiTiming::fallIntrinsicFour()$/;"	f	class:lefiTiming
fallIntrinsicFour_	lef/include/lefiMacro.hpp	/^  double fallIntrinsicFour_;$/;"	m	class:lefiTiming
fallIntrinsicFour_	lef/lef/lefiMacro.hpp	/^  double fallIntrinsicFour_;$/;"	m	class:lefiTiming
fallIntrinsicOne	lef/lef/lefiMacro.cpp	/^lefiTiming::fallIntrinsicOne()$/;"	f	class:lefiTiming
fallIntrinsicOne_	lef/include/lefiMacro.hpp	/^  double fallIntrinsicOne_;$/;"	m	class:lefiTiming
fallIntrinsicOne_	lef/lef/lefiMacro.hpp	/^  double fallIntrinsicOne_;$/;"	m	class:lefiTiming
fallIntrinsicThree	lef/lef/lefiMacro.cpp	/^lefiTiming::fallIntrinsicThree()$/;"	f	class:lefiTiming
fallIntrinsicThree_	lef/include/lefiMacro.hpp	/^  double fallIntrinsicThree_;$/;"	m	class:lefiTiming
fallIntrinsicThree_	lef/lef/lefiMacro.hpp	/^  double fallIntrinsicThree_;$/;"	m	class:lefiTiming
fallIntrinsicTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::fallIntrinsicTwo()$/;"	f	class:lefiTiming
fallIntrinsicTwo_	lef/include/lefiMacro.hpp	/^  double fallIntrinsicTwo_;$/;"	m	class:lefiTiming
fallIntrinsicTwo_	lef/lef/lefiMacro.hpp	/^  double fallIntrinsicTwo_;$/;"	m	class:lefiTiming
fallMax	def/def/defiAssertion.cpp	/^double defiAssertion::fallMax() const {$/;"	f	class:defiAssertion
fallMax	def/def/defiPartition.cpp	/^double defiPartition::fallMax() const {$/;"	f	class:defiPartition
fallMaxLeft	def/def/defiPartition.cpp	/^double defiPartition::fallMaxLeft() const {$/;"	f	class:defiPartition
fallMaxLeft_	def/def/defiPartition.hpp	/^  double fallMaxLeft_;$/;"	m	class:defiPartition
fallMaxRight	def/def/defiPartition.cpp	/^double defiPartition::fallMaxRight() const {$/;"	f	class:defiPartition
fallMaxRight_	def/def/defiPartition.hpp	/^  double fallMaxRight_;$/;"	m	class:defiPartition
fallMax_	def/def/defiAssertion.hpp	/^  double fallMax_;    \/\/ also used to store the wired logic dist$/;"	m	class:defiAssertion
fallMax_	def/def/defiPartition.hpp	/^  double fallMax_;$/;"	m	class:defiPartition
fallMin	def/def/defiAssertion.cpp	/^double defiAssertion::fallMin() const {$/;"	f	class:defiAssertion
fallMin	def/def/defiPartition.cpp	/^double defiPartition::fallMin() const {$/;"	f	class:defiPartition
fallMinLeft	def/def/defiPartition.cpp	/^double defiPartition::fallMinLeft() const {$/;"	f	class:defiPartition
fallMinLeft_	def/def/defiPartition.hpp	/^  double fallMinLeft_;$/;"	m	class:defiPartition
fallMinRight	def/def/defiPartition.cpp	/^double defiPartition::fallMinRight() const {$/;"	f	class:defiPartition
fallMinRight_	def/def/defiPartition.hpp	/^  double fallMinRight_;$/;"	m	class:defiPartition
fallMin_	def/def/defiAssertion.hpp	/^  double fallMin_;$/;"	m	class:defiAssertion
fallMin_	def/def/defiPartition.hpp	/^  double fallMin_;$/;"	m	class:defiPartition
fallRSOne	lef/lef/lefiMacro.cpp	/^lefiTiming::fallRSOne()$/;"	f	class:lefiTiming
fallRSOne_	lef/include/lefiMacro.hpp	/^  double fallRSOne_;$/;"	m	class:lefiTiming
fallRSOne_	lef/lef/lefiMacro.hpp	/^  double fallRSOne_;$/;"	m	class:lefiTiming
fallRSTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::fallRSTwo()$/;"	f	class:lefiTiming
fallRSTwo_	lef/include/lefiMacro.hpp	/^  double fallRSTwo_;$/;"	m	class:lefiTiming
fallRSTwo_	lef/lef/lefiMacro.hpp	/^  double fallRSTwo_;$/;"	m	class:lefiTiming
fallSatcur	lef/lef/lefiMacro.cpp	/^lefiPin::fallSatcur() const$/;"	f	class:lefiPin
fallSatcur_	lef/include/lefiMacro.hpp	/^  double fallSatcur_;$/;"	m	class:lefiPin
fallSatcur_	lef/lef/lefiMacro.hpp	/^  double fallSatcur_;$/;"	m	class:lefiPin
fallSlewFive	lef/lef/lefiMacro.cpp	/^lefiTiming::fallSlewFive()$/;"	f	class:lefiTiming
fallSlewFive_	lef/include/lefiMacro.hpp	/^  double fallSlewFive_;$/;"	m	class:lefiTiming
fallSlewFive_	lef/lef/lefiMacro.hpp	/^  double fallSlewFive_;$/;"	m	class:lefiTiming
fallSlewFour	lef/lef/lefiMacro.cpp	/^lefiTiming::fallSlewFour()$/;"	f	class:lefiTiming
fallSlewFour_	lef/include/lefiMacro.hpp	/^  double fallSlewFour_;$/;"	m	class:lefiTiming
fallSlewFour_	lef/lef/lefiMacro.hpp	/^  double fallSlewFour_;$/;"	m	class:lefiTiming
fallSlewLimit	lef/lef/lefiMacro.cpp	/^lefiPin::fallSlewLimit() const$/;"	f	class:lefiPin
fallSlewLimit_	lef/include/lefiMacro.hpp	/^  double fallSlewLimit_;$/;"	m	class:lefiPin
fallSlewLimit_	lef/lef/lefiMacro.hpp	/^  double fallSlewLimit_;$/;"	m	class:lefiPin
fallSlewOne	lef/lef/lefiMacro.cpp	/^lefiTiming::fallSlewOne()$/;"	f	class:lefiTiming
fallSlewOne_	lef/include/lefiMacro.hpp	/^  double fallSlewOne_;$/;"	m	class:lefiTiming
fallSlewOne_	lef/lef/lefiMacro.hpp	/^  double fallSlewOne_;$/;"	m	class:lefiTiming
fallSlewSeven	lef/lef/lefiMacro.cpp	/^lefiTiming::fallSlewSeven()$/;"	f	class:lefiTiming
fallSlewSeven_	lef/include/lefiMacro.hpp	/^  double fallSlewSeven_;$/;"	m	class:lefiTiming
fallSlewSeven_	lef/lef/lefiMacro.hpp	/^  double fallSlewSeven_;$/;"	m	class:lefiTiming
fallSlewSix	lef/lef/lefiMacro.cpp	/^lefiTiming::fallSlewSix()$/;"	f	class:lefiTiming
fallSlewSix_	lef/include/lefiMacro.hpp	/^  double fallSlewSix_;$/;"	m	class:lefiTiming
fallSlewSix_	lef/lef/lefiMacro.hpp	/^  double fallSlewSix_;$/;"	m	class:lefiTiming
fallSlewThree	lef/lef/lefiMacro.cpp	/^lefiTiming::fallSlewThree()$/;"	f	class:lefiTiming
fallSlewThree_	lef/include/lefiMacro.hpp	/^  double fallSlewThree_;$/;"	m	class:lefiTiming
fallSlewThree_	lef/lef/lefiMacro.hpp	/^  double fallSlewThree_;$/;"	m	class:lefiTiming
fallSlewTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::fallSlewTwo()$/;"	f	class:lefiTiming
fallSlewTwo_	lef/include/lefiMacro.hpp	/^  double fallSlewTwo_;$/;"	m	class:lefiTiming
fallSlewTwo_	lef/lef/lefiMacro.hpp	/^  double fallSlewTwo_;$/;"	m	class:lefiTiming
fallThresh	lef/lef/lefiMacro.cpp	/^lefiPin::fallThresh() const$/;"	f	class:lefiPin
fallThresh_	lef/include/lefiMacro.hpp	/^  double fallThresh_;$/;"	m	class:lefiPin
fallThresh_	lef/lef/lefiMacro.hpp	/^  double fallThresh_;$/;"	m	class:lefiPin
fallToOne	lef/lef/lefiMacro.cpp	/^lefiTiming::fallToOne()$/;"	f	class:lefiTiming
fallToOne_	lef/include/lefiMacro.hpp	/^  double fallToOne_;$/;"	m	class:lefiTiming
fallToOne_	lef/lef/lefiMacro.hpp	/^  double fallToOne_;$/;"	m	class:lefiTiming
fallToTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::fallToTwo()$/;"	f	class:lefiTiming
fallToTwo_	lef/include/lefiMacro.hpp	/^  double fallToTwo_;$/;"	m	class:lefiTiming
fallToTwo_	lef/lef/lefiMacro.hpp	/^  double fallToTwo_;$/;"	m	class:lefiTiming
fallVoltage	lef/lef/lefiMacro.cpp	/^lefiPin::fallVoltage() const$/;"	f	class:lefiPin
fallVoltage_	lef/include/lefiMacro.hpp	/^  double fallVoltage_;$/;"	m	class:lefiPin
fallVoltage_	lef/lef/lefiMacro.hpp	/^  double fallVoltage_;$/;"	m	class:lefiPin
fillActiveSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::fillActiveSpacing() const$/;"	f	class:lefiLayer
fillActiveSpacing_	lef/include/lefiLayer.hpp	/^  double fillActiveSpacing_; $/;"	m	class:lefiLayer
fillActiveSpacing_	lef/lef/lefiLayer.hpp	/^  double fillActiveSpacing_; $/;"	m	class:lefiLayer
fillWarnings	def/def/defrData.hpp	/^    int  fillWarnings; $/;"	m	class:defrData
fill_def	def/def/def.y	/^fill_def: fill_rule geom_fill_rules ';'$/;"	l
fill_defs	def/def/def.y	/^fill_defs: \/\/ empty $/;"	l
fill_end	def/def/def.y	/^fill_end: K_END K_FILLS$/;"	l
fill_layer_mask_opc_opt	def/def/def.y	/^fill_layer_mask_opc_opt: \/\/ empty $/;"	l
fill_layer_opc	def/def/def.y	/^fill_layer_opc: $/;"	l
fill_mask	def/def/def.y	/^fill_mask:$/;"	l
fill_rule	def/def/def.y	/^fill_rule: '-' K_LAYER { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING$/;"	l
fill_section	def/def/def.y	/^fill_section: fill_start fill_defs fill_end ;$/;"	l
fill_start	def/def/def.y	/^fill_start: K_FILLS NUMBER ';'$/;"	l
fill_viaMask	def/def/def.y	/^fill_viaMask:$/;"	l
fill_via_mask_opc_opt	def/def/def.y	/^fill_via_mask_opc_opt: \/\/ empty $/;"	l
fill_via_opc	def/def/def.y	/^fill_via_opc:$/;"	l
fill_via_pt	def/def/def.y	/^fill_via_pt: firstPt otherPts$/;"	l
first	def/def/defiAlias.hpp	/^  int first;$/;"	m	class:defiAlias_itr
first	lef/include/lefrData.hpp	/^    int  first; $/;"	m	class:lefrData
first	lef/lef/lefrData.hpp	/^    int  first; $/;"	m	class:lefrData
firstPt	def/def/def.y	/^firstPt: pt$/;"	l
firstPt	lef/lef/lef.y	/^firstPt: pt  $/;"	l
firstTrackMask	def/def/defiRowTrack.cpp	/^int defiTrack::firstTrackMask() const {$/;"	f	class:defiTrack
firstTrackMask_	def/def/defiRowTrack.hpp	/^  int firstTrackMask_;$/;"	m	class:defiTrack
first_buffer	def/def/defrData.hpp	/^    int  first_buffer; $/;"	m	class:defrData
first_buffer	lef/include/lefrData.hpp	/^    int  first_buffer; $/;"	m	class:lefrData
first_buffer	lef/lef/lefrData.hpp	/^    int  first_buffer; $/;"	m	class:lefrData
fixedMaskCB	lef/lefdiff/diffLefRW.cpp	/^int fixedMaskCB(lefrCallbackType_e c, int fixedMask, lefiUserData ud) {$/;"	f
fixedMaskCB	lef/lefrw/lefrw.cpp	/^int fixedMaskCB(lefrCallbackType_e c, int fixedMask, lefiUserData) {$/;"	f
fixed_is_keyword	def/def/defrData.hpp	/^    int  fixed_is_keyword; $/;"	m	class:defrData
fixedbump_	def/def/defiNet.hpp	/^  int          fixedbump_;     \/\/ 5.4.1$/;"	m	class:defiNet
fixedmask	lef/lef/lef.y	/^fixedmask: K_FIXEDMASK ';'$/;"	l
floatBits_	def/def/defiScanchain.hpp	/^  int*   floatBits_;    \/\/ 5.4.1$/;"	m	class:defiScanchain
floatIn_	def/def/defiScanchain.hpp	/^  char** floatIn_;$/;"	m	class:defiScanchain
floatInst_	def/def/defiScanchain.hpp	/^  char** floatInst_;    \/\/ Array of floating names$/;"	m	class:defiScanchain
floatOut_	def/def/defiScanchain.hpp	/^  char** floatOut_;$/;"	m	class:defiScanchain
floating	def/def/defiScanchain.cpp	/^void defiScanchain::floating(int* size, char*** inst,$/;"	f	class:defiScanchain
floating_inst_list	def/def/def.y	/^floating_inst_list: \/\/ empty $/;"	l
floating_pins	def/def/def.y	/^floating_pins: \/\/ empty  $/;"	l
floorPlanName	lef/lef/lefiArray.cpp	/^lefiArray::floorPlanName(int index) const$/;"	f	class:lefiArray
floorPlansAllocated_	lef/include/lefiArray.hpp	/^  int floorPlansAllocated_;$/;"	m	class:lefiArray
floorPlansAllocated_	lef/lef/lefiArray.hpp	/^  int floorPlansAllocated_;$/;"	m	class:lefiArray
floorplanCB	def/defwrite/defwriteCbs.cpp	/^int floorplanCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
floorplan_contraints_section	def/def/def.y	/^floorplan_contraints_section: fp_start fp_stmts K_END K_FPC$/;"	l
floorplan_element	lef/lef/lef.y	/^floorplan_element:$/;"	l
floorplan_list	lef/lef/lef.y	/^floorplan_list:$/;"	l
floorplan_name	def/def/def.y	/^floorplan_name: K_FLOORPLAN { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING ';'$/;"	l
floorplan_start	lef/lef/lef.y	/^floorplan_start: K_FLOORPLAN T_STRING$/;"	l
floors_	lef/include/lefiArray.hpp	/^  lefiArrayFloorPlan** floors_;$/;"	m	class:lefiArray
floors_	lef/lef/lefiArray.hpp	/^  lefiArrayFloorPlan** floors_;$/;"	m	class:lefiArray
fn	def/defrw/defrw.cpp	/^int fn(defrCallbackType_e c, const char* h, defiUserData ud) {$/;"	f
foreign	lef/lef/lefiVia.cpp	/^lefiVia::foreign() const$/;"	f	class:lefiVia
foreignAllocated_	lef/include/lefiMacro.hpp	/^  int     foreignAllocated_;$/;"	m	class:lefiPin
foreignAllocated_	lef/include/lefiMacro.hpp	/^  int foreignAllocated_;$/;"	m	class:lefiMacro
foreignAllocated_	lef/lef/lefiMacro.hpp	/^  int     foreignAllocated_;$/;"	m	class:lefiPin
foreignAllocated_	lef/lef/lefiMacro.hpp	/^  int foreignAllocated_;$/;"	m	class:lefiMacro
foreignName	def/def/defiComponent.cpp	/^const char* defiComponent::foreignName() const {$/;"	f	class:defiComponent
foreignName	lef/lef/lefiMacro.cpp	/^lefiMacro::foreignName(int index) const$/;"	f	class:lefiMacro
foreignName	lef/lef/lefiMacro.cpp	/^lefiPin::foreignName(int index) const$/;"	f	class:lefiPin
foreignNameSize_	def/def/defiComponent.hpp	/^  int foreignNameSize_; \/\/ allocate size of foreign name$/;"	m	class:defiComponent
foreignName_	def/def/defiComponent.hpp	/^  char* foreignName_;   \/\/ name$/;"	m	class:defiComponent
foreignOri	def/def/defiComponent.cpp	/^const char* defiComponent::foreignOri() const {$/;"	f	class:defiComponent
foreignOrient	def/def/defiComponent.cpp	/^int defiComponent::foreignOrient() const {$/;"	f	class:defiComponent
foreignOrient	lef/lef/lefiMacro.cpp	/^lefiMacro::foreignOrient(int index) const$/;"	f	class:lefiMacro
foreignOrient	lef/lef/lefiMacro.cpp	/^lefiPin::foreignOrient(int index) const$/;"	f	class:lefiPin
foreignOrient	lef/lef/lefiVia.cpp	/^lefiVia::foreignOrient() const$/;"	f	class:lefiVia
foreignOrientStr	lef/lef/lefiMacro.cpp	/^lefiMacro::foreignOrientStr(int index) const$/;"	f	class:lefiMacro
foreignOrientStr	lef/lef/lefiMacro.cpp	/^lefiPin::foreignOrientStr(int index) const$/;"	f	class:lefiPin
foreignOrientStr	lef/lef/lefiVia.cpp	/^lefiVia::foreignOrientStr() const$/;"	f	class:lefiVia
foreignOrient_	lef/include/lefiMacro.hpp	/^  int*    foreignOrient_;$/;"	m	class:lefiPin
foreignOrient_	lef/include/lefiMacro.hpp	/^  int*  foreignOrient_;$/;"	m	class:lefiMacro
foreignOrient_	lef/include/lefiVia.hpp	/^  int foreignOrient_;$/;"	m	class:lefiVia
foreignOrient_	lef/lef/lefiMacro.hpp	/^  int*    foreignOrient_;$/;"	m	class:lefiPin
foreignOrient_	lef/lef/lefiMacro.hpp	/^  int*  foreignOrient_;$/;"	m	class:lefiMacro
foreignOrient_	lef/lef/lefiVia.hpp	/^  int foreignOrient_;$/;"	m	class:lefiVia
foreignX	def/def/defiComponent.cpp	/^int defiComponent::foreignX() const {$/;"	f	class:defiComponent
foreignX	lef/lef/lefiMacro.cpp	/^lefiMacro::foreignX(int index) const$/;"	f	class:lefiMacro
foreignX	lef/lef/lefiMacro.cpp	/^lefiPin::foreignX(int index) const$/;"	f	class:lefiPin
foreignX	lef/lef/lefiVia.cpp	/^lefiVia::foreignX() const$/;"	f	class:lefiVia
foreignX_	lef/include/lefiMacro.hpp	/^  double* foreignX_;$/;"	m	class:lefiMacro
foreignX_	lef/include/lefiMacro.hpp	/^  double* foreignX_;$/;"	m	class:lefiPin
foreignX_	lef/include/lefiVia.hpp	/^  double foreignX_;$/;"	m	class:lefiVia
foreignX_	lef/lef/lefiMacro.hpp	/^  double* foreignX_;$/;"	m	class:lefiMacro
foreignX_	lef/lef/lefiMacro.hpp	/^  double* foreignX_;$/;"	m	class:lefiPin
foreignX_	lef/lef/lefiVia.hpp	/^  double foreignX_;$/;"	m	class:lefiVia
foreignY	def/def/defiComponent.cpp	/^int defiComponent::foreignY() const {$/;"	f	class:defiComponent
foreignY	lef/lef/lefiMacro.cpp	/^lefiMacro::foreignY(int index) const$/;"	f	class:lefiMacro
foreignY	lef/lef/lefiMacro.cpp	/^lefiPin::foreignY(int index) const$/;"	f	class:lefiPin
foreignY	lef/lef/lefiVia.cpp	/^lefiVia::foreignY() const$/;"	f	class:lefiVia
foreignY_	lef/include/lefiMacro.hpp	/^  double* foreignY_;$/;"	m	class:lefiMacro
foreignY_	lef/include/lefiMacro.hpp	/^  double* foreignY_;$/;"	m	class:lefiPin
foreignY_	lef/include/lefiVia.hpp	/^  double foreignY_;$/;"	m	class:lefiVia
foreignY_	lef/lef/lefiMacro.hpp	/^  double* foreignY_;$/;"	m	class:lefiMacro
foreignY_	lef/lef/lefiMacro.hpp	/^  double* foreignY_;$/;"	m	class:lefiPin
foreignY_	lef/lef/lefiVia.hpp	/^  double foreignY_;$/;"	m	class:lefiVia
foreign_	lef/include/lefiMacro.hpp	/^  char**  foreign_;$/;"	m	class:lefiPin
foreign_	lef/include/lefiMacro.hpp	/^  char** foreign_;$/;"	m	class:lefiMacro
foreign_	lef/include/lefiVia.hpp	/^  char* foreign_;$/;"	m	class:lefiVia
foreign_	lef/lef/lefiMacro.hpp	/^  char**  foreign_;$/;"	m	class:lefiPin
foreign_	lef/lef/lefiMacro.hpp	/^  char** foreign_;$/;"	m	class:lefiMacro
foreign_	lef/lef/lefiVia.hpp	/^  char* foreign_;$/;"	m	class:lefiVia
fout	def/defdiff/diffDefRW.cpp	/^FILE* fout;$/;"	v
fout	def/defrw/defrw.cpp	/^FILE* fout;$/;"	v
fout	def/defwrite/defwrite.cpp	/^FILE* fout;$/;"	v
fout	def/defwrite/defwriteCbs.cpp	/^FILE* fout;$/;"	v
fout	lef/lefdiff/diffLefRW.cpp	/^FILE*   fout;$/;"	v
fout	lef/lefrw/lefrw.cpp	/^FILE* fout;$/;"	v
fout	lef/lefwrite/lefwrite.cpp	/^FILE* fout;$/;"	v
fout	lef/lefwrite/lefwriteCbs.cpp	/^FILE* fout;$/;"	v
fp_start	def/def/def.y	/^fp_start: K_FPC NUMBER ';'$/;"	l
fp_stmt	def/def/def.y	/^fp_stmt: '-' { defData->dumb_mode = 1; defData->no_num = 1;  } T_STRING h_or_v$/;"	l
fp_stmts	def/def/def.y	/^fp_stmts: \/\/ empty $/;"	l
freeCB	def/defrw/defrw.cpp	/^void freeCB(void* name) {$/;"	f
freeCB	lef/lefrw/lefrw.cpp	/^void freeCB(void* name) {$/;"	f
freeShield	def/def/defiNet.cpp	/^void defiNet::freeShield() {$/;"	f	class:defiNet
freeWire	def/def/defiNet.cpp	/^void defiNet::freeWire() {$/;"	f	class:defiNet
frequency	def/def/defiNet.cpp	/^double defiNet::frequency() const {$/;"	f	class:defiNet
frequency	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::frequency(int index) const$/;"	f	class:lefiLayerDensity
frequency	lef/lef/lefiUnits.cpp	/^lefiUnits::frequency() const$/;"	f	class:lefiUnits
frequency_	def/def/defiNet.hpp	/^  double       frequency_;     \/\/ 5.4.1$/;"	m	class:defiNet
frequency_	lef/include/lefiLayer.hpp	/^  double* frequency_;$/;"	m	class:lefiLayerDensity
frequency_	lef/include/lefiUnits.hpp	/^  double frequency_;$/;"	m	class:lefiUnits
frequency_	lef/lef/lefiLayer.hpp	/^  double* frequency_;$/;"	m	class:lefiLayerDensity
frequency_	lef/lef/lefiUnits.hpp	/^  double frequency_;$/;"	m	class:lefiUnits
from	def/def/defiIOTiming.cpp	/^const char* defiIOTiming::from() const {$/;"	f	class:defiIOTiming
fromAllocated_	lef/include/lefiMacro.hpp	/^  int fromAllocated_;$/;"	m	class:lefiTiming
fromAllocated_	lef/lef/lefiMacro.hpp	/^  int fromAllocated_;$/;"	m	class:lefiTiming
fromInst	def/def/defiTimingDisable.cpp	/^const char* defiTimingDisable::fromInst() const {$/;"	f	class:defiTimingDisable
fromInstLength_	def/def/defiTimingDisable.hpp	/^  int fromInstLength_;$/;"	m	class:defiTimingDisable
fromInst_	def/def/defiAssertion.cpp	/^  char* fromInst_;$/;"	m	struct:defiAssertPath	file:
fromInst_	def/def/defiTimingDisable.hpp	/^  char* fromInst_;  \/\/ also macro name and thru inst$/;"	m	class:defiTimingDisable
fromLength_	def/def/defiIOTiming.hpp	/^  int fromLength_;$/;"	m	class:defiIOTiming
fromPin	def/def/defiTimingDisable.cpp	/^const char* defiTimingDisable::fromPin() const {$/;"	f	class:defiTimingDisable
fromPin	lef/lef/lefiMacro.cpp	/^lefiTiming::fromPin(int index)$/;"	f	class:lefiTiming
fromPinLength_	def/def/defiTimingDisable.hpp	/^  int fromPinLength_;$/;"	m	class:defiTimingDisable
fromPin_	def/def/defiAssertion.cpp	/^  char* fromPin_;$/;"	m	struct:defiAssertPath	file:
fromPin_	def/def/defiTimingDisable.hpp	/^  char* fromPin_;  \/\/ also macro thru and thru pin$/;"	m	class:defiTimingDisable
from_	def/def/defiIOTiming.hpp	/^  char* from_;$/;"	m	class:defiIOTiming
from_	lef/include/lefiMacro.hpp	/^  char** from_;$/;"	m	class:lefiTiming
from_	lef/lef/lefiMacro.hpp	/^  char** from_;$/;"	m	class:lefiTiming
from_pin_trigger	lef/lef/lef.y	/^from_pin_trigger:$/;"	l
gAllocated_	lef/include/lefiArray.hpp	/^  int gAllocated_;$/;"	m	class:lefiArray
gAllocated_	lef/lef/lefiArray.hpp	/^  int gAllocated_;$/;"	m	class:lefiArray
gcell	lef/lef/lefiArray.cpp	/^lefiArray::gcell(int index) const$/;"	f	class:lefiArray
gcellGridWarnings	def/def/defrData.hpp	/^    int  gcellGridWarnings; $/;"	m	class:defrData
gcellPattern	lef/lef/lef.y	/^gcellPattern: K_X int_number K_DO int_number K_STEP int_number$/;"	l
gcell_	lef/include/lefiArray.hpp	/^  lefiGcellPattern** gcell_;$/;"	m	class:lefiArray
gcell_	lef/lef/lefiArray.hpp	/^  lefiGcellPattern** gcell_;$/;"	m	class:lefiArray
gcellgrid	def/def/def.y	/^gcellgrid: K_GCELLGRID track_type NUMBER $/;"	l
gcellgridCB	def/defwrite/defwriteCbs.cpp	/^int gcellgridCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
ge56almostDone	lef/include/lefrData.hpp	/^    int  ge56almostDone; \/\/ have reached the EXTENSION SECTION$/;"	m	class:lefrData
ge56almostDone	lef/lef/lefrData.hpp	/^    int  ge56almostDone; \/\/ have reached the EXTENSION SECTION$/;"	m	class:lefrData
ge56done	lef/include/lefrData.hpp	/^    int  ge56done; \/\/ a 5.6 and it has END LIBRARY statement$/;"	m	class:lefrData
ge56done	lef/lef/lefrData.hpp	/^    int  ge56done; \/\/ a 5.6 and it has END LIBRARY statement$/;"	m	class:lefrData
gen1Size_	lef/include/lefiMacro.hpp	/^  int gen1Size_;$/;"	m	class:lefiMacro
gen1Size_	lef/lef/lefiMacro.hpp	/^  int gen1Size_;$/;"	m	class:lefiMacro
gen1_	lef/include/lefiMacro.hpp	/^  char* gen1_;$/;"	m	class:lefiMacro
gen1_	lef/lef/lefiMacro.hpp	/^  char* gen1_;$/;"	m	class:lefiMacro
gen2Size_	lef/include/lefiMacro.hpp	/^  int gen2Size_;$/;"	m	class:lefiMacro
gen2Size_	lef/lef/lefiMacro.hpp	/^  int gen2Size_;$/;"	m	class:lefiMacro
gen2_	lef/include/lefiMacro.hpp	/^  char* gen2_;$/;"	m	class:lefiMacro
gen2_	lef/lef/lefiMacro.hpp	/^  char* gen2_;$/;"	m	class:lefiMacro
generate	lef/lef/lefiMacro.cpp	/^lefiMacro::generate(char    **name1,$/;"	f	class:lefiMacro
generateName	def/def/defiComponent.cpp	/^const char* defiComponent::generateName() const {$/;"	f	class:defiComponent
generateNameSize_	def/def/defiComponent.hpp	/^  int generateNameSize_;$/;"	m	class:defiComponent
generateName_	def/def/defiComponent.hpp	/^  char* generateName_;$/;"	m	class:defiComponent
generator	lef/lef/lefiMacro.cpp	/^lefiMacro::generator() const$/;"	f	class:lefiMacro
generatorSize_	lef/include/lefiMacro.hpp	/^  int generatorSize_;$/;"	m	class:lefiMacro
generatorSize_	lef/lef/lefiMacro.hpp	/^  int generatorSize_;$/;"	m	class:lefiMacro
generator_	lef/include/lefiMacro.hpp	/^  char* generator_;$/;"	m	class:lefiMacro
generator_	lef/lef/lefiMacro.hpp	/^  char* generator_;$/;"	m	class:lefiMacro
geom_fill	def/def/def.y	/^geom_fill: K_RECT pt pt$/;"	l
geom_fill_rules	def/def/def.y	/^geom_fill_rules: \/\/ empty $/;"	l
geom_slot	def/def/def.y	/^geom_slot: K_RECT pt pt$/;"	l
geom_slot_rules	def/def/def.y	/^geom_slot_rules: \/\/ empty $/;"	l
geometries	lef/lef/lef.y	/^geometries: geometry geometry_options$/;"	l
geometries	lef/lef/lefiMacro.cpp	/^lefiObstruction::geometries() const$/;"	f	class:lefiObstruction
geometries_	lef/include/lefiMacro.hpp	/^  lefiGeometries* geometries_;$/;"	m	class:lefiObstruction
geometries_	lef/lef/lefiMacro.hpp	/^  lefiGeometries* geometries_;$/;"	m	class:lefiObstruction
geometry	lef/lef/lef.y	/^geometry:$/;"	l
geometry_options	lef/lef/lef.y	/^geometry_options: \/\/ empty $/;"	l
getClass	lef/lef/lefiMisc.cpp	/^lefiGeometries::getClass(int index) const$/;"	f	class:lefiGeometries
getFlushPoint	def/def/defiPath.cpp	/^void defiPath::getFlushPoint(int* x, int* y, int* ext) const {$/;"	f	class:defiPath
getLayer	def/def/defiPath.cpp	/^const char* defiPath::getLayer() const {$/;"	f	class:defiPath
getLayer	lef/lef/lefiMisc.cpp	/^lefiGeometries::getLayer(int index) const$/;"	f	class:lefiGeometries
getLayerLef58Types	lef/lef/lefrSettings.cpp	/^lefrSettings::getLayerLef58Types(const char *type) const$/;"	f	class:lefrSettings
getLayerMinSpacing	lef/lef/lefiMisc.cpp	/^lefiGeometries::getLayerMinSpacing(int index) const$/;"	f	class:lefiGeometries
getLayerRuleWidth	lef/lef/lefiMisc.cpp	/^lefiGeometries::getLayerRuleWidth(int index) const$/;"	f	class:lefiGeometries
getMask	def/def/defiPath.cpp	/^int defiPath::getMask() const {$/;"	f	class:defiPath
getNumber	lef/lef/lefiLayer.cpp	/^lefiLayer::getNumber()$/;"	f	class:lefiLayer
getPart	def/def/defiFPC.cpp	/^void defiFPC::getPart(int index, int* corner, int* typ, char** name) const {$/;"	f	class:defiFPC
getPath	lef/lef/lefiMisc.cpp	/^lefiGeometries::getPath(int index) const$/;"	f	class:lefiGeometries
getPathIter	lef/lef/lefiMisc.cpp	/^lefiGeometries::getPathIter(int index) const$/;"	f	class:lefiGeometries
getPoint	def/def/defiPath.cpp	/^void defiPath::getPoint(int* x, int* y) const {$/;"	f	class:defiPath
getPoint	def/def/defiSite.cpp	/^struct defiPoints defiBox::getPoint() const {$/;"	f	class:defiBox
getPolygon	def/def/defiBlockage.cpp	/^struct defiPoints defiBlockage::getPolygon(int index) const {$/;"	f	class:defiBlockage
getPolygon	def/def/defiFill.cpp	/^struct defiPoints defiFill::getPolygon(int index) const {$/;"	f	class:defiFill
getPolygon	def/def/defiMisc.cpp	/^struct defiPoints defiStyles::getPolygon() const {$/;"	f	class:defiStyles
getPolygon	def/def/defiNet.cpp	/^struct defiPoints defiNet::getPolygon(int index) const {$/;"	f	class:defiNet
getPolygon	def/def/defiPinCap.cpp	/^struct defiPoints defiPin::getPolygon(int index) const {$/;"	f	class:defiPin
getPolygon	def/def/defiPinCap.cpp	/^struct defiPoints defiPinPort::getPolygon(int index) const {$/;"	f	class:defiPinPort
getPolygon	def/def/defiSlot.cpp	/^struct defiPoints defiSlot::getPolygon(int index) const {$/;"	f	class:defiSlot
getPolygon	def/def/defiVia.cpp	/^struct defiPoints defiVia::getPolygon(int index) const {$/;"	f	class:defiVia
getPolygon	lef/lef/lefiMisc.cpp	/^lefiGeometries::getPolygon(int index) const$/;"	f	class:lefiGeometries
getPolygon	lef/lef/lefiVia.cpp	/^lefiVia::getPolygon(int layerNum,$/;"	f	class:lefiVia
getPolygon	lef/lef/lefiVia.cpp	/^lefiViaLayer::getPolygon(int index) const$/;"	f	class:lefiViaLayer
getPolygonIter	lef/lef/lefiMisc.cpp	/^lefiGeometries::getPolygonIter(int index) const$/;"	f	class:lefiGeometries
getRect	lef/lef/lefiMacro.cpp	/^lefiDensity::getRect(int    index,$/;"	f	class:lefiDensity
getRect	lef/lef/lefiMisc.cpp	/^lefiGeometries::getRect(int index) const$/;"	f	class:lefiGeometries
getRectIter	lef/lef/lefiMisc.cpp	/^lefiGeometries::getRectIter(int index) const$/;"	f	class:lefiGeometries
getShape	def/def/defiPath.cpp	/^const char* defiPath::getShape() const {$/;"	f	class:defiPath
getStyle	def/def/defiPath.cpp	/^int defiPath::getStyle() const {$/;"	f	class:defiPath
getTaper	def/def/defiPath.cpp	/^int defiPath::getTaper() const {$/;"	f	class:defiPath
getTaperRule	def/def/defiPath.cpp	/^const char* defiPath::getTaperRule() const {$/;"	f	class:defiPath
getToken	lef/lef/lefrSettings.cpp	/^lefrSettings::getToken(const std::string &input, int &startIdx)$/;"	f	class:lefrSettings
getVia	def/def/defiPath.cpp	/^const char* defiPath::getVia() const {$/;"	f	class:defiPath
getVia	lef/lef/lefiMisc.cpp	/^lefiGeometries::getVia(int index) const$/;"	f	class:lefiGeometries
getViaBottomMask	def/def/defiPath.cpp	/^int defiPath::getViaBottomMask() const {$/;"	f	class:defiPath
getViaCutMask	def/def/defiPath.cpp	/^int defiPath::getViaCutMask() const {$/;"	f	class:defiPath
getViaData	def/def/defiPath.cpp	/^void defiPath::getViaData(int* numX, int* numY, int* stepX, int* stepY) const {$/;"	f	class:defiPath
getViaIter	lef/lef/lefiMisc.cpp	/^lefiGeometries::getViaIter(int index) const$/;"	f	class:lefiGeometries
getViaPts	def/def/defiFill.cpp	/^struct defiPoints defiFill::getViaPts(int index) const {$/;"	f	class:defiFill
getViaPts	def/def/defiNet.cpp	/^struct defiPoints defiNet::getViaPts(int index)const {$/;"	f	class:defiNet
getViaRect	def/def/defiPath.cpp	/^void defiPath::getViaRect(int* deltaX1, int* deltaY1, int* deltaX2, int* deltaY2) const {$/;"	f	class:defiPath
getViaRotation	def/def/defiPath.cpp	/^int defiPath::getViaRotation() const {$/;"	f	class:defiPath
getViaRotationStr	def/def/defiPath.cpp	/^const char* defiPath::getViaRotationStr() const {$/;"	f	class:defiPath
getViaTopMask	def/def/defiPath.cpp	/^int defiPath::getViaTopMask() const {$/;"	f	class:defiPath
getVirtualPoint	def/def/defiPath.cpp	/^void defiPath::getVirtualPoint(int* x, int* y) const {$/;"	f	class:defiPath
getWidth	def/def/defiPath.cpp	/^int defiPath::getWidth() const {$/;"	f	class:defiPath
getWidth	lef/lef/lefiMisc.cpp	/^lefiGeometries::getWidth(int index) const$/;"	f	class:lefiGeometries
groundSensLength_	def/def/defiPinCap.hpp	/^  int groundSensLength_;                 \/\/ 5.6$/;"	m	class:defiPin
groundSens_	def/def/defiPinCap.hpp	/^  char* groundSens_;                     \/\/ 5.6$/;"	m	class:defiPin
groundSensitivity	def/def/defiPinCap.cpp	/^const char* defiPin::groundSensitivity() const {$/;"	f	class:defiPin
groundSensitivity	lef/lef/lefiMacro.cpp	/^lefiPin::groundSensitivity() const$/;"	f	class:lefiPin
groupCB	def/defwrite/defwriteCbs.cpp	/^int groupCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
group_member	def/def/def.y	/^group_member: T_STRING$/;"	l
group_members	def/def/def.y	/^group_members: $/;"	l
group_option	def/def/def.y	/^group_option: '+' K_SOFT group_soft_options$/;"	l
group_options	def/def/def.y	/^group_options: \/\/ empty $/;"	l
group_prop	def/def/def.y	/^group_prop : T_STRING NUMBER$/;"	l
group_prop_list	def/def/def.y	/^group_prop_list : \/\/ empty $/;"	l
group_region	def/def/def.y	/^group_region: pt pt$/;"	l
group_rule	def/def/def.y	/^group_rule: start_group group_members group_options ';'$/;"	l
group_rules	def/def/def.y	/^group_rules: \/\/ empty $/;"	l
group_soft_option	def/def/def.y	/^group_soft_option: K_MAXX NUMBER$/;"	l
group_soft_options	def/def/def.y	/^group_soft_options: \/\/ empty $/;"	l
groups_end	def/def/def.y	/^groups_end: K_END K_GROUPS $/;"	l
groups_section	def/def/def.y	/^groups_section: groups_start group_rules groups_end$/;"	l
groups_start	def/def/def.y	/^groups_start: K_GROUPS NUMBER ';'$/;"	l
gsPinName_	lef/include/lefiMacro.hpp	/^  char* gsPinName_;$/;"	m	class:lefiPin
gsPinName_	lef/lef/lefiMacro.hpp	/^  char* gsPinName_;$/;"	m	class:lefiPin
h_or_v	def/def/def.y	/^h_or_v: K_HORIZONTAL $/;"	l
haloDist	def/def/defiComponent.cpp	/^int defiComponent::haloDist() const {$/;"	f	class:defiComponent
haloDist_	def/def/defiComponent.hpp	/^  int haloDist_;              \/\/ 5.7$/;"	m	class:defiComponent
haloEdges	def/def/defiComponent.cpp	/^void defiComponent::haloEdges(int* left, int* bottom, int* right, int* top) {$/;"	f	class:defiComponent
halo_soft	def/def/def.y	/^halo_soft: \/\/ 5.7 $/;"	l
hardSpacing_	def/def/defiNonDefault.hpp	/^  char    hardSpacing_;$/;"	m	class:defiNonDefault
hardSpacing_	lef/include/lefiNonDefault.hpp	/^  int    hardSpacing_;             \/\/ 5.6$/;"	m	class:lefiNonDefault
hardSpacing_	lef/lef/lefiNonDefault.hpp	/^  int    hardSpacing_;             \/\/ 5.6$/;"	m	class:lefiNonDefault
has90Symmetry	lef/lef/lefiMacro.cpp	/^lefiMacro::has90Symmetry() const$/;"	f	class:lefiMacro
has90Symmetry	lef/lef/lefiMisc.cpp	/^lefiSite::has90Symmetry() const$/;"	f	class:lefiSite
hasAPinDiffArea	def/def/defiPinCap.cpp	/^int defiPin::hasAPinDiffArea() const {$/;"	f	class:defiPin
hasAPinDiffAreaLayer	def/def/defiPinCap.cpp	/^int defiPin::hasAPinDiffAreaLayer(int i) const {$/;"	f	class:defiPin
hasAPinGateArea	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::hasAPinGateArea() const {$/;"	f	class:defiPinAntennaModel
hasAPinGateAreaLayer	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::hasAPinGateAreaLayer(int i) const {$/;"	f	class:defiPinAntennaModel
hasAPinMaxAreaCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::hasAPinMaxAreaCar() const {$/;"	f	class:defiPinAntennaModel
hasAPinMaxAreaCarLayer	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::hasAPinMaxAreaCarLayer(int i) const {$/;"	f	class:defiPinAntennaModel
hasAPinMaxCutCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::hasAPinMaxCutCar() const {$/;"	f	class:defiPinAntennaModel
hasAPinMaxCutCarLayer	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::hasAPinMaxCutCarLayer(int i) const {$/;"	f	class:defiPinAntennaModel
hasAPinMaxSideAreaCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::hasAPinMaxSideAreaCar() const {$/;"	f	class:defiPinAntennaModel
hasAPinMaxSideAreaCarLayer	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::hasAPinMaxSideAreaCarLayer(int i) const {$/;"	f	class:defiPinAntennaModel
hasAPinPartialCutArea	def/def/defiPinCap.cpp	/^int defiPin::hasAPinPartialCutArea() const {$/;"	f	class:defiPin
hasAPinPartialCutAreaLayer	def/def/defiPinCap.cpp	/^int defiPin::hasAPinPartialCutAreaLayer(int i) const {$/;"	f	class:defiPin
hasAPinPartialMetalArea	def/def/defiPinCap.cpp	/^int defiPin::hasAPinPartialMetalArea() const {$/;"	f	class:defiPin
hasAPinPartialMetalAreaLayer	def/def/defiPinCap.cpp	/^int defiPin::hasAPinPartialMetalAreaLayer(int i) const {$/;"	f	class:defiPin
hasAPinPartialMetalSideArea	def/def/defiPinCap.cpp	/^int defiPin::hasAPinPartialMetalSideArea() const {$/;"	f	class:defiPin
hasAPinPartialMetalSideAreaLayer	def/def/defiPinCap.cpp	/^int defiPin::hasAPinPartialMetalSideAreaLayer(int i) const {$/;"	f	class:defiPin
hasAccurrentDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::hasAccurrentDensity() const$/;"	f	class:lefiLayer
hasAlign	def/def/defiFPC.cpp	/^int defiFPC::hasAlign() const {$/;"	f	class:defiFPC
hasAlign_	def/def/defiFPC.hpp	/^  char hasAlign_;$/;"	m	class:defiFPC
hasAntennaArea	lef/lef/lefiLayer.cpp	/^lefiLayer::hasAntennaArea() const$/;"	f	class:lefiLayer
hasAntennaAreaDiffReducePWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaDiffReducePWL() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaFactor	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaFactor() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaFactorDUO	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaFactorDUO() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaFactorDUO_	lef/include/lefiLayer.hpp	/^  int hasAntennaAreaFactorDUO_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaFactorDUO_	lef/include/lefiLayer.hpp	/^  int hasAntennaAreaFactorDUO_;$/;"	m	class:lefiLayer
hasAntennaAreaFactorDUO_	lef/lef/lefiLayer.hpp	/^  int hasAntennaAreaFactorDUO_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaFactorDUO_	lef/lef/lefiLayer.hpp	/^  int hasAntennaAreaFactorDUO_;$/;"	m	class:lefiLayer
hasAntennaAreaFactor_	lef/include/lefiLayer.hpp	/^  int hasAntennaAreaFactor_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaFactor_	lef/include/lefiLayer.hpp	/^  int hasAntennaAreaFactor_;$/;"	m	class:lefiLayer
hasAntennaAreaFactor_	lef/lef/lefiLayer.hpp	/^  int hasAntennaAreaFactor_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaFactor_	lef/lef/lefiLayer.hpp	/^  int hasAntennaAreaFactor_;$/;"	m	class:lefiLayer
hasAntennaAreaMinusDiff	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaMinusDiff() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaMinusDiff_	lef/include/lefiLayer.hpp	/^  int hasAntennaAreaMinusDiff_;            \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaAreaMinusDiff_	lef/lef/lefiLayer.hpp	/^  int hasAntennaAreaMinusDiff_;            \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaArea_	lef/include/lefiLayer.hpp	/^  int hasAntennaArea_;$/;"	m	class:lefiLayer
hasAntennaArea_	lef/lef/lefiLayer.hpp	/^  int hasAntennaArea_;$/;"	m	class:lefiLayer
hasAntennaCumAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaCumAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumDiffAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumDiffAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaCumDiffAreaRatioPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumDiffAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
hasAntennaCumDiffAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaCumDiffAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaCumDiffAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumDiffAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumDiffSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumDiffSideAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatioPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumDiffSideAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaCumDiffSideAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaCumDiffSideAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumDiffSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumRoutingPlusCut	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumRoutingPlusCut() const$/;"	f	class:lefiAntennaModel
hasAntennaCumRoutingPlusCut_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumRoutingPlusCut_;        \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaCumRoutingPlusCut_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumRoutingPlusCut_;        \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaCumSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumSideAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaCumSideAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumSideAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaCumSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaCumSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaDiffArea	lef/lef/lefiMacro.cpp	/^lefiPin::hasAntennaDiffArea() const$/;"	f	class:lefiPin
hasAntennaDiffAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaDiffAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaDiffAreaRatioPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaDiffAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
hasAntennaDiffAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaDiffAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaDiffAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaDiffAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaDiffSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaDiffSideAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaDiffSideAreaRatioPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaDiffSideAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
hasAntennaDiffSideAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffSideAreaRatioPWL_	lef/include/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaDiffSideAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffSideAreaRatioPWL_	lef/lef/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaDiffSideAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffSideAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaDiffSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaGateArea	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasAntennaGateArea() const$/;"	f	class:lefiPinAntennaModel
hasAntennaGatePlusDiff	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaGatePlusDiff() const$/;"	f	class:lefiAntennaModel
hasAntennaGatePlusDiff_	lef/include/lefiLayer.hpp	/^  int hasAntennaGatePlusDiff_;             \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaGatePlusDiff_	lef/lef/lefiLayer.hpp	/^  int hasAntennaGatePlusDiff_;             \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaLength	lef/lef/lefiLayer.cpp	/^lefiLayer::hasAntennaLength() const$/;"	f	class:lefiLayer
hasAntennaLength_	lef/include/lefiLayer.hpp	/^  int hasAntennaLength_;$/;"	m	class:lefiLayer
hasAntennaLength_	lef/lef/lefiLayer.hpp	/^  int hasAntennaLength_;$/;"	m	class:lefiLayer
hasAntennaMaxAreaCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasAntennaMaxAreaCar() const$/;"	f	class:lefiPinAntennaModel
hasAntennaMaxCutCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasAntennaMaxCutCar() const$/;"	f	class:lefiPinAntennaModel
hasAntennaMaxSideAreaCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasAntennaMaxSideAreaCar() const$/;"	f	class:lefiPinAntennaModel
hasAntennaMetalArea	lef/lef/lefiMacro.cpp	/^lefiPin::hasAntennaMetalArea() const$/;"	f	class:lefiPin
hasAntennaMetalLength	lef/lef/lefiMacro.cpp	/^lefiPin::hasAntennaMetalLength() const$/;"	f	class:lefiPin
hasAntennaModel	lef/lef/lefiMacro.cpp	/^lefiPin::hasAntennaModel() const$/;"	f	class:lefiPin
hasAntennaPartialCutArea	lef/lef/lefiMacro.cpp	/^lefiPin::hasAntennaPartialCutArea() const$/;"	f	class:lefiPin
hasAntennaPartialMetalArea	lef/lef/lefiMacro.cpp	/^lefiPin::hasAntennaPartialMetalArea() const$/;"	f	class:lefiPin
hasAntennaPartialMetalSideArea	lef/lef/lefiMacro.cpp	/^lefiPin::hasAntennaPartialMetalSideArea() const$/;"	f	class:lefiPin
hasAntennaSideAreaFactor	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaSideAreaFactor() const$/;"	f	class:lefiAntennaModel
hasAntennaSideAreaFactorDUO	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaSideAreaFactorDUO() const$/;"	f	class:lefiAntennaModel
hasAntennaSideAreaFactorDUO_	lef/include/lefiLayer.hpp	/^  int hasAntennaSideAreaFactorDUO_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaFactorDUO_	lef/include/lefiLayer.hpp	/^  int hasAntennaSideAreaFactorDUO_;$/;"	m	class:lefiLayer
hasAntennaSideAreaFactorDUO_	lef/lef/lefiLayer.hpp	/^  int hasAntennaSideAreaFactorDUO_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaFactorDUO_	lef/lef/lefiLayer.hpp	/^  int hasAntennaSideAreaFactorDUO_;$/;"	m	class:lefiLayer
hasAntennaSideAreaFactor_	lef/include/lefiLayer.hpp	/^  int hasAntennaSideAreaFactor_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaFactor_	lef/include/lefiLayer.hpp	/^  int hasAntennaSideAreaFactor_;$/;"	m	class:lefiLayer
hasAntennaSideAreaFactor_	lef/lef/lefiLayer.hpp	/^  int hasAntennaSideAreaFactor_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaFactor_	lef/lef/lefiLayer.hpp	/^  int hasAntennaSideAreaFactor_;$/;"	m	class:lefiLayer
hasAntennaSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaSideAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaSideAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaRatio_	lef/include/lefiLayer.hpp	/^  int hasAntennaSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaRatio_	lef/lef/lefiLayer.hpp	/^  int hasAntennaSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaSize	lef/lef/lefiMacro.cpp	/^lefiPin::hasAntennaSize() const$/;"	f	class:lefiPin
hasAntennasize_	lef/include/lefiMacro.hpp	/^  char hasAntennasize_;$/;"	m	class:lefiPin
hasAntennasize_	lef/lef/lefiMacro.hpp	/^  char hasAntennasize_;$/;"	m	class:lefiPin
hasArea	lef/lef/lefiLayer.cpp	/^lefiLayer::hasArea() const$/;"	f	class:lefiLayer
hasArea_	lef/include/lefiLayer.hpp	/^  int hasArea_;$/;"	m	class:lefiLayer
hasArea_	lef/lef/lefiLayer.hpp	/^  int hasArea_;$/;"	m	class:lefiLayer
hasArraySpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::hasArraySpacing() const$/;"	f	class:lefiLayer
hasArraySpacing_	lef/include/lefiLayer.hpp	/^  int hasArraySpacing_;               \/\/ 5.7$/;"	m	class:lefiLayer
hasArraySpacing_	lef/lef/lefiLayer.hpp	/^  int hasArraySpacing_;               \/\/ 5.7$/;"	m	class:lefiLayer
hasBlkLayerComp	def/def/defrData.hpp	/^    int  hasBlkLayerComp; \/\/ only 1 BLOCKAGE\/LAYER\/COMP$/;"	m	class:defrData
hasBlkLayerSpac	def/def/defrData.hpp	/^    int  hasBlkLayerSpac; \/\/ only 1 BLOCKAGE\/LAYER\/SPACING$/;"	m	class:defrData
hasBlkLayerTypeComp	def/def/defrData.hpp	/^    int  hasBlkLayerTypeComp; \/\/ SLOTS or FILLS$/;"	m	class:defrData
hasBlkPlaceComp	def/def/defrData.hpp	/^    int  hasBlkPlaceComp; \/\/ only 1 BLOCKAGE\/PLACEMENT\/COMP$/;"	m	class:defrData
hasBlkPlaceTypeComp	def/def/defrData.hpp	/^    int  hasBlkPlaceTypeComp; \/\/ SOFT or PARTIAL$/;"	m	class:defrData
hasBusBit	def/def/defrData.hpp	/^    int  hasBusBit; \/\/ keep track BUSBITCHARS is in the file$/;"	m	class:defrData
hasBusBit	lef/include/lefrData.hpp	/^    int  hasBusBit; $/;"	m	class:lefrData
hasBusBit	lef/lef/lefrData.hpp	/^    int  hasBusBit; $/;"	m	class:lefrData
hasCap	def/def/defiNet.cpp	/^int defiNet::hasCap() const {$/;"	f	class:defiNet
hasCapMultiplier	lef/lef/lefiLayer.cpp	/^lefiLayer::hasCapMultiplier() const$/;"	f	class:lefiLayer
hasCapMultiplier_	lef/include/lefiLayer.hpp	/^  int hasCapMultiplier_;$/;"	m	class:lefiLayer
hasCapMultiplier_	lef/lef/lefiLayer.hpp	/^  int hasCapMultiplier_;$/;"	m	class:lefiLayer
hasCap_	def/def/defiNet.hpp	/^  char hasCap_;         \/\/ file supplied a capacitance value$/;"	m	class:defiNet
hasCapacitance	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasCapacitance() const {$/;"	f	class:defiIOTiming
hasCapacitance	lef/lef/lefiLayer.cpp	/^lefiLayer::hasCapacitance() const$/;"	f	class:lefiLayer
hasCapacitance	lef/lef/lefiMacro.cpp	/^lefiPin::hasCapacitance() const$/;"	f	class:lefiPin
hasCapacitance	lef/lef/lefiUnits.cpp	/^lefiUnits::hasCapacitance() const$/;"	f	class:lefiUnits
hasCapacitanceArray	lef/lef/lefiLayer.cpp	/^lefiLayer::hasCapacitanceArray() const$/;"	f	class:lefiLayer
hasCapacitance_	def/def/defiIOTiming.hpp	/^  char hasCapacitance_;$/;"	m	class:defiIOTiming
hasCapacitance_	lef/include/lefiLayer.hpp	/^  int hasCapacitance_;$/;"	m	class:lefiLayer
hasCapacitance_	lef/include/lefiMacro.hpp	/^  char hasCapacitance_;$/;"	m	class:lefiPin
hasCapacitance_	lef/include/lefiNonDefault.hpp	/^  char*   hasCapacitance_;$/;"	m	class:lefiNonDefault
hasCapacitance_	lef/include/lefiUnits.hpp	/^  int hasCapacitance_;$/;"	m	class:lefiUnits
hasCapacitance_	lef/lef/lefiLayer.hpp	/^  int hasCapacitance_;$/;"	m	class:lefiLayer
hasCapacitance_	lef/lef/lefiMacro.hpp	/^  char hasCapacitance_;$/;"	m	class:lefiPin
hasCapacitance_	lef/lef/lefiNonDefault.hpp	/^  char*   hasCapacitance_;$/;"	m	class:lefiNonDefault
hasCapacitance_	lef/lef/lefiUnits.hpp	/^  int hasCapacitance_;$/;"	m	class:lefiUnits
hasClass	lef/lef/lefiMacro.cpp	/^lefiMacro::hasClass() const$/;"	f	class:lefiMacro
hasClass	lef/lef/lefiMisc.cpp	/^lefiSite::hasClass() const$/;"	f	class:lefiSite
hasClass_	lef/include/lefiMacro.hpp	/^  char hasClass_;$/;"	m	class:lefiMacro
hasClass_	lef/include/lefiMisc.hpp	/^  int    hasClass_;$/;"	m	class:lefiSite
hasClass_	lef/lef/lefiMacro.hpp	/^  char hasClass_;$/;"	m	class:lefiMacro
hasClass_	lef/lef/lefiMisc.hpp	/^  int    hasClass_;$/;"	m	class:lefiSite
hasClockType	lef/lef/lefiMacro.cpp	/^lefiMacro::hasClockType() const$/;"	f	class:lefiMacro
hasClockType_	lef/include/lefiMacro.hpp	/^  char hasClockType_;$/;"	m	class:lefiMacro
hasClockType_	lef/lef/lefiMacro.hpp	/^  char hasClockType_;$/;"	m	class:lefiMacro
hasCommonInPin	def/def/defiScanchain.cpp	/^int defiScanchain::hasCommonInPin() const {$/;"	f	class:defiScanchain
hasCommonOutPin	def/def/defiScanchain.cpp	/^int defiScanchain::hasCommonOutPin() const {$/;"	f	class:defiScanchain
hasComponent	def/def/defiBlockage.cpp	/^int defiBlockage::hasComponent() const {$/;"	f	class:defiBlockage
hasComponent_	def/def/defiBlockage.hpp	/^  int    hasComponent_;$/;"	m	class:defiBlockage
hasCurrent	lef/lef/lefiUnits.cpp	/^lefiUnits::hasCurrent() const$/;"	f	class:lefiUnits
hasCurrentDensityArray	lef/lef/lefiLayer.cpp	/^lefiLayer::hasCurrentDensityArray() const$/;"	f	class:lefiLayer
hasCurrentDensityPoint	lef/lef/lefiLayer.cpp	/^lefiLayer::hasCurrentDensityPoint() const$/;"	f	class:lefiLayer
hasCurrentDensityPoint_	lef/include/lefiLayer.hpp	/^  int hasCurrentDensityPoint_;$/;"	m	class:lefiLayer
hasCurrentDensityPoint_	lef/lef/lefiLayer.hpp	/^  int hasCurrentDensityPoint_;$/;"	m	class:lefiLayer
hasCurrentSource	lef/lef/lefiMacro.cpp	/^lefiPin::hasCurrentSource() const$/;"	f	class:lefiPin
hasCurrentSource_	lef/include/lefiMacro.hpp	/^  char hasCurrentSource_;$/;"	m	class:lefiPin
hasCurrentSource_	lef/lef/lefiMacro.hpp	/^  char hasCurrentSource_;$/;"	m	class:lefiPin
hasCurrent_	lef/include/lefiUnits.hpp	/^  int hasCurrent_;$/;"	m	class:lefiUnits
hasCurrent_	lef/lef/lefiUnits.hpp	/^  int hasCurrent_;$/;"	m	class:lefiUnits
hasCutPattern	def/def/defiVia.cpp	/^int defiVia::hasCutPattern() const {$/;"	f	class:defiVia
hasCutPattern	lef/lef/lefiVia.cpp	/^lefiVia::hasCutPattern() const$/;"	f	class:lefiVia
hasCutPattern_	def/def/defiVia.hpp	/^  int   hasCutPattern_;     \/\/ 5.6$/;"	m	class:defiVia
hasData	lef/lef/lefiMacro.cpp	/^lefiTiming::hasData()$/;"	f	class:lefiTiming
hasDatabase	lef/lef/lefiUnits.cpp	/^lefiUnits::hasDatabase() const$/;"	f	class:lefiUnits
hasDatabase_	lef/include/lefiUnits.hpp	/^  int hasDatabase_;$/;"	m	class:lefiUnits
hasDatabase_	lef/lef/lefiUnits.hpp	/^  int hasDatabase_;$/;"	m	class:lefiUnits
hasDccurrentDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::hasDccurrentDensity() const$/;"	f	class:lefiLayer
hasDefault	lef/lef/lefiVia.cpp	/^lefiVia::hasDefault() const$/;"	f	class:lefiVia
hasDefault	lef/lef/lefiViaRule.cpp	/^lefiViaRule::hasDefault() const$/;"	f	class:lefiViaRule
hasDefaultCap	lef/lef/lefiArray.cpp	/^lefiArray::hasDefaultCap() const$/;"	f	class:lefiArray
hasDefault_	lef/include/lefiArray.hpp	/^  int hasDefault_;$/;"	m	class:lefiArray
hasDefault_	lef/include/lefiVia.hpp	/^  int hasDefault_;$/;"	m	class:lefiVia
hasDefault_	lef/include/lefiViaRule.hpp	/^  int hasDefault_;$/;"	m	class:lefiViaRule
hasDefault_	lef/lef/lefiArray.hpp	/^  int hasDefault_;$/;"	m	class:lefiArray
hasDefault_	lef/lef/lefiVia.hpp	/^  int hasDefault_;$/;"	m	class:lefiVia
hasDefault_	lef/lef/lefiViaRule.hpp	/^  int hasDefault_;$/;"	m	class:lefiViaRule
hasDelay	lef/lef/lefiMacro.cpp	/^lefiTiming::hasDelay()$/;"	f	class:lefiTiming
hasDelay_	lef/include/lefiMacro.hpp	/^  int hasDelay_;$/;"	m	class:lefiTiming
hasDelay_	lef/lef/lefiMacro.hpp	/^  int hasDelay_;$/;"	m	class:lefiTiming
hasDensityCheckStep	lef/lef/lefiLayer.cpp	/^lefiLayer::hasDensityCheckStep() const$/;"	f	class:lefiLayer
hasDensityCheckStep_	lef/include/lefiLayer.hpp	/^  int hasDensityCheckStep_;$/;"	m	class:lefiLayer
hasDensityCheckStep_	lef/lef/lefiLayer.hpp	/^  int hasDensityCheckStep_;$/;"	m	class:lefiLayer
hasDensityCheckWindow	lef/lef/lefiLayer.cpp	/^lefiLayer::hasDensityCheckWindow() const$/;"	f	class:lefiLayer
hasDensityCheckWindow_	lef/include/lefiLayer.hpp	/^  int hasDensityCheckWindow_;$/;"	m	class:lefiLayer
hasDensityCheckWindow_	lef/lef/lefiLayer.hpp	/^  int hasDensityCheckWindow_;$/;"	m	class:lefiLayer
hasDes	def/def/defrData.hpp	/^    int  hasDes; \/\/ keep track DESIGN is in the file$/;"	m	class:defrData
hasDesignRuleWidth	def/def/defiBlockage.cpp	/^int defiBlockage::hasDesignRuleWidth() const {$/;"	f	class:defiBlockage
hasDiagMinEdgeLength	lef/lef/lefiLayer.cpp	/^lefiLayer::hasDiagMinEdgeLength() const$/;"	f	class:lefiLayer
hasDiagPitch	lef/lef/lefiLayer.cpp	/^lefiLayer::hasDiagPitch() const$/;"	f	class:lefiLayer
hasDiagPitch_	lef/include/lefiLayer.hpp	/^  int hasDiagPitch_;                  \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagPitch_	lef/lef/lefiLayer.hpp	/^  int hasDiagPitch_;                  \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::hasDiagSpacing() const$/;"	f	class:lefiLayer
hasDiagSpacing_	lef/include/lefiLayer.hpp	/^  int hasDiagSpacing_;                \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagSpacing_	lef/lef/lefiLayer.hpp	/^  int hasDiagSpacing_;                \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasDiagWidth() const$/;"	f	class:lefiLayer
hasDiagWidth_	def/def/defiNonDefault.hpp	/^  char*   hasDiagWidth_;$/;"	m	class:defiNonDefault
hasDiagWidth_	lef/include/lefiLayer.hpp	/^  int hasDiagWidth_;                  \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagWidth_	lef/include/lefiNonDefault.hpp	/^  char*   hasDiagWidth_;           \/\/ 5.6$/;"	m	class:lefiNonDefault
hasDiagWidth_	lef/lef/lefiLayer.hpp	/^  int hasDiagWidth_;                  \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagWidth_	lef/lef/lefiNonDefault.hpp	/^  char*   hasDiagWidth_;           \/\/ 5.6$/;"	m	class:lefiNonDefault
hasDirection	def/def/defiPinCap.cpp	/^int defiPin::hasDirection() const {$/;"	f	class:defiPin
hasDirection	lef/include/lefrData.hpp	/^    int  hasDirection; $/;"	m	class:lefrData
hasDirection	lef/lef/lefiLayer.cpp	/^lefiLayer::hasDirection() const$/;"	f	class:lefiLayer
hasDirection	lef/lef/lefiMacro.cpp	/^lefiPin::hasDirection() const$/;"	f	class:lefiPin
hasDirection	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasDirection() const$/;"	f	class:lefiViaRuleLayer
hasDirection	lef/lef/lefrData.hpp	/^    int  hasDirection; $/;"	m	class:lefrData
hasDirection_	def/def/defiPinCap.hpp	/^  char hasDirection_;$/;"	m	class:defiPin
hasDirection_	lef/include/lefiLayer.hpp	/^  int hasDirection_;$/;"	m	class:lefiLayer
hasDirection_	lef/include/lefiMacro.hpp	/^  char hasDirection_;$/;"	m	class:lefiPin
hasDirection_	lef/lef/lefiLayer.hpp	/^  int hasDirection_;$/;"	m	class:lefiLayer
hasDirection_	lef/lef/lefiMacro.hpp	/^  char hasDirection_;$/;"	m	class:lefiPin
hasDivChar	def/def/defrData.hpp	/^    int  hasDivChar; \/\/ keep track DIVIDERCHAR is in the file$/;"	m	class:defrData
hasDivChar	lef/include/lefrData.hpp	/^    int  hasDivChar; $/;"	m	class:lefrData
hasDivChar	lef/lef/lefrData.hpp	/^    int  hasDivChar; $/;"	m	class:lefrData
hasDo	def/def/defiRowTrack.cpp	/^int defiRow::hasDo() const {$/;"	f	class:defiRow
hasDoStep	def/def/defiRowTrack.cpp	/^int defiRow::hasDoStep() const {$/;"	f	class:defiRow
hasDoStep	def/def/defrData.hpp	/^    int  hasDoStep; $/;"	m	class:defrData
hasDoStep_	def/def/defiRowTrack.hpp	/^  int    hasDoStep_;$/;"	m	class:defiRow
hasDo_	def/def/defiRowTrack.hpp	/^  int    hasDo_;$/;"	m	class:defiRow
hasDriveCell	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasDriveCell() const {$/;"	f	class:defiIOTiming
hasDriveCell_	def/def/defiIOTiming.hpp	/^  char hasDriveCell_;$/;"	m	class:defiIOTiming
hasEEQ	def/def/defiComponent.cpp	/^int defiComponent::hasEEQ() const {$/;"	f	class:defiComponent
hasEEQ	lef/lef/lefiMacro.cpp	/^lefiMacro::hasEEQ() const$/;"	f	class:lefiMacro
hasEEQ_	def/def/defiComponent.hpp	/^  char hasEEQ_;         \/\/ the file supplied an eeq$/;"	m	class:defiComponent
hasEEQ_	lef/include/lefiMacro.hpp	/^  char hasEEQ_;$/;"	m	class:lefiMacro
hasEEQ_	lef/lef/lefiMacro.hpp	/^  char hasEEQ_;$/;"	m	class:lefiMacro
hasEdgeCap	lef/lef/lefiLayer.cpp	/^lefiLayer::hasEdgeCap() const$/;"	f	class:lefiLayer
hasEdgeCap_	lef/include/lefiLayer.hpp	/^  int hasEdgeCap_;$/;"	m	class:lefiLayer
hasEdgeCap_	lef/include/lefiNonDefault.hpp	/^  char*   hasEdgeCap_;$/;"	m	class:lefiNonDefault
hasEdgeCap_	lef/lef/lefiLayer.hpp	/^  int hasEdgeCap_;$/;"	m	class:lefiLayer
hasEdgeCap_	lef/lef/lefiNonDefault.hpp	/^  char*   hasEdgeCap_;$/;"	m	class:lefiNonDefault
hasEnclosure	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasEnclosure() const$/;"	f	class:lefiViaRuleLayer
hasEnclosureExceptExtraCut	lef/lef/lefiLayer.cpp	/^lefiLayer::hasEnclosureExceptExtraCut(int index) const$/;"	f	class:lefiLayer
hasEnclosureMinLength	lef/lef/lefiLayer.cpp	/^lefiLayer::hasEnclosureMinLength(int index) const$/;"	f	class:lefiLayer
hasEnclosureRule	lef/lef/lefiLayer.cpp	/^lefiLayer::hasEnclosureRule(int index) const$/;"	f	class:lefiLayer
hasEnclosureWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasEnclosureWidth(int index) const$/;"	f	class:lefiLayer
hasEqual	def/def/defiFPC.cpp	/^int defiFPC::hasEqual() const {$/;"	f	class:defiFPC
hasEqual_	def/def/defiFPC.hpp	/^  char hasEqual_;$/;"	m	class:defiFPC
hasExceptpgnet	def/def/defiBlockage.cpp	/^int defiBlockage::hasExceptpgnet() const {$/;"	f	class:defiBlockage
hasExceptpgnet_	def/def/defiBlockage.hpp	/^  int    hasExceptpgnet_ ;               \/\/ 5.7$/;"	m	class:defiBlockage
hasFallAtt1	lef/lef/lefiMacro.cpp	/^lefiTiming::hasFallAtt1()$/;"	f	class:lefiTiming
hasFallAtt1_	lef/include/lefiMacro.hpp	/^  int hasFallAtt1_;$/;"	m	class:lefiTiming
hasFallAtt1_	lef/lef/lefiMacro.hpp	/^  int hasFallAtt1_;$/;"	m	class:lefiTiming
hasFallCS	lef/lef/lefiMacro.cpp	/^lefiTiming::hasFallCS()$/;"	f	class:lefiTiming
hasFallCS_	lef/include/lefiMacro.hpp	/^  int hasFallCS_;$/;"	m	class:lefiTiming
hasFallCS_	lef/lef/lefiMacro.hpp	/^  int hasFallCS_;$/;"	m	class:lefiTiming
hasFallIntrinsic	lef/lef/lefiMacro.cpp	/^lefiTiming::hasFallIntrinsic()$/;"	f	class:lefiTiming
hasFallIntrinsic_	lef/include/lefiMacro.hpp	/^  int hasFallIntrinsic_;$/;"	m	class:lefiTiming
hasFallIntrinsic_	lef/lef/lefiMacro.hpp	/^  int hasFallIntrinsic_;$/;"	m	class:lefiTiming
hasFallMax	def/def/defiAssertion.cpp	/^int defiAssertion::hasFallMax() const {$/;"	f	class:defiAssertion
hasFallMax	def/def/defiPartition.cpp	/^int defiPartition::hasFallMax() const {$/;"	f	class:defiPartition
hasFallMaxRange	def/def/defiPartition.cpp	/^int defiPartition::hasFallMaxRange() const {$/;"	f	class:defiPartition
hasFallMaxRange_	def/def/defiPartition.hpp	/^  char hasFallMaxRange_;$/;"	m	class:defiPartition
hasFallMax_	def/def/defiAssertion.hpp	/^  char hasFallMax_;$/;"	m	class:defiAssertion
hasFallMax_	def/def/defiPartition.hpp	/^  char hasFallMax_;$/;"	m	class:defiPartition
hasFallMin	def/def/defiAssertion.cpp	/^int defiAssertion::hasFallMin() const {$/;"	f	class:defiAssertion
hasFallMin	def/def/defiPartition.cpp	/^int defiPartition::hasFallMin() const {$/;"	f	class:defiPartition
hasFallMinRange	def/def/defiPartition.cpp	/^int defiPartition::hasFallMinRange() const {$/;"	f	class:defiPartition
hasFallMinRange_	def/def/defiPartition.hpp	/^  char hasFallMinRange_;$/;"	m	class:defiPartition
hasFallMin_	def/def/defiAssertion.hpp	/^  char hasFallMin_;$/;"	m	class:defiAssertion
hasFallMin_	def/def/defiPartition.hpp	/^  char hasFallMin_;$/;"	m	class:defiPartition
hasFallRS	lef/lef/lefiMacro.cpp	/^lefiTiming::hasFallRS()$/;"	f	class:lefiTiming
hasFallRS_	lef/include/lefiMacro.hpp	/^  int hasFallRS_;$/;"	m	class:lefiTiming
hasFallRS_	lef/lef/lefiMacro.hpp	/^  int hasFallRS_;$/;"	m	class:lefiTiming
hasFallSatcur	lef/lef/lefiMacro.cpp	/^lefiPin::hasFallSatcur() const$/;"	f	class:lefiPin
hasFallSatcur_	lef/include/lefiMacro.hpp	/^  char hasFallSatcur_;$/;"	m	class:lefiPin
hasFallSatcur_	lef/lef/lefiMacro.hpp	/^  char hasFallSatcur_;$/;"	m	class:lefiPin
hasFallSlew	lef/lef/lefiMacro.cpp	/^lefiTiming::hasFallSlew()$/;"	f	class:lefiTiming
hasFallSlew2	lef/lef/lefiMacro.cpp	/^lefiTiming::hasFallSlew2()$/;"	f	class:lefiTiming
hasFallSlew2_	lef/include/lefiMacro.hpp	/^  int hasFallSlew2_;$/;"	m	class:lefiTiming
hasFallSlew2_	lef/lef/lefiMacro.hpp	/^  int hasFallSlew2_;$/;"	m	class:lefiTiming
hasFallSlewLimit	lef/lef/lefiMacro.cpp	/^lefiPin::hasFallSlewLimit() const$/;"	f	class:lefiPin
hasFallSlewLimit_	lef/include/lefiMacro.hpp	/^  char hasFallSlewLimit_;$/;"	m	class:lefiPin
hasFallSlewLimit_	lef/lef/lefiMacro.hpp	/^  char hasFallSlewLimit_;$/;"	m	class:lefiPin
hasFallSlew_	lef/include/lefiMacro.hpp	/^  int hasFallSlew_;$/;"	m	class:lefiTiming
hasFallSlew_	lef/lef/lefiMacro.hpp	/^  int hasFallSlew_;$/;"	m	class:lefiTiming
hasFallThresh	lef/lef/lefiMacro.cpp	/^lefiPin::hasFallThresh() const$/;"	f	class:lefiPin
hasFallThresh_	lef/include/lefiMacro.hpp	/^  char hasFallThresh_;$/;"	m	class:lefiPin
hasFallThresh_	lef/lef/lefiMacro.hpp	/^  char hasFallThresh_;$/;"	m	class:lefiPin
hasFallTo	lef/lef/lefiMacro.cpp	/^lefiTiming::hasFallTo()$/;"	f	class:lefiTiming
hasFallTo_	lef/include/lefiMacro.hpp	/^  int hasFallTo_;$/;"	m	class:lefiTiming
hasFallTo_	lef/lef/lefiMacro.hpp	/^  int hasFallTo_;$/;"	m	class:lefiTiming
hasFallVoltage	lef/lef/lefiMacro.cpp	/^lefiPin::hasFallVoltage() const$/;"	f	class:lefiPin
hasFallVoltage_	lef/include/lefiMacro.hpp	/^  char hasFallVoltage_;$/;"	m	class:lefiPin
hasFallVoltage_	lef/lef/lefiMacro.hpp	/^  char hasFallVoltage_;$/;"	m	class:lefiPin
hasFatalError	def/def/defrData.hpp	/^    int  hasFatalError; \/\/ don't report errors after the file end.$/;"	m	class:defrData
hasFatalError	lef/include/lefrData.hpp	/^    int  hasFatalError; \/\/ don't report errors after the file end.$/;"	m	class:lefrData
hasFatalError	lef/lef/lefrData.hpp	/^    int  hasFatalError; \/\/ don't report errors after the file end.$/;"	m	class:lefrData
hasFillActiveSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::hasFillActiveSpacing() const$/;"	f	class:lefiLayer
hasFillActiveSpacing_	lef/include/lefiLayer.hpp	/^  int hasFillActiveSpacing_;$/;"	m	class:lefiLayer
hasFillActiveSpacing_	lef/lef/lefiLayer.hpp	/^  int hasFillActiveSpacing_;$/;"	m	class:lefiLayer
hasFills	def/def/defiBlockage.cpp	/^int defiBlockage::hasFills() const {$/;"	f	class:defiBlockage
hasFills_	def/def/defiBlockage.hpp	/^  int    hasFills_;$/;"	m	class:defiBlockage
hasFixedMask	lef/include/lefrData.hpp	/^    int  hasFixedMask; $/;"	m	class:lefrData
hasFixedMask	lef/lef/lefrData.hpp	/^    int  hasFixedMask; $/;"	m	class:lefrData
hasFixedbump	def/def/defiNet.cpp	/^int defiNet::hasFixedbump() const {$/;"	f	class:defiNet
hasFloating	def/def/defiScanchain.cpp	/^int defiScanchain::hasFloating() const {$/;"	f	class:defiScanchain
hasForeign	lef/lef/lefiMacro.cpp	/^lefiMacro::hasForeign() const$/;"	f	class:lefiMacro
hasForeign	lef/lef/lefiMacro.cpp	/^lefiPin::hasForeign() const$/;"	f	class:lefiPin
hasForeign	lef/lef/lefiVia.cpp	/^lefiVia::hasForeign() const$/;"	f	class:lefiVia
hasForeignName	def/def/defiComponent.cpp	/^int defiComponent::hasForeignName() const {$/;"	f	class:defiComponent
hasForeignName_	def/def/defiComponent.hpp	/^  char hasForeignName_; \/\/ the file supplied a foreign name$/;"	m	class:defiComponent
hasForeignOrient	lef/lef/lefiMacro.cpp	/^lefiMacro::hasForeignOrient(int index) const$/;"	f	class:lefiMacro
hasForeignOrient	lef/lef/lefiMacro.cpp	/^lefiPin::hasForeignOrient(int index) const$/;"	f	class:lefiPin
hasForeignOrient	lef/lef/lefiVia.cpp	/^lefiVia::hasForeignOrient() const$/;"	f	class:lefiVia
hasForeignOrient_	lef/include/lefiMacro.hpp	/^  int*    hasForeignOrient_;$/;"	m	class:lefiPin
hasForeignOrient_	lef/lef/lefiMacro.hpp	/^  int*    hasForeignOrient_;$/;"	m	class:lefiPin
hasForeignOrigin	lef/lef/lefiMacro.cpp	/^lefiMacro::hasForeignOrigin(int index) const$/;"	f	class:lefiMacro
hasForeignOrigin_	lef/include/lefiMacro.hpp	/^  int*  hasForeignOrigin_;$/;"	m	class:lefiMacro
hasForeignOrigin_	lef/lef/lefiMacro.hpp	/^  int*  hasForeignOrigin_;$/;"	m	class:lefiMacro
hasForeignPnt	lef/lef/lefiVia.cpp	/^lefiVia::hasForeignPnt() const$/;"	f	class:lefiVia
hasForeignPnt_	lef/include/lefiVia.hpp	/^  int hasForeignPnt_;$/;"	m	class:lefiVia
hasForeignPnt_	lef/lef/lefiVia.hpp	/^  int hasForeignPnt_;$/;"	m	class:lefiVia
hasForeignPoint	lef/lef/lefiMacro.cpp	/^lefiMacro::hasForeignPoint(int index) const$/;"	f	class:lefiMacro
hasForeignPoint	lef/lef/lefiMacro.cpp	/^lefiPin::hasForeignPoint(int index) const$/;"	f	class:lefiPin
hasForeignPoint_	lef/include/lefiMacro.hpp	/^  int*    hasForeignPoint_;$/;"	m	class:lefiPin
hasForeignPoint_	lef/include/lefiMacro.hpp	/^  int*  hasForeignPoint_;$/;"	m	class:lefiMacro
hasForeignPoint_	lef/lef/lefiMacro.hpp	/^  int*    hasForeignPoint_;$/;"	m	class:lefiPin
hasForeignPoint_	lef/lef/lefiMacro.hpp	/^  int*  hasForeignPoint_;$/;"	m	class:lefiMacro
hasFori	def/def/defiComponent.cpp	/^int defiComponent::hasFori() const {$/;"	f	class:defiComponent
hasFori_	def/def/defiComponent.hpp	/^  char hasFori_;        \/\/ the file supplied a foreign orig name$/;"	m	class:defiComponent
hasFrequency	def/def/defiNet.cpp	/^int defiNet::hasFrequency() const {$/;"	f	class:defiNet
hasFrequency	lef/lef/lefiUnits.cpp	/^lefiUnits::hasFrequency() const$/;"	f	class:lefiUnits
hasFrequency_	def/def/defiNet.hpp	/^  char hasFrequency_;   \/\/ file supplied a frequency value$/;"	m	class:defiNet
hasFrequency_	lef/include/lefiUnits.hpp	/^  int hasFrequency_;$/;"	m	class:lefiUnits
hasFrequency_	lef/lef/lefiUnits.hpp	/^  int hasFrequency_;$/;"	m	class:lefiUnits
hasFrom	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasFrom() const {$/;"	f	class:defiIOTiming
hasFromTo	def/def/defiTimingDisable.cpp	/^int defiTimingDisable::hasFromTo() const {$/;"	f	class:defiTimingDisable
hasFromTo_	def/def/defiTimingDisable.hpp	/^  int hasFromTo_;$/;"	m	class:defiTimingDisable
hasFrom_	def/def/defiIOTiming.hpp	/^  char hasFrom_;$/;"	m	class:defiIOTiming
hasGenerate	def/def/defiComponent.cpp	/^int defiComponent::hasGenerate() const {$/;"	f	class:defiComponent
hasGenerate	lef/lef/lefiMacro.cpp	/^lefiMacro::hasGenerate() const$/;"	f	class:lefiMacro
hasGenerate	lef/lef/lefiViaRule.cpp	/^lefiViaRule::hasGenerate() const$/;"	f	class:lefiViaRule
hasGenerate_	def/def/defiComponent.hpp	/^  char hasGenerate_;    \/\/ the file supplied an generate name and macro name$/;"	m	class:defiComponent
hasGenerate_	lef/include/lefiMacro.hpp	/^  char hasGenerate_;$/;"	m	class:lefiMacro
hasGenerate_	lef/include/lefiViaRule.hpp	/^  int hasGenerate_;$/;"	m	class:lefiViaRule
hasGenerate_	lef/lef/lefiMacro.hpp	/^  char hasGenerate_;$/;"	m	class:lefiMacro
hasGenerate_	lef/lef/lefiViaRule.hpp	/^  int hasGenerate_;$/;"	m	class:lefiViaRule
hasGenerated	lef/lef/lefiVia.cpp	/^lefiVia::hasGenerated() const$/;"	f	class:lefiVia
hasGenerated_	lef/include/lefiVia.hpp	/^  int hasGenerated_;$/;"	m	class:lefiVia
hasGenerated_	lef/lef/lefiVia.hpp	/^  int hasGenerated_;$/;"	m	class:lefiVia
hasGenerator	lef/lef/lefiMacro.cpp	/^lefiMacro::hasGenerator() const$/;"	f	class:lefiMacro
hasGenerator_	lef/include/lefiMacro.hpp	/^  char hasGenerator_;$/;"	m	class:lefiMacro
hasGenerator_	lef/lef/lefiMacro.hpp	/^  char hasGenerator_;$/;"	m	class:lefiMacro
hasGeoLayer	lef/include/lefrData.hpp	/^    int  hasGeoLayer; $/;"	m	class:lefrData
hasGeoLayer	lef/lef/lefrData.hpp	/^    int  hasGeoLayer; $/;"	m	class:lefrData
hasGroundSens_	def/def/defiPinCap.hpp	/^  char hasGroundSens_;                   \/\/ 5.6$/;"	m	class:defiPin
hasGroundSensitivity	def/def/defiPinCap.cpp	/^int defiPin::hasGroundSensitivity() const {$/;"	f	class:defiPin
hasGroundSensitivity	lef/lef/lefiMacro.cpp	/^lefiPin::hasGroundSensitivity() const$/;"	f	class:lefiPin
hasHalo	def/def/defiComponent.cpp	/^int defiComponent::hasHalo() const {$/;"	f	class:defiComponent
hasHaloSoft	def/def/defiComponent.cpp	/^int defiComponent::hasHaloSoft() const {$/;"	f	class:defiComponent
hasHaloSoft_	def/def/defiComponent.hpp	/^  int hasHaloSoft_;           \/\/ 5.7$/;"	m	class:defiComponent
hasHalo_	def/def/defiComponent.hpp	/^  int hasHalo_;$/;"	m	class:defiComponent
hasHardspacing	def/def/defiNonDefault.cpp	/^int defiNonDefault::hasHardspacing() const {$/;"	f	class:defiNonDefault
hasHardspacing	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::hasHardspacing() const$/;"	f	class:lefiNonDefault
hasHeight	lef/lef/lefiLayer.cpp	/^lefiLayer::hasHeight() const$/;"	f	class:lefiLayer
hasHeight_	lef/include/lefiLayer.hpp	/^  int hasHeight_;$/;"	m	class:lefiLayer
hasHeight_	lef/lef/lefiLayer.hpp	/^  int hasHeight_;$/;"	m	class:lefiLayer
hasInMargin	lef/lef/lefiMacro.cpp	/^lefiPin::hasInMargin() const$/;"	f	class:lefiPin
hasInMargin_	lef/include/lefiMacro.hpp	/^  char hasInMargin_;$/;"	m	class:lefiPin
hasInMargin_	lef/lef/lefiMacro.hpp	/^  char hasInMargin_;$/;"	m	class:lefiPin
hasInfluence	lef/include/lefrData.hpp	/^    int  hasInfluence; $/;"	m	class:lefrData
hasInfluence	lef/lef/lefrData.hpp	/^    int  hasInfluence; $/;"	m	class:lefrData
hasInfluence_	lef/include/lefiLayer.hpp	/^  int hasInfluence_;$/;"	m	class:lefiSpacingTable
hasInfluence_	lef/lef/lefiLayer.hpp	/^  int hasInfluence_;$/;"	m	class:lefiSpacingTable
hasLEQ	lef/lef/lefiMacro.cpp	/^lefiMacro::hasLEQ() const$/;"	f	class:lefiMacro
hasLEQ	lef/lef/lefiMacro.cpp	/^lefiPin::hasLEQ() const$/;"	f	class:lefiPin
hasLEQ_	lef/include/lefiMacro.hpp	/^  char hasLEQ_;$/;"	m	class:lefiMacro
hasLEQ_	lef/include/lefiMacro.hpp	/^  char hasLEQ_;$/;"	m	class:lefiPin
hasLEQ_	lef/lef/lefiMacro.hpp	/^  char hasLEQ_;$/;"	m	class:lefiMacro
hasLEQ_	lef/lef/lefiMacro.hpp	/^  char hasLEQ_;$/;"	m	class:lefiPin
hasLayer	def/def/defiBlockage.cpp	/^int defiBlockage::hasLayer() const {$/;"	f	class:defiBlockage
hasLayer	def/def/defiFill.cpp	/^int defiFill::hasLayer() const {$/;"	f	class:defiFill
hasLayer	def/def/defiPinCap.cpp	/^int defiPin::hasLayer() const {$/;"	f	class:defiPin
hasLayer	def/def/defiSlot.cpp	/^int defiSlot::hasLayer() const {$/;"	f	class:defiSlot
hasLayerCapacitance	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerCapacitance(int index) const$/;"	f	class:lefiNonDefault
hasLayerDesignRuleWidth	def/def/defiPinCap.cpp	/^int defiPin::hasLayerDesignRuleWidth(int index) const{$/;"	f	class:defiPin
hasLayerDesignRuleWidth	def/def/defiPinCap.cpp	/^int defiPinPort::hasLayerDesignRuleWidth(int index) const{$/;"	f	class:defiPinPort
hasLayerDiagWidth	def/def/defiNonDefault.cpp	/^int defiNonDefault::hasLayerDiagWidth(int index) const { $/;"	f	class:defiNonDefault
hasLayerDiagWidth	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerDiagWidth(int index) const$/;"	f	class:lefiNonDefault
hasLayerEdgeCap	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerEdgeCap(int index) const$/;"	f	class:lefiNonDefault
hasLayerExceptPgNet	lef/lef/lefiMisc.cpp	/^lefiGeometries::hasLayerExceptPgNet(int index) const$/;"	f	class:lefiGeometries
hasLayerMincut	lef/include/lefrData.hpp	/^    int  hasLayerMincut; $/;"	m	class:lefrData
hasLayerMincut	lef/lef/lefrData.hpp	/^    int  hasLayerMincut; $/;"	m	class:lefrData
hasLayerOpc	def/def/defiFill.cpp	/^int defiFill::hasLayerOpc() const {$/;"	f	class:defiFill
hasLayerResistance	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerResistance(int index) const$/;"	f	class:lefiNonDefault
hasLayerSpacing	def/def/defiNonDefault.cpp	/^int defiNonDefault::hasLayerSpacing(int index) const { $/;"	f	class:defiNonDefault
hasLayerSpacing	def/def/defiPinCap.cpp	/^int defiPin::hasLayerSpacing(int index) const{$/;"	f	class:defiPin
hasLayerSpacing	def/def/defiPinCap.cpp	/^int defiPinPort::hasLayerSpacing(int index) const{$/;"	f	class:defiPinPort
hasLayerSpacing	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerSpacing(int index) const$/;"	f	class:lefiNonDefault
hasLayerType	lef/lef/lefiLayer.cpp	/^lefiLayer::hasLayerType() const$/;"	f	class:lefiLayer
hasLayerWidth	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerWidth(int index) const$/;"	f	class:lefiNonDefault
hasLayerWireExt	def/def/defiNonDefault.cpp	/^int defiNonDefault::hasLayerWireExt(int index) const { $/;"	f	class:defiNonDefault
hasLayerWireExtension	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerWireExtension(int index) const$/;"	f	class:lefiNonDefault
hasLayer_	def/def/defiBlockage.hpp	/^  int    hasLayer_;$/;"	m	class:defiBlockage
hasLayer_	def/def/defiFill.hpp	/^  int   hasLayer_;$/;"	m	class:defiFill
hasLayer_	def/def/defiSlot.hpp	/^  int   hasLayer_;$/;"	m	class:defiSlot
hasLeakage	lef/lef/lefiMacro.cpp	/^lefiPin::hasLeakage() const$/;"	f	class:lefiPin
hasLeakage_	lef/include/lefiMacro.hpp	/^  char hasLeakage_;$/;"	m	class:lefiPin
hasLeakage_	lef/lef/lefiMacro.hpp	/^  char hasLeakage_;$/;"	m	class:lefiPin
hasLongArray	lef/lef/lefiLayer.cpp	/^lefiLayer::hasLongArray() const$/;"	f	class:lefiLayer
hasLongArray_	lef/include/lefiLayer.hpp	/^  int     hasLongArray_;$/;"	m	class:lefiLayer
hasLongArray_	lef/lef/lefiLayer.hpp	/^  int     hasLongArray_;$/;"	m	class:lefiLayer
hasMacroFromTo	def/def/defiTimingDisable.cpp	/^int defiTimingDisable::hasMacroFromTo() const {$/;"	f	class:defiTimingDisable
hasMacroThru	def/def/defiTimingDisable.cpp	/^int defiTimingDisable::hasMacroThru() const {$/;"	f	class:defiTimingDisable
hasMacro_	def/def/defiTimingDisable.hpp	/^  int hasMacro_;$/;"	m	class:defiTimingDisable
hasManufactur	lef/include/lefrData.hpp	/^    int  hasManufactur; $/;"	m	class:lefrData
hasManufactur	lef/lef/lefrData.hpp	/^    int  hasManufactur; $/;"	m	class:lefrData
hasMask	def/def/defiBlockage.cpp	/^int defiBlockage::hasMask() const {$/;"	f	class:defiBlockage
hasMask	lef/include/lefrData.hpp	/^    int  hasMask; $/;"	m	class:lefrData
hasMask	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMask() const$/;"	f	class:lefiLayer
hasMask	lef/lef/lefrData.hpp	/^    int  hasMask; $/;"	m	class:lefrData
hasMask_	lef/include/lefiLayer.hpp	/^  int hasMask_;                       \/\/ 5.8 native$/;"	m	class:lefiLayer
hasMask_	lef/lef/lefiLayer.hpp	/^  int hasMask_;                       \/\/ 5.8 native$/;"	m	class:lefiLayer
hasMax	def/def/defiFPC.cpp	/^int defiFPC::hasMax() const {$/;"	f	class:defiFPC
hasMax	def/def/defiPartition.cpp	/^int defiPartition::hasMax() const {$/;"	f	class:defiPartition
hasMaxAdjacentSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMaxAdjacentSlotSpacing() const$/;"	f	class:lefiLayer
hasMaxAdjacentSlotSpacing_	lef/include/lefiLayer.hpp	/^  int hasMaxAdjacentSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxAdjacentSlotSpacing_	lef/lef/lefiLayer.hpp	/^  int hasMaxAdjacentSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxCoaxialSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMaxCoaxialSlotSpacing() const$/;"	f	class:lefiLayer
hasMaxCoaxialSlotSpacing_	lef/include/lefiLayer.hpp	/^  int hasMaxCoaxialSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxCoaxialSlotSpacing_	lef/lef/lefiLayer.hpp	/^  int hasMaxCoaxialSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxEdgeSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMaxEdgeSlotSpacing() const$/;"	f	class:lefiLayer
hasMaxEdgeSlotSpacing_	lef/include/lefiLayer.hpp	/^  int hasMaxEdgeSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxEdgeSlotSpacing_	lef/lef/lefiLayer.hpp	/^  int hasMaxEdgeSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxFloatingArea	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMaxFloatingArea() const$/;"	f	class:lefiLayer
hasMaxStackViaRange	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::hasMaxStackViaRange() const$/;"	f	class:lefiMaxStackVia
hasMaxX	def/def/defiGroup.cpp	/^int defiGroup::hasMaxX() const {$/;"	f	class:defiGroup
hasMaxX_	def/def/defiGroup.hpp	/^  char hasMaxX_;$/;"	m	class:defiGroup
hasMaxY	def/def/defiGroup.cpp	/^int defiGroup::hasMaxY() const {$/;"	f	class:defiGroup
hasMaxY_	def/def/defiGroup.hpp	/^  char hasMaxY_;$/;"	m	class:defiGroup
hasMax_	def/def/defiFPC.hpp	/^  char hasMax_;$/;"	m	class:defiFPC
hasMax_	def/def/defiPartition.hpp	/^  char hasMax_;$/;"	m	class:defiPartition
hasMaxdelay	lef/lef/lefiMacro.cpp	/^lefiPin::hasMaxdelay() const$/;"	f	class:lefiPin
hasMaxdelay_	lef/include/lefiMacro.hpp	/^  char hasMaxdelay_;$/;"	m	class:lefiPin
hasMaxdelay_	lef/lef/lefiMacro.hpp	/^  char hasMaxdelay_;$/;"	m	class:lefiPin
hasMaximumDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMaximumDensity() const$/;"	f	class:lefiLayer
hasMaximumDensity_	lef/include/lefiLayer.hpp	/^  int hasMaximumDensity_;$/;"	m	class:lefiLayer
hasMaximumDensity_	lef/lef/lefiLayer.hpp	/^  int hasMaximumDensity_;$/;"	m	class:lefiLayer
hasMaxload	lef/lef/lefiMacro.cpp	/^lefiPin::hasMaxload() const$/;"	f	class:lefiPin
hasMaxload_	lef/include/lefiMacro.hpp	/^  char hasMaxload_;$/;"	m	class:lefiPin
hasMaxload_	lef/lef/lefiMacro.hpp	/^  char hasMaxload_;$/;"	m	class:lefiPin
hasMaxwidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMaxwidth() const$/;"	f	class:lefiLayer
hasMetalOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasMetalOverhang() const$/;"	f	class:lefiViaRuleLayer
hasMetalOverhang_	lef/include/lefiViaRule.hpp	/^  int hasMetalOverhang_;$/;"	m	class:lefiViaRuleLayer
hasMetalOverhang_	lef/lef/lefiViaRule.hpp	/^  int hasMetalOverhang_;$/;"	m	class:lefiViaRuleLayer
hasMin	def/def/defiFPC.cpp	/^int defiFPC::hasMin() const {$/;"	f	class:defiFPC
hasMin	def/def/defiPartition.cpp	/^int defiPartition::hasMin() const {$/;"	f	class:defiPartition
hasMin_	def/def/defiFPC.hpp	/^  char hasMin_;$/;"	m	class:defiFPC
hasMin_	def/def/defiPartition.hpp	/^  char hasMin_;$/;"	m	class:defiPartition
hasMinenclosedareaWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinenclosedareaWidth(int index) const$/;"	f	class:lefiLayer
hasMinfeature	lef/include/lefrData.hpp	/^    int  hasMinfeature; $/;"	m	class:lefrData
hasMinfeature	lef/lef/lefrData.hpp	/^    int  hasMinfeature; $/;"	m	class:lefrData
hasMinimumDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinimumDensity() const$/;"	f	class:lefiLayer
hasMinimumDensity_	lef/include/lefiLayer.hpp	/^  int hasMinimumDensity_;$/;"	m	class:lefiLayer
hasMinimumDensity_	lef/lef/lefiLayer.hpp	/^  int hasMinimumDensity_;$/;"	m	class:lefiLayer
hasMinimumcutConnection	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinimumcutConnection(int index) const$/;"	f	class:lefiLayer
hasMinimumcutConnection_	lef/include/lefiLayer.hpp	/^  int*    hasMinimumcutConnection_;$/;"	m	class:lefiLayer
hasMinimumcutConnection_	lef/lef/lefiLayer.hpp	/^  int*    hasMinimumcutConnection_;$/;"	m	class:lefiLayer
hasMinimumcutNumCuts	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinimumcutNumCuts(int index) const$/;"	f	class:lefiLayer
hasMinimumcutNumCuts_	lef/include/lefiLayer.hpp	/^  int*    hasMinimumcutNumCuts_;$/;"	m	class:lefiLayer
hasMinimumcutNumCuts_	lef/lef/lefiLayer.hpp	/^  int*    hasMinimumcutNumCuts_;$/;"	m	class:lefiLayer
hasMinimumcutWithin	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinimumcutWithin(int index) const$/;"	f	class:lefiLayer
hasMinimumcutWithin_	lef/include/lefiLayer.hpp	/^  int*    hasMinimumcutWithin_;              \/\/ 5.7$/;"	m	class:lefiLayer
hasMinimumcutWithin_	lef/lef/lefiLayer.hpp	/^  int*    hasMinimumcutWithin_;              \/\/ 5.7$/;"	m	class:lefiLayer
hasMinstep	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinstep() const$/;"	f	class:lefiLayer
hasMinstepLengthsum	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinstepLengthsum(int index) const$/;"	f	class:lefiLayer
hasMinstepMaxedges	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinstepMaxedges(int index) const$/;"	f	class:lefiLayer
hasMinstepMinAdjLength	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinstepMinAdjLength(int index) const$/;"	f	class:lefiLayer
hasMinstepMinBetLength	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinstepMinBetLength(int index) const$/;"	f	class:lefiLayer
hasMinstepType	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinstepType(int index) const$/;"	f	class:lefiLayer
hasMinstepXSameCorners	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinstepXSameCorners(int index) const$/;"	f	class:lefiLayer
hasMinwidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasMinwidth() const$/;"	f	class:lefiLayer
hasMustjoin	lef/lef/lefiMacro.cpp	/^lefiPin::hasMustjoin() const$/;"	f	class:lefiPin
hasMustjoin_	lef/include/lefiMacro.hpp	/^  char hasMustjoin_;$/;"	m	class:lefiPin
hasMustjoin_	lef/lef/lefiMacro.hpp	/^  char hasMustjoin_;$/;"	m	class:lefiPin
hasNameCase	def/def/defrData.hpp	/^    int  hasNameCase; \/\/ keep track NAMESCASESENSITIVE is in the file$/;"	m	class:defrData
hasNameCase	lef/include/lefrData.hpp	/^    int  hasNameCase; $/;"	m	class:lefrData
hasNameCase	lef/lef/lefrData.hpp	/^    int  hasNameCase; $/;"	m	class:lefrData
hasNameMapString	def/def/defiProp.cpp	/^int defiProp::hasNameMapString() const {$/;"	f	class:defiProp
hasNameMapString	lef/lef/lefiProp.cpp	/^lefiProp::hasNameMapString() const$/;"	f	class:lefiProp
hasNameMapString_	def/def/defiProp.hpp	/^  char hasNameMapString_;$/;"	m	class:defiProp
hasNameMapString_	lef/include/lefiProp.hpp	/^  char hasNameMapString_;$/;"	m	class:lefiProp
hasNameMapString_	lef/lef/lefiProp.hpp	/^  char hasNameMapString_;$/;"	m	class:lefiProp
hasNetExpr	def/def/defiPinCap.cpp	/^int defiPin::hasNetExpr() const {$/;"	f	class:defiPin
hasNetExpr	lef/lef/lefiMacro.cpp	/^lefiPin::hasNetExpr() const$/;"	f	class:lefiPin
hasNetExpr_	def/def/defiPinCap.hpp	/^  char hasNetExpr_;                      \/\/ 5.6$/;"	m	class:defiPin
hasNets	def/def/defiComponent.cpp	/^int defiComponent::hasNets() const {$/;"	f	class:defiComponent
hasNonDefaultRule	def/def/defiNet.cpp	/^int defiNet::hasNonDefaultRule() const {$/;"	f	class:defiNet
hasNonDefaultRule	def/def/defiNet.cpp	/^int defiSubnet::hasNonDefaultRule() const {$/;"	f	class:defiSubnet
hasNumber	def/def/defiProp.cpp	/^int defiProp::hasNumber() const {$/;"	f	class:defiProp
hasNumber	lef/lef/lefiProp.cpp	/^lefiProp::hasNumber() const$/;"	f	class:lefiProp
hasNumber_	def/def/defiProp.hpp	/^  char hasNumber_;      \/\/ either 0:NO or 1:YES.$/;"	m	class:defiProp
hasNumber_	lef/include/lefiProp.hpp	/^  char hasNumber_;      \/\/ either 0:NO or 1:YES.$/;"	m	class:lefiProp
hasNumber_	lef/lef/lefiProp.hpp	/^  char hasNumber_;      \/\/ either 0:NO or 1:YES.$/;"	m	class:lefiProp
hasOffset	def/def/defiVia.cpp	/^int defiVia::hasOffset() const {$/;"	f	class:defiVia
hasOffset	lef/lef/lefiLayer.cpp	/^lefiLayer::hasOffset() const$/;"	f	class:lefiLayer
hasOffset	lef/lef/lefiVia.cpp	/^lefiVia::hasOffset() const$/;"	f	class:lefiVia
hasOffset_	lef/include/lefiLayer.hpp	/^  int hasOffset_;$/;"	m	class:lefiLayer
hasOffset_	lef/lef/lefiLayer.hpp	/^  int hasOffset_;$/;"	m	class:lefiLayer
hasOneEntry	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::hasOneEntry() const$/;"	f	class:lefiLayerDensity
hasOpenedDefLogFile	def/def/defrData.hpp	/^    int  hasOpenedDefLogFile; $/;"	m	class:defrData
hasOpenedLogFile	lef/include/lefrData.hpp	/^    int  hasOpenedLogFile; $/;"	m	class:lefrData
hasOpenedLogFile	lef/lef/lefrData.hpp	/^    int  hasOpenedLogFile; $/;"	m	class:lefrData
hasOrdered	def/def/defiScanchain.cpp	/^int defiScanchain::hasOrdered() const {$/;"	f	class:defiScanchain
hasOrigin	def/def/defiVia.cpp	/^int defiVia::hasOrigin() const {$/;"	f	class:defiVia
hasOrigin	lef/lef/lefiMacro.cpp	/^lefiMacro::hasOrigin() const$/;"	f	class:lefiMacro
hasOrigin	lef/lef/lefiVia.cpp	/^lefiVia::hasOrigin() const$/;"	f	class:lefiVia
hasOrigin_	lef/include/lefiMacro.hpp	/^  char hasOrigin_;$/;"	m	class:lefiMacro
hasOrigin_	lef/lef/lefiMacro.hpp	/^  char hasOrigin_;$/;"	m	class:lefiMacro
hasOriginal	def/def/defiNet.cpp	/^int defiNet::hasOriginal() const {$/;"	f	class:defiNet
hasOutMargin	lef/lef/lefiMacro.cpp	/^lefiPin::hasOutMargin() const$/;"	f	class:lefiPin
hasOutMargin_	lef/include/lefiMacro.hpp	/^  char hasOutMargin_;$/;"	m	class:lefiPin
hasOutMargin_	lef/lef/lefiMacro.hpp	/^  char hasOutMargin_;$/;"	m	class:lefiPin
hasOutResistance	lef/lef/lefiMacro.cpp	/^lefiPin::hasOutResistance() const$/;"	f	class:lefiPin
hasOutResistance_	lef/include/lefiMacro.hpp	/^  char hasOutResistance_;$/;"	m	class:lefiPin
hasOutResistance_	lef/lef/lefiMacro.hpp	/^  char hasOutResistance_;$/;"	m	class:lefiPin
hasOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasOverhang() const$/;"	f	class:lefiViaRuleLayer
hasOverhang_	lef/include/lefiViaRule.hpp	/^  int hasOverhang_;$/;"	m	class:lefiViaRuleLayer
hasOverhang_	lef/lef/lefiViaRule.hpp	/^  int hasOverhang_;$/;"	m	class:lefiViaRuleLayer
hasPRL_	lef/include/lefiLayer.hpp	/^  int*    hasPRL_;$/;"	m	class:lefiTwoWidths
hasPRL_	lef/lef/lefiLayer.hpp	/^  int*    hasPRL_;$/;"	m	class:lefiTwoWidths
hasPRP	lef/include/lefrData.hpp	/^    int  hasPRP; $/;"	m	class:lefrData
hasPRP	lef/lef/lefrData.hpp	/^    int  hasPRP; $/;"	m	class:lefrData
hasParallel	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasParallel() const {$/;"	f	class:defiIOTiming
hasParallel	lef/include/lefrData.hpp	/^    int  hasParallel; $/;"	m	class:lefrData
hasParallel	lef/lef/lefrData.hpp	/^    int  hasParallel; $/;"	m	class:lefrData
hasParallel_	def/def/defiIOTiming.hpp	/^  char hasParallel_;$/;"	m	class:defiIOTiming
hasPartial	def/def/defiBlockage.cpp	/^int defiBlockage::hasPartial() const {$/;"	f	class:defiBlockage
hasPartition	def/def/defiScanchain.cpp	/^int defiScanchain::hasPartition() const {$/;"	f	class:defiScanchain
hasPartitionMaxBits	def/def/defiScanchain.cpp	/^int defiScanchain::hasPartitionMaxBits() const {$/;"	f	class:defiScanchain
hasPartition_	def/def/defiScanchain.hpp	/^  char  hasPartition_;  \/\/ 5.4.1$/;"	m	class:defiScanchain
hasPattern	def/def/defiNet.cpp	/^int defiNet::hasPattern() const {$/;"	f	class:defiNet
hasPattern	def/def/defiVia.cpp	/^int defiVia::hasPattern() const {$/;"	f	class:defiVia
hasPattern_	def/def/defiVia.hpp	/^  int hasPattern_;$/;"	m	class:defiVia
hasPerim	def/def/defiGroup.cpp	/^int defiGroup::hasPerim() const {$/;"	f	class:defiGroup
hasPerim_	def/def/defiGroup.hpp	/^  char hasPerim_;$/;"	m	class:defiGroup
hasPitch	lef/include/lefrData.hpp	/^    int  hasPitch; $/;"	m	class:lefrData
hasPitch	lef/lef/lefiLayer.cpp	/^lefiLayer::hasPitch() const$/;"	f	class:lefiLayer
hasPitch	lef/lef/lefrData.hpp	/^    int  hasPitch; $/;"	m	class:lefrData
hasPitch_	lef/include/lefiLayer.hpp	/^  int hasPitch_;$/;"	m	class:lefiLayer
hasPitch_	lef/lef/lefiLayer.hpp	/^  int hasPitch_;$/;"	m	class:lefiLayer
hasPlacement	def/def/defiBlockage.cpp	/^int defiBlockage::hasPlacement() const {$/;"	f	class:defiBlockage
hasPlacement	def/def/defiPinCap.cpp	/^int defiPin::hasPlacement() const {$/;"	f	class:defiPin
hasPlacement	def/def/defiPinCap.cpp	/^int defiPinPort::hasPlacement() const {$/;"	f	class:defiPinPort
hasPlacement_	def/def/defiBlockage.hpp	/^  int    hasPlacement_;$/;"	m	class:defiBlockage
hasPolyMask	def/def/defiVia.cpp	/^int defiVia::hasPolyMask(int index) const {$/;"	f	class:defiVia
hasPolygonDesignRuleWidth	def/def/defiPinCap.cpp	/^int defiPin::hasPolygonDesignRuleWidth(int index) const{$/;"	f	class:defiPin
hasPolygonDesignRuleWidth	def/def/defiPinCap.cpp	/^int defiPinPort::hasPolygonDesignRuleWidth(int index) const{$/;"	f	class:defiPinPort
hasPolygonSpacing	def/def/defiPinCap.cpp	/^int defiPin::hasPolygonSpacing(int index) const{$/;"	f	class:defiPin
hasPolygonSpacing	def/def/defiPinCap.cpp	/^int defiPinPort::hasPolygonSpacing(int index) const{$/;"	f	class:defiPinPort
hasPort	def/def/defiPinCap.cpp	/^int defiPin::hasPort() const {$/;"	f	class:defiPin
hasPort	def/def/defrData.hpp	/^    int  hasPort; \/\/ keep track is port defined in a Pin$/;"	m	class:defrData
hasPower	lef/lef/lefiMacro.cpp	/^lefiMacro::hasPower() const$/;"	f	class:lefiMacro
hasPower	lef/lef/lefiMacro.cpp	/^lefiPin::hasPower() const$/;"	f	class:lefiPin
hasPower	lef/lef/lefiUnits.cpp	/^lefiUnits::hasPower() const$/;"	f	class:lefiUnits
hasPower_	lef/include/lefiMacro.hpp	/^  char hasPower_;$/;"	m	class:lefiMacro
hasPower_	lef/include/lefiMacro.hpp	/^  char hasPower_;$/;"	m	class:lefiPin
hasPower_	lef/include/lefiUnits.hpp	/^  int hasPower_;$/;"	m	class:lefiUnits
hasPower_	lef/lef/lefiMacro.hpp	/^  char hasPower_;$/;"	m	class:lefiMacro
hasPower_	lef/lef/lefiMacro.hpp	/^  char hasPower_;$/;"	m	class:lefiPin
hasPower_	lef/lef/lefiUnits.hpp	/^  int hasPower_;$/;"	m	class:lefiUnits
hasPreferEnclosureRule	lef/lef/lefiLayer.cpp	/^lefiLayer::hasPreferEnclosureRule(int index) const$/;"	f	class:lefiLayer
hasPreferEnclosureWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasPreferEnclosureWidth(int index) const$/;"	f	class:lefiLayer
hasProperties	lef/lef/lefiVia.cpp	/^lefiVia::hasProperties() const$/;"	f	class:lefiVia
hasProps	def/def/defiNet.cpp	/^int defiNet::hasProps() const {$/;"	f	class:defiNet
hasProtrusion	lef/lef/lefiLayer.cpp	/^lefiLayer::hasProtrusion() const$/;"	f	class:lefiLayer
hasPulldownres	lef/lef/lefiMacro.cpp	/^lefiPin::hasPulldownres() const$/;"	f	class:lefiPin
hasPulldownres_	lef/include/lefiMacro.hpp	/^  char hasPulldownres_;$/;"	m	class:lefiPin
hasPulldownres_	lef/lef/lefiMacro.hpp	/^  char hasPulldownres_;$/;"	m	class:lefiPin
hasPushdown	def/def/defiBlockage.cpp	/^int defiBlockage::hasPushdown() const {$/;"	f	class:defiBlockage
hasPushdown_	def/def/defiBlockage.hpp	/^  int    hasPushdown_;                   \/\/ 5.7$/;"	m	class:defiBlockage
hasRange	def/def/defiProp.cpp	/^int defiProp::hasRange() const {$/;"	f	class:defiProp
hasRange	lef/lef/lefiProp.cpp	/^lefiProp::hasRange() const$/;"	f	class:lefiProp
hasRange_	def/def/defiProp.hpp	/^  char hasRange_;       \/\/ either 0:NO or 1:YES.$/;"	m	class:defiProp
hasRange_	lef/include/lefiMisc.hpp	/^  int   hasRange_;$/;"	m	class:lefiMaxStackVia
hasRange_	lef/include/lefiProp.hpp	/^  char hasRange_;       \/\/ either 0:NO or 1:YES.$/;"	m	class:lefiProp
hasRange_	lef/lef/lefiMisc.hpp	/^  int   hasRange_;$/;"	m	class:lefiMaxStackVia
hasRange_	lef/lef/lefiProp.hpp	/^  char hasRange_;       \/\/ either 0:NO or 1:YES.$/;"	m	class:lefiProp
hasRect	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasRect() const$/;"	f	class:lefiViaRuleLayer
hasRectMask	def/def/defiVia.cpp	/^int defiVia::hasRectMask(int index) const {$/;"	f	class:defiVia
hasRect_	lef/include/lefiViaRule.hpp	/^  int hasRect_;$/;"	m	class:lefiViaRuleLayer
hasRect_	lef/lef/lefiViaRule.hpp	/^  int hasRect_;$/;"	m	class:lefiViaRuleLayer
hasReentrantPathsFlag	def/def/defiTimingDisable.cpp	/^int defiTimingDisable::hasReentrantPathsFlag() const {$/;"	f	class:defiTimingDisable
hasReentrantPathsFlag_	def/def/defiTimingDisable.hpp	/^  int hasReentrantPathsFlag_;$/;"	m	class:defiTimingDisable
hasRegionBounds	def/def/defiComponent.cpp	/^int defiComponent::hasRegionBounds() const {$/;"	f	class:defiComponent
hasRegionBox	def/def/defiGroup.cpp	/^int defiGroup::hasRegionBox() const {$/;"	f	class:defiGroup
hasRegionBox_	def/def/defiGroup.hpp	/^  char hasRegionBox_;$/;"	m	class:defiGroup
hasRegionName	def/def/defiComponent.cpp	/^int defiComponent::hasRegionName() const {$/;"	f	class:defiComponent
hasRegionName	def/def/defiGroup.cpp	/^int defiGroup::hasRegionName() const {$/;"	f	class:defiGroup
hasRegionName_	def/def/defiComponent.hpp	/^  char hasRegionName_;  \/\/ the file supplied a region name for this comp$/;"	m	class:defiComponent
hasRegionName_	def/def/defiGroup.hpp	/^  char hasRegionName_;$/;"	m	class:defiGroup
hasResistance	lef/lef/lefiLayer.cpp	/^lefiLayer::hasResistance() const$/;"	f	class:lefiLayer
hasResistance	lef/lef/lefiMacro.cpp	/^lefiPin::hasResistance() const$/;"	f	class:lefiPin
hasResistance	lef/lef/lefiUnits.cpp	/^lefiUnits::hasResistance() const$/;"	f	class:lefiUnits
hasResistance	lef/lef/lefiVia.cpp	/^lefiVia::hasResistance() const$/;"	f	class:lefiVia
hasResistance	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasResistance() const$/;"	f	class:lefiViaRuleLayer
hasResistanceArray	lef/lef/lefiLayer.cpp	/^lefiLayer::hasResistanceArray() const$/;"	f	class:lefiLayer
hasResistancePerCut	lef/lef/lefiLayer.cpp	/^lefiLayer::hasResistancePerCut() const$/;"	f	class:lefiLayer
hasResistance_	lef/include/lefiLayer.hpp	/^  int hasResistance_;$/;"	m	class:lefiLayer
hasResistance_	lef/include/lefiMacro.hpp	/^  char hasResistance_;$/;"	m	class:lefiPin
hasResistance_	lef/include/lefiNonDefault.hpp	/^  char*   hasResistance_;$/;"	m	class:lefiNonDefault
hasResistance_	lef/include/lefiUnits.hpp	/^  int hasResistance_;$/;"	m	class:lefiUnits
hasResistance_	lef/include/lefiVia.hpp	/^  int hasResistance_;$/;"	m	class:lefiVia
hasResistance_	lef/include/lefiViaRule.hpp	/^  int hasResistance_;$/;"	m	class:lefiViaRuleLayer
hasResistance_	lef/lef/lefiLayer.hpp	/^  int hasResistance_;$/;"	m	class:lefiLayer
hasResistance_	lef/lef/lefiMacro.hpp	/^  char hasResistance_;$/;"	m	class:lefiPin
hasResistance_	lef/lef/lefiNonDefault.hpp	/^  char*   hasResistance_;$/;"	m	class:lefiNonDefault
hasResistance_	lef/lef/lefiUnits.hpp	/^  int hasResistance_;$/;"	m	class:lefiUnits
hasResistance_	lef/lef/lefiVia.hpp	/^  int hasResistance_;$/;"	m	class:lefiVia
hasResistance_	lef/lef/lefiViaRule.hpp	/^  int hasResistance_;$/;"	m	class:lefiViaRuleLayer
hasReturn	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasReturn() const$/;"	f	class:lefiPinAntennaModel
hasReturn_	lef/include/lefiMacro.hpp	/^  int   hasReturn_;$/;"	m	class:lefiPinAntennaModel
hasReturn_	lef/lef/lefiMacro.hpp	/^  int   hasReturn_;$/;"	m	class:lefiPinAntennaModel
hasRiseAtt1	lef/lef/lefiMacro.cpp	/^lefiTiming::hasRiseAtt1()$/;"	f	class:lefiTiming
hasRiseAtt1_	lef/include/lefiMacro.hpp	/^  int hasRiseAtt1_;$/;"	m	class:lefiTiming
hasRiseAtt1_	lef/lef/lefiMacro.hpp	/^  int hasRiseAtt1_;$/;"	m	class:lefiTiming
hasRiseCS	lef/lef/lefiMacro.cpp	/^lefiTiming::hasRiseCS()$/;"	f	class:lefiTiming
hasRiseCS_	lef/include/lefiMacro.hpp	/^  int hasRiseCS_;$/;"	m	class:lefiTiming
hasRiseCS_	lef/lef/lefiMacro.hpp	/^  int hasRiseCS_;$/;"	m	class:lefiTiming
hasRiseIntrinsic	lef/lef/lefiMacro.cpp	/^lefiTiming::hasRiseIntrinsic()$/;"	f	class:lefiTiming
hasRiseIntrinsic_	lef/include/lefiMacro.hpp	/^  int hasRiseIntrinsic_;$/;"	m	class:lefiTiming
hasRiseIntrinsic_	lef/lef/lefiMacro.hpp	/^  int hasRiseIntrinsic_;$/;"	m	class:lefiTiming
hasRiseMax	def/def/defiAssertion.cpp	/^int defiAssertion::hasRiseMax() const {$/;"	f	class:defiAssertion
hasRiseMax	def/def/defiPartition.cpp	/^int defiPartition::hasRiseMax() const {$/;"	f	class:defiPartition
hasRiseMaxRange	def/def/defiPartition.cpp	/^int defiPartition::hasRiseMaxRange() const {$/;"	f	class:defiPartition
hasRiseMaxRange_	def/def/defiPartition.hpp	/^  char hasRiseMaxRange_;$/;"	m	class:defiPartition
hasRiseMax_	def/def/defiAssertion.hpp	/^  char hasRiseMax_;$/;"	m	class:defiAssertion
hasRiseMax_	def/def/defiPartition.hpp	/^  char hasRiseMax_;$/;"	m	class:defiPartition
hasRiseMin	def/def/defiAssertion.cpp	/^int defiAssertion::hasRiseMin() const {$/;"	f	class:defiAssertion
hasRiseMin	def/def/defiPartition.cpp	/^int defiPartition::hasRiseMin() const {$/;"	f	class:defiPartition
hasRiseMinRange	def/def/defiPartition.cpp	/^int defiPartition::hasRiseMinRange() const {$/;"	f	class:defiPartition
hasRiseMinRange_	def/def/defiPartition.hpp	/^  char hasRiseMinRange_;$/;"	m	class:defiPartition
hasRiseMin_	def/def/defiAssertion.hpp	/^  char hasRiseMin_;$/;"	m	class:defiAssertion
hasRiseMin_	def/def/defiPartition.hpp	/^  char hasRiseMin_;$/;"	m	class:defiPartition
hasRiseRS	lef/lef/lefiMacro.cpp	/^lefiTiming::hasRiseRS()$/;"	f	class:lefiTiming
hasRiseRS_	lef/include/lefiMacro.hpp	/^  int hasRiseRS_;$/;"	m	class:lefiTiming
hasRiseRS_	lef/lef/lefiMacro.hpp	/^  int hasRiseRS_;$/;"	m	class:lefiTiming
hasRiseSatcur	lef/lef/lefiMacro.cpp	/^lefiPin::hasRiseSatcur() const$/;"	f	class:lefiPin
hasRiseSatcur_	lef/include/lefiMacro.hpp	/^  char hasRiseSatcur_;$/;"	m	class:lefiPin
hasRiseSatcur_	lef/lef/lefiMacro.hpp	/^  char hasRiseSatcur_;$/;"	m	class:lefiPin
hasRiseSlew	lef/lef/lefiMacro.cpp	/^lefiTiming::hasRiseSlew()$/;"	f	class:lefiTiming
hasRiseSlew2	lef/lef/lefiMacro.cpp	/^lefiTiming::hasRiseSlew2()$/;"	f	class:lefiTiming
hasRiseSlew2_	lef/include/lefiMacro.hpp	/^  int hasRiseSlew2_;$/;"	m	class:lefiTiming
hasRiseSlew2_	lef/lef/lefiMacro.hpp	/^  int hasRiseSlew2_;$/;"	m	class:lefiTiming
hasRiseSlewLimit	lef/lef/lefiMacro.cpp	/^lefiPin::hasRiseSlewLimit() const$/;"	f	class:lefiPin
hasRiseSlewLimit_	lef/include/lefiMacro.hpp	/^  char hasRiseSlewLimit_;$/;"	m	class:lefiPin
hasRiseSlewLimit_	lef/lef/lefiMacro.hpp	/^  char hasRiseSlewLimit_;$/;"	m	class:lefiPin
hasRiseSlew_	lef/include/lefiMacro.hpp	/^  int hasRiseSlew_;$/;"	m	class:lefiTiming
hasRiseSlew_	lef/lef/lefiMacro.hpp	/^  int hasRiseSlew_;$/;"	m	class:lefiTiming
hasRiseThresh	lef/lef/lefiMacro.cpp	/^lefiPin::hasRiseThresh() const$/;"	f	class:lefiPin
hasRiseThresh_	lef/include/lefiMacro.hpp	/^  char hasRiseThresh_;$/;"	m	class:lefiPin
hasRiseThresh_	lef/lef/lefiMacro.hpp	/^  char hasRiseThresh_;$/;"	m	class:lefiPin
hasRiseTo	lef/lef/lefiMacro.cpp	/^lefiTiming::hasRiseTo()$/;"	f	class:lefiTiming
hasRiseTo_	lef/include/lefiMacro.hpp	/^  int hasRiseTo_;$/;"	m	class:lefiTiming
hasRiseTo_	lef/lef/lefiMacro.hpp	/^  int hasRiseTo_;$/;"	m	class:lefiTiming
hasRiseVoltage	lef/lef/lefiMacro.cpp	/^lefiPin::hasRiseVoltage() const$/;"	f	class:lefiPin
hasRiseVoltage_	lef/include/lefiMacro.hpp	/^  char hasRiseVoltage_;$/;"	m	class:lefiPin
hasRiseVoltage_	lef/lef/lefiMacro.hpp	/^  char hasRiseVoltage_;$/;"	m	class:lefiPin
hasRouteHalo	def/def/defiComponent.cpp	/^int defiComponent::hasRouteHalo() const {$/;"	f	class:defiComponent
hasRowCol	def/def/defiVia.cpp	/^int defiVia::hasRowCol() const {$/;"	f	class:defiVia
hasRowCol	lef/lef/lefiVia.cpp	/^lefiVia::hasRowCol() const$/;"	f	class:lefiVia
hasRowPattern	lef/lef/lefiMisc.cpp	/^lefiSite::hasRowPattern() const$/;"	f	class:lefiSite
hasSDFcond	lef/lef/lefiMacro.cpp	/^lefiTiming::hasSDFcond()$/;"	f	class:lefiTiming
hasSDFcondEnd	lef/lef/lefiMacro.cpp	/^lefiTiming::hasSDFcondEnd()$/;"	f	class:lefiTiming
hasSDFcondEnd_	lef/include/lefiMacro.hpp	/^  int hasSDFcondEnd_;$/;"	m	class:lefiTiming
hasSDFcondEnd_	lef/lef/lefiMacro.hpp	/^  int hasSDFcondEnd_;$/;"	m	class:lefiTiming
hasSDFcondStart	lef/lef/lefiMacro.cpp	/^lefiTiming::hasSDFcondStart()$/;"	f	class:lefiTiming
hasSDFcondStart_	lef/include/lefiMacro.hpp	/^  int hasSDFcondStart_;$/;"	m	class:lefiTiming
hasSDFcondStart_	lef/lef/lefiMacro.hpp	/^  int hasSDFcondStart_;$/;"	m	class:lefiTiming
hasSDFcond_	lef/include/lefiMacro.hpp	/^  int hasSDFcond_;$/;"	m	class:lefiTiming
hasSDFcond_	lef/lef/lefiMacro.hpp	/^  int hasSDFcond_;$/;"	m	class:lefiTiming
hasSDFonePinTrigger	lef/lef/lefiMacro.cpp	/^lefiTiming::hasSDFonePinTrigger()$/;"	f	class:lefiTiming
hasSDFonePinTrigger_	lef/include/lefiMacro.hpp	/^  int hasSDFonePinTrigger_;$/;"	m	class:lefiTiming
hasSDFonePinTrigger_	lef/lef/lefiMacro.hpp	/^  int hasSDFonePinTrigger_;$/;"	m	class:lefiTiming
hasSDFtwoPinTrigger	lef/lef/lefiMacro.cpp	/^lefiTiming::hasSDFtwoPinTrigger()$/;"	f	class:lefiTiming
hasSDFtwoPinTrigger_	lef/include/lefiMacro.hpp	/^  int hasSDFtwoPinTrigger_;$/;"	m	class:lefiTiming
hasSDFtwoPinTrigger_	lef/lef/lefiMacro.hpp	/^  int hasSDFtwoPinTrigger_;$/;"	m	class:lefiTiming
hasSamenet	lef/include/lefrData.hpp	/^    int  hasSamenet; $/;"	m	class:lefrData
hasSamenet	lef/lef/lefrData.hpp	/^    int  hasSamenet; $/;"	m	class:lefrData
hasShape	lef/lef/lefiMacro.cpp	/^lefiPin::hasShape() const$/;"	f	class:lefiPin
hasShape_	lef/include/lefiMacro.hpp	/^  char hasShape_;$/;"	m	class:lefiPin
hasShape_	lef/lef/lefiMacro.hpp	/^  char hasShape_;$/;"	m	class:lefiPin
hasShrinkage	lef/lef/lefiLayer.cpp	/^lefiLayer::hasShrinkage() const$/;"	f	class:lefiLayer
hasShrinkage_	lef/include/lefiLayer.hpp	/^  int hasShrinkage_;$/;"	m	class:lefiLayer
hasShrinkage_	lef/lef/lefiLayer.hpp	/^  int hasShrinkage_;$/;"	m	class:lefiLayer
hasSite	lef/include/lefrData.hpp	/^    int  hasSite; $/;"	m	class:lefrData
hasSite	lef/lef/lefrData.hpp	/^    int  hasSite; $/;"	m	class:lefrData
hasSiteClass	lef/include/lefrData.hpp	/^    int  hasSiteClass; $/;"	m	class:lefrData
hasSiteClass	lef/lef/lefrData.hpp	/^    int  hasSiteClass; $/;"	m	class:lefrData
hasSiteName	lef/lef/lefiMacro.cpp	/^lefiMacro::hasSiteName() const$/;"	f	class:lefiMacro
hasSiteName_	lef/include/lefiMacro.hpp	/^  char hasSiteName_;$/;"	m	class:lefiMacro
hasSiteName_	lef/lef/lefiMacro.hpp	/^  char hasSiteName_;$/;"	m	class:lefiMacro
hasSitePattern	lef/lef/lefiMacro.cpp	/^lefiMacro::hasSitePattern() const$/;"	f	class:lefiMacro
hasSiteSize	lef/include/lefrData.hpp	/^    int  hasSiteSize; $/;"	m	class:lefrData
hasSiteSize	lef/lef/lefrData.hpp	/^    int  hasSiteSize; $/;"	m	class:lefrData
hasSize	lef/lef/lefiMacro.cpp	/^lefiMacro::hasSize() const$/;"	f	class:lefiMacro
hasSize	lef/lef/lefiMisc.cpp	/^lefiSite::hasSize() const$/;"	f	class:lefiSite
hasSize_	lef/include/lefiMacro.hpp	/^  char hasSize_;$/;"	m	class:lefiMacro
hasSize_	lef/include/lefiMisc.hpp	/^  int    hasSize_;$/;"	m	class:lefiSite
hasSize_	lef/lef/lefiMacro.hpp	/^  char hasSize_;$/;"	m	class:lefiMacro
hasSize_	lef/lef/lefiMisc.hpp	/^  int    hasSize_;$/;"	m	class:lefiSite
hasSlewFall	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasSlewFall() const {$/;"	f	class:defiIOTiming
hasSlewFall_	def/def/defiIOTiming.hpp	/^  char hasSlewFall_;$/;"	m	class:defiIOTiming
hasSlewRise	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasSlewRise() const {$/;"	f	class:defiIOTiming
hasSlewRise_	def/def/defiIOTiming.hpp	/^  char hasSlewRise_;$/;"	m	class:defiIOTiming
hasSlotLength	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSlotLength() const$/;"	f	class:lefiLayer
hasSlotLength_	lef/include/lefiLayer.hpp	/^  int hasSlotLength_;$/;"	m	class:lefiLayer
hasSlotLength_	lef/lef/lefiLayer.hpp	/^  int hasSlotLength_;$/;"	m	class:lefiLayer
hasSlotWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSlotWidth() const$/;"	f	class:lefiLayer
hasSlotWidth_	lef/include/lefiLayer.hpp	/^  int hasSlotWidth_;$/;"	m	class:lefiLayer
hasSlotWidth_	lef/lef/lefiLayer.hpp	/^  int hasSlotWidth_;$/;"	m	class:lefiLayer
hasSlotWireLength	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSlotWireLength() const$/;"	f	class:lefiLayer
hasSlotWireLength_	lef/include/lefiLayer.hpp	/^  int hasSlotWireLength_;$/;"	m	class:lefiLayer
hasSlotWireLength_	lef/lef/lefiLayer.hpp	/^  int hasSlotWireLength_;$/;"	m	class:lefiLayer
hasSlotWireWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSlotWireWidth() const$/;"	f	class:lefiLayer
hasSlotWireWidth_	lef/include/lefiLayer.hpp	/^  int hasSlotWireWidth_;$/;"	m	class:lefiLayer
hasSlotWireWidth_	lef/lef/lefiLayer.hpp	/^  int hasSlotWireWidth_;$/;"	m	class:lefiLayer
hasSlots	def/def/defiBlockage.cpp	/^int defiBlockage::hasSlots() const {$/;"	f	class:defiBlockage
hasSlots_	def/def/defiBlockage.hpp	/^  int    hasSlots_;$/;"	m	class:defiBlockage
hasSoft	def/def/defiBlockage.cpp	/^int defiBlockage::hasSoft() const {$/;"	f	class:defiBlockage
hasSoft_	def/def/defiBlockage.hpp	/^  int    hasSoft_;                       \/\/ 5.7$/;"	m	class:defiBlockage
hasSource	def/def/defiComponent.cpp	/^int defiComponent::hasSource() const {$/;"	f	class:defiComponent
hasSource	def/def/defiNet.cpp	/^int defiNet::hasSource() const {$/;"	f	class:defiNet
hasSource	lef/lef/lefiMacro.cpp	/^lefiMacro::hasSource() const$/;"	f	class:lefiMacro
hasSource_	lef/include/lefiMacro.hpp	/^  char hasSource_;$/;"	m	class:lefiMacro
hasSource_	lef/lef/lefiMacro.hpp	/^  char hasSource_;$/;"	m	class:lefiMacro
hasSpCenter	lef/include/lefrData.hpp	/^    int  hasSpCenter; $/;"	m	class:lefrData
hasSpCenter	lef/lef/lefrData.hpp	/^    int  hasSpCenter; $/;"	m	class:lefrData
hasSpLayer	lef/include/lefrData.hpp	/^    int  hasSpLayer; $/;"	m	class:lefrData
hasSpLayer	lef/lef/lefrData.hpp	/^    int  hasSpLayer; $/;"	m	class:lefrData
hasSpParallel	lef/include/lefrData.hpp	/^    int  hasSpParallel; $/;"	m	class:lefrData
hasSpParallel	lef/lef/lefrData.hpp	/^    int  hasSpParallel; $/;"	m	class:lefrData
hasSpSamenet	lef/include/lefrData.hpp	/^    int  hasSpSamenet; $/;"	m	class:lefrData
hasSpSamenet	lef/lef/lefrData.hpp	/^    int  hasSpSamenet; $/;"	m	class:lefrData
hasSpacing	def/def/defiBlockage.cpp	/^int defiBlockage::hasSpacing() const {$/;"	f	class:defiBlockage
hasSpacing	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasSpacing() const$/;"	f	class:lefiViaRuleLayer
hasSpacingAdjacent	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingAdjacent(int index) const$/;"	f	class:lefiLayer
hasSpacingAdjacentExcept	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingAdjacentExcept(int index) const$/;"	f	class:lefiLayer
hasSpacingAdjacentExcept_	lef/include/lefiLayer.hpp	/^  int* hasSpacingAdjacentExcept_;     \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingAdjacentExcept_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingAdjacentExcept_;     \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingAdjacent_	lef/include/lefiLayer.hpp	/^  int* hasSpacingAdjacent_;           \/\/ 5.5$/;"	m	class:lefiLayer
hasSpacingAdjacent_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingAdjacent_;           \/\/ 5.5$/;"	m	class:lefiLayer
hasSpacingArea	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingArea(int index) const$/;"	f	class:lefiLayer
hasSpacingCenterToCenter	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingCenterToCenter(int index) const$/;"	f	class:lefiLayer
hasSpacingCenterToCenter_	lef/include/lefiLayer.hpp	/^  int* hasSpacingCenterToCenter_;     \/\/ 5.6$/;"	m	class:lefiLayer
hasSpacingCenterToCenter_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingCenterToCenter_;     \/\/ 5.6$/;"	m	class:lefiLayer
hasSpacingCutArea_	lef/include/lefiLayer.hpp	/^  int* hasSpacingCutArea_;            \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingCutArea_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingCutArea_;            \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingEndOfLine	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingEndOfLine(int index) const$/;"	f	class:lefiLayer
hasSpacingEndOfLine_	lef/include/lefiLayer.hpp	/^  int* hasSpacingEndOfLine_;          \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingEndOfLine_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingEndOfLine_;          \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingEndOfNotchWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingEndOfNotchWidth(int index) const$/;"	f	class:lefiLayer
hasSpacingLayerStack	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingLayerStack(int index) const$/;"	f	class:lefiLayer
hasSpacingLayerStack_	lef/include/lefiLayer.hpp	/^  int* hasSpacingLayerStack_;         \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingLayerStack_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingLayerStack_;         \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingLengthThreshold	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingLengthThreshold(int index) const$/;"	f	class:lefiLayer
hasSpacingLengthThresholdRange	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingLengthThresholdRange(int index) const$/;"	f	class:lefiLayer
hasSpacingLengthThreshold_	lef/include/lefiLayer.hpp	/^  int* hasSpacingLengthThreshold_;    \/\/ pcr 409334$/;"	m	class:lefiLayer
hasSpacingLengthThreshold_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingLengthThreshold_;    \/\/ pcr 409334$/;"	m	class:lefiLayer
hasSpacingName	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingName(int index) const$/;"	f	class:lefiLayer
hasSpacingName_	lef/include/lefiLayer.hpp	/^  int* hasSpacingName_;               \/\/ 5.5$/;"	m	class:lefiLayer
hasSpacingName_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingName_;               \/\/ 5.5$/;"	m	class:lefiLayer
hasSpacingNotchLength	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingNotchLength(int index) const$/;"	f	class:lefiLayer
hasSpacingNumber	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingNumber() const$/;"	f	class:lefiLayer
hasSpacingParallelOverlap	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingParallelOverlap(int index) const$/;"	f	class:lefiLayer
hasSpacingParallelOverlap_	lef/include/lefiLayer.hpp	/^  int* hasSpacingParallelOverlap_;    \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingParallelOverlap_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingParallelOverlap_;    \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingParellelEdge	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingParellelEdge(int index) const$/;"	f	class:lefiLayer
hasSpacingParellelEdge_	lef/include/lefiLayer.hpp	/^  int* hasSpacingParellelEdge_;       \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingParellelEdge_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingParellelEdge_;       \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingRange	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRange(int index) const$/;"	f	class:lefiLayer
hasSpacingRangeInfluence	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRangeInfluence(int index) const$/;"	f	class:lefiLayer
hasSpacingRangeInfluenceRange	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRangeInfluenceRange(int index) const$/;"	f	class:lefiLayer
hasSpacingRangeRange	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRangeRange(int index) const$/;"	f	class:lefiLayer
hasSpacingRangeUseLengthThreshold	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRangeUseLengthThreshold(int index) const$/;"	f	class:lefiLayer
hasSpacingRange_	lef/include/lefiLayer.hpp	/^  int* hasSpacingRange_;              \/\/ pcr 409334$/;"	m	class:lefiLayer
hasSpacingRange_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingRange_;              \/\/ pcr 409334$/;"	m	class:lefiLayer
hasSpacingRules	def/def/defiNet.cpp	/^int defiNet::hasSpacingRules() const {$/;"	f	class:defiNet
hasSpacingSamenet	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingSamenet(int index) const$/;"	f	class:lefiLayer
hasSpacingSamenetPGonly	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingSamenetPGonly(int index) const$/;"	f	class:lefiLayer
hasSpacingSamenetPGonly_	lef/include/lefiLayer.hpp	/^  int* hasSpacingSamenetPGonly_;      \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingSamenetPGonly_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingSamenetPGonly_;      \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingSamenet_	lef/include/lefiLayer.hpp	/^  int* hasSpacingSamenet_;            \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingSamenet_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingSamenet_;            \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingTableOrtho	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingTableOrtho() const$/;"	f	class:lefiLayer
hasSpacingTableOrtho_	lef/include/lefiLayer.hpp	/^  int     hasSpacingTableOrtho_;$/;"	m	class:lefiLayer
hasSpacingTableOrtho_	lef/lef/lefiLayer.hpp	/^  int     hasSpacingTableOrtho_;$/;"	m	class:lefiLayer
hasSpacingTwoEdges	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSpacingTwoEdges(int index) const$/;"	f	class:lefiLayer
hasSpacingTwoEdges_	lef/include/lefiLayer.hpp	/^  int* hasSpacingTwoEdges_;           \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingTwoEdges_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingTwoEdges_;           \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingUseLengthThreshold_	lef/include/lefiLayer.hpp	/^  int* hasSpacingUseLengthThreshold_; \/\/ pcr 282799, due to mult. spacing allow$/;"	m	class:lefiLayer
hasSpacingUseLengthThreshold_	lef/lef/lefiLayer.hpp	/^  int* hasSpacingUseLengthThreshold_; \/\/ pcr 282799, due to mult. spacing allow$/;"	m	class:lefiLayer
hasSpacing_	def/def/defiNonDefault.hpp	/^  char*   hasSpacing_;$/;"	m	class:defiNonDefault
hasSpacing_	lef/include/lefiLayer.hpp	/^  int hasSpacing_;$/;"	m	class:lefiLayer
hasSpacing_	lef/include/lefiNonDefault.hpp	/^  char* hasSpacing_;$/;"	m	class:lefiNonDefault
hasSpacing_	lef/include/lefiViaRule.hpp	/^  int hasSpacing_;$/;"	m	class:lefiViaRuleLayer
hasSpacing_	lef/lef/lefiLayer.hpp	/^  int hasSpacing_;$/;"	m	class:lefiLayer
hasSpacing_	lef/lef/lefiNonDefault.hpp	/^  char* hasSpacing_;$/;"	m	class:lefiNonDefault
hasSpacing_	lef/lef/lefiViaRule.hpp	/^  int hasSpacing_;$/;"	m	class:lefiViaRuleLayer
hasSpecial	def/def/defiPinCap.cpp	/^int defiPin::hasSpecial() const {$/;"	f	class:defiPin
hasSpecial_	def/def/defiPinCap.hpp	/^  int hasSpecial_;$/;"	m	class:defiPin
hasSplitWireWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasSplitWireWidth() const$/;"	f	class:lefiLayer
hasSplitWireWidth_	lef/include/lefiLayer.hpp	/^  int hasSplitWireWidth_;$/;"	m	class:lefiLayer
hasSplitWireWidth_	lef/lef/lefiLayer.hpp	/^  int hasSplitWireWidth_;$/;"	m	class:lefiLayer
hasStableTiming	lef/lef/lefiMacro.cpp	/^lefiTiming::hasStableTiming()$/;"	f	class:lefiTiming
hasStableTiming_	lef/include/lefiMacro.hpp	/^  int hasStableTiming_;$/;"	m	class:lefiTiming
hasStableTiming_	lef/lef/lefiMacro.hpp	/^  int hasStableTiming_;$/;"	m	class:lefiTiming
hasStack	lef/lef/lefiMisc.cpp	/^lefiSpacing::hasStack() const$/;"	f	class:lefiSpacing
hasStack_	lef/include/lefiMisc.hpp	/^  int    hasStack_;$/;"	m	class:lefiSpacing
hasStack_	lef/lef/lefiMisc.hpp	/^  int    hasStack_;$/;"	m	class:lefiSpacing
hasStart	def/def/defiScanchain.cpp	/^int defiScanchain::hasStart() const {$/;"	f	class:defiScanchain
hasStart_	def/def/defiScanchain.hpp	/^  char hasStart_;$/;"	m	class:defiScanchain
hasStepPattern	lef/lef/lefiMisc.cpp	/^lefiSitePattern::hasStepPattern() const$/;"	f	class:lefiSitePattern
hasStop	def/def/defiScanchain.cpp	/^int defiScanchain::hasStop() const {$/;"	f	class:defiScanchain
hasStop_	def/def/defiScanchain.hpp	/^  char hasStop_;$/;"	m	class:defiScanchain
hasString	def/def/defiProp.cpp	/^int defiProp::hasString() const {$/;"	f	class:defiProp
hasString	lef/lef/lefiProp.cpp	/^lefiProp::hasString() const$/;"	f	class:lefiProp
hasStyle	def/def/defiNet.cpp	/^int defiNet::hasStyle() const {$/;"	f	class:defiNet
hasSubnets	def/def/defiNet.cpp	/^int defiNet::hasSubnets() const {$/;"	f	class:defiNet
hasSupplySens_	def/def/defiPinCap.hpp	/^  char hasSupplySens_;                   \/\/ 5.6$/;"	m	class:defiPin
hasSupplySensitivity	def/def/defiPinCap.cpp	/^int defiPin::hasSupplySensitivity() const {$/;"	f	class:defiPin
hasSupplySensitivity	lef/lef/lefiMacro.cpp	/^lefiPin::hasSupplySensitivity() const$/;"	f	class:lefiPin
hasSymmetry_	lef/include/lefiMacro.hpp	/^  char hasSymmetry_;  \/\/ X=1  Y=2  R90=4  (can be combined)$/;"	m	class:lefiMacro
hasSymmetry_	lef/lef/lefiMacro.hpp	/^  char hasSymmetry_;  \/\/ X=1  Y=2  R90=4  (can be combined)$/;"	m	class:lefiMacro
hasTables	lef/lef/lefiMacro.cpp	/^lefiPin::hasTables() const$/;"	f	class:lefiPin
hasTables_	lef/include/lefiMacro.hpp	/^  char hasTables_;$/;"	m	class:lefiPin
hasTables_	lef/lef/lefiMacro.hpp	/^  char hasTables_;$/;"	m	class:lefiPin
hasTaperRule	lef/lef/lefiMacro.cpp	/^lefiPin::hasTaperRule() const$/;"	f	class:lefiPin
hasThickness	lef/lef/lefiLayer.cpp	/^lefiLayer::hasThickness() const$/;"	f	class:lefiLayer
hasThickness_	lef/include/lefiLayer.hpp	/^  int hasThickness_;$/;"	m	class:lefiLayer
hasThickness_	lef/lef/lefiLayer.hpp	/^  int hasThickness_;$/;"	m	class:lefiLayer
hasThru	def/def/defiTimingDisable.cpp	/^int defiTimingDisable::hasThru() const {$/;"	f	class:defiTimingDisable
hasThru_	def/def/defiTimingDisable.hpp	/^  int hasThru_;$/;"	m	class:defiTimingDisable
hasTieoffr	lef/lef/lefiMacro.cpp	/^lefiPin::hasTieoffr() const$/;"	f	class:lefiPin
hasTieoffr_	lef/include/lefiMacro.hpp	/^  char hasTieoffr_;$/;"	m	class:lefiPin
hasTieoffr_	lef/lef/lefiMacro.hpp	/^  char hasTieoffr_;$/;"	m	class:lefiPin
hasTime	lef/lef/lefiUnits.cpp	/^lefiUnits::hasTime() const$/;"	f	class:lefiUnits
hasTime_	lef/include/lefiUnits.hpp	/^  int hasTime_;$/;"	m	class:lefiUnits
hasTime_	lef/lef/lefiUnits.hpp	/^  int hasTime_;$/;"	m	class:lefiUnits
hasTo	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasTo() const {$/;"	f	class:defiIOTiming
hasTo_	def/def/defiIOTiming.hpp	/^  char hasTo_;$/;"	m	class:defiIOTiming
hasTopOfStack	lef/lef/lefiVia.cpp	/^lefiVia::hasTopOfStack() const$/;"	f	class:lefiVia
hasTopOfStack_	lef/include/lefiVia.hpp	/^  int hasTopOfStack_;$/;"	m	class:lefiVia
hasTopOfStack_	lef/lef/lefiVia.hpp	/^  int hasTopOfStack_;$/;"	m	class:lefiVia
hasTransition	lef/lef/lefiMacro.cpp	/^lefiTiming::hasTransition()$/;"	f	class:lefiTiming
hasTransition_	lef/include/lefiMacro.hpp	/^  int hasTransition_;$/;"	m	class:lefiTiming
hasTransition_	lef/lef/lefiMacro.hpp	/^  int hasTransition_;$/;"	m	class:lefiTiming
hasTwoWidthPRL_	lef/include/lefiLayer.hpp	/^  int hasTwoWidthPRL_;$/;"	m	class:lefiLayer
hasTwoWidthPRL_	lef/lef/lefiLayer.hpp	/^  int hasTwoWidthPRL_;$/;"	m	class:lefiLayer
hasTwoWidths	lef/include/lefrData.hpp	/^    int  hasTwoWidths; $/;"	m	class:lefrData
hasTwoWidths	lef/lef/lefrData.hpp	/^    int  hasTwoWidths; $/;"	m	class:lefrData
hasType	def/def/defiRegion.cpp	/^int defiRegion::hasType() const {$/;"	f	class:defiRegion
hasType	lef/include/lefrData.hpp	/^    int  hasType; $/;"	m	class:lefrData
hasType	lef/lef/lefiLayer.cpp	/^lefiLayer::hasType() const$/;"	f	class:lefiLayer
hasType	lef/lef/lefrData.hpp	/^    int  hasType; $/;"	m	class:lefrData
hasUnateness	lef/lef/lefiMacro.cpp	/^lefiTiming::hasUnateness()$/;"	f	class:lefiTiming
hasUnateness_	lef/include/lefiMacro.hpp	/^  int hasUnateness_;$/;"	m	class:lefiTiming
hasUnateness_	lef/lef/lefiMacro.hpp	/^  int hasUnateness_;$/;"	m	class:lefiTiming
hasUse	def/def/defiNet.cpp	/^int defiNet::hasUse() const {$/;"	f	class:defiNet
hasUse	def/def/defiPinCap.cpp	/^int defiPin::hasUse() const {$/;"	f	class:defiPin
hasUse	lef/lef/lefiMacro.cpp	/^lefiPin::hasUse() const$/;"	f	class:lefiPin
hasUse_	def/def/defiPinCap.hpp	/^  char hasUse_;$/;"	m	class:defiPin
hasUse_	lef/include/lefiMacro.hpp	/^  char hasUse_;$/;"	m	class:lefiPin
hasUse_	lef/lef/lefiMacro.hpp	/^  char hasUse_;$/;"	m	class:lefiPin
hasVHI	lef/lef/lefiMacro.cpp	/^lefiPin::hasVHI() const$/;"	f	class:lefiPin
hasVHI_	lef/include/lefiMacro.hpp	/^  char hasVHI_; $/;"	m	class:lefiPin
hasVHI_	lef/lef/lefiMacro.hpp	/^  char hasVHI_; $/;"	m	class:lefiPin
hasVLO	lef/lef/lefiMacro.cpp	/^lefiPin::hasVLO() const$/;"	f	class:lefiPin
hasVLO_	lef/include/lefiMacro.hpp	/^  char hasVLO_;$/;"	m	class:lefiPin
hasVLO_	lef/lef/lefiMacro.hpp	/^  char hasVLO_;$/;"	m	class:lefiPin
hasVariableFall	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasVariableFall() const {$/;"	f	class:defiIOTiming
hasVariableFall_	def/def/defiIOTiming.hpp	/^  char hasVariableFall_;$/;"	m	class:defiIOTiming
hasVariableRise	def/def/defiIOTiming.cpp	/^int defiIOTiming::hasVariableRise() const {$/;"	f	class:defiIOTiming
hasVariableRise_	def/def/defiIOTiming.hpp	/^  char hasVariableRise_;$/;"	m	class:defiIOTiming
hasVer	def/def/defrData.hpp	/^    int  hasVer; \/\/ keep track VERSION is in the file$/;"	m	class:defrData
hasVer	lef/include/lefrData.hpp	/^    int  hasVer; $/;"	m	class:lefrData
hasVer	lef/lef/lefrData.hpp	/^    int  hasVer; $/;"	m	class:lefrData
hasVia	def/def/defiFill.cpp	/^int defiFill::hasVia() const {$/;"	f	class:defiFill
hasViaOpc	def/def/defiFill.cpp	/^int defiFill::hasViaOpc() const {$/;"	f	class:defiFill
hasViaRule	def/def/defiVia.cpp	/^int defiVia::hasViaRule() const {$/;"	f	class:defiVia
hasViaRule	lef/lef/lefiVia.cpp	/^lefiVia::hasViaRule() const$/;"	f	class:lefiVia
hasViaRule_	def/def/defiVia.hpp	/^  int   hasViaRule_;        \/\/ 5.6$/;"	m	class:defiVia
hasViaRule_layer	lef/include/lefrData.hpp	/^    int  hasViaRule_layer; $/;"	m	class:lefrData
hasViaRule_layer	lef/lef/lefrData.hpp	/^    int  hasViaRule_layer; $/;"	m	class:lefrData
hasViaWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasViaWidth() const$/;"	f	class:lefiLayer
hasVia_	def/def/defiFill.hpp	/^  int   hasVia_;                    \/\/ 5.7$/;"	m	class:defiFill
hasVoltage	def/def/defiNet.cpp	/^int defiNet::hasVoltage() const {$/;"	f	class:defiNet
hasVoltage	lef/lef/lefiUnits.cpp	/^lefiUnits::hasVoltage() const$/;"	f	class:lefiUnits
hasVoltage_	def/def/defiNet.hpp	/^  char hasVoltage_;$/;"	m	class:defiNet
hasVoltage_	lef/include/lefiUnits.hpp	/^  int hasVoltage_;$/;"	m	class:lefiUnits
hasVoltage_	lef/lef/lefiUnits.hpp	/^  int hasVoltage_;$/;"	m	class:lefiUnits
hasWeight	def/def/defiComponent.cpp	/^int defiComponent::hasWeight() const {$/;"	f	class:defiComponent
hasWeight	def/def/defiNet.cpp	/^int defiNet::hasWeight() const {$/;"	f	class:defiNet
hasWeight_	def/def/defiComponent.hpp	/^  char hasWeight_;      \/\/ the file supplied a weight$/;"	m	class:defiComponent
hasWeight_	def/def/defiNet.hpp	/^  char      hasWeight_;     \/\/ flag for optional weight$/;"	m	class:defiNet
hasWidth	lef/include/lefrData.hpp	/^    int  hasWidth; $/;"	m	class:lefrData
hasWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::hasWidth() const$/;"	f	class:lefiLayer
hasWidth	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasWidth() const$/;"	f	class:lefiViaRuleLayer
hasWidth	lef/lef/lefrData.hpp	/^    int  hasWidth; $/;"	m	class:lefrData
hasWidthPRL	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::hasWidthPRL(int index) const$/;"	f	class:lefiTwoWidths
hasWidthRules	def/def/defiNet.cpp	/^int defiNet::hasWidthRules() const {$/;"	f	class:defiNet
hasWidth_	lef/include/lefiLayer.hpp	/^  int hasWidth_;            $/;"	m	class:lefiLayer
hasWidth_	lef/include/lefiNonDefault.hpp	/^  char* hasWidth_;$/;"	m	class:lefiNonDefault
hasWidth_	lef/include/lefiViaRule.hpp	/^  int hasWidth_;$/;"	m	class:lefiViaRuleLayer
hasWidth_	lef/lef/lefiLayer.hpp	/^  int hasWidth_;            $/;"	m	class:lefiLayer
hasWidth_	lef/lef/lefiNonDefault.hpp	/^  char* hasWidth_;$/;"	m	class:lefiNonDefault
hasWidth_	lef/lef/lefiViaRule.hpp	/^  int hasWidth_;$/;"	m	class:lefiViaRuleLayer
hasWireExt_	def/def/defiNonDefault.hpp	/^  char*   hasWireExt_;$/;"	m	class:defiNonDefault
hasWireExtension	lef/lef/lefiLayer.cpp	/^lefiLayer::hasWireExtension() const$/;"	f	class:lefiLayer
hasWireExtension_	lef/include/lefiLayer.hpp	/^  int hasWireExtension_;$/;"	m	class:lefiLayer
hasWireExtension_	lef/include/lefiNonDefault.hpp	/^  char* hasWireExtension_;$/;"	m	class:lefiNonDefault
hasWireExtension_	lef/lef/lefiLayer.hpp	/^  int hasWireExtension_;$/;"	m	class:lefiLayer
hasWireExtension_	lef/lef/lefiNonDefault.hpp	/^  char* hasWireExtension_;$/;"	m	class:lefiNonDefault
hasXSymmetry	lef/lef/lefiMacro.cpp	/^lefiMacro::hasXSymmetry() const$/;"	f	class:lefiMacro
hasXSymmetry	lef/lef/lefiMisc.cpp	/^lefiSite::hasXSymmetry() const$/;"	f	class:lefiSite
hasXTalk	def/def/defiNet.cpp	/^int defiNet::hasXTalk() const {$/;"	f	class:defiNet
hasXYDiagPitch	lef/lef/lefiLayer.cpp	/^lefiLayer::hasXYDiagPitch() const$/;"	f	class:lefiLayer
hasXYOffset	lef/lef/lefiLayer.cpp	/^lefiLayer::hasXYOffset() const$/;"	f	class:lefiLayer
hasXYPitch	lef/lef/lefiLayer.cpp	/^lefiLayer::hasXYPitch() const$/;"	f	class:lefiLayer
hasYSymmetry	lef/lef/lefiMacro.cpp	/^lefiMacro::hasYSymmetry() const$/;"	f	class:lefiMacro
hasYSymmetry	lef/lef/lefiMisc.cpp	/^lefiSite::hasYSymmetry() const$/;"	f	class:lefiSite
height	lef/lef/lefiLayer.cpp	/^lefiLayer::height() const$/;"	f	class:lefiLayer
height_	lef/include/lefiLayer.hpp	/^  double height_;$/;"	m	class:lefiLayer
height_	lef/lef/lefiLayer.hpp	/^  double height_;$/;"	m	class:lefiLayer
high	lef/clef/lefiTypedefs.h	/^  double high;$/;"	m	struct:lefiNoiseMargin
high	lef/include/lefiCrossTalk.hpp	/^  double high;$/;"	m	struct:lefiNoiseMargin
high	lef/include/lefiTypedefs.h	/^  double high;$/;"	m	struct:lefiNoiseMargin
high	lef/lef/lefiCrossTalk.hpp	/^  double high;$/;"	m	struct:lefiNoiseMargin
highTableSize_	lef/include/lefiMacro.hpp	/^  int highTableSize_;$/;"	m	class:lefiPin
highTableSize_	lef/lef/lefiMacro.hpp	/^  int highTableSize_;$/;"	m	class:lefiPin
highTable_	lef/include/lefiMacro.hpp	/^  char* highTable_;$/;"	m	class:lefiPin
highTable_	lef/lef/lefiMacro.hpp	/^  char* highTable_;$/;"	m	class:lefiPin
hist	def/defdiff/diffDefRW.cpp	/^int hist(defrCallbackType_e c, const char* h, defiUserData ud) {$/;"	f
hist	def/defrw/defrw.cpp	/^int hist(defrCallbackType_e c, const char* h, defiUserData ud) {$/;"	f
history	def/def/def.y	/^history: K_HISTORY$/;"	l
historyCB	def/defwrite/defwriteCbs.cpp	/^int historyCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
hold_	def/def/defiPartition.hpp	/^  char hold_;$/;"	m	class:defiPartition
iOTimingWarnings	def/def/defrData.hpp	/^    int  iOTimingWarnings; $/;"	m	class:defrData
iRDropWarnings	lef/include/lefrData.hpp	/^    int  iRDropWarnings; $/;"	m	class:lefrData
iRDropWarnings	lef/lef/lefrData.hpp	/^    int  iRDropWarnings; $/;"	m	class:lefrData
id	def/def/defiComponent.cpp	/^const char* defiComponent::id() const {$/;"	f	class:defiComponent
idSize_	def/def/defiComponent.hpp	/^  int idSize_;          \/\/ allocated size of id.$/;"	m	class:defiComponent
id_	def/def/defiComponent.hpp	/^  char* id_;            \/\/ instance id$/;"	m	class:defiComponent
ignorePE	def/defdiff/diffDefRW.cpp	/^static int ignorePE = 0;$/;"	v	file:
ignoreRN	def/defdiff/diffDefRW.cpp	/^static int ignoreRN = 0;$/;"	v	file:
ignoreRowNames	def/defrw/defrw.cpp	/^static int ignoreRowNames = 0;$/;"	v	file:
ignoreVN	def/defdiff/diffDefRW.cpp	/^static int ignoreVN = 0;$/;"	v	file:
ignoreVersion	lef/include/lefrData.hpp	/^    int  ignoreVersion; \/\/ ignore checking version number$/;"	m	class:lefrData
ignoreVersion	lef/lef/lefrData.hpp	/^    int  ignoreVersion; \/\/ ignore checking version number$/;"	m	class:lefrData
ignoreViaNames	def/defrw/defrw.cpp	/^static int ignoreViaNames = 0;$/;"	v	file:
in	def/def/defiScanchain.cpp	/^char** defiOrdered::in() const {$/;"	f	class:defiOrdered
inDefine	lef/include/lefrData.hpp	/^    int  inDefine; $/;"	m	class:lefrData
inDefine	lef/lef/lefrData.hpp	/^    int  inDefine; $/;"	m	class:lefrData
inMarginH_	lef/include/lefiMacro.hpp	/^  double inMarginH_;$/;"	m	class:lefiPin
inMarginH_	lef/lef/lefiMacro.hpp	/^  double inMarginH_;$/;"	m	class:lefiPin
inMarginHigh	lef/lef/lefiMacro.cpp	/^lefiPin::inMarginHigh() const$/;"	f	class:lefiPin
inMarginL_	lef/include/lefiMacro.hpp	/^  double inMarginL_;$/;"	m	class:lefiPin
inMarginL_	lef/lef/lefiMacro.hpp	/^  double inMarginL_;$/;"	m	class:lefiPin
inMarginLow	lef/lef/lefiMacro.cpp	/^lefiPin::inMarginLow() const$/;"	f	class:lefiPin
in_	def/def/defiScanchain.hpp	/^  char** in_;$/;"	m	class:defiOrdered
influence	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::influence() const$/;"	f	class:lefiSpacingTable
influence_	lef/include/lefiLayer.hpp	/^  lefiInfluence*   influence_;$/;"	m	class:lefiSpacingTable
influence_	lef/lef/lefiLayer.hpp	/^  lefiInfluence*   influence_;$/;"	m	class:lefiSpacingTable
initRead	lef/lef/lefrData.cpp	/^lefrData::initRead()$/;"	f	class:lefrData
initTraverse	def/def/defiPath.cpp	/^void defiPath::initTraverse() const {$/;"	f	class:defiPath
initTraverseBackwards	def/def/defiPath.cpp	/^void defiPath::initTraverseBackwards() const {$/;"	f	class:defiPath
init_call_func	def/def/defrData.hpp	/^    const char            *init_call_func;$/;"	m	class:defrContext
init_call_func	lef/lef/lefrReader.cpp	/^static const char *init_call_func = NULL;$/;"	v	file:
init_symbol_table	def/def/defrSettings.cpp	/^defrSettings::init_symbol_table()$/;"	f	class:defrSettings
init_symbol_table	lef/lef/lefrSettings.cpp	/^lefrSettings::init_symbol_table()$/;"	f	class:lefrSettings
inoutAntCB	lef/lefdiff/diffLefRW.cpp	/^int inoutAntCB(lefrCallbackType_e c, double antenna, lefiUserData ud) {$/;"	f
inoutAntennaWarnings	lef/include/lefrData.hpp	/^    int  inoutAntennaWarnings; $/;"	m	class:lefrData
inoutAntennaWarnings	lef/lef/lefrData.hpp	/^    int  inoutAntennaWarnings; $/;"	m	class:lefrData
inout_antenna	lef/lef/lef.y	/^inout_antenna: K_INOUTPINANTENNASIZE int_number ';'$/;"	l
inputAntCB	lef/lefdiff/diffLefRW.cpp	/^int inputAntCB(lefrCallbackType_e c, double antenna, lefiUserData ud) {$/;"	f
inputAntennaWarnings	lef/include/lefrData.hpp	/^    int  inputAntennaWarnings; $/;"	m	class:lefrData
inputAntennaWarnings	lef/lef/lefrData.hpp	/^    int  inputAntennaWarnings; $/;"	m	class:lefrData
input_antenna	lef/lef/lef.y	/^input_antenna: K_INPUTPINANTENNASIZE int_number ';'$/;"	l
input_level	def/def/defrData.hpp	/^    int  input_level; $/;"	m	class:defrData
input_level	lef/include/lefrData.hpp	/^    int  input_level; $/;"	m	class:lefrData
input_level	lef/lef/lefrData.hpp	/^    int  input_level; $/;"	m	class:lefrData
inst	def/def/defiIOTiming.cpp	/^const char* defiIOTiming::inst() const {$/;"	f	class:defiIOTiming
inst	def/def/defiScanchain.cpp	/^char** defiOrdered::inst() const {$/;"	f	class:defiOrdered
instLength_	def/def/defiIOTiming.hpp	/^  int instLength_;$/;"	m	class:defiIOTiming
instLength_	def/def/defiPartition.hpp	/^  int instLength_;$/;"	m	class:defiPartition
instName	def/def/defiPartition.cpp	/^const char* defiPartition::instName() const {$/;"	f	class:defiPartition
instName	def/def/defiPinProp.cpp	/^const char* defiPinProp::instName() const {$/;"	f	class:defiPinProp
instNameSize_	def/def/defiPinProp.hpp	/^  int instNameSize_;$/;"	m	class:defiPinProp
instName_	def/def/defiPinProp.hpp	/^  char* instName_;$/;"	m	class:defiPinProp
inst_	def/def/defiIOTiming.hpp	/^  char* inst_;$/;"	m	class:defiIOTiming
inst_	def/def/defiPartition.hpp	/^  char* inst_;$/;"	m	class:defiPartition
inst_	def/def/defiScanchain.hpp	/^  char** inst_;$/;"	m	class:defiOrdered
instance	def/def/defiNet.cpp	/^const char* defiNet::instance(int index) const {$/;"	f	class:defiNet
instance	def/def/defiNet.cpp	/^const char* defiSubnet::instance(int index) const {$/;"	f	class:defiSubnet
instances_	def/def/defiNet.hpp	/^  char**        instances_;      \/\/ instance names for connections$/;"	m	class:defiSubnet
instances_	def/def/defiNet.hpp	/^  char**    instances_;     \/\/ instance names for connections$/;"	m	class:defiNet
int_number	lef/lef/lef.y	/^int_number : NUMBER $/;"	l
int_number_list	lef/lef/lef.y	/^int_number_list:$/;"	l
integer	def/def/defrData.hpp	/^        int    integer ;$/;"	m	union:__anon17
integer	lef/lef/lef.tab.cpp	/^        int       integer ;$/;"	m	union:YYSTYPE	file:
integer	lef/lef/lef.tab.h	/^        int       integer ;$/;"	m	union:YYSTYPE
iotiming_drivecell_opt	def/def/def.y	/^iotiming_drivecell_opt: iotiming_frompin$/;"	l
iotiming_end	def/def/def.y	/^iotiming_end: K_END K_IOTIMINGS$/;"	l
iotiming_frompin	def/def/def.y	/^iotiming_frompin: \/\/ empty $/;"	l
iotiming_member	def/def/def.y	/^iotiming_member:$/;"	l
iotiming_members	def/def/def.y	/^iotiming_members: $/;"	l
iotiming_parallel	def/def/def.y	/^iotiming_parallel: \/\/ empty $/;"	l
iotiming_rule	def/def/def.y	/^iotiming_rule: start_iotiming iotiming_members ';' $/;"	l
iotiming_rules	def/def/def.y	/^iotiming_rules: \/\/ empty $/;"	l
iotiming_section	def/def/def.y	/^iotiming_section: iotiming_start iotiming_rules iotiming_end$/;"	l
iotiming_start	def/def/def.y	/^iotiming_start: K_IOTIMINGS NUMBER ';'$/;"	l
ir_table	lef/lef/lef.y	/^ir_table: ir_tablename ir_table_values ';'$/;"	l
ir_table_value	lef/lef/lef.y	/^ir_table_value: int_number int_number $/;"	l
ir_table_values	lef/lef/lef.y	/^ir_table_values:$/;"	l
ir_tablename	lef/lef/lef.y	/^ir_tablename: K_TABLE T_STRING$/;"	l
ir_tables	lef/lef/lef.y	/^ir_tables:$/;"	l
irdrop	lef/lef/lef.y	/^irdrop: start_irdrop ir_tables end_irdrop$/;"	l
irdropBeginCB	lef/lefrw/lefrw.cpp	/^int irdropBeginCB(lefrCallbackType_e c, void*, lefiUserData){$/;"	f
irdropCB	lef/lefdiff/diffLefRW.cpp	/^int irdropCB(lefrCallbackType_e c, lefiIRDrop* irdrop, lefiUserData ud) {$/;"	f
irdropCB	lef/lefrw/lefrw.cpp	/^int irdropCB(lefrCallbackType_e c, lefiIRDrop* irdrop, lefiUserData) {$/;"	f
irdropEndCB	lef/lefrw/lefrw.cpp	/^int irdropEndCB(lefrCallbackType_e c, void*, lefiUserData){$/;"	f
isAssertion	def/def/defiAssertion.cpp	/^int defiAssertion::isAssertion() const {$/;"	f	class:defiAssertion
isAssertion_	def/def/defiAssertion.hpp	/^  char isAssertion_;$/;"	m	class:defiAssertion
isBuffer	lef/lef/lefiMacro.cpp	/^lefiMacro::isBuffer() const$/;"	f	class:lefiMacro
isBuffer_	lef/include/lefiMacro.hpp	/^  char isBuffer_;$/;"	m	class:lefiMacro
isBuffer_	lef/lef/lefiMacro.hpp	/^  char isBuffer_;$/;"	m	class:lefiMacro
isConstraint	def/def/defiAssertion.cpp	/^int defiAssertion::isConstraint() const {$/;"	f	class:defiAssertion
isCover	def/def/defiComponent.cpp	/^int defiComponent::isCover() const {$/;"	f	class:defiComponent
isCover	def/def/defiNet.cpp	/^int defiNet::isCover() const {$/;"	f	class:defiNet
isCover	def/def/defiNet.cpp	/^int defiSubnet::isCover() const {$/;"	f	class:defiSubnet
isCover	def/def/defiPinCap.cpp	/^int defiPin::isCover() const {$/;"	f	class:defiPin
isCover	def/def/defiPinCap.cpp	/^int defiPinPort::isCover() const {$/;"	f	class:defiPinPort
isCover_	def/def/defiNet.hpp	/^  char       isCover_;$/;"	m	class:defiSubnet
isCover_	def/def/defiNet.hpp	/^  char isCover_;$/;"	m	class:defiNet
isDelay	def/def/defiAssertion.cpp	/^int defiAssertion::isDelay() const {$/;"	f	class:defiAssertion
isDelay_	def/def/defiAssertion.hpp	/^  char isDelay_;$/;"	m	class:defiAssertion
isDiff	def/def/defiAssertion.cpp	/^int defiAssertion::isDiff() const {$/;"	f	class:defiAssertion
isDiff_	def/def/defiAssertion.hpp	/^  char isDiff_;$/;"	m	class:defiAssertion
isFixed	def/def/defiComponent.cpp	/^int defiComponent::isFixed() const {$/;"	f	class:defiComponent
isFixed	def/def/defiNet.cpp	/^int defiNet::isFixed() const {$/;"	f	class:defiNet
isFixed	def/def/defiNet.cpp	/^int defiSubnet::isFixed() const {$/;"	f	class:defiSubnet
isFixed	def/def/defiPinCap.cpp	/^int defiPin::isFixed() const {$/;"	f	class:defiPin
isFixed	def/def/defiPinCap.cpp	/^int defiPinPort::isFixed() const {$/;"	f	class:defiPinPort
isFixedMask	lef/lef/lefiMacro.cpp	/^lefiMacro::isFixedMask() const$/;"	f	class:lefiMacro
isFixedMask_	lef/include/lefiMacro.hpp	/^  int isFixedMask_;$/;"	m	class:lefiMacro
isFixedMask_	lef/lef/lefiMacro.hpp	/^  int isFixedMask_;$/;"	m	class:lefiMacro
isFixed_	def/def/defiNet.hpp	/^  char       isFixed_;        \/\/ net type$/;"	m	class:defiSubnet
isFixed_	def/def/defiNet.hpp	/^  char isFixed_;        \/\/ net type$/;"	m	class:defiNet
isGenerate	lef/include/lefrData.hpp	/^    int  isGenerate; $/;"	m	class:lefrData
isGenerate	lef/lef/lefrData.hpp	/^    int  isGenerate; $/;"	m	class:lefrData
isHoldFall	def/def/defiPartition.cpp	/^int defiPartition::isHoldFall() const {$/;"	f	class:defiPartition
isHoldRise	def/def/defiPartition.cpp	/^int defiPartition::isHoldRise() const {$/;"	f	class:defiPartition
isHorizontal	def/def/defiFPC.cpp	/^int defiFPC::isHorizontal() const {$/;"	f	class:defiFPC
isHorizontal	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::isHorizontal() const$/;"	f	class:lefiViaRuleLayer
isInfluence	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::isInfluence() const$/;"	f	class:lefiSpacingTable
isInverter	lef/lef/lefiMacro.cpp	/^lefiMacro::isInverter() const$/;"	f	class:lefiMacro
isInverter_	lef/include/lefiMacro.hpp	/^  char isInverter_;$/;"	m	class:lefiMacro
isInverter_	lef/lef/lefiMacro.hpp	/^  char isInverter_;$/;"	m	class:lefiMacro
isNet	def/def/defiAssertion.cpp	/^int defiAssertion::isNet(int index) const {$/;"	f	class:defiAssertion
isParallel	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::isParallel() const$/;"	f	class:lefiSpacingTable
isPath	def/def/defiAssertion.cpp	/^int defiAssertion::isPath(int index) const {$/;"	f	class:defiAssertion
isPin	def/def/defiPinProp.cpp	/^int defiPinProp::isPin() const {$/;"	f	class:defiPinProp
isPin_	def/def/defiPinProp.hpp	/^  char isPin_;$/;"	m	class:defiPinProp
isPlaced	def/def/defiComponent.cpp	/^int defiComponent::isPlaced() const {$/;"	f	class:defiComponent
isPlaced	def/def/defiPinCap.cpp	/^int defiPin::isPlaced() const {$/;"	f	class:defiPin
isPlaced	def/def/defiPinCap.cpp	/^int defiPinPort::isPlaced() const {$/;"	f	class:defiPinPort
isProp	def/defdiff/diffDefRW.cpp	/^int isProp = 0;    \/\/ for PROPDEF$/;"	v
isProp	def/defrw/defrw.cpp	/^int isProp = 0;    \/\/ for PROPERTYDEFINITIONS$/;"	v
isRouted	def/def/defiNet.cpp	/^int defiNet::isRouted() const {$/;"	f	class:defiNet
isRouted	def/def/defiNet.cpp	/^int defiSubnet::isRouted() const {$/;"	f	class:defiSubnet
isRouted_	def/def/defiNet.hpp	/^  char       isRouted_;$/;"	m	class:defiSubnet
isRouted_	def/def/defiNet.hpp	/^  char isRouted_;$/;"	m	class:defiNet
isSessionles	lef/lefrw/lefrw.cpp	/^int isSessionles = 0;$/;"	v
isSessionless	def/defrw/defrw.cpp	/^static int isSessionless = 0;$/;"	v	file:
isSetupFall	def/def/defiPartition.cpp	/^int defiPartition::isSetupFall() const {$/;"	f	class:defiPartition
isSetupRise	def/def/defiPartition.cpp	/^int defiPartition::isSetupRise() const {$/;"	f	class:defiPartition
isSum	def/def/defiAssertion.cpp	/^int defiAssertion::isSum() const {$/;"	f	class:defiAssertion
isSumSet	def/defdiff/diffDefRW.cpp	/^int isSumSet;      \/\/ to keep track if within SUM$/;"	v
isSumSet	def/defrw/defrw.cpp	/^int isSumSet;      \/\/ to keep track if within SUM$/;"	v
isSum_	def/def/defiAssertion.hpp	/^  char isSum_;$/;"	m	class:defiAssertion
isUnplaced	def/def/defiComponent.cpp	/^int defiComponent::isUnplaced() const {$/;"	f	class:defiComponent
isUnplaced	def/def/defiPinCap.cpp	/^int defiPin::isUnplaced() const {$/;"	f	class:defiPin
isVertical	def/def/defiFPC.cpp	/^int defiFPC::isVertical() const {$/;"	f	class:defiFPC
isVertical	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::isVertical() const$/;"	f	class:lefiViaRuleLayer
isWiredlogic	def/def/defiAssertion.cpp	/^int defiAssertion::isWiredlogic() const {$/;"	f	class:defiAssertion
isWiredlogic_	def/def/defiAssertion.hpp	/^  char isWiredlogic_;$/;"	m	class:defiAssertion
itemType	def/def/defiPartition.cpp	/^const char* defiPartition::itemType() const {$/;"	f	class:defiPartition
itemType	lef/lef/lefiMisc.cpp	/^lefiGeometries::itemType(int index) const$/;"	f	class:lefiGeometries
itemType_	lef/include/lefiMisc.hpp	/^  lefiGeomEnum* itemType_;$/;"	m	class:lefiGeometries
itemType_	lef/lef/lefiMisc.hpp	/^  lefiGeomEnum* itemType_;$/;"	m	class:lefiGeometries
itemTypes_	def/def/defiAssertion.hpp	/^  char* itemTypes_;$/;"	m	class:defiAssertion
itemsAllocated_	lef/include/lefiMisc.hpp	/^  int itemsAllocated_;$/;"	m	class:lefiGeometries
itemsAllocated_	lef/lef/lefiMisc.hpp	/^  int itemsAllocated_;$/;"	m	class:lefiGeometries
items_	def/def/defiAssertion.hpp	/^  int** items_;       \/\/ not really integers.$/;"	m	class:defiAssertion
items_	lef/include/lefiMisc.hpp	/^  void** items_;$/;"	m	class:lefiGeometries
items_	lef/lef/lefiMisc.hpp	/^  void** items_;$/;"	m	class:lefiGeometries
iterator	def/def/defiAlias.hpp	/^  defAliasIterator   *iterator;$/;"	m	class:defiAlias_itr
keys_	def/def/defiPath.hpp	/^  int* keys_;           \/\/ type of item in path$/;"	m	class:defiPath
keyword	def/def/defrData.hpp	/^        int    keyword ;  \/\/ really just a nop $/;"	m	union:__anon17
lVal	def/def/defrData.hpp	/^    double lVal;$/;"	m	class:defrData
last	def/def/defrData.hpp	/^    char*  last; $/;"	m	class:defrData
last	lef/include/lefrData.hpp	/^    char*  last; $/;"	m	class:lefrData
last	lef/lef/lefrData.hpp	/^    char*  last; $/;"	m	class:lefrData
layer	def/def/defiNet.cpp	/^const char* defiVpin::layer() const {$/;"	f	class:defiVpin
layer	def/def/defiPinCap.cpp	/^const char* defiPin::layer(int index) const {$/;"	f	class:defiPin
layer	def/def/defiPinCap.cpp	/^const char* defiPinPort::layer(int index) const {$/;"	f	class:defiPinPort
layer	def/def/defiRowTrack.cpp	/^const char* defiTrack::layer(int index) const {$/;"	f	class:defiTrack
layer	def/def/defiVia.cpp	/^void defiVia::layer(int index, char** layer, int* xl, int* yl, $/;"	f	class:defiVia
layer	lef/lef/lefiViaRule.cpp	/^lefiViaRule::layer(int index) const$/;"	f	class:lefiViaRule
layerAllocated_	lef/include/lefiMisc.hpp	/^  int    layerAllocated_;$/;"	m	class:lefiTrackPattern
layerAllocated_	lef/lef/lefiMisc.hpp	/^  int    layerAllocated_;$/;"	m	class:lefiTrackPattern
layerCB	lef/lefdiff/diffLefRW.cpp	/^int layerCB(lefrCallbackType_e c, lefiLayer* layer, lefiUserData ud) {$/;"	f
layerCB	lef/lefrw/lefrw.cpp	/^int layerCB(lefrCallbackType_e c, lefiLayer* layer, lefiUserData) {$/;"	f
layerCB	lef/lefwrite/lefwriteCbs.cpp	/^int layerCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
layerCapacitance	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::layerCapacitance(int index) const$/;"	f	class:lefiNonDefault
layerComponentName	def/def/defiBlockage.cpp	/^const char* defiBlockage::layerComponentName() const {$/;"	f	class:defiBlockage
layerCut	lef/include/lefrData.hpp	/^    int  layerCut; $/;"	m	class:lefrData
layerCut	lef/lef/lefrData.hpp	/^    int  layerCut; $/;"	m	class:lefrData
layerCutSpacing	lef/include/lefrData.hpp	/^    double  layerCutSpacing; $/;"	m	class:lefrData
layerCutSpacing	lef/lef/lefrData.hpp	/^    double  layerCutSpacing; $/;"	m	class:lefrData
layerDesignRuleWidth	def/def/defiPinCap.cpp	/^int defiPin::layerDesignRuleWidth(int index) const {$/;"	f	class:defiPin
layerDesignRuleWidth	def/def/defiPinCap.cpp	/^int defiPinPort::layerDesignRuleWidth(int index) const {$/;"	f	class:defiPinPort
layerDiagWidth	def/def/defiNonDefault.cpp	/^double defiNonDefault::layerDiagWidth(int index) const { $/;"	f	class:defiNonDefault
layerDiagWidth	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::layerDiagWidth(int index) const$/;"	f	class:lefiNonDefault
layerDiagWidthVal	def/def/defiNonDefault.cpp	/^int defiNonDefault::layerDiagWidthVal(int index) const { $/;"	f	class:defiNonDefault
layerDir	lef/include/lefrData.hpp	/^    int  layerDir; $/;"	m	class:lefrData
layerDir	lef/lef/lefrData.hpp	/^    int  layerDir; $/;"	m	class:lefrData
layerEdgeCap	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::layerEdgeCap(int index) const$/;"	f	class:lefiNonDefault
layerEffectiveWidth_	def/def/defiPinCap.hpp	/^  int    *layerEffectiveWidth_;$/;"	m	class:defiPinPort
layerEffectiveWidth_	def/def/defiPinCap.hpp	/^  int *layerEffectiveWidth_;        \/\/ 5.6, DESIGNRULEWIDTH in LAYER$/;"	m	class:defiPin
layerMask	def/def/defiFill.cpp	/^int defiFill::layerMask() const {$/;"	f	class:defiFill
layerMask	def/def/defiPinCap.cpp	/^int defiPin::layerMask(int index) const {$/;"	f	class:defiPin
layerMask	def/def/defiPinCap.cpp	/^int defiPinPort::layerMask(int index) const {$/;"	f	class:defiPinPort
layerMask_	def/def/defiPinCap.hpp	/^  int    *layerMask_;$/;"	m	class:defiPinPort
layerMask_	def/def/defiPinCap.hpp	/^  int *layerMask_;                  \/\/ 5.8$/;"	m	class:defiPin
layerMastOver	lef/include/lefrData.hpp	/^    int  layerMastOver; $/;"	m	class:lefrData
layerMastOver	lef/lef/lefrData.hpp	/^    int  layerMastOver; $/;"	m	class:lefrData
layerMinSpacing_	def/def/defiPinCap.hpp	/^  int    *layerMinSpacing_;$/;"	m	class:defiPinPort
layerMinSpacing_	def/def/defiPinCap.hpp	/^  int *layerMinSpacing_;            \/\/ 5.6, SPACING in LAYER$/;"	m	class:defiPin
layerName	def/def/defiBlockage.cpp	/^const char* defiBlockage::layerName() const {$/;"	f	class:defiBlockage
layerName	def/def/defiFill.cpp	/^const char* defiFill::layerName() const {$/;"	f	class:defiFill
layerName	def/def/defiNonDefault.cpp	/^const char* defiNonDefault::layerName(int index) const { $/;"	f	class:defiNonDefault
layerName	def/def/defiSlot.cpp	/^const char* defiSlot::layerName() const {$/;"	f	class:defiSlot
layerName	lef/include/lefrData.hpp	/^    char*  layerName; $/;"	m	class:lefrData
layerName	lef/lef/lefiMacro.cpp	/^lefiDensity::layerName(int index) const$/;"	f	class:lefiDensity
layerName	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::layerName(int index) const$/;"	f	class:lefiTrackPattern
layerName	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::layerName(int index) const$/;"	f	class:lefiNonDefault
layerName	lef/lef/lefiVia.cpp	/^lefiVia::layerName(int layerNum) const$/;"	f	class:lefiVia
layerName	lef/lef/lefrData.hpp	/^    char*  layerName; $/;"	m	class:lefrData
layerNameLength_	def/def/defiBlockage.hpp	/^  int    layerNameLength_;$/;"	m	class:defiBlockage
layerNameLength_	def/def/defiFill.hpp	/^  int   layerNameLength_;$/;"	m	class:defiFill
layerNameLength_	def/def/defiSlot.hpp	/^  int   layerNameLength_;$/;"	m	class:defiSlot
layerName_	def/def/defiBlockage.hpp	/^  char*  layerName_;$/;"	m	class:defiBlockage
layerName_	def/def/defiFill.hpp	/^  char* layerName_;$/;"	m	class:defiFill
layerName_	def/def/defiNonDefault.hpp	/^  char**  layerName_;$/;"	m	class:defiNonDefault
layerName_	def/def/defiSlot.hpp	/^  char* layerName_;$/;"	m	class:defiSlot
layerName_	lef/include/lefiMacro.hpp	/^  char** layerName_;$/;"	m	class:lefiDensity
layerName_	lef/include/lefiNonDefault.hpp	/^  char** layerName_;$/;"	m	class:lefiNonDefault
layerName_	lef/lef/lefiMacro.hpp	/^  char** layerName_;$/;"	m	class:lefiDensity
layerName_	lef/lef/lefiNonDefault.hpp	/^  char** layerName_;$/;"	m	class:lefiNonDefault
layerNames_	lef/include/lefiMisc.hpp	/^  char** layerNames_;$/;"	m	class:lefiTrackPattern
layerNames_	lef/lef/lefiMisc.hpp	/^  char** layerNames_;$/;"	m	class:lefiTrackPattern
layerOpc_	def/def/defiFill.hpp	/^  int   layerOpc_;                  \/\/ 5.7$/;"	m	class:defiFill
layerResistance	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::layerResistance(int index) const$/;"	f	class:lefiNonDefault
layerRout	lef/include/lefrData.hpp	/^    int  layerRout; $/;"	m	class:lefrData
layerRout	lef/lef/lefrData.hpp	/^    int  layerRout; $/;"	m	class:lefrData
layerSpacing	def/def/defiNonDefault.cpp	/^double defiNonDefault::layerSpacing(int index) const { $/;"	f	class:defiNonDefault
layerSpacing	def/def/defiPinCap.cpp	/^int defiPin::layerSpacing(int index) const {$/;"	f	class:defiPin
layerSpacing	def/def/defiPinCap.cpp	/^int defiPinPort::layerSpacing(int index) const {$/;"	f	class:defiPinPort
layerSpacing	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::layerSpacing(int index) const$/;"	f	class:lefiNonDefault
layerSpacingVal	def/def/defiNonDefault.cpp	/^int defiNonDefault::layerSpacingVal(int index) const { $/;"	f	class:defiNonDefault
layerType	lef/lef/lefiLayer.cpp	/^lefiLayer::layerType() const$/;"	f	class:lefiLayer
layerType_	lef/include/lefiLayer.hpp	/^  char* layerType_;   \/\/ 5.8 - POLYROUTING, MIMCAP, TSV, PASSIVATION, NWELL$/;"	m	class:lefiLayer
layerType_	lef/lef/lefiLayer.hpp	/^  char* layerType_;   \/\/ 5.8 - POLYROUTING, MIMCAP, TSV, PASSIVATION, NWELL$/;"	m	class:lefiLayer
layerWarnings	lef/include/lefrData.hpp	/^    int  layerWarnings; $/;"	m	class:lefrData
layerWarnings	lef/lef/lefrData.hpp	/^    int  layerWarnings; $/;"	m	class:lefrData
layerWidth	def/def/defiNonDefault.cpp	/^double defiNonDefault::layerWidth(int index) const { $/;"	f	class:defiNonDefault
layerWidth	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::layerWidth(int index) const$/;"	f	class:lefiNonDefault
layerWidthVal	def/def/defiNonDefault.cpp	/^int defiNonDefault::layerWidthVal(int index) const { $/;"	f	class:defiNonDefault
layerWireExt	def/def/defiNonDefault.cpp	/^double defiNonDefault::layerWireExt(int index) const { $/;"	f	class:defiNonDefault
layerWireExtVal	def/def/defiNonDefault.cpp	/^int defiNonDefault::layerWireExtVal(int index) const { $/;"	f	class:defiNonDefault
layerWireExtension	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::layerWireExtension(int index) const$/;"	f	class:lefiNonDefault
layer_	def/def/defiNet.hpp	/^  char* layer_;$/;"	m	class:defiVpin
layer_antenna_duo	lef/lef/lef.y	/^layer_antenna_duo: \/\/ empty $/;"	l
layer_antenna_pwl	lef/lef/lef.y	/^layer_antenna_pwl:$/;"	l
layer_arraySpacing_arraycut	lef/lef/lef.y	/^layer_arraySpacing_arraycut:$/;"	l
layer_arraySpacing_arraycuts	lef/lef/lef.y	/^layer_arraySpacing_arraycuts:       \/\/ 5.7$/;"	l
layer_arraySpacing_long	lef/lef/lef.y	/^layer_arraySpacing_long:            \/\/ 5.7$/;"	l
layer_arraySpacing_width	lef/lef/lef.y	/^layer_arraySpacing_width:           \/\/ 5.7$/;"	l
layer_blockage_rule	def/def/def.y	/^layer_blockage_rule: '+' K_SPACING NUMBER$/;"	l
layer_blockage_rules	def/def/def.y	/^layer_blockage_rules: \/\/ empty $/;"	l
layer_diffusion_ratio	lef/lef/lef.y	/^layer_diffusion_ratio:$/;"	l
layer_diffusion_ratios	lef/lef/lef.y	/^layer_diffusion_ratios: \/\/ empty $/;"	l
layer_direction	lef/lef/lef.y	/^layer_direction:$/;"	l
layer_enclosure_type_opt	lef/lef/lef.y	/^layer_enclosure_type_opt: $/;"	l
layer_enclosure_width_except_opt	lef/lef/lef.y	/^layer_enclosure_width_except_opt: \/\/ empty $/;"	l
layer_enclosure_width_opt	lef/lef/lef.y	/^layer_enclosure_width_opt:  \/\/ empty $/;"	l
layer_exceptpgnet	lef/lef/lef.y	/^layer_exceptpgnet: \/\/ empty $/;"	l
layer_frequency	lef/lef/lef.y	/^layer_frequency:$/;"	l
layer_minen_width	lef/lef/lef.y	/^layer_minen_width:$/;"	l
layer_minimumcut_from	lef/lef/lef.y	/^layer_minimumcut_from: \/\/ empty $/;"	l
layer_minimumcut_length	lef/lef/lef.y	/^layer_minimumcut_length: \/\/ empty $/;"	l
layer_minimumcut_within	lef/lef/lef.y	/^layer_minimumcut_within: \/\/ empty $/;"	l
layer_minstep_option	lef/lef/lef.y	/^layer_minstep_option:$/;"	l
layer_minstep_options	lef/lef/lef.y	/^layer_minstep_options: \/\/ empty $/;"	l
layer_minstep_type	lef/lef/lef.y	/^layer_minstep_type:$/;"	l
layer_name	lef/lef/lef.y	/^layer_name: T_STRING$/;"	l
layer_option	lef/lef/lef.y	/^layer_option:$/;"	l
layer_options	lef/lef/lef.y	/^layer_options:$/;"	l
layer_oxide	lef/lef/lef.y	/^layer_oxide:$/;"	l
layer_preferenclosure_width_opt	lef/lef/lef.y	/^layer_preferenclosure_width_opt:  \/\/ empty $/;"	l
layer_prop	lef/lef/lef.y	/^layer_prop:$/;"	l
layer_prop_list	lef/lef/lef.y	/^layer_prop_list:$/;"	l
layer_rule	lef/lef/lef.y	/^layer_rule: start_layer $/;"	l
layer_sp_TwoWidth	lef/lef/lef.y	/^layer_sp_TwoWidth: K_WIDTH int_number layer_sp_TwoWidthsPRL int_number$/;"	l
layer_sp_TwoWidths	lef/lef/lef.y	/^layer_sp_TwoWidths: \/\/ empty               \/\/ 5.7$/;"	l
layer_sp_TwoWidthsPRL	lef/lef/lef.y	/^layer_sp_TwoWidthsPRL:                       \/\/ 5.7$/;"	l
layer_sp_influence_width	lef/lef/lef.y	/^layer_sp_influence_width: K_WIDTH int_number K_WITHIN int_number K_SPACING int_number$/;"	l
layer_sp_influence_widths	lef/lef/lef.y	/^layer_sp_influence_widths: \/\/ empty $/;"	l
layer_sp_parallel_width	lef/lef/lef.y	/^layer_sp_parallel_width: K_WIDTH int_number$/;"	l
layer_sp_parallel_widths	lef/lef/lef.y	/^layer_sp_parallel_widths: \/\/ empty $/;"	l
layer_spacing	lef/lef/lef.y	/^layer_spacing: \/\/ empty $/;"	l
layer_spacing_cut_routing	lef/lef/lef.y	/^layer_spacing_cut_routing:$/;"	l
layer_spacing_opt	lef/lef/lef.y	/^layer_spacing_opt: K_CENTERTOCENTER      \/\/ 5.7 $/;"	l
layer_spacing_opts	lef/lef/lef.y	/^layer_spacing_opts:$/;"	l
layer_spacingtable_opt	lef/lef/lef.y	/^layer_spacingtable_opt:$/;"	l
layer_spacingtable_opts	lef/lef/lef.y	/^layer_spacingtable_opts:      \/\/ 5.7 $/;"	l
layer_statement	def/def/def.y	/^layer_statement : \/\/ empty $/;"	l
layer_stmt	def/def/def.y	/^layer_stmt: '+' K_RECT {defData->dumb_mode = 1;defData->no_num = 1; } T_STRING mask pt pt $/;"	l
layer_stmts	def/def/def.y	/^layer_stmts: \/\/ empty $/;"	l
layer_table_type	lef/lef/lef.y	/^layer_table_type:$/;"	l
layer_type	lef/lef/lef.y	/^layer_type:$/;"	l
layer_viarule_opts	def/def/def.y	/^layer_viarule_opts: '+' K_ROWCOL NUMBER NUMBER$/;"	l
layersAllocated_	def/def/defiComponent.hpp	/^    int          layersAllocated_;  \/\/ allocated size of layers_$/;"	m	class:defiComponentMaskShiftLayer
layersAllocated_	def/def/defiNonDefault.hpp	/^  int     layersAllocated_;$/;"	m	class:defiNonDefault
layersAllocated_	def/def/defiPinCap.hpp	/^  int    layersAllocated_;$/;"	m	class:defiPinPort
layersAllocated_	def/def/defiPinCap.hpp	/^  int layersAllocated_;             \/\/ 5.6$/;"	m	class:defiPin
layersAllocated_	lef/include/lefiMacro.hpp	/^  int    layersAllocated_;$/;"	m	class:lefiDensity
layersAllocated_	lef/include/lefiNonDefault.hpp	/^  int layersAllocated_;$/;"	m	class:lefiNonDefault
layersAllocated_	lef/include/lefiVia.hpp	/^  int layersAllocated_;$/;"	m	class:lefiVia
layersAllocated_	lef/lef/lefiMacro.hpp	/^  int    layersAllocated_;$/;"	m	class:lefiDensity
layersAllocated_	lef/lef/lefiNonDefault.hpp	/^  int layersAllocated_;$/;"	m	class:lefiNonDefault
layersAllocated_	lef/lef/lefiVia.hpp	/^  int layersAllocated_;$/;"	m	class:lefiVia
layersLength_	def/def/defiRowTrack.hpp	/^  int layersLength_;  \/\/ allocated size of layers_$/;"	m	class:defiTrack
layersLength_	def/def/defiVia.hpp	/^  int layersLength_;$/;"	m	class:defiVia
layers_	def/def/defiComponent.hpp	/^    char**       layers_;$/;"	m	class:defiComponentMaskShiftLayer
layers_	def/def/defiPinCap.hpp	/^  char** layers_;                   \/\/ 5.6, changed to array$/;"	m	class:defiPin
layers_	def/def/defiPinCap.hpp	/^  char** layers_;$/;"	m	class:defiPinPort
layers_	def/def/defiRowTrack.hpp	/^  char** layers_;$/;"	m	class:defiTrack
layers_	def/def/defiVia.hpp	/^  char** layers_;$/;"	m	class:defiVia
layers_	lef/include/lefiVia.hpp	/^  lefiViaLayer** layers_;$/;"	m	class:lefiVia
layers_	lef/include/lefiViaRule.hpp	/^  lefiViaRuleLayer layers_[3];$/;"	m	class:lefiViaRule
layers_	lef/lef/lefiVia.hpp	/^  lefiViaLayer** layers_;$/;"	m	class:lefiVia
layers_	lef/lef/lefiViaRule.hpp	/^  lefiViaRuleLayer layers_[3];$/;"	m	class:lefiViaRule
leakage	lef/lef/lefiMacro.cpp	/^lefiPin::leakage() const$/;"	f	class:lefiPin
leakage_	lef/include/lefiMacro.hpp	/^  double leakage_;$/;"	m	class:lefiPin
leakage_	lef/lef/lefiMacro.hpp	/^  double leakage_;$/;"	m	class:lefiPin
lef58WidthTableOrthoValues_	lef/include/lefiLayer.hpp	/^  int     lef58WidthTableOrthoValues_;$/;"	m	class:lefiLayer
lef58WidthTableOrthoValues_	lef/lef/lefiLayer.hpp	/^  int     lef58WidthTableOrthoValues_;$/;"	m	class:lefiLayer
lef58WidthTableOrtho_	lef/include/lefiLayer.hpp	/^  double* lef58WidthTableOrtho_;$/;"	m	class:lefiLayer
lef58WidthTableOrtho_	lef/lef/lefiLayer.hpp	/^  double* lef58WidthTableOrtho_;$/;"	m	class:lefiLayer
lef58WidthTableWrongDirValues_	lef/include/lefiLayer.hpp	/^  int     lef58WidthTableWrongDirValues_;$/;"	m	class:lefiLayer
lef58WidthTableWrongDirValues_	lef/lef/lefiLayer.hpp	/^  int     lef58WidthTableWrongDirValues_;$/;"	m	class:lefiLayer
lef58WidthTableWrongDir_	lef/include/lefiLayer.hpp	/^  double* lef58WidthTableWrongDir_;$/;"	m	class:lefiLayer
lef58WidthTableWrongDir_	lef/lef/lefiLayer.hpp	/^  double* lef58WidthTableWrongDir_;$/;"	m	class:lefiLayer
lefAddBooleanDefine	lef/lef/lef_keywords.cpp	/^lefAddBooleanDefine(const char  *token, int val)$/;"	f
lefAddNumDefine	lef/lef/lef_keywords.cpp	/^lefAddNumDefine(const char  *token, double val)$/;"	f
lefAddStringDefine	lef/lef/lef_keywords.cpp	/^lefAddStringDefine(const char *token, const char *str)$/;"	f
lefAliasMap	lef/include/lefrData.hpp	/^typedef std::map<std::string, std::string, lefCompareStrings> lefAliasMap;$/;"	t
lefAliasMap	lef/lef/lefrData.hpp	/^typedef std::map<std::string, std::string, lefCompareStrings> lefAliasMap;$/;"	t
lefCallbacks	lef/lef/lefrCallbacks.cpp	/^lefrCallbacks *lefCallbacks = NULL;$/;"	v
lefCompareCStrings	lef/include/lefrSettings.hpp	/^struct lefCompareCStrings $/;"	s
lefCompareCStrings	lef/lef/lefrSettings.hpp	/^struct lefCompareCStrings $/;"	s
lefCompareStrings	lef/include/lefrData.hpp	/^struct lefCompareStrings $/;"	s
lefCompareStrings	lef/lef/lefrData.hpp	/^struct lefCompareStrings $/;"	s
lefData	lef/lef/lefrData.cpp	/^lefrData  *lefData = NULL;$/;"	v
lefDebug	lef/include/lefrData.hpp	/^    char        lefDebug[100];$/;"	m	class:lefrData
lefDebug	lef/lef/lefrData.hpp	/^    char        lefDebug[100];$/;"	m	class:lefrData
lefDefIf	lef/include/lefrData.hpp	/^    int  lefDefIf; $/;"	m	class:lefrData
lefDefIf	lef/lef/lefrData.hpp	/^    int  lefDefIf; $/;"	m	class:lefrData
lefDoubleMap	lef/include/lefrData.hpp	/^typedef std::map<std::string, double, lefCompareStrings> lefDoubleMap;$/;"	t
lefDoubleMap	lef/lef/lefrData.hpp	/^typedef std::map<std::string, double, lefCompareStrings> lefDoubleMap;$/;"	t
lefDumbMode	lef/include/lefrData.hpp	/^    int  lefDumbMode; $/;"	m	class:lefrData
lefDumbMode	lef/lef/lefrData.hpp	/^    int  lefDumbMode; $/;"	m	class:lefrData
lefErrMsgPrinted	lef/include/lefrData.hpp	/^    int  lefErrMsgPrinted; $/;"	m	class:lefrData
lefErrMsgPrinted	lef/lef/lefrData.hpp	/^    int  lefErrMsgPrinted; $/;"	m	class:lefrData
lefError	lef/lef/lef_keywords.cpp	/^lefError(int        msgNum,$/;"	f
lefFixedMask	lef/include/lefrData.hpp	/^    int  lefFixedMask; \/\/All the LEF MACRO PIN MASK assignments can be $/;"	m	class:lefrData
lefFixedMask	lef/lef/lefrData.hpp	/^    int  lefFixedMask; \/\/All the LEF MACRO PIN MASK assignments can be $/;"	m	class:lefrData
lefFree	lef/lef/lef_keywords.cpp	/^lefFree(void *name)$/;"	f
lefGZFile	lef/clefzlib/lefzlib.h	/^typedef void* lefGZFile;$/;"	t
lefGZFile	lef/include/lefzlib.h	/^typedef void* lefGZFile;$/;"	t
lefGZFile	lef/include/lefzlib.hpp	/^typedef void* lefGZFile;$/;"	t
lefGZFile	lef/lefzlib/lefzlib.hpp	/^typedef void* lefGZFile;$/;"	t
lefGZipClose	lef/clefzlib/clefzlib.c	/^int lefGZipClose(lefGZFile filePtr) {$/;"	f
lefGZipClose	lef/lefzlib/lefzlib.cpp	/^int lefGZipClose(lefGZFile filePtr) {$/;"	f
lefGZipOpen	lef/clefzlib/clefzlib.c	/^lefGZipOpen(const char *gzipPath, const char* mode) {$/;"	f
lefGZipOpen	lef/lefzlib/lefzlib.cpp	/^lefGZipOpen(const char *gzipPath, const char* mode) {$/;"	f
lefGZip_read	lef/clefzlib/clefzlib.c	/^size_t lefGZip_read(FILE* file, char* buf, size_t len) {$/;"	f
lefGZip_read	lef/lefzlib/lefzlib.cpp	/^size_t lefGZip_read(FILE* file, char* buf, size_t len) {$/;"	f
lefGetAlias	lef/lef/lef_keywords.cpp	/^lefGetAlias(const char* name, const char** value)$/;"	f
lefGetDoubleDefine	lef/lef/lef_keywords.cpp	/^lefGetDoubleDefine(const char* name, double* value)$/;"	f
lefGetIntDefine	lef/lef/lef_keywords.cpp	/^lefGetIntDefine(const char* name, int* value)$/;"	f
lefGetKeyword	lef/lef/lef_keywords.cpp	/^int lefGetKeyword(const char* name, int *result) $/;"	f
lefGetStringDefine	lef/lef/lef_keywords.cpp	/^lefGetStringDefine(const char* name, const char** value)$/;"	f
lefGetc	lef/lef/lef_keywords.cpp	/^lefGetc()$/;"	f
lefInfo	lef/lef/lef_keywords.cpp	/^lefInfo(int         msgNum,$/;"	f
lefInfoMsgPrinted	lef/include/lefrData.hpp	/^    int  lefInfoMsgPrinted; $/;"	m	class:lefrData
lefInfoMsgPrinted	lef/lef/lefrData.hpp	/^    int  lefInfoMsgPrinted; $/;"	m	class:lefrData
lefIntMap	lef/include/lefrData.hpp	/^typedef std::map<std::string, int, lefCompareStrings> lefIntMap;$/;"	t
lefIntMap	lef/lef/lefrData.hpp	/^typedef std::map<std::string, int, lefCompareStrings> lefIntMap;$/;"	t
lefInvalidChar	lef/include/lefrData.hpp	/^    int  lefInvalidChar; $/;"	m	class:lefrData
lefInvalidChar	lef/lef/lefrData.hpp	/^    int  lefInvalidChar; $/;"	m	class:lefrData
lefKeywordMap	lef/include/lefrSettings.hpp	/^typedef std::map<const char*, int, lefCompareCStrings>  lefKeywordMap;$/;"	t
lefKeywordMap	lef/lef/lefrSettings.hpp	/^typedef std::map<const char*, int, lefCompareCStrings>  lefKeywordMap;$/;"	t
lefMalloc	lef/lef/lef_keywords.cpp	/^lefMalloc(size_t lef_size)$/;"	f
lefNdRule	lef/include/lefrData.hpp	/^    int  lefNdRule; $/;"	m	class:lefrData
lefNdRule	lef/lef/lefrData.hpp	/^    int  lefNdRule; $/;"	m	class:lefrData
lefNewIsKeyword	lef/include/lefrData.hpp	/^    int  lefNewIsKeyword; $/;"	m	class:lefrData
lefNewIsKeyword	lef/lef/lefrData.hpp	/^    int  lefNewIsKeyword; $/;"	m	class:lefrData
lefNlToken	lef/include/lefrData.hpp	/^    int  lefNlToken; $/;"	m	class:lefrData
lefNlToken	lef/lef/lefrData.hpp	/^    int  lefNlToken; $/;"	m	class:lefrData
lefNoNum	lef/include/lefrData.hpp	/^    int  lefNoNum; $/;"	m	class:lefrData
lefNoNum	lef/lef/lefrData.hpp	/^    int  lefNoNum; $/;"	m	class:lefrData
lefPOINT	lef/include/lefiDefs.hpp	/^typedef struct point lefPOINT;$/;"	t	typeref:struct:point
lefPOINT	lef/lef/lefiDefs.hpp	/^typedef struct point lefPOINT;$/;"	t	typeref:struct:point
lefPropDefType	lef/include/lefrData.hpp	/^    char   lefPropDefType;  $/;"	m	class:lefrData
lefPropDefType	lef/lef/lefrData.hpp	/^    char   lefPropDefType;  $/;"	m	class:lefrData
lefProps	lef/include/lefrSettings.hpp	/^    lefrProps lefProps;$/;"	m	class:lefrSettings
lefProps	lef/lef/lefrSettings.hpp	/^    lefrProps lefProps;$/;"	m	class:lefrSettings
lefRECT	lef/include/lefiDefs.hpp	/^typedef struct rect lefRECT;$/;"	t	typeref:struct:rect
lefRECT	lef/lef/lefiDefs.hpp	/^typedef struct rect lefRECT;$/;"	t	typeref:struct:rect
lefRealloc	lef/lef/lef_keywords.cpp	/^lefRealloc(void *name,$/;"	f
lefReloadBuffer	lef/lef/lef_keywords.cpp	/^lefReloadBuffer()$/;"	f
lefRetVal	lef/include/lefrData.hpp	/^    int  lefRetVal; $/;"	m	class:lefrData
lefRetVal	lef/lef/lefrData.hpp	/^    int  lefRetVal; $/;"	m	class:lefrData
lefSetNonDefault	lef/lef/lef_keywords.cpp	/^lefSetNonDefault(const char *nd_name)$/;"	f
lefSettings	lef/lef/lefrSettings.cpp	/^lefrSettings *lefSettings = NULL;$/;"	v
lefSpacing	lef/lefdiff/diffLefRW.cpp	/^void lefSpacing(lefiSpacing* spacing, char *inName) {$/;"	f
lefSpacing	lef/lefrw/lefrw.cpp	/^void lefSpacing(lefiSpacing* spacing) {$/;"	f
lefStoreAlias	lef/lef/lef_keywords.cpp	/^lefStoreAlias()$/;"	f
lefStringMap	lef/include/lefrData.hpp	/^typedef std::map<std::string, std::string, lefCompareStrings> lefStringMap;$/;"	t
lefStringMap	lef/lef/lefrData.hpp	/^typedef std::map<std::string, std::string, lefCompareStrings> lefStringMap;$/;"	t
lefTOKEN	lef/include/lefiDefs.hpp	/^typedef struct token lefTOKEN;$/;"	t	typeref:struct:token
lefTOKEN	lef/lef/lefiDefs.hpp	/^typedef struct token lefTOKEN;$/;"	t	typeref:struct:token
lefUnsetNonDefault	lef/lef/lef_keywords.cpp	/^lefUnsetNonDefault()$/;"	f
lefUpperCase	lef/lef/lefiDebug.cpp	/^lefUpperCase(const char *str)$/;"	f
lefVia	lef/lefdiff/diffLefRW.cpp	/^void lefVia(lefiVia* via, char* inName) {$/;"	f
lefVia	lef/lefrw/lefrw.cpp	/^void lefVia(lefiVia *via) {$/;"	f
lefViaRuleLayer	lef/lefdiff/diffLefRW.cpp	/^void lefViaRuleLayer(lefiViaRuleLayer* vLayer, char* viaName) {$/;"	f
lefViaRuleLayer	lef/lefrw/lefrw.cpp	/^void lefViaRuleLayer(lefiViaRuleLayer* vLayer) {$/;"	f
lefWRetVal	lef/include/lefrData.hpp	/^    int  lefWRetVal; $/;"	m	class:lefrData
lefWRetVal	lef/lef/lefrData.hpp	/^    int  lefWRetVal; $/;"	m	class:lefrData
lefWRetVal	lef/lef/lefwWriterCalls.cpp	/^int lefWRetVal;$/;"	v
lefWarnMsgPrinted	lef/include/lefrData.hpp	/^    int  lefWarnMsgPrinted; $/;"	m	class:lefrData
lefWarnMsgPrinted	lef/lef/lefrData.hpp	/^    int  lefWarnMsgPrinted; $/;"	m	class:lefrData
lefWarning	lef/lef/lef_keywords.cpp	/^lefWarning(int          msgNum,$/;"	f
lef_errors	lef/include/lefrData.hpp	/^    int  lef_errors; $/;"	m	class:lefrData
lef_errors	lef/lef/lefrData.hpp	/^    int  lef_errors; $/;"	m	class:lefrData
lef_file	lef/lef/lef.y	/^lef_file: rules extension_opt  end_library$/;"	l
lef_init	lef/lef/lefrReader.cpp	/^lef_init(const char  *func)$/;"	f
lef_kywd	lef/lef/lef_keywords.cpp	/^lef_kywd(int num)$/;"	f
lef_nlines	lef/include/lefrData.hpp	/^    int  lef_nlines; $/;"	m	class:lefrData
lef_nlines	lef/lef/lefrData.hpp	/^    int  lef_nlines; $/;"	m	class:lefrData
lef_ntokens	lef/include/lefrData.hpp	/^    int  lef_ntokens; $/;"	m	class:lefrData
lef_ntokens	lef/lef/lefrData.hpp	/^    int  lef_ntokens; $/;"	m	class:lefrData
lef_save_x	lef/include/lefrData.hpp	/^    double  lef_save_x; $/;"	m	class:lefrData
lef_save_x	lef/lef/lefrData.hpp	/^    double  lef_save_x; $/;"	m	class:lefrData
lef_save_y	lef/include/lefrData.hpp	/^    double  lef_save_y; \/\/ for interpreting (*) notation of LEF\/DEF$/;"	m	class:lefrData
lef_save_y	lef/lef/lefrData.hpp	/^    double  lef_save_y; \/\/ for interpreting (*) notation of LEF\/DEF$/;"	m	class:lefrData
lef_warnings	lef/include/lefrData.hpp	/^    int  lef_warnings; $/;"	m	class:lefrData
lef_warnings	lef/lef/lefrData.hpp	/^    int  lef_warnings; $/;"	m	class:lefrData
lefaddr	lef/lef/lef_keywords.cpp	/^lefaddr(const char *in)$/;"	f
lefamper_lookup	lef/lef/lef_keywords.cpp	/^lefamper_lookup(char *tkn)$/;"	f
lefch	lef/include/lefrData.hpp	/^    char*  lefch; $/;"	m	class:lefrData
lefch	lef/lef/lefrData.hpp	/^    char*  lefch; $/;"	m	class:lefrData
lefiAdoptedSubObjects	lef/include/lefiDefs.hpp	/^  lefiAdoptedSubObjects       \/\/ shallow copy + delete$/;"	e	enum:__anon7
lefiAdoptedSubObjects	lef/lef/lefiDefs.hpp	/^  lefiAdoptedSubObjects       \/\/ shallow copy + delete$/;"	e	enum:__anon2
lefiAntennaADR	lef/clef/lefiLayer.h	/^  lefiAntennaADR = 12$/;"	e	enum:lefiAntennaEnum
lefiAntennaADR	lef/include/lefiLayer.h	/^  lefiAntennaADR = 12$/;"	e	enum:lefiAntennaEnum
lefiAntennaADR	lef/include/lefiLayer.hpp	/^  lefiAntennaADR$/;"	e	enum:lefiAntennaEnum
lefiAntennaADR	lef/lef/lefiLayer.hpp	/^  lefiAntennaADR$/;"	e	enum:lefiAntennaEnum
lefiAntennaAF	lef/clef/lefiLayer.h	/^  lefiAntennaAF = 5,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAF	lef/include/lefiLayer.h	/^  lefiAntennaAF = 5,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAF	lef/include/lefiLayer.hpp	/^  lefiAntennaAF,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAF	lef/lef/lefiLayer.hpp	/^  lefiAntennaAF,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAR	lef/clef/lefiLayer.h	/^  lefiAntennaAR = 1,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAR	lef/include/lefiLayer.h	/^  lefiAntennaAR = 1,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAR	lef/include/lefiLayer.hpp	/^  lefiAntennaAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAR	lef/lef/lefiLayer.hpp	/^  lefiAntennaAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCAR	lef/clef/lefiLayer.h	/^  lefiAntennaCAR = 3,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCAR	lef/include/lefiLayer.h	/^  lefiAntennaCAR = 3,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCAR	lef/include/lefiLayer.hpp	/^  lefiAntennaCAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCAR	lef/lef/lefiLayer.hpp	/^  lefiAntennaCAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDAR	lef/clef/lefiLayer.h	/^  lefiAntennaCDAR = 4,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDAR	lef/include/lefiLayer.h	/^  lefiAntennaCDAR = 4,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDAR	lef/include/lefiLayer.hpp	/^  lefiAntennaCDAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDAR	lef/lef/lefiLayer.hpp	/^  lefiAntennaCDAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDSAR	lef/clef/lefiLayer.h	/^  lefiAntennaCDSAR = 9,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDSAR	lef/include/lefiLayer.h	/^  lefiAntennaCDSAR = 9,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDSAR	lef/include/lefiLayer.hpp	/^  lefiAntennaCDSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDSAR	lef/lef/lefiLayer.hpp	/^  lefiAntennaCDSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCSAR	lef/clef/lefiLayer.h	/^  lefiAntennaCSAR = 8,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCSAR	lef/include/lefiLayer.h	/^  lefiAntennaCSAR = 8,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCSAR	lef/include/lefiLayer.hpp	/^  lefiAntennaCSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCSAR	lef/lef/lefiLayer.hpp	/^  lefiAntennaCSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDAR	lef/clef/lefiLayer.h	/^  lefiAntennaDAR = 2,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDAR	lef/include/lefiLayer.h	/^  lefiAntennaDAR = 2,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDAR	lef/include/lefiLayer.hpp	/^  lefiAntennaDAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDAR	lef/lef/lefiLayer.hpp	/^  lefiAntennaDAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDSAR	lef/clef/lefiLayer.h	/^  lefiAntennaDSAR = 7,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDSAR	lef/include/lefiLayer.h	/^  lefiAntennaDSAR = 7,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDSAR	lef/include/lefiLayer.hpp	/^  lefiAntennaDSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDSAR	lef/lef/lefiLayer.hpp	/^  lefiAntennaDSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaEnum	lef/clef/lefiLayer.h	/^typedef enum lefiAntennaEnum {$/;"	g
lefiAntennaEnum	lef/clef/lefiLayer.h	/^} lefiAntennaEnum;$/;"	t	typeref:enum:lefiAntennaEnum
lefiAntennaEnum	lef/include/lefiLayer.h	/^typedef enum lefiAntennaEnum {$/;"	g
lefiAntennaEnum	lef/include/lefiLayer.h	/^} lefiAntennaEnum;$/;"	t	typeref:enum:lefiAntennaEnum
lefiAntennaEnum	lef/include/lefiLayer.hpp	/^typedef enum lefiAntennaEnum {$/;"	g
lefiAntennaEnum	lef/include/lefiLayer.hpp	/^} lefiAntennaEnum;$/;"	t	typeref:enum:lefiAntennaEnum
lefiAntennaEnum	lef/lef/lefiLayer.hpp	/^typedef enum lefiAntennaEnum {$/;"	g
lefiAntennaEnum	lef/lef/lefiLayer.hpp	/^} lefiAntennaEnum;$/;"	t	typeref:enum:lefiAntennaEnum
lefiAntennaModel	lef/clef/lefiTypedefs.h	/^typedef void *lefiAntennaModel;$/;"	t
lefiAntennaModel	lef/include/lefiLayer.hpp	/^class lefiAntennaModel {$/;"	c
lefiAntennaModel	lef/include/lefiTypedefs.h	/^typedef void *lefiAntennaModel;$/;"	t
lefiAntennaModel	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::lefiAntennaModel()$/;"	f	class:lefiAntennaModel
lefiAntennaModel	lef/lef/lefiLayer.hpp	/^class lefiAntennaModel {$/;"	c
lefiAntennaModel_antennaAreaDiffReducePWL	lef/clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaAreaDiffReducePWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaAreaFactor	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaAreaFactor (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaAreaMinusDiff	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaAreaMinusDiff (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaAreaRatio	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumAreaRatio	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaCumAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumDiffAreaRatio	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaCumDiffAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumDiffAreaRatioPWL	lef/clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaCumDiffAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumDiffSideAreaRatio	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaCumDiffSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumDiffSideAreaRatioPWL	lef/clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaCumDiffSideAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumSideAreaRatio	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaCumSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaDiffAreaRatio	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaDiffAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaDiffAreaRatioPWL	lef/clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaDiffAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaDiffSideAreaRatio	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaDiffSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaDiffSideAreaRatioPWL	lef/clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaDiffSideAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaGatePlusDiff	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaGatePlusDiff (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaOxide	lef/clef/xlefiLayer.cpp	/^char* lefiAntennaModel_antennaOxide (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaSideAreaFactor	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaSideAreaFactor (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaSideAreaRatio	lef/clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaDiffReducePWL	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaDiffReducePWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaFactor	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaFactor (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaFactorDUO	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaFactorDUO (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaMinusDiff	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaMinusDiff (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaRatio	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumAreaRatio	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumDiffAreaRatio	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumDiffAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumDiffAreaRatioPWL	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumDiffAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumDiffSideAreaRatio	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumDiffSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumDiffSideAreaRatioPWL	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumDiffSideAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumRoutingPlusCut	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumRoutingPlusCut (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumSideAreaRatio	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaDiffAreaRatio	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaDiffAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaDiffAreaRatioPWL	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaDiffAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaDiffSideAreaRatio	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaDiffSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaDiffSideAreaRatioPWL	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaDiffSideAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaGatePlusDiff	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaGatePlusDiff (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaSideAreaFactor	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaSideAreaFactor (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaSideAreaFactorDUO	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaSideAreaFactorDUO (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaSideAreaRatio	lef/clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaO	lef/clef/lefiLayer.h	/^  lefiAntennaO = 11,$/;"	e	enum:lefiAntennaEnum
lefiAntennaO	lef/include/lefiLayer.h	/^  lefiAntennaO = 11,$/;"	e	enum:lefiAntennaEnum
lefiAntennaO	lef/include/lefiLayer.hpp	/^  lefiAntennaO,$/;"	e	enum:lefiAntennaEnum
lefiAntennaO	lef/lef/lefiLayer.hpp	/^  lefiAntennaO,$/;"	e	enum:lefiAntennaEnum
lefiAntennaPWL	lef/clef/lefiTypedefs.h	/^typedef void *lefiAntennaPWL;$/;"	t
lefiAntennaPWL	lef/include/lefiLayer.hpp	/^class lefiAntennaPWL {$/;"	c
lefiAntennaPWL	lef/include/lefiTypedefs.h	/^typedef void *lefiAntennaPWL;$/;"	t
lefiAntennaPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::lefiAntennaPWL()$/;"	f	class:lefiAntennaPWL
lefiAntennaPWL	lef/lef/lefiLayer.hpp	/^class lefiAntennaPWL {$/;"	c
lefiAntennaPWL_numPWL	lef/clef/xlefiLayer.cpp	/^int lefiAntennaPWL_numPWL (const ::lefiAntennaPWL* obj) {$/;"	f
lefiAntennaSAF	lef/clef/lefiLayer.h	/^  lefiAntennaSAF = 10,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAF	lef/include/lefiLayer.h	/^  lefiAntennaSAF = 10,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAF	lef/include/lefiLayer.hpp	/^  lefiAntennaSAF,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAF	lef/lef/lefiLayer.hpp	/^  lefiAntennaSAF,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAR	lef/clef/lefiLayer.h	/^  lefiAntennaSAR = 6,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAR	lef/include/lefiLayer.h	/^  lefiAntennaSAR = 6,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAR	lef/include/lefiLayer.hpp	/^  lefiAntennaSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAR	lef/lef/lefiLayer.hpp	/^  lefiAntennaSAR,$/;"	e	enum:lefiAntennaEnum
lefiArray	lef/clef/lefiTypedefs.h	/^typedef void *lefiArray;$/;"	t
lefiArray	lef/include/lefiArray.hpp	/^class lefiArray {$/;"	c
lefiArray	lef/include/lefiTypedefs.h	/^typedef void *lefiArray;$/;"	t
lefiArray	lef/lef/lefiArray.cpp	/^lefiArray::lefiArray()$/;"	f	class:lefiArray
lefiArray	lef/lef/lefiArray.hpp	/^class lefiArray {$/;"	c
lefiArrayFloorPlan	lef/clef/lefiTypedefs.h	/^typedef void *lefiArrayFloorPlan;$/;"	t
lefiArrayFloorPlan	lef/include/lefiArray.hpp	/^class lefiArrayFloorPlan {$/;"	c
lefiArrayFloorPlan	lef/include/lefiTypedefs.h	/^typedef void *lefiArrayFloorPlan;$/;"	t
lefiArrayFloorPlan	lef/lef/lefiArray.hpp	/^class lefiArrayFloorPlan {$/;"	c
lefiArrayFloorPlan_name	lef/clef/xlefiArray.cpp	/^const char* lefiArrayFloorPlan_name (const ::lefiArrayFloorPlan* obj) {$/;"	f
lefiArrayFloorPlan_numPatterns	lef/clef/xlefiArray.cpp	/^int lefiArrayFloorPlan_numPatterns (const ::lefiArrayFloorPlan* obj) {$/;"	f
lefiArrayFloorPlan_pattern	lef/clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArrayFloorPlan_pattern (const ::lefiArrayFloorPlan* obj, int  index) {$/;"	f
lefiArrayFloorPlan_typ	lef/clef/xlefiArray.cpp	/^char* lefiArrayFloorPlan_typ (const ::lefiArrayFloorPlan* obj, int  index) {$/;"	f
lefiArray_canPlace	lef/clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArray_canPlace (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_cannotOccupy	lef/clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArray_cannotOccupy (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_defaultCap	lef/clef/xlefiArray.cpp	/^double lefiArray_defaultCap (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_defaultCapMinPins	lef/clef/xlefiArray.cpp	/^int lefiArray_defaultCapMinPins (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_floorPlanName	lef/clef/xlefiArray.cpp	/^const char* lefiArray_floorPlanName (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_gcell	lef/clef/xlefiArray.cpp	/^const ::lefiGcellPattern* lefiArray_gcell (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_h	lef/include/lefiArray.hpp	31;"	d
lefiArray_h	lef/lef/lefiArray.hpp	31;"	d
lefiArray_hasDefaultCap	lef/clef/xlefiArray.cpp	/^int lefiArray_hasDefaultCap (const ::lefiArray* obj) {$/;"	f
lefiArray_name	lef/clef/xlefiArray.cpp	/^const char* lefiArray_name (const ::lefiArray* obj) {$/;"	f
lefiArray_numCanPlace	lef/clef/xlefiArray.cpp	/^int lefiArray_numCanPlace (const ::lefiArray* obj) {$/;"	f
lefiArray_numCannotOccupy	lef/clef/xlefiArray.cpp	/^int lefiArray_numCannotOccupy (const ::lefiArray* obj) {$/;"	f
lefiArray_numDefaultCaps	lef/clef/xlefiArray.cpp	/^int lefiArray_numDefaultCaps (const ::lefiArray* obj) {$/;"	f
lefiArray_numFloorPlans	lef/clef/xlefiArray.cpp	/^int lefiArray_numFloorPlans (const ::lefiArray* obj) {$/;"	f
lefiArray_numGcell	lef/clef/xlefiArray.cpp	/^int lefiArray_numGcell (const ::lefiArray* obj) {$/;"	f
lefiArray_numSitePattern	lef/clef/xlefiArray.cpp	/^int lefiArray_numSitePattern (const ::lefiArray* obj) {$/;"	f
lefiArray_numSites	lef/clef/xlefiArray.cpp	/^int lefiArray_numSites (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_numTrack	lef/clef/xlefiArray.cpp	/^int lefiArray_numTrack (const ::lefiArray* obj) {$/;"	f
lefiArray_print	lef/clef/xlefiArray.cpp	/^void lefiArray_print (const ::lefiArray* obj, FILE*  f) {$/;"	f
lefiArray_site	lef/clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArray_site (const ::lefiArray* obj, int  floorIndex, int  siteIndex) {$/;"	f
lefiArray_sitePattern	lef/clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArray_sitePattern (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_siteType	lef/clef/xlefiArray.cpp	/^const char* lefiArray_siteType (const ::lefiArray* obj, int  floorIndex, int  siteIndex) {$/;"	f
lefiArray_tableSize	lef/clef/xlefiArray.cpp	/^int lefiArray_tableSize (const ::lefiArray* obj) {$/;"	f
lefiArray_track	lef/clef/xlefiArray.cpp	/^const ::lefiTrackPattern* lefiArray_track (const ::lefiArray* obj, int  index) {$/;"	f
lefiBoolean	lef/include/lefiDefs.hpp	/^typedef int lefiBoolean;$/;"	t
lefiBoolean	lef/lef/lefiDefs.hpp	/^typedef int lefiBoolean;$/;"	t
lefiCalcTime	lef/lef/lefiTBExt.cpp	/^lefiCalcTime()$/;"	f
lefiCorrectionEdge	lef/clef/lefiTypedefs.h	/^typedef void *lefiCorrectionEdge;$/;"	t
lefiCorrectionEdge	lef/include/lefiCrossTalk.hpp	/^class lefiCorrectionEdge {$/;"	c
lefiCorrectionEdge	lef/include/lefiTypedefs.h	/^typedef void *lefiCorrectionEdge;$/;"	t
lefiCorrectionEdge	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::lefiCorrectionEdge()$/;"	f	class:lefiCorrectionEdge
lefiCorrectionEdge	lef/lef/lefiCrossTalk.hpp	/^class lefiCorrectionEdge {$/;"	c
lefiCorrectionResistance	lef/clef/lefiTypedefs.h	/^typedef void *lefiCorrectionResistance;$/;"	t
lefiCorrectionResistance	lef/include/lefiCrossTalk.hpp	/^class lefiCorrectionResistance {$/;"	c
lefiCorrectionResistance	lef/include/lefiTypedefs.h	/^typedef void *lefiCorrectionResistance;$/;"	t
lefiCorrectionResistance	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::lefiCorrectionResistance()$/;"	f	class:lefiCorrectionResistance
lefiCorrectionResistance	lef/lef/lefiCrossTalk.hpp	/^class lefiCorrectionResistance {$/;"	c
lefiCorrectionTable	lef/clef/lefiTypedefs.h	/^typedef void *lefiCorrectionTable;$/;"	t
lefiCorrectionTable	lef/include/lefiCrossTalk.hpp	/^class lefiCorrectionTable {$/;"	c
lefiCorrectionTable	lef/include/lefiTypedefs.h	/^typedef void *lefiCorrectionTable;$/;"	t
lefiCorrectionTable	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::lefiCorrectionTable()$/;"	f	class:lefiCorrectionTable
lefiCorrectionTable	lef/lef/lefiCrossTalk.hpp	/^class lefiCorrectionTable {$/;"	c
lefiCorrectionVictim	lef/clef/lefiTypedefs.h	/^typedef void *lefiCorrectionVictim;$/;"	t
lefiCorrectionVictim	lef/include/lefiCrossTalk.hpp	/^class lefiCorrectionVictim {$/;"	c
lefiCorrectionVictim	lef/include/lefiTypedefs.h	/^typedef void *lefiCorrectionVictim;$/;"	t
lefiCorrectionVictim	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::lefiCorrectionVictim(double d)$/;"	f	class:lefiCorrectionVictim
lefiCorrectionVictim	lef/lef/lefiCrossTalk.hpp	/^class lefiCorrectionVictim {$/;"	c
lefiCrossTalk_h	lef/include/lefiCrossTalk.hpp	31;"	d
lefiCrossTalk_h	lef/lef/lefiCrossTalk.hpp	31;"	d
lefiDebug	lef/clef/xlefiDebug.cpp	/^int lefiDebug (int  num) {$/;"	f
lefiDebug	lef/lef/lefiDebug.cpp	/^lefiDebug(int num)$/;"	f
lefiDebug_h	lef/include/lefiDebug.hpp	31;"	d
lefiDebug_h	lef/lef/lefiDebug.hpp	31;"	d
lefiDensity	lef/clef/lefiTypedefs.h	/^typedef void *lefiDensity;$/;"	t
lefiDensity	lef/include/lefiMacro.hpp	/^class lefiDensity {$/;"	c
lefiDensity	lef/include/lefiTypedefs.h	/^typedef void *lefiDensity;$/;"	t
lefiDensity	lef/lef/lefiMacro.cpp	/^lefiDensity::lefiDensity()$/;"	f	class:lefiDensity
lefiDensity	lef/lef/lefiMacro.hpp	/^class lefiDensity {$/;"	c
lefiDensity_densityValue	lef/clef/xlefiMacro.cpp	/^double lefiDensity_densityValue (const ::lefiDensity* obj, int  index, int  rectIndex) {$/;"	f
lefiDensity_getRect	lef/clef/xlefiMacro.cpp	/^::lefiGeomRect lefiDensity_getRect (const ::lefiDensity* obj, int  index, int  rectIndex) {$/;"	f
lefiDensity_layerName	lef/clef/xlefiMacro.cpp	/^char* lefiDensity_layerName (const ::lefiDensity* obj, int  index) {$/;"	f
lefiDensity_numLayer	lef/clef/xlefiMacro.cpp	/^int lefiDensity_numLayer (const ::lefiDensity* obj) {$/;"	f
lefiDensity_numRects	lef/clef/xlefiMacro.cpp	/^int lefiDensity_numRects (const ::lefiDensity* obj, int  index) {$/;"	f
lefiDensity_print	lef/clef/xlefiMacro.cpp	/^void lefiDensity_print (const ::lefiDensity* obj, FILE*  f) {$/;"	f
lefiError	lef/clef/xlefiDebug.cpp	/^void lefiError (int  check, int  msgNum, const char*  msg) {$/;"	f
lefiError	lef/lef/lefiDebug.cpp	/^lefiError(int           check,$/;"	f
lefiGcellPattern	lef/clef/lefiTypedefs.h	/^typedef void *lefiGcellPattern;$/;"	t
lefiGcellPattern	lef/include/lefiMisc.hpp	/^class lefiGcellPattern {$/;"	c
lefiGcellPattern	lef/include/lefiTypedefs.h	/^typedef void *lefiGcellPattern;$/;"	t
lefiGcellPattern	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::lefiGcellPattern()$/;"	f	class:lefiGcellPattern
lefiGcellPattern	lef/lef/lefiMisc.hpp	/^class lefiGcellPattern {$/;"	c
lefiGcellPattern_name	lef/clef/xlefiMisc.cpp	/^const char* lefiGcellPattern_name (const ::lefiGcellPattern* obj) {$/;"	f
lefiGcellPattern_numCRs	lef/clef/xlefiMisc.cpp	/^int lefiGcellPattern_numCRs (const ::lefiGcellPattern* obj) {$/;"	f
lefiGcellPattern_print	lef/clef/xlefiMisc.cpp	/^void lefiGcellPattern_print (const ::lefiGcellPattern* obj, FILE*  f) {$/;"	f
lefiGcellPattern_space	lef/clef/xlefiMisc.cpp	/^double lefiGcellPattern_space (const ::lefiGcellPattern* obj) {$/;"	f
lefiGcellPattern_start	lef/clef/xlefiMisc.cpp	/^double lefiGcellPattern_start (const ::lefiGcellPattern* obj) {$/;"	f
lefiGeomClassE	lef/clef/lefiMisc.h	/^  lefiGeomClassE = 14,$/;"	e	enum:lefiGeomEnum
lefiGeomClassE	lef/include/lefiMisc.h	/^  lefiGeomClassE = 14,$/;"	e	enum:lefiGeomEnum
lefiGeomClassE	lef/include/lefiMisc.hpp	/^  lefiGeomClassE,$/;"	e	enum:lefiGeomEnum
lefiGeomClassE	lef/lef/lefiMisc.hpp	/^  lefiGeomClassE,$/;"	e	enum:lefiGeomEnum
lefiGeomEnd	lef/clef/lefiMisc.h	/^  lefiGeomEnd = 15$/;"	e	enum:lefiGeomEnum
lefiGeomEnd	lef/include/lefiMisc.h	/^  lefiGeomEnd = 15$/;"	e	enum:lefiGeomEnum
lefiGeomEnd	lef/include/lefiMisc.hpp	/^  lefiGeomEnd$/;"	e	enum:lefiGeomEnum
lefiGeomEnd	lef/lef/lefiMisc.hpp	/^  lefiGeomEnd$/;"	e	enum:lefiGeomEnum
lefiGeomEnum	lef/clef/lefiMisc.h	/^enum lefiGeomEnum {$/;"	g
lefiGeomEnum	lef/include/lefiMisc.h	/^enum lefiGeomEnum {$/;"	g
lefiGeomEnum	lef/include/lefiMisc.hpp	/^enum lefiGeomEnum {$/;"	g
lefiGeomEnum	lef/lef/lefiMisc.hpp	/^enum lefiGeomEnum {$/;"	g
lefiGeomLayerE	lef/clef/lefiMisc.h	/^  lefiGeomLayerE = 1,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerE	lef/include/lefiMisc.h	/^  lefiGeomLayerE = 1,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerE	lef/include/lefiMisc.hpp	/^  lefiGeomLayerE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerE	lef/lef/lefiMisc.hpp	/^  lefiGeomLayerE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerExceptPgNetE	lef/clef/lefiMisc.h	/^  lefiGeomLayerExceptPgNetE = 2,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerExceptPgNetE	lef/include/lefiMisc.h	/^  lefiGeomLayerExceptPgNetE = 2,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerExceptPgNetE	lef/include/lefiMisc.hpp	/^  lefiGeomLayerExceptPgNetE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerExceptPgNetE	lef/lef/lefiMisc.hpp	/^  lefiGeomLayerExceptPgNetE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerMinSpacingE	lef/clef/lefiMisc.h	/^  lefiGeomLayerMinSpacingE = 3,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerMinSpacingE	lef/include/lefiMisc.h	/^  lefiGeomLayerMinSpacingE = 3,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerMinSpacingE	lef/include/lefiMisc.hpp	/^  lefiGeomLayerMinSpacingE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerMinSpacingE	lef/lef/lefiMisc.hpp	/^  lefiGeomLayerMinSpacingE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerRuleWidthE	lef/clef/lefiMisc.h	/^  lefiGeomLayerRuleWidthE = 4,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerRuleWidthE	lef/include/lefiMisc.h	/^  lefiGeomLayerRuleWidthE = 4,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerRuleWidthE	lef/include/lefiMisc.hpp	/^  lefiGeomLayerRuleWidthE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerRuleWidthE	lef/lef/lefiMisc.hpp	/^  lefiGeomLayerRuleWidthE,$/;"	e	enum:lefiGeomEnum
lefiGeomPath	lef/clef/lefiTypedefs.h	/^struct lefiGeomPath {$/;"	s
lefiGeomPath	lef/include/lefiMisc.hpp	/^struct lefiGeomPath {$/;"	s
lefiGeomPath	lef/include/lefiTypedefs.h	/^struct lefiGeomPath {$/;"	s
lefiGeomPath	lef/lef/lefiMisc.hpp	/^struct lefiGeomPath {$/;"	s
lefiGeomPathE	lef/clef/lefiMisc.h	/^  lefiGeomPathE = 6,$/;"	e	enum:lefiGeomEnum
lefiGeomPathE	lef/include/lefiMisc.h	/^  lefiGeomPathE = 6,$/;"	e	enum:lefiGeomEnum
lefiGeomPathE	lef/include/lefiMisc.hpp	/^  lefiGeomPathE,$/;"	e	enum:lefiGeomEnum
lefiGeomPathE	lef/lef/lefiMisc.hpp	/^  lefiGeomPathE,$/;"	e	enum:lefiGeomEnum
lefiGeomPathIter	lef/clef/lefiTypedefs.h	/^struct lefiGeomPathIter {$/;"	s
lefiGeomPathIter	lef/include/lefiMisc.hpp	/^struct lefiGeomPathIter {$/;"	s
lefiGeomPathIter	lef/include/lefiTypedefs.h	/^struct lefiGeomPathIter {$/;"	s
lefiGeomPathIter	lef/lef/lefiMisc.hpp	/^struct lefiGeomPathIter {$/;"	s
lefiGeomPathIterE	lef/clef/lefiMisc.h	/^  lefiGeomPathIterE = 7,$/;"	e	enum:lefiGeomEnum
lefiGeomPathIterE	lef/include/lefiMisc.h	/^  lefiGeomPathIterE = 7,$/;"	e	enum:lefiGeomEnum
lefiGeomPathIterE	lef/include/lefiMisc.hpp	/^  lefiGeomPathIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomPathIterE	lef/lef/lefiMisc.hpp	/^  lefiGeomPathIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygon	lef/clef/lefiTypedefs.h	/^struct lefiGeomPolygon {$/;"	s
lefiGeomPolygon	lef/include/lefiMisc.hpp	/^struct lefiGeomPolygon {$/;"	s
lefiGeomPolygon	lef/include/lefiTypedefs.h	/^struct lefiGeomPolygon {$/;"	s
lefiGeomPolygon	lef/lef/lefiMisc.hpp	/^struct lefiGeomPolygon {$/;"	s
lefiGeomPolygonE	lef/clef/lefiMisc.h	/^  lefiGeomPolygonE = 10,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonE	lef/include/lefiMisc.h	/^  lefiGeomPolygonE = 10,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonE	lef/include/lefiMisc.hpp	/^  lefiGeomPolygonE,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonE	lef/lef/lefiMisc.hpp	/^  lefiGeomPolygonE,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonIter	lef/clef/lefiTypedefs.h	/^struct lefiGeomPolygonIter {$/;"	s
lefiGeomPolygonIter	lef/include/lefiMisc.hpp	/^struct lefiGeomPolygonIter {$/;"	s
lefiGeomPolygonIter	lef/include/lefiTypedefs.h	/^struct lefiGeomPolygonIter {$/;"	s
lefiGeomPolygonIter	lef/lef/lefiMisc.hpp	/^struct lefiGeomPolygonIter {$/;"	s
lefiGeomPolygonIterE	lef/clef/lefiMisc.h	/^  lefiGeomPolygonIterE = 11,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonIterE	lef/include/lefiMisc.h	/^  lefiGeomPolygonIterE = 11,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonIterE	lef/include/lefiMisc.hpp	/^  lefiGeomPolygonIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonIterE	lef/lef/lefiMisc.hpp	/^  lefiGeomPolygonIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomRect	lef/clef/lefiTypedefs.h	/^struct lefiGeomRect {$/;"	s
lefiGeomRect	lef/include/lefiMisc.hpp	/^struct lefiGeomRect {$/;"	s
lefiGeomRect	lef/include/lefiTypedefs.h	/^struct lefiGeomRect {$/;"	s
lefiGeomRect	lef/lef/lefiMisc.hpp	/^struct lefiGeomRect {$/;"	s
lefiGeomRectE	lef/clef/lefiMisc.h	/^  lefiGeomRectE = 8,$/;"	e	enum:lefiGeomEnum
lefiGeomRectE	lef/include/lefiMisc.h	/^  lefiGeomRectE = 8,$/;"	e	enum:lefiGeomEnum
lefiGeomRectE	lef/include/lefiMisc.hpp	/^  lefiGeomRectE,$/;"	e	enum:lefiGeomEnum
lefiGeomRectE	lef/lef/lefiMisc.hpp	/^  lefiGeomRectE,$/;"	e	enum:lefiGeomEnum
lefiGeomRectIter	lef/clef/lefiTypedefs.h	/^struct lefiGeomRectIter {$/;"	s
lefiGeomRectIter	lef/include/lefiMisc.hpp	/^struct lefiGeomRectIter {$/;"	s
lefiGeomRectIter	lef/include/lefiTypedefs.h	/^struct lefiGeomRectIter {$/;"	s
lefiGeomRectIter	lef/lef/lefiMisc.hpp	/^struct lefiGeomRectIter {$/;"	s
lefiGeomRectIterE	lef/clef/lefiMisc.h	/^  lefiGeomRectIterE = 9,$/;"	e	enum:lefiGeomEnum
lefiGeomRectIterE	lef/include/lefiMisc.h	/^  lefiGeomRectIterE = 9,$/;"	e	enum:lefiGeomEnum
lefiGeomRectIterE	lef/include/lefiMisc.hpp	/^  lefiGeomRectIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomRectIterE	lef/lef/lefiMisc.hpp	/^  lefiGeomRectIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomUnknown	lef/clef/lefiMisc.h	/^  lefiGeomUnknown = 0,$/;"	e	enum:lefiGeomEnum
lefiGeomUnknown	lef/include/lefiMisc.h	/^  lefiGeomUnknown = 0,$/;"	e	enum:lefiGeomEnum
lefiGeomUnknown	lef/include/lefiMisc.hpp	/^  lefiGeomUnknown = 0,$/;"	e	enum:lefiGeomEnum
lefiGeomUnknown	lef/lef/lefiMisc.hpp	/^  lefiGeomUnknown = 0,$/;"	e	enum:lefiGeomEnum
lefiGeomVia	lef/clef/lefiTypedefs.h	/^struct lefiGeomVia {$/;"	s
lefiGeomVia	lef/include/lefiMisc.hpp	/^struct lefiGeomVia {$/;"	s
lefiGeomVia	lef/include/lefiTypedefs.h	/^struct lefiGeomVia {$/;"	s
lefiGeomVia	lef/lef/lefiMisc.hpp	/^struct lefiGeomVia {$/;"	s
lefiGeomViaE	lef/clef/lefiMisc.h	/^  lefiGeomViaE = 12,$/;"	e	enum:lefiGeomEnum
lefiGeomViaE	lef/include/lefiMisc.h	/^  lefiGeomViaE = 12,$/;"	e	enum:lefiGeomEnum
lefiGeomViaE	lef/include/lefiMisc.hpp	/^  lefiGeomViaE,$/;"	e	enum:lefiGeomEnum
lefiGeomViaE	lef/lef/lefiMisc.hpp	/^  lefiGeomViaE,$/;"	e	enum:lefiGeomEnum
lefiGeomViaIter	lef/clef/lefiTypedefs.h	/^struct lefiGeomViaIter {$/;"	s
lefiGeomViaIter	lef/include/lefiMisc.hpp	/^struct lefiGeomViaIter {$/;"	s
lefiGeomViaIter	lef/include/lefiTypedefs.h	/^struct lefiGeomViaIter {$/;"	s
lefiGeomViaIter	lef/lef/lefiMisc.hpp	/^struct lefiGeomViaIter {$/;"	s
lefiGeomViaIterE	lef/clef/lefiMisc.h	/^  lefiGeomViaIterE = 13,$/;"	e	enum:lefiGeomEnum
lefiGeomViaIterE	lef/include/lefiMisc.h	/^  lefiGeomViaIterE = 13,$/;"	e	enum:lefiGeomEnum
lefiGeomViaIterE	lef/include/lefiMisc.hpp	/^  lefiGeomViaIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomViaIterE	lef/lef/lefiMisc.hpp	/^  lefiGeomViaIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomWidthE	lef/clef/lefiMisc.h	/^  lefiGeomWidthE = 5,$/;"	e	enum:lefiGeomEnum
lefiGeomWidthE	lef/include/lefiMisc.h	/^  lefiGeomWidthE = 5,$/;"	e	enum:lefiGeomEnum
lefiGeomWidthE	lef/include/lefiMisc.hpp	/^  lefiGeomWidthE,$/;"	e	enum:lefiGeomEnum
lefiGeomWidthE	lef/lef/lefiMisc.hpp	/^  lefiGeomWidthE,$/;"	e	enum:lefiGeomEnum
lefiGeometries	lef/clef/lefiTypedefs.h	/^typedef void *lefiGeometries;$/;"	t
lefiGeometries	lef/include/lefiMisc.hpp	/^class lefiGeometries {$/;"	c
lefiGeometries	lef/include/lefiTypedefs.h	/^typedef void *lefiGeometries;$/;"	t
lefiGeometries	lef/lef/lefiMisc.cpp	/^lefiGeometries::lefiGeometries()$/;"	f	class:lefiGeometries
lefiGeometries	lef/lef/lefiMisc.hpp	/^class lefiGeometries {$/;"	c
lefiGeometries_getClass	lef/clef/xlefiMisc.cpp	/^char* lefiGeometries_getClass (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getLayer	lef/clef/xlefiMisc.cpp	/^char* lefiGeometries_getLayer (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getLayerMinSpacing	lef/clef/xlefiMisc.cpp	/^double lefiGeometries_getLayerMinSpacing (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getLayerRuleWidth	lef/clef/xlefiMisc.cpp	/^double lefiGeometries_getLayerRuleWidth (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getPath	lef/clef/xlefiMisc.cpp	/^struct ::lefiGeomPath* lefiGeometries_getPath (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getPathIter	lef/clef/xlefiMisc.cpp	/^struct ::lefiGeomPathIter* lefiGeometries_getPathIter (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getPolygon	lef/clef/xlefiMisc.cpp	/^struct ::lefiGeomPolygon* lefiGeometries_getPolygon (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getPolygonIter	lef/clef/xlefiMisc.cpp	/^struct ::lefiGeomPolygonIter* lefiGeometries_getPolygonIter (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getRect	lef/clef/xlefiMisc.cpp	/^struct ::lefiGeomRect* lefiGeometries_getRect (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getRectIter	lef/clef/xlefiMisc.cpp	/^struct ::lefiGeomRectIter* lefiGeometries_getRectIter (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getVia	lef/clef/xlefiMisc.cpp	/^struct ::lefiGeomVia* lefiGeometries_getVia (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getViaIter	lef/clef/xlefiMisc.cpp	/^struct ::lefiGeomViaIter* lefiGeometries_getViaIter (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getWidth	lef/clef/xlefiMisc.cpp	/^double lefiGeometries_getWidth (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_hasLayerExceptPgNet	lef/clef/xlefiMisc.cpp	/^int lefiGeometries_hasLayerExceptPgNet (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_itemType	lef/clef/xlefiMisc.cpp	/^enum ::lefiGeomEnum lefiGeometries_itemType (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_numItems	lef/clef/xlefiMisc.cpp	/^int lefiGeometries_numItems (const ::lefiGeometries* obj) {$/;"	f
lefiGeometries_print	lef/clef/xlefiMisc.cpp	/^void lefiGeometries_print (const ::lefiGeometries* obj, FILE*  f) {$/;"	f
lefiIRDrop	lef/clef/lefiTypedefs.h	/^typedef void *lefiIRDrop;$/;"	t
lefiIRDrop	lef/include/lefiMisc.hpp	/^class lefiIRDrop {$/;"	c
lefiIRDrop	lef/include/lefiTypedefs.h	/^typedef void *lefiIRDrop;$/;"	t
lefiIRDrop	lef/lef/lefiMisc.cpp	/^lefiIRDrop::lefiIRDrop()$/;"	f	class:lefiIRDrop
lefiIRDrop	lef/lef/lefiMisc.hpp	/^class lefiIRDrop {$/;"	c
lefiIRDrop_name	lef/clef/xlefiMisc.cpp	/^const char* lefiIRDrop_name (const ::lefiIRDrop* obj) {$/;"	f
lefiIRDrop_numValues	lef/clef/xlefiMisc.cpp	/^int lefiIRDrop_numValues (const ::lefiIRDrop* obj) {$/;"	f
lefiIRDrop_print	lef/clef/xlefiMisc.cpp	/^void lefiIRDrop_print (const ::lefiIRDrop* obj, FILE*  f) {$/;"	f
lefiIRDrop_value1	lef/clef/xlefiMisc.cpp	/^double lefiIRDrop_value1 (const ::lefiIRDrop* obj, int  index) {$/;"	f
lefiIRDrop_value2	lef/clef/xlefiMisc.cpp	/^double lefiIRDrop_value2 (const ::lefiIRDrop* obj, int  index) {$/;"	f
lefiInfluence	lef/clef/lefiTypedefs.h	/^typedef void *lefiInfluence;$/;"	t
lefiInfluence	lef/include/lefiLayer.hpp	/^class lefiInfluence {$/;"	c
lefiInfluence	lef/include/lefiTypedefs.h	/^typedef void *lefiInfluence;$/;"	t
lefiInfluence	lef/lef/lefiLayer.cpp	/^lefiInfluence::lefiInfluence()$/;"	f	class:lefiInfluence
lefiInfluence	lef/lef/lefiLayer.hpp	/^class lefiInfluence {$/;"	c
lefiInfluence_distance	lef/clef/xlefiLayer.cpp	/^double lefiInfluence_distance (const ::lefiInfluence* obj, int  index) {$/;"	f
lefiInfluence_numInfluenceEntry	lef/clef/xlefiLayer.cpp	/^int lefiInfluence_numInfluenceEntry (const ::lefiInfluence* obj) {$/;"	f
lefiInfluence_spacing	lef/clef/xlefiLayer.cpp	/^double lefiInfluence_spacing (const ::lefiInfluence* obj, int  index) {$/;"	f
lefiInfluence_width	lef/clef/xlefiLayer.cpp	/^double lefiInfluence_width (const ::lefiInfluence* obj, int  index) {$/;"	f
lefiInvalidMemoryPolicy	lef/include/lefiDefs.hpp	/^  lefiInvalidMemoryPolicy = 23950,$/;"	e	enum:__anon7
lefiInvalidMemoryPolicy	lef/lef/lefiDefs.hpp	/^  lefiInvalidMemoryPolicy = 23950,$/;"	e	enum:__anon2
lefiInvalidObject	lef/include/lefiDefs.hpp	/^  lefiInvalidObject = 41713, $/;"	e	enum:__anon6
lefiInvalidObject	lef/lef/lefiDefs.hpp	/^  lefiInvalidObject = 41713, $/;"	e	enum:__anon1
lefiKRDEFS_h	lef/include/lefiKRDefs.hpp	31;"	d
lefiKRDEFS_h	lef/lef/lefiKRDefs.hpp	31;"	d
lefiLayer	lef/clef/lefiTypedefs.h	/^typedef void *lefiLayer;$/;"	t
lefiLayer	lef/include/lefiLayer.hpp	/^class lefiLayer {$/;"	c
lefiLayer	lef/include/lefiTypedefs.h	/^typedef void *lefiLayer;$/;"	t
lefiLayer	lef/lef/lefiLayer.cpp	/^lefiLayer::lefiLayer()$/;"	f	class:lefiLayer
lefiLayer	lef/lef/lefiLayer.hpp	/^class lefiLayer {$/;"	c
lefiLayerDensity	lef/clef/lefiTypedefs.h	/^typedef void *lefiLayerDensity;$/;"	t
lefiLayerDensity	lef/include/lefiLayer.hpp	/^class lefiLayerDensity {$/;"	c
lefiLayerDensity	lef/include/lefiTypedefs.h	/^typedef void *lefiLayerDensity;$/;"	t
lefiLayerDensity	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::lefiLayerDensity()$/;"	f	class:lefiLayerDensity
lefiLayerDensity	lef/lef/lefiLayer.hpp	/^class lefiLayerDensity {$/;"	c
lefiLayerDensity_cutArea	lef/clef/xlefiLayer.cpp	/^double lefiLayerDensity_cutArea (const ::lefiLayerDensity* obj, int  index) {$/;"	f
lefiLayerDensity_frequency	lef/clef/xlefiLayer.cpp	/^double lefiLayerDensity_frequency (const ::lefiLayerDensity* obj, int  index) {$/;"	f
lefiLayerDensity_hasOneEntry	lef/clef/xlefiLayer.cpp	/^int lefiLayerDensity_hasOneEntry (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_numCutareas	lef/clef/xlefiLayer.cpp	/^int lefiLayerDensity_numCutareas (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_numFrequency	lef/clef/xlefiLayer.cpp	/^int lefiLayerDensity_numFrequency (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_numTableEntries	lef/clef/xlefiLayer.cpp	/^int lefiLayerDensity_numTableEntries (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_numWidths	lef/clef/xlefiLayer.cpp	/^int lefiLayerDensity_numWidths (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_oneEntry	lef/clef/xlefiLayer.cpp	/^double lefiLayerDensity_oneEntry (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_tableEntry	lef/clef/xlefiLayer.cpp	/^double lefiLayerDensity_tableEntry (const ::lefiLayerDensity* obj, int  index) {$/;"	f
lefiLayerDensity_type	lef/clef/xlefiLayer.cpp	/^char* lefiLayerDensity_type (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_width	lef/clef/xlefiLayer.cpp	/^double lefiLayerDensity_width (const ::lefiLayerDensity* obj, int  index) {$/;"	f
lefiLayer_accurrent	lef/clef/xlefiLayer.cpp	/^const ::lefiLayerDensity* lefiLayer_accurrent (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_antennaArea	lef/clef/xlefiLayer.cpp	/^double lefiLayer_antennaArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_antennaLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_antennaLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_antennaModel	lef/clef/xlefiLayer.cpp	/^const ::lefiAntennaModel* lefiLayer_antennaModel (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_area	lef/clef/xlefiLayer.cpp	/^double lefiLayer_area (const ::lefiLayer* obj) {$/;"	f
lefiLayer_arrayCuts	lef/clef/xlefiLayer.cpp	/^int lefiLayer_arrayCuts (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_arraySpacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_arraySpacing (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_capMultiplier	lef/clef/xlefiLayer.cpp	/^double lefiLayer_capMultiplier (const ::lefiLayer* obj) {$/;"	f
lefiLayer_capacitance	lef/clef/xlefiLayer.cpp	/^double lefiLayer_capacitance (const ::lefiLayer* obj) {$/;"	f
lefiLayer_capacitanceArray	lef/clef/xlefiLayer.cpp	/^void lefiLayer_capacitanceArray (const ::lefiLayer* obj, int*  numPoints, double**  widths, double**  resValues) {$/;"	f
lefiLayer_currentDensityArray	lef/clef/xlefiLayer.cpp	/^void lefiLayer_currentDensityArray (const ::lefiLayer* obj, int*  numPoints, double**  widths, double**  current) {$/;"	f
lefiLayer_currentDensityPoint	lef/clef/xlefiLayer.cpp	/^double lefiLayer_currentDensityPoint (const ::lefiLayer* obj) {$/;"	f
lefiLayer_cutSpacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_cutSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_dccurrent	lef/clef/xlefiLayer.cpp	/^const ::lefiLayerDensity* lefiLayer_dccurrent (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_densityCheckStep	lef/clef/xlefiLayer.cpp	/^double lefiLayer_densityCheckStep (const ::lefiLayer* obj) {$/;"	f
lefiLayer_densityCheckWindowLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_densityCheckWindowLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_densityCheckWindowWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_densityCheckWindowWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagMinEdgeLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_diagMinEdgeLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagPitch	lef/clef/xlefiLayer.cpp	/^double lefiLayer_diagPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagPitchX	lef/clef/xlefiLayer.cpp	/^double lefiLayer_diagPitchX (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagPitchY	lef/clef/xlefiLayer.cpp	/^double lefiLayer_diagPitchY (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagSpacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_diagSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_diagWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_direction	lef/clef/xlefiLayer.cpp	/^const char* lefiLayer_direction (const ::lefiLayer* obj) {$/;"	f
lefiLayer_edgeCap	lef/clef/xlefiLayer.cpp	/^double lefiLayer_edgeCap (const ::lefiLayer* obj) {$/;"	f
lefiLayer_enclosureExceptExtraCut	lef/clef/xlefiLayer.cpp	/^double lefiLayer_enclosureExceptExtraCut (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_enclosureMinLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_enclosureMinLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_enclosureMinWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_enclosureMinWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_enclosureOverhang1	lef/clef/xlefiLayer.cpp	/^double lefiLayer_enclosureOverhang1 (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_enclosureOverhang2	lef/clef/xlefiLayer.cpp	/^double lefiLayer_enclosureOverhang2 (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_fillActiveSpacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_fillActiveSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_h	lef/include/lefiLayer.hpp	31;"	d
lefiLayer_h	lef/lef/lefiLayer.hpp	31;"	d
lefiLayer_hasAccurrentDensity	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasAccurrentDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasAntennaArea	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasAntennaArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasAntennaLength	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasAntennaLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasArea	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasArraySpacing	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasArraySpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCapMultiplier	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasCapMultiplier (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCapacitance	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasCapacitance (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCapacitanceArray	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasCapacitanceArray (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCurrentDensityArray	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasCurrentDensityArray (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCurrentDensityPoint	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasCurrentDensityPoint (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDccurrentDensity	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasDccurrentDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDensityCheckStep	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasDensityCheckStep (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDensityCheckWindow	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasDensityCheckWindow (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDiagMinEdgeLength	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasDiagMinEdgeLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDiagPitch	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasDiagPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDiagSpacing	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasDiagSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDiagWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasDiagWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDirection	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasDirection (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasEdgeCap	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasEdgeCap (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasEnclosureExceptExtraCut	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasEnclosureExceptExtraCut (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasEnclosureMinLength	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasEnclosureMinLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasEnclosureRule	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasEnclosureRule (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasEnclosureWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasEnclosureWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasFillActiveSpacing	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasFillActiveSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasHeight	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasHeight (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasLayerType	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasLayerType (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasLongArray	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasLongArray (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMask	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMask (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxAdjacentSlotSpacing	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxAdjacentSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxCoaxialSlotSpacing	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxCoaxialSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxEdgeSlotSpacing	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxEdgeSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxFloatingArea	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxFloatingArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaximumDensity	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMaximumDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxwidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxwidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMinenclosedareaWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinenclosedareaWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinimumDensity	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinimumDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMinimumcutConnection	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinimumcutConnection (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinimumcutNumCuts	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinimumcutNumCuts (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinimumcutWithin	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinimumcutWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstep	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstep (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMinstepLengthsum	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepLengthsum (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepMaxedges	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepMaxedges (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepMinAdjLength	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepMinAdjLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepMinBetLength	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepMinBetLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepType	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepType (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepXSameCorners	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepXSameCorners (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinwidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasMinwidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasOffset	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasOffset (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasPitch	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasPreferEnclosureRule	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasPreferEnclosureRule (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasPreferEnclosureWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasPreferEnclosureWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasProtrusion	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasProtrusion (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasResistance	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasResistance (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasResistanceArray	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasResistanceArray (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasResistancePerCut	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasResistancePerCut (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasShrinkage	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasShrinkage (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSlotLength	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSlotLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSlotWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSlotWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSlotWireLength	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSlotWireLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSlotWireWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSlotWireWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSpacingAdjacent	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingAdjacent (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingAdjacentExcept	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingAdjacentExcept (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingArea	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingArea (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingCenterToCenter	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingCenterToCenter (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingEndOfLine	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingEndOfLine (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingEndOfNotchWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingEndOfNotchWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingLayerStack	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingLayerStack (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingLengthThreshold	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingLengthThreshold (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingLengthThresholdRange	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingLengthThresholdRange (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingName	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingName (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingNotchLength	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingNotchLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingNumber	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingNumber (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSpacingParallelOverlap	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingParallelOverlap (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingParellelEdge	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingParellelEdge (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRange	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRange (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRangeInfluence	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRangeInfluence (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRangeInfluenceRange	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRangeInfluenceRange (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRangeRange	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRangeRange (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRangeUseLengthThreshold	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRangeUseLengthThreshold (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingSamenet	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingSamenet (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingSamenetPGonly	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingSamenetPGonly (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingTableOrtho	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingTableOrtho (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSpacingTwoEdges	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingTwoEdges (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSplitWireWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasSplitWireWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasThickness	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasThickness (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasType	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasType (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasViaWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasViaWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasWidth	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasWireExtension	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasWireExtension (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasXYDiagPitch	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasXYDiagPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasXYOffset	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasXYOffset (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasXYPitch	lef/clef/xlefiLayer.cpp	/^int lefiLayer_hasXYPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_height	lef/clef/xlefiLayer.cpp	/^double lefiLayer_height (const ::lefiLayer* obj) {$/;"	f
lefiLayer_layerType	lef/clef/xlefiLayer.cpp	/^const char* lefiLayer_layerType (const ::lefiLayer* obj) {$/;"	f
lefiLayer_mask	lef/clef/xlefiLayer.cpp	/^int lefiLayer_mask (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxAdjacentSlotSpacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_maxAdjacentSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxCoaxialSlotSpacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_maxCoaxialSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxEdgeSlotSpacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_maxEdgeSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxFloatingArea	lef/clef/xlefiLayer.cpp	/^double lefiLayer_maxFloatingArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maximumDensity	lef/clef/xlefiLayer.cpp	/^double lefiLayer_maximumDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxwidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_maxwidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_minSizeLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minSizeLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minSizeWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minSizeWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minenclosedarea	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minenclosedarea (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minenclosedareaWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minenclosedareaWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumDensity	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minimumDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_minimumcut	lef/clef/xlefiLayer.cpp	/^int lefiLayer_minimumcut (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutConnection	lef/clef/xlefiLayer.cpp	/^const char* lefiLayer_minimumcutConnection (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutDistance	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minimumcutDistance (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minimumcutLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minimumcutWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutWithin	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minimumcutWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstep	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minstep (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepLengthsum	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minstepLengthsum (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepMaxedges	lef/clef/xlefiLayer.cpp	/^int lefiLayer_minstepMaxedges (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepMinAdjLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minstepMinAdjLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepMinBetLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minstepMinBetLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepType	lef/clef/xlefiLayer.cpp	/^char* lefiLayer_minstepType (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minwidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_minwidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_name	lef/clef/xlefiLayer.cpp	/^char* lefiLayer_name (const ::lefiLayer* obj) {$/;"	f
lefiLayer_need58PropsProcessing	lef/clef/xlefiLayer.cpp	/^int lefiLayer_need58PropsProcessing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numAccurrentDensity	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numAccurrentDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numAntennaModel	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numAntennaModel (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numArrayCuts	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numArrayCuts (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numDccurrentDensity	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numDccurrentDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numEnclosure	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numEnclosure (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numMinSize	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numMinSize (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numMinenclosedarea	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numMinenclosedarea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numMinimumcut	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numMinimumcut (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numMinstep	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numMinstep (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numPreferEnclosure	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numPreferEnclosure (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numProps	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numProps (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numSpacing	lef/clef/xlefiLayer.cpp	/^int lefiLayer_numSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_offset	lef/clef/xlefiLayer.cpp	/^double lefiLayer_offset (const ::lefiLayer* obj) {$/;"	f
lefiLayer_offsetX	lef/clef/xlefiLayer.cpp	/^double lefiLayer_offsetX (const ::lefiLayer* obj) {$/;"	f
lefiLayer_offsetY	lef/clef/xlefiLayer.cpp	/^double lefiLayer_offsetY (const ::lefiLayer* obj) {$/;"	f
lefiLayer_orthogonal	lef/clef/xlefiLayer.cpp	/^const ::lefiOrthogonal* lefiLayer_orthogonal (const ::lefiLayer* obj) {$/;"	f
lefiLayer_pitch	lef/clef/xlefiLayer.cpp	/^double lefiLayer_pitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_pitchX	lef/clef/xlefiLayer.cpp	/^double lefiLayer_pitchX (const ::lefiLayer* obj) {$/;"	f
lefiLayer_pitchY	lef/clef/xlefiLayer.cpp	/^double lefiLayer_pitchY (const ::lefiLayer* obj) {$/;"	f
lefiLayer_preferEnclosureMinWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_preferEnclosureMinWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_preferEnclosureOverhang1	lef/clef/xlefiLayer.cpp	/^double lefiLayer_preferEnclosureOverhang1 (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_preferEnclosureOverhang2	lef/clef/xlefiLayer.cpp	/^double lefiLayer_preferEnclosureOverhang2 (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_print	lef/clef/xlefiLayer.cpp	/^void lefiLayer_print (const ::lefiLayer* obj, FILE*  f) {$/;"	f
lefiLayer_propIsNumber	lef/clef/xlefiLayer.cpp	/^int lefiLayer_propIsNumber (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propIsString	lef/clef/xlefiLayer.cpp	/^int lefiLayer_propIsString (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propName	lef/clef/xlefiLayer.cpp	/^const char* lefiLayer_propName (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propNumber	lef/clef/xlefiLayer.cpp	/^double lefiLayer_propNumber (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propType	lef/clef/xlefiLayer.cpp	/^const char lefiLayer_propType (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propValue	lef/clef/xlefiLayer.cpp	/^const char* lefiLayer_propValue (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_protrusionLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_protrusionLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_protrusionWidth1	lef/clef/xlefiLayer.cpp	/^double lefiLayer_protrusionWidth1 (const ::lefiLayer* obj) {$/;"	f
lefiLayer_protrusionWidth2	lef/clef/xlefiLayer.cpp	/^double lefiLayer_protrusionWidth2 (const ::lefiLayer* obj) {$/;"	f
lefiLayer_resistance	lef/clef/xlefiLayer.cpp	/^double lefiLayer_resistance (const ::lefiLayer* obj) {$/;"	f
lefiLayer_resistanceArray	lef/clef/xlefiLayer.cpp	/^void lefiLayer_resistanceArray (const ::lefiLayer* obj, int*  numPoints, double**  widths, double**  capValues) {$/;"	f
lefiLayer_resistancePerCut	lef/clef/xlefiLayer.cpp	/^double lefiLayer_resistancePerCut (const ::lefiLayer* obj) {$/;"	f
lefiLayer_shrinkage	lef/clef/xlefiLayer.cpp	/^double lefiLayer_shrinkage (const ::lefiLayer* obj) {$/;"	f
lefiLayer_slotLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_slotLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_slotWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_slotWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_slotWireLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_slotWireLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_slotWireWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_slotWireWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_spacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacing (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingAdjacentCuts	lef/clef/xlefiLayer.cpp	/^int lefiLayer_spacingAdjacentCuts (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingAdjacentWithin	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingAdjacentWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingArea	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingArea (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEndOfNotchLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingEndOfNotchLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEndOfNotchSpacing	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingEndOfNotchSpacing (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEndOfNotchWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingEndOfNotchWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEolWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingEolWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEolWithin	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingEolWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingLengthThreshold	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingLengthThreshold (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingLengthThresholdRangeMax	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingLengthThresholdRangeMax (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingLengthThresholdRangeMin	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingLengthThresholdRangeMin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingName	lef/clef/xlefiLayer.cpp	/^char* lefiLayer_spacingName (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingNotchLength	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingNotchLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingParSpace	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingParSpace (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingParWithin	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingParWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeInfluence	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeInfluence (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeInfluenceMax	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeInfluenceMax (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeInfluenceMin	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeInfluenceMin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeMax	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeMax (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeMin	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeMin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeRangeMax	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeRangeMax (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeRangeMin	lef/clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeRangeMin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_splitWireWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_splitWireWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_thickness	lef/clef/xlefiLayer.cpp	/^double lefiLayer_thickness (const ::lefiLayer* obj) {$/;"	f
lefiLayer_type	lef/clef/xlefiLayer.cpp	/^const char* lefiLayer_type (const ::lefiLayer* obj) {$/;"	f
lefiLayer_viaWidth	lef/clef/xlefiLayer.cpp	/^double lefiLayer_viaWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_width	lef/clef/xlefiLayer.cpp	/^double lefiLayer_width (const ::lefiLayer* obj) {$/;"	f
lefiLayer_wireExtension	lef/clef/xlefiLayer.cpp	/^double lefiLayer_wireExtension (const ::lefiLayer* obj) {$/;"	f
lefiMacro	lef/clef/lefiTypedefs.h	/^typedef void *lefiMacro;$/;"	t
lefiMacro	lef/include/lefiMacro.hpp	/^class lefiMacro {$/;"	c
lefiMacro	lef/include/lefiTypedefs.h	/^typedef void *lefiMacro;$/;"	t
lefiMacro	lef/lef/lefiMacro.cpp	/^lefiMacro::lefiMacro()$/;"	f	class:lefiMacro
lefiMacro	lef/lef/lefiMacro.hpp	/^class lefiMacro {$/;"	c
lefiMacroForeign	lef/include/lefiMacro.hpp	/^class lefiMacroForeign {$/;"	c
lefiMacroForeign	lef/lef/lefiMacro.cpp	/^lefiMacroForeign::lefiMacroForeign(const char *name,$/;"	f	class:lefiMacroForeign
lefiMacroForeign	lef/lef/lefiMacro.hpp	/^class lefiMacroForeign {$/;"	c
lefiMacroSite	lef/include/lefiMacro.hpp	/^class lefiMacroSite {$/;"	c
lefiMacroSite	lef/lef/lefiMacro.cpp	/^lefiMacroSite::lefiMacroSite(const char            *name, $/;"	f	class:lefiMacroSite
lefiMacroSite	lef/lef/lefiMacro.hpp	/^class lefiMacroSite {$/;"	c
lefiMacro_EEQ	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_EEQ (const ::lefiMacro* obj) {$/;"	f
lefiMacro_LEQ	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_LEQ (const ::lefiMacro* obj) {$/;"	f
lefiMacro_clockType	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_clockType (const ::lefiMacro* obj) {$/;"	f
lefiMacro_foreignName	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_foreignName (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_foreignOrient	lef/clef/xlefiMacro.cpp	/^int lefiMacro_foreignOrient (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_foreignOrientStr	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_foreignOrientStr (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_foreignX	lef/clef/xlefiMacro.cpp	/^double lefiMacro_foreignX (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_foreignY	lef/clef/xlefiMacro.cpp	/^double lefiMacro_foreignY (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_generate	lef/clef/xlefiMacro.cpp	/^void lefiMacro_generate (const ::lefiMacro* obj, char**  name1, char**  name2) {$/;"	f
lefiMacro_generator	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_generator (const ::lefiMacro* obj) {$/;"	f
lefiMacro_h	lef/include/lefiMacro.hpp	31;"	d
lefiMacro_h	lef/lef/lefiMacro.hpp	31;"	d
lefiMacro_has90Symmetry	lef/clef/xlefiMacro.cpp	/^int lefiMacro_has90Symmetry (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasClass	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasClass (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasClockType	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasClockType (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasEEQ	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasEEQ (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasForeign	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasForeign (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasForeignOrient	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasForeignOrient (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_hasForeignOrigin	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasForeignOrigin (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_hasForeignPoint	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasForeignPoint (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_hasGenerate	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasGenerate (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasGenerator	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasGenerator (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasLEQ	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasLEQ (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasOrigin	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasOrigin (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasPower	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasPower (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasSiteName	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasSiteName (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasSitePattern	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasSitePattern (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasSize	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasSize (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasSource	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasSource (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasXSymmetry	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasXSymmetry (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasYSymmetry	lef/clef/xlefiMacro.cpp	/^int lefiMacro_hasYSymmetry (const ::lefiMacro* obj) {$/;"	f
lefiMacro_isBuffer	lef/clef/xlefiMacro.cpp	/^int lefiMacro_isBuffer (const ::lefiMacro* obj) {$/;"	f
lefiMacro_isFixedMask	lef/clef/xlefiMacro.cpp	/^int lefiMacro_isFixedMask (const ::lefiMacro* obj) {$/;"	f
lefiMacro_isInverter	lef/clef/xlefiMacro.cpp	/^int lefiMacro_isInverter (const ::lefiMacro* obj) {$/;"	f
lefiMacro_macroClass	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_macroClass (const ::lefiMacro* obj) {$/;"	f
lefiMacro_name	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_name (const ::lefiMacro* obj) {$/;"	f
lefiMacro_numForeigns	lef/clef/xlefiMacro.cpp	/^int lefiMacro_numForeigns (const ::lefiMacro* obj) {$/;"	f
lefiMacro_numProperties	lef/clef/xlefiMacro.cpp	/^int lefiMacro_numProperties (const ::lefiMacro* obj) {$/;"	f
lefiMacro_numSitePattern	lef/clef/xlefiMacro.cpp	/^int lefiMacro_numSitePattern (const ::lefiMacro* obj) {$/;"	f
lefiMacro_originX	lef/clef/xlefiMacro.cpp	/^double lefiMacro_originX (const ::lefiMacro* obj) {$/;"	f
lefiMacro_originY	lef/clef/xlefiMacro.cpp	/^double lefiMacro_originY (const ::lefiMacro* obj) {$/;"	f
lefiMacro_power	lef/clef/xlefiMacro.cpp	/^double lefiMacro_power (const ::lefiMacro* obj) {$/;"	f
lefiMacro_print	lef/clef/xlefiMacro.cpp	/^void lefiMacro_print (const ::lefiMacro* obj, FILE*  f) {$/;"	f
lefiMacro_propIsNumber	lef/clef/xlefiMacro.cpp	/^int lefiMacro_propIsNumber (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propIsString	lef/clef/xlefiMacro.cpp	/^int lefiMacro_propIsString (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propName	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_propName (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propNum	lef/clef/xlefiMacro.cpp	/^double lefiMacro_propNum (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propType	lef/clef/xlefiMacro.cpp	/^const char lefiMacro_propType (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propValue	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_propValue (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_siteName	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_siteName (const ::lefiMacro* obj) {$/;"	f
lefiMacro_sitePattern	lef/clef/xlefiMacro.cpp	/^const ::lefiSitePattern* lefiMacro_sitePattern (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_sizeX	lef/clef/xlefiMacro.cpp	/^double lefiMacro_sizeX (const ::lefiMacro* obj) {$/;"	f
lefiMacro_sizeY	lef/clef/xlefiMacro.cpp	/^double lefiMacro_sizeY (const ::lefiMacro* obj) {$/;"	f
lefiMacro_source	lef/clef/xlefiMacro.cpp	/^const char* lefiMacro_source (const ::lefiMacro* obj) {$/;"	f
lefiMaxStackVia	lef/clef/lefiTypedefs.h	/^typedef void *lefiMaxStackVia;$/;"	t
lefiMaxStackVia	lef/include/lefiMisc.hpp	/^class lefiMaxStackVia {$/;"	c
lefiMaxStackVia	lef/include/lefiTypedefs.h	/^typedef void *lefiMaxStackVia;$/;"	t
lefiMaxStackVia	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::lefiMaxStackVia()$/;"	f	class:lefiMaxStackVia
lefiMaxStackVia	lef/lef/lefiMisc.hpp	/^class lefiMaxStackVia {$/;"	c
lefiMaxStackVia_hasMaxStackViaRange	lef/clef/xlefiMisc.cpp	/^int lefiMaxStackVia_hasMaxStackViaRange (const ::lefiMaxStackVia* obj) {$/;"	f
lefiMaxStackVia_maxStackVia	lef/clef/xlefiMisc.cpp	/^int lefiMaxStackVia_maxStackVia (const ::lefiMaxStackVia* obj) {$/;"	f
lefiMaxStackVia_maxStackViaBottomLayer	lef/clef/xlefiMisc.cpp	/^const char* lefiMaxStackVia_maxStackViaBottomLayer (const ::lefiMaxStackVia* obj) {$/;"	f
lefiMaxStackVia_maxStackViaTopLayer	lef/clef/xlefiMisc.cpp	/^const char* lefiMaxStackVia_maxStackViaTopLayer (const ::lefiMaxStackVia* obj) {$/;"	f
lefiMaxStackVia_print	lef/clef/xlefiMisc.cpp	/^void lefiMaxStackVia_print (const ::lefiMaxStackVia* obj, FILE*  f) {$/;"	f
lefiMemoryPolicy_e	lef/include/lefiDefs.hpp	/^} lefiMemoryPolicy_e;$/;"	t	typeref:enum:__anon7
lefiMemoryPolicy_e	lef/lef/lefiDefs.hpp	/^} lefiMemoryPolicy_e;$/;"	t	typeref:enum:__anon2
lefiMinFeature	lef/clef/lefiTypedefs.h	/^typedef void *lefiMinFeature;$/;"	t
lefiMinFeature	lef/include/lefiMisc.hpp	/^class lefiMinFeature {$/;"	c
lefiMinFeature	lef/include/lefiTypedefs.h	/^typedef void *lefiMinFeature;$/;"	t
lefiMinFeature	lef/lef/lefiMisc.cpp	/^lefiMinFeature::lefiMinFeature()$/;"	f	class:lefiMinFeature
lefiMinFeature	lef/lef/lefiMisc.hpp	/^class lefiMinFeature {$/;"	c
lefiMinFeature_one	lef/clef/xlefiMisc.cpp	/^double lefiMinFeature_one (const ::lefiMinFeature* obj) {$/;"	f
lefiMinFeature_print	lef/clef/xlefiMisc.cpp	/^void lefiMinFeature_print (const ::lefiMinFeature* obj, FILE*  f) {$/;"	f
lefiMinFeature_two	lef/clef/xlefiMisc.cpp	/^double lefiMinFeature_two (const ::lefiMinFeature* obj) {$/;"	f
lefiMisc_h	lef/include/lefiMisc.hpp	31;"	d
lefiMisc_h	lef/lef/lefiMisc.hpp	31;"	d
lefiNerr	lef/lef/lefrReader.cpp	/^lefiNerr(int i)$/;"	f
lefiNoiseEdge	lef/clef/lefiTypedefs.h	/^typedef void *lefiNoiseEdge;$/;"	t
lefiNoiseEdge	lef/include/lefiCrossTalk.hpp	/^class lefiNoiseEdge {$/;"	c
lefiNoiseEdge	lef/include/lefiTypedefs.h	/^typedef void *lefiNoiseEdge;$/;"	t
lefiNoiseEdge	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::lefiNoiseEdge()$/;"	f	class:lefiNoiseEdge
lefiNoiseEdge	lef/lef/lefiCrossTalk.hpp	/^class lefiNoiseEdge {$/;"	c
lefiNoiseMargin	lef/clef/lefiTypedefs.h	/^struct lefiNoiseMargin {$/;"	s
lefiNoiseMargin	lef/include/lefiCrossTalk.hpp	/^struct lefiNoiseMargin {$/;"	s
lefiNoiseMargin	lef/include/lefiTypedefs.h	/^struct lefiNoiseMargin {$/;"	s
lefiNoiseMargin	lef/lef/lefiCrossTalk.hpp	/^struct lefiNoiseMargin {$/;"	s
lefiNoiseResistance	lef/clef/lefiTypedefs.h	/^typedef void *lefiNoiseResistance;$/;"	t
lefiNoiseResistance	lef/include/lefiCrossTalk.hpp	/^class lefiNoiseResistance {$/;"	c
lefiNoiseResistance	lef/include/lefiTypedefs.h	/^typedef void *lefiNoiseResistance;$/;"	t
lefiNoiseResistance	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::lefiNoiseResistance()$/;"	f	class:lefiNoiseResistance
lefiNoiseResistance	lef/lef/lefiCrossTalk.hpp	/^class lefiNoiseResistance {$/;"	c
lefiNoiseResistance_num	lef/clef/xlefiCrossTalk.cpp	/^double lefiNoiseResistance_num (const ::lefiNoiseResistance* obj, int  index) {$/;"	f
lefiNoiseResistance_numNums	lef/clef/xlefiCrossTalk.cpp	/^int lefiNoiseResistance_numNums (const ::lefiNoiseResistance* obj) {$/;"	f
lefiNoiseResistance_numVictims	lef/clef/xlefiCrossTalk.cpp	/^int lefiNoiseResistance_numVictims (const ::lefiNoiseResistance* obj) {$/;"	f
lefiNoiseResistance_victim	lef/clef/xlefiCrossTalk.cpp	/^const ::lefiNoiseVictim* lefiNoiseResistance_victim (const ::lefiNoiseResistance* obj, int  index) {$/;"	f
lefiNoiseTable	lef/clef/lefiTypedefs.h	/^typedef void *lefiNoiseTable;$/;"	t
lefiNoiseTable	lef/include/lefiCrossTalk.hpp	/^class lefiNoiseTable {$/;"	c
lefiNoiseTable	lef/include/lefiTypedefs.h	/^typedef void *lefiNoiseTable;$/;"	t
lefiNoiseTable	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::lefiNoiseTable()$/;"	f	class:lefiNoiseTable
lefiNoiseTable	lef/lef/lefiCrossTalk.hpp	/^class lefiNoiseTable {$/;"	c
lefiNoiseVictim	lef/clef/lefiTypedefs.h	/^typedef void *lefiNoiseVictim;$/;"	t
lefiNoiseVictim	lef/include/lefiCrossTalk.hpp	/^class lefiNoiseVictim {$/;"	c
lefiNoiseVictim	lef/include/lefiTypedefs.h	/^typedef void *lefiNoiseVictim;$/;"	t
lefiNoiseVictim	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::lefiNoiseVictim(double d)$/;"	f	class:lefiNoiseVictim
lefiNoiseVictim	lef/lef/lefiCrossTalk.hpp	/^class lefiNoiseVictim {$/;"	c
lefiNoiseVictim_length	lef/clef/xlefiCrossTalk.cpp	/^double lefiNoiseVictim_length (const ::lefiNoiseVictim* obj) {$/;"	f
lefiNoiseVictim_noise	lef/clef/xlefiCrossTalk.cpp	/^double lefiNoiseVictim_noise (const ::lefiNoiseVictim* obj, int  index) {$/;"	f
lefiNoiseVictim_numNoises	lef/clef/xlefiCrossTalk.cpp	/^int lefiNoiseVictim_numNoises (const ::lefiNoiseVictim* obj) {$/;"	f
lefiNonDefault	lef/clef/lefiTypedefs.h	/^typedef void *lefiNonDefault;$/;"	t
lefiNonDefault	lef/include/lefiNonDefault.hpp	/^class lefiNonDefault {$/;"	c
lefiNonDefault	lef/include/lefiTypedefs.h	/^typedef void *lefiNonDefault;$/;"	t
lefiNonDefault	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::lefiNonDefault()$/;"	f	class:lefiNonDefault
lefiNonDefault	lef/lef/lefiNonDefault.hpp	/^class lefiNonDefault {$/;"	c
lefiNonDefault_cutLayerName	lef/clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_cutLayerName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_h	lef/include/lefiNonDefault.hpp	31;"	d
lefiNonDefault_h	lef/lef/lefiNonDefault.hpp	31;"	d
lefiNonDefault_hasHardspacing	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasHardspacing (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_hasLayerCapacitance	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerCapacitance (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerDiagWidth	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerDiagWidth (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerEdgeCap	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerEdgeCap (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerResistance	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerResistance (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerSpacing	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerSpacing (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerWidth	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerWidth (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerWireExtension	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerWireExtension (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerCapacitance	lef/clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerCapacitance (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerDiagWidth	lef/clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerDiagWidth (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerEdgeCap	lef/clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerEdgeCap (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerName	lef/clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_layerName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerResistance	lef/clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerResistance (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerSpacing	lef/clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerSpacing (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerWidth	lef/clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerWidth (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerWireExtension	lef/clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerWireExtension (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_name	lef/clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_name (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numCuts	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numCuts (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_numLayers	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numLayers (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numMinCuts	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numMinCuts (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numProps	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numProps (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numSpacingRules	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numSpacingRules (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numUseVia	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numUseVia (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numUseViaRule	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numUseViaRule (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numVias	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numVias (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_propIsNumber	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_propIsNumber (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propIsString	lef/clef/xlefiNonDefault.cpp	/^int lefiNonDefault_propIsString (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propName	lef/clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_propName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propNumber	lef/clef/xlefiNonDefault.cpp	/^double lefiNonDefault_propNumber (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propType	lef/clef/xlefiNonDefault.cpp	/^const char lefiNonDefault_propType (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propValue	lef/clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_propValue (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_spacingRule	lef/clef/xlefiNonDefault.cpp	/^const ::lefiSpacing* lefiNonDefault_spacingRule (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_viaName	lef/clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_viaName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_viaRule	lef/clef/xlefiNonDefault.cpp	/^const ::lefiVia* lefiNonDefault_viaRule (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_viaRuleName	lef/clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_viaRuleName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNum	lef/clef/lefiTypedefs.h	/^typedef struct lefiPoints lefiNum;$/;"	t	typeref:struct:lefiPoints
lefiNum	lef/include/lefiTypedefs.h	/^typedef struct lefiPoints lefiNum;$/;"	t	typeref:struct:lefiPoints
lefiNum	lef/include/lefiUtil.hpp	/^typedef struct lefiPoints lefiNum;$/;"	t	typeref:struct:lefiPoints
lefiNum	lef/lef/lefiUtil.hpp	/^typedef struct lefiPoints lefiNum;$/;"	t	typeref:struct:lefiPoints
lefiNwarn	lef/lef/lefrReader.cpp	/^lefiNwarn(int i)$/;"	f
lefiObjectType_e	lef/include/lefiDefs.hpp	/^} lefiObjectType_e;$/;"	t	typeref:enum:__anon6
lefiObjectType_e	lef/lef/lefiDefs.hpp	/^} lefiObjectType_e;$/;"	t	typeref:enum:__anon1
lefiObstruction	lef/clef/lefiTypedefs.h	/^typedef void *lefiObstruction;$/;"	t
lefiObstruction	lef/include/lefiMacro.hpp	/^class lefiObstruction {$/;"	c
lefiObstruction	lef/include/lefiTypedefs.h	/^typedef void *lefiObstruction;$/;"	t
lefiObstruction	lef/lef/lefiMacro.cpp	/^lefiObstruction::lefiObstruction()$/;"	f	class:lefiObstruction
lefiObstruction	lef/lef/lefiMacro.hpp	/^class lefiObstruction {$/;"	c
lefiObstruction_geometries	lef/clef/xlefiMacro.cpp	/^const ::lefiGeometries* lefiObstruction_geometries (const ::lefiObstruction* obj) {$/;"	f
lefiObstruction_print	lef/clef/xlefiMacro.cpp	/^void lefiObstruction_print (const ::lefiObstruction* obj, FILE*  f) {$/;"	f
lefiOrientStr	lef/clef/xlefiUtil.cpp	/^char* lefiOrientStr (int  orient) {$/;"	f
lefiOrientStr	lef/lef/lefiTBExt.cpp	/^lefiOrientStr(int orient)$/;"	f
lefiOrphanSubObjects	lef/include/lefiDefs.hpp	/^  lefiOrphanSubObjects,       \/\/ deep copy, no delete$/;"	e	enum:__anon7
lefiOrphanSubObjects	lef/lef/lefiDefs.hpp	/^  lefiOrphanSubObjects,       \/\/ deep copy, no delete$/;"	e	enum:__anon2
lefiOrthogonal	lef/clef/lefiTypedefs.h	/^typedef void *lefiOrthogonal;$/;"	t
lefiOrthogonal	lef/include/lefiLayer.hpp	/^class lefiOrthogonal {$/;"	c
lefiOrthogonal	lef/include/lefiTypedefs.h	/^typedef void *lefiOrthogonal;$/;"	t
lefiOrthogonal	lef/lef/lefiLayer.cpp	/^lefiOrthogonal::lefiOrthogonal()$/;"	f	class:lefiOrthogonal
lefiOrthogonal	lef/lef/lefiLayer.hpp	/^class lefiOrthogonal {$/;"	c
lefiOrthogonal_cutWithin	lef/clef/xlefiLayer.cpp	/^double lefiOrthogonal_cutWithin (const ::lefiOrthogonal* obj, int  index) {$/;"	f
lefiOrthogonal_numOrthogonal	lef/clef/xlefiLayer.cpp	/^int lefiOrthogonal_numOrthogonal (const ::lefiOrthogonal* obj) {$/;"	f
lefiOrthogonal_orthoSpacing	lef/clef/xlefiLayer.cpp	/^double lefiOrthogonal_orthoSpacing (const ::lefiOrthogonal* obj, int  index) {$/;"	f
lefiParallel	lef/clef/lefiTypedefs.h	/^typedef void *lefiParallel;$/;"	t
lefiParallel	lef/include/lefiLayer.hpp	/^class lefiParallel {$/;"	c
lefiParallel	lef/include/lefiTypedefs.h	/^typedef void *lefiParallel;$/;"	t
lefiParallel	lef/lef/lefiLayer.cpp	/^lefiParallel::lefiParallel()$/;"	f	class:lefiParallel
lefiParallel	lef/lef/lefiLayer.hpp	/^class lefiParallel {$/;"	c
lefiParallel_length	lef/clef/xlefiLayer.cpp	/^double lefiParallel_length (const ::lefiParallel* obj, int  iLength) {$/;"	f
lefiParallel_numLength	lef/clef/xlefiLayer.cpp	/^int lefiParallel_numLength (const ::lefiParallel* obj) {$/;"	f
lefiParallel_numWidth	lef/clef/xlefiLayer.cpp	/^int lefiParallel_numWidth (const ::lefiParallel* obj) {$/;"	f
lefiParallel_width	lef/clef/xlefiLayer.cpp	/^double lefiParallel_width (const ::lefiParallel* obj, int  iWidth) {$/;"	f
lefiParallel_widthSpacing	lef/clef/xlefiLayer.cpp	/^double lefiParallel_widthSpacing (const ::lefiParallel* obj, int  iWidth, int  iWidthSpacing) {$/;"	f
lefiPin	lef/clef/lefiTypedefs.h	/^typedef void *lefiPin;$/;"	t
lefiPin	lef/include/lefiMacro.hpp	/^class lefiPin {$/;"	c
lefiPin	lef/include/lefiTypedefs.h	/^typedef void *lefiPin;$/;"	t
lefiPin	lef/lef/lefiMacro.cpp	/^lefiPin::lefiPin()$/;"	f	class:lefiPin
lefiPin	lef/lef/lefiMacro.hpp	/^class lefiPin {$/;"	c
lefiPinAntennaModel	lef/clef/lefiTypedefs.h	/^typedef void *lefiPinAntennaModel;$/;"	t
lefiPinAntennaModel	lef/include/lefiMacro.hpp	/^class lefiPinAntennaModel {$/;"	c
lefiPinAntennaModel	lef/include/lefiTypedefs.h	/^typedef void *lefiPinAntennaModel;$/;"	t
lefiPinAntennaModel	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::lefiPinAntennaModel()$/;"	f	class:lefiPinAntennaModel
lefiPinAntennaModel	lef/lef/lefiMacro.hpp	/^class lefiPinAntennaModel {$/;"	c
lefiPinAntennaModel_antennaGateArea	lef/clef/xlefiMacro.cpp	/^double lefiPinAntennaModel_antennaGateArea (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaGateAreaLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPinAntennaModel_antennaGateAreaLayer (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxAreaCar	lef/clef/xlefiMacro.cpp	/^double lefiPinAntennaModel_antennaMaxAreaCar (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxAreaCarLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPinAntennaModel_antennaMaxAreaCarLayer (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxCutCar	lef/clef/xlefiMacro.cpp	/^double lefiPinAntennaModel_antennaMaxCutCar (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxCutCarLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPinAntennaModel_antennaMaxCutCarLayer (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxSideAreaCar	lef/clef/xlefiMacro.cpp	/^double lefiPinAntennaModel_antennaMaxSideAreaCar (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxSideAreaCarLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPinAntennaModel_antennaMaxSideAreaCarLayer (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaOxide	lef/clef/xlefiMacro.cpp	/^char* lefiPinAntennaModel_antennaOxide (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasAntennaGateArea	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasAntennaGateArea (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasAntennaMaxAreaCar	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasAntennaMaxAreaCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasAntennaMaxCutCar	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasAntennaMaxCutCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasAntennaMaxSideAreaCar	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasAntennaMaxSideAreaCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasReturn	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasReturn (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_numAntennaGateArea	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_numAntennaGateArea (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_numAntennaMaxAreaCar	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_numAntennaMaxAreaCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_numAntennaMaxCutCar	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_numAntennaMaxCutCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_numAntennaMaxSideAreaCar	lef/clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_numAntennaMaxSideAreaCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPin_LEQ	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_LEQ (const ::lefiPin* obj) {$/;"	f
lefiPin_VHI	lef/clef/xlefiMacro.cpp	/^double lefiPin_VHI (const ::lefiPin* obj) {$/;"	f
lefiPin_VLO	lef/clef/xlefiMacro.cpp	/^double lefiPin_VLO (const ::lefiPin* obj) {$/;"	f
lefiPin_antennaDiffArea	lef/clef/xlefiMacro.cpp	/^double lefiPin_antennaDiffArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaDiffAreaLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_antennaDiffAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaMetalArea	lef/clef/xlefiMacro.cpp	/^double lefiPin_antennaMetalArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaMetalAreaLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_antennaMetalAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaMetalLength	lef/clef/xlefiMacro.cpp	/^double lefiPin_antennaMetalLength (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaMetalLengthLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_antennaMetalLengthLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaModel	lef/clef/xlefiMacro.cpp	/^const ::lefiPinAntennaModel* lefiPin_antennaModel (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialCutArea	lef/clef/xlefiMacro.cpp	/^double lefiPin_antennaPartialCutArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialCutAreaLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_antennaPartialCutAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialMetalArea	lef/clef/xlefiMacro.cpp	/^double lefiPin_antennaPartialMetalArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialMetalAreaLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_antennaPartialMetalAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialMetalSideArea	lef/clef/xlefiMacro.cpp	/^double lefiPin_antennaPartialMetalSideArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialMetalSideAreaLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_antennaPartialMetalSideAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaSize	lef/clef/xlefiMacro.cpp	/^double lefiPin_antennaSize (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaSizeLayer	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_antennaSizeLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_capacitance	lef/clef/xlefiMacro.cpp	/^double lefiPin_capacitance (const ::lefiPin* obj) {$/;"	f
lefiPin_currentSource	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_currentSource (const ::lefiPin* obj) {$/;"	f
lefiPin_direction	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_direction (const ::lefiPin* obj) {$/;"	f
lefiPin_fallSatcur	lef/clef/xlefiMacro.cpp	/^double lefiPin_fallSatcur (const ::lefiPin* obj) {$/;"	f
lefiPin_fallSlewLimit	lef/clef/xlefiMacro.cpp	/^double lefiPin_fallSlewLimit (const ::lefiPin* obj) {$/;"	f
lefiPin_fallThresh	lef/clef/xlefiMacro.cpp	/^double lefiPin_fallThresh (const ::lefiPin* obj) {$/;"	f
lefiPin_fallVoltage	lef/clef/xlefiMacro.cpp	/^double lefiPin_fallVoltage (const ::lefiPin* obj) {$/;"	f
lefiPin_foreignName	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_foreignName (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_foreignOrient	lef/clef/xlefiMacro.cpp	/^int lefiPin_foreignOrient (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_foreignOrientStr	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_foreignOrientStr (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_foreignX	lef/clef/xlefiMacro.cpp	/^double lefiPin_foreignX (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_foreignY	lef/clef/xlefiMacro.cpp	/^double lefiPin_foreignY (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_groundSensitivity	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_groundSensitivity (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaDiffArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaDiffArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaMetalArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaMetalArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaMetalLength	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaMetalLength (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaModel	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaModel (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaPartialCutArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaPartialCutArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaPartialMetalArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaPartialMetalArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaPartialMetalSideArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaPartialMetalSideArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaSize	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaSize (const ::lefiPin* obj) {$/;"	f
lefiPin_hasCapacitance	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasCapacitance (const ::lefiPin* obj) {$/;"	f
lefiPin_hasCurrentSource	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasCurrentSource (const ::lefiPin* obj) {$/;"	f
lefiPin_hasDirection	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasDirection (const ::lefiPin* obj) {$/;"	f
lefiPin_hasFallSatcur	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasFallSatcur (const ::lefiPin* obj) {$/;"	f
lefiPin_hasFallSlewLimit	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasFallSlewLimit (const ::lefiPin* obj) {$/;"	f
lefiPin_hasFallThresh	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasFallThresh (const ::lefiPin* obj) {$/;"	f
lefiPin_hasFallVoltage	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasFallVoltage (const ::lefiPin* obj) {$/;"	f
lefiPin_hasForeign	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasForeign (const ::lefiPin* obj) {$/;"	f
lefiPin_hasForeignOrient	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasForeignOrient (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_hasForeignPoint	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasForeignPoint (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_hasGroundSensitivity	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasGroundSensitivity (const ::lefiPin* obj) {$/;"	f
lefiPin_hasInMargin	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasInMargin (const ::lefiPin* obj) {$/;"	f
lefiPin_hasLEQ	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasLEQ (const ::lefiPin* obj) {$/;"	f
lefiPin_hasLeakage	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasLeakage (const ::lefiPin* obj) {$/;"	f
lefiPin_hasMaxdelay	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasMaxdelay (const ::lefiPin* obj) {$/;"	f
lefiPin_hasMaxload	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasMaxload (const ::lefiPin* obj) {$/;"	f
lefiPin_hasMustjoin	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasMustjoin (const ::lefiPin* obj) {$/;"	f
lefiPin_hasNetExpr	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasNetExpr (const ::lefiPin* obj) {$/;"	f
lefiPin_hasOutMargin	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasOutMargin (const ::lefiPin* obj) {$/;"	f
lefiPin_hasOutResistance	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasOutResistance (const ::lefiPin* obj) {$/;"	f
lefiPin_hasPower	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasPower (const ::lefiPin* obj) {$/;"	f
lefiPin_hasPulldownres	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasPulldownres (const ::lefiPin* obj) {$/;"	f
lefiPin_hasResistance	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasResistance (const ::lefiPin* obj) {$/;"	f
lefiPin_hasRiseSatcur	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasRiseSatcur (const ::lefiPin* obj) {$/;"	f
lefiPin_hasRiseSlewLimit	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasRiseSlewLimit (const ::lefiPin* obj) {$/;"	f
lefiPin_hasRiseThresh	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasRiseThresh (const ::lefiPin* obj) {$/;"	f
lefiPin_hasRiseVoltage	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasRiseVoltage (const ::lefiPin* obj) {$/;"	f
lefiPin_hasShape	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasShape (const ::lefiPin* obj) {$/;"	f
lefiPin_hasSupplySensitivity	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasSupplySensitivity (const ::lefiPin* obj) {$/;"	f
lefiPin_hasTables	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasTables (const ::lefiPin* obj) {$/;"	f
lefiPin_hasTaperRule	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasTaperRule (const ::lefiPin* obj) {$/;"	f
lefiPin_hasTieoffr	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasTieoffr (const ::lefiPin* obj) {$/;"	f
lefiPin_hasUse	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasUse (const ::lefiPin* obj) {$/;"	f
lefiPin_hasVHI	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasVHI (const ::lefiPin* obj) {$/;"	f
lefiPin_hasVLO	lef/clef/xlefiMacro.cpp	/^int lefiPin_hasVLO (const ::lefiPin* obj) {$/;"	f
lefiPin_inMarginHigh	lef/clef/xlefiMacro.cpp	/^double lefiPin_inMarginHigh (const ::lefiPin* obj) {$/;"	f
lefiPin_inMarginLow	lef/clef/xlefiMacro.cpp	/^double lefiPin_inMarginLow (const ::lefiPin* obj) {$/;"	f
lefiPin_leakage	lef/clef/xlefiMacro.cpp	/^double lefiPin_leakage (const ::lefiPin* obj) {$/;"	f
lefiPin_maxdelay	lef/clef/xlefiMacro.cpp	/^double lefiPin_maxdelay (const ::lefiPin* obj) {$/;"	f
lefiPin_maxload	lef/clef/xlefiMacro.cpp	/^double lefiPin_maxload (const ::lefiPin* obj) {$/;"	f
lefiPin_mustjoin	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_mustjoin (const ::lefiPin* obj) {$/;"	f
lefiPin_name	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_name (const ::lefiPin* obj) {$/;"	f
lefiPin_netExpr	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_netExpr (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaDiffArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_numAntennaDiffArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaMetalArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_numAntennaMetalArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaMetalLength	lef/clef/xlefiMacro.cpp	/^int lefiPin_numAntennaMetalLength (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaModel	lef/clef/xlefiMacro.cpp	/^int lefiPin_numAntennaModel (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaPartialCutArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_numAntennaPartialCutArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaPartialMetalArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_numAntennaPartialMetalArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaPartialMetalSideArea	lef/clef/xlefiMacro.cpp	/^int lefiPin_numAntennaPartialMetalSideArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaSize	lef/clef/xlefiMacro.cpp	/^int lefiPin_numAntennaSize (const ::lefiPin* obj) {$/;"	f
lefiPin_numForeigns	lef/clef/xlefiMacro.cpp	/^int lefiPin_numForeigns (const ::lefiPin* obj) {$/;"	f
lefiPin_numPorts	lef/clef/xlefiMacro.cpp	/^int lefiPin_numPorts (const ::lefiPin* obj) {$/;"	f
lefiPin_numProperties	lef/clef/xlefiMacro.cpp	/^int lefiPin_numProperties (const ::lefiPin* obj) {$/;"	f
lefiPin_outMarginHigh	lef/clef/xlefiMacro.cpp	/^double lefiPin_outMarginHigh (const ::lefiPin* obj) {$/;"	f
lefiPin_outMarginLow	lef/clef/xlefiMacro.cpp	/^double lefiPin_outMarginLow (const ::lefiPin* obj) {$/;"	f
lefiPin_outResistanceHigh	lef/clef/xlefiMacro.cpp	/^double lefiPin_outResistanceHigh (const ::lefiPin* obj) {$/;"	f
lefiPin_outResistanceLow	lef/clef/xlefiMacro.cpp	/^double lefiPin_outResistanceLow (const ::lefiPin* obj) {$/;"	f
lefiPin_port	lef/clef/xlefiMacro.cpp	/^const ::lefiGeometries* lefiPin_port (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_power	lef/clef/xlefiMacro.cpp	/^double lefiPin_power (const ::lefiPin* obj) {$/;"	f
lefiPin_print	lef/clef/xlefiMacro.cpp	/^void lefiPin_print (const ::lefiPin* obj, FILE*  f) {$/;"	f
lefiPin_propIsNumber	lef/clef/xlefiMacro.cpp	/^int lefiPin_propIsNumber (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propIsString	lef/clef/xlefiMacro.cpp	/^int lefiPin_propIsString (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propName	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_propName (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propNum	lef/clef/xlefiMacro.cpp	/^double lefiPin_propNum (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propType	lef/clef/xlefiMacro.cpp	/^const char lefiPin_propType (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propValue	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_propValue (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_pulldownres	lef/clef/xlefiMacro.cpp	/^double lefiPin_pulldownres (const ::lefiPin* obj) {$/;"	f
lefiPin_resistance	lef/clef/xlefiMacro.cpp	/^double lefiPin_resistance (const ::lefiPin* obj) {$/;"	f
lefiPin_riseSatcur	lef/clef/xlefiMacro.cpp	/^double lefiPin_riseSatcur (const ::lefiPin* obj) {$/;"	f
lefiPin_riseSlewLimit	lef/clef/xlefiMacro.cpp	/^double lefiPin_riseSlewLimit (const ::lefiPin* obj) {$/;"	f
lefiPin_riseThresh	lef/clef/xlefiMacro.cpp	/^double lefiPin_riseThresh (const ::lefiPin* obj) {$/;"	f
lefiPin_riseVoltage	lef/clef/xlefiMacro.cpp	/^double lefiPin_riseVoltage (const ::lefiPin* obj) {$/;"	f
lefiPin_shape	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_shape (const ::lefiPin* obj) {$/;"	f
lefiPin_supplySensitivity	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_supplySensitivity (const ::lefiPin* obj) {$/;"	f
lefiPin_tableHighName	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_tableHighName (const ::lefiPin* obj) {$/;"	f
lefiPin_tableLowName	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_tableLowName (const ::lefiPin* obj) {$/;"	f
lefiPin_taperRule	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_taperRule (const ::lefiPin* obj) {$/;"	f
lefiPin_tieoffr	lef/clef/xlefiMacro.cpp	/^double lefiPin_tieoffr (const ::lefiPin* obj) {$/;"	f
lefiPin_use	lef/clef/xlefiMacro.cpp	/^const char* lefiPin_use (const ::lefiPin* obj) {$/;"	f
lefiPoints	lef/clef/lefiTypedefs.h	/^struct lefiPoints {$/;"	s
lefiPoints	lef/include/lefiTypedefs.h	/^struct lefiPoints {$/;"	s
lefiPoints	lef/include/lefiUtil.hpp	/^struct lefiPoints {$/;"	s
lefiPoints	lef/lef/lefiUtil.hpp	/^struct lefiPoints {$/;"	s
lefiPrivateSubObjects	lef/include/lefiDefs.hpp	/^  lefiPrivateSubObjects,      \/\/ deep copy + delete$/;"	e	enum:__anon7
lefiPrivateSubObjects	lef/lef/lefiDefs.hpp	/^  lefiPrivateSubObjects,      \/\/ deep copy + delete$/;"	e	enum:__anon2
lefiProp	lef/clef/lefiTypedefs.h	/^typedef void *lefiProp;$/;"	t
lefiProp	lef/include/lefiProp.hpp	/^class lefiProp {$/;"	c
lefiProp	lef/include/lefiTypedefs.h	/^typedef void *lefiProp;$/;"	t
lefiProp	lef/lef/lefiProp.cpp	/^lefiProp::lefiProp()$/;"	f	class:lefiProp
lefiProp	lef/lef/lefiProp.hpp	/^class lefiProp {$/;"	c
lefiPropType	lef/clef/lefiTypedefs.h	/^typedef void *lefiPropType;$/;"	t
lefiPropType	lef/include/lefiPropType.hpp	/^class lefiPropType {$/;"	c
lefiPropType	lef/include/lefiTypedefs.h	/^typedef void *lefiPropType;$/;"	t
lefiPropType	lef/lef/lefiPropType.cpp	/^lefiPropType::lefiPropType()$/;"	f	class:lefiPropType
lefiPropType	lef/lef/lefiPropType.hpp	/^class lefiPropType {$/;"	c
lefiPropType_h	lef/include/lefiPropType.hpp	31;"	d
lefiPropType_h	lef/lef/lefiPropType.hpp	31;"	d
lefiPropType_propType	lef/clef/xlefiPropType.cpp	/^const char lefiPropType_propType (const ::lefiPropType* obj, char*  name) {$/;"	f
lefiProp_dataType	lef/clef/xlefiProp.cpp	/^char lefiProp_dataType (const ::lefiProp* obj) {$/;"	f
lefiProp_h	lef/include/lefiProp.hpp	31;"	d
lefiProp_h	lef/lef/lefiProp.hpp	31;"	d
lefiProp_hasNameMapString	lef/clef/xlefiProp.cpp	/^int lefiProp_hasNameMapString (const ::lefiProp* obj) {$/;"	f
lefiProp_hasNumber	lef/clef/xlefiProp.cpp	/^int lefiProp_hasNumber (const ::lefiProp* obj) {$/;"	f
lefiProp_hasRange	lef/clef/xlefiProp.cpp	/^int lefiProp_hasRange (const ::lefiProp* obj) {$/;"	f
lefiProp_hasString	lef/clef/xlefiProp.cpp	/^int lefiProp_hasString (const ::lefiProp* obj) {$/;"	f
lefiProp_left	lef/clef/xlefiProp.cpp	/^double lefiProp_left (const ::lefiProp* obj) {$/;"	f
lefiProp_number	lef/clef/xlefiProp.cpp	/^double lefiProp_number (const ::lefiProp* obj) {$/;"	f
lefiProp_print	lef/clef/xlefiProp.cpp	/^void lefiProp_print (const ::lefiProp* obj, FILE*  f) {$/;"	f
lefiProp_propName	lef/clef/xlefiProp.cpp	/^const char* lefiProp_propName (const ::lefiProp* obj) {$/;"	f
lefiProp_propType	lef/clef/xlefiProp.cpp	/^const char* lefiProp_propType (const ::lefiProp* obj) {$/;"	f
lefiProp_right	lef/clef/xlefiProp.cpp	/^double lefiProp_right (const ::lefiProp* obj) {$/;"	f
lefiProp_string	lef/clef/xlefiProp.cpp	/^const char* lefiProp_string (const ::lefiProp* obj) {$/;"	f
lefiReferencedSubObjects	lef/include/lefiDefs.hpp	/^  lefiReferencedSubObjects,   \/\/ shallow copy, no delete$/;"	e	enum:__anon7
lefiReferencedSubObjects	lef/lef/lefiDefs.hpp	/^  lefiReferencedSubObjects,   \/\/ shallow copy, no delete$/;"	e	enum:__anon2
lefiSetDebug	lef/clef/xlefiDebug.cpp	/^void lefiSetDebug (int  num, int  value) {$/;"	f
lefiSetDebug	lef/lef/lefiDebug.cpp	/^lefiSetDebug(int    num,$/;"	f
lefiShift	lef/lef/lefiDebug.cpp	/^static char lefiShift [] = {$/;"	v	file:
lefiSite	lef/clef/lefiTypedefs.h	/^typedef void *lefiSite;$/;"	t
lefiSite	lef/include/lefiMisc.hpp	/^class lefiSite {$/;"	c
lefiSite	lef/include/lefiTypedefs.h	/^typedef void *lefiSite;$/;"	t
lefiSite	lef/lef/lefiMisc.cpp	/^lefiSite::lefiSite()$/;"	f	class:lefiSite
lefiSite	lef/lef/lefiMisc.hpp	/^class lefiSite {$/;"	c
lefiSitePattern	lef/clef/lefiTypedefs.h	/^typedef void *lefiSitePattern;$/;"	t
lefiSitePattern	lef/include/lefiMisc.hpp	/^class lefiSitePattern {$/;"	c
lefiSitePattern	lef/include/lefiTypedefs.h	/^typedef void *lefiSitePattern;$/;"	t
lefiSitePattern	lef/lef/lefiMisc.cpp	/^lefiSitePattern::lefiSitePattern()$/;"	f	class:lefiSitePattern
lefiSitePattern	lef/lef/lefiMisc.hpp	/^class lefiSitePattern {$/;"	c
lefiSitePattern_hasStepPattern	lef/clef/xlefiMisc.cpp	/^int lefiSitePattern_hasStepPattern (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_name	lef/clef/xlefiMisc.cpp	/^const char* lefiSitePattern_name (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_orient	lef/clef/xlefiMisc.cpp	/^int lefiSitePattern_orient (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_orientStr	lef/clef/xlefiMisc.cpp	/^const char* lefiSitePattern_orientStr (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_print	lef/clef/xlefiMisc.cpp	/^void lefiSitePattern_print (const ::lefiSitePattern* obj, FILE*  f) {$/;"	f
lefiSitePattern_x	lef/clef/xlefiMisc.cpp	/^double lefiSitePattern_x (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_xStart	lef/clef/xlefiMisc.cpp	/^double lefiSitePattern_xStart (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_xStep	lef/clef/xlefiMisc.cpp	/^double lefiSitePattern_xStep (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_y	lef/clef/xlefiMisc.cpp	/^double lefiSitePattern_y (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_yStart	lef/clef/xlefiMisc.cpp	/^double lefiSitePattern_yStart (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_yStep	lef/clef/xlefiMisc.cpp	/^double lefiSitePattern_yStep (const ::lefiSitePattern* obj) {$/;"	f
lefiSite_has90Symmetry	lef/clef/xlefiMisc.cpp	/^int lefiSite_has90Symmetry (const ::lefiSite* obj) {$/;"	f
lefiSite_hasClass	lef/clef/xlefiMisc.cpp	/^int lefiSite_hasClass (const ::lefiSite* obj) {$/;"	f
lefiSite_hasRowPattern	lef/clef/xlefiMisc.cpp	/^int lefiSite_hasRowPattern (const ::lefiSite* obj) {$/;"	f
lefiSite_hasSize	lef/clef/xlefiMisc.cpp	/^int lefiSite_hasSize (const ::lefiSite* obj) {$/;"	f
lefiSite_hasXSymmetry	lef/clef/xlefiMisc.cpp	/^int lefiSite_hasXSymmetry (const ::lefiSite* obj) {$/;"	f
lefiSite_hasYSymmetry	lef/clef/xlefiMisc.cpp	/^int lefiSite_hasYSymmetry (const ::lefiSite* obj) {$/;"	f
lefiSite_name	lef/clef/xlefiMisc.cpp	/^const char* lefiSite_name (const ::lefiSite* obj) {$/;"	f
lefiSite_numSites	lef/clef/xlefiMisc.cpp	/^int lefiSite_numSites (const ::lefiSite* obj) {$/;"	f
lefiSite_print	lef/clef/xlefiMisc.cpp	/^void lefiSite_print (const ::lefiSite* obj, FILE*  f) {$/;"	f
lefiSite_siteClass	lef/clef/xlefiMisc.cpp	/^const char* lefiSite_siteClass (const ::lefiSite* obj) {$/;"	f
lefiSite_siteName	lef/clef/xlefiMisc.cpp	/^char* lefiSite_siteName (const ::lefiSite* obj, int  index) {$/;"	f
lefiSite_siteOrient	lef/clef/xlefiMisc.cpp	/^int lefiSite_siteOrient (const ::lefiSite* obj, int  index) {$/;"	f
lefiSite_siteOrientStr	lef/clef/xlefiMisc.cpp	/^char* lefiSite_siteOrientStr (const ::lefiSite* obj, int  index) {$/;"	f
lefiSite_sizeX	lef/clef/xlefiMisc.cpp	/^double lefiSite_sizeX (const ::lefiSite* obj) {$/;"	f
lefiSite_sizeY	lef/clef/xlefiMisc.cpp	/^double lefiSite_sizeY (const ::lefiSite* obj) {$/;"	f
lefiSpacing	lef/clef/lefiTypedefs.h	/^typedef void *lefiSpacing;$/;"	t
lefiSpacing	lef/include/lefiMisc.hpp	/^class lefiSpacing {$/;"	c
lefiSpacing	lef/include/lefiTypedefs.h	/^typedef void *lefiSpacing;$/;"	t
lefiSpacing	lef/lef/lefiMisc.cpp	/^lefiSpacing::lefiSpacing()$/;"	f	class:lefiSpacing
lefiSpacing	lef/lef/lefiMisc.hpp	/^class lefiSpacing {$/;"	c
lefiSpacingTable	lef/clef/lefiTypedefs.h	/^typedef void *lefiSpacingTable;$/;"	t
lefiSpacingTable	lef/include/lefiLayer.hpp	/^class lefiSpacingTable {$/;"	c
lefiSpacingTable	lef/include/lefiTypedefs.h	/^typedef void *lefiSpacingTable;$/;"	t
lefiSpacingTable	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::lefiSpacingTable()$/;"	f	class:lefiSpacingTable
lefiSpacingTable	lef/lef/lefiLayer.hpp	/^class lefiSpacingTable {$/;"	c
lefiSpacingTable_influence	lef/clef/xlefiLayer.cpp	/^const ::lefiInfluence* lefiSpacingTable_influence (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacingTable_isInfluence	lef/clef/xlefiLayer.cpp	/^int lefiSpacingTable_isInfluence (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacingTable_isParallel	lef/clef/xlefiLayer.cpp	/^int lefiSpacingTable_isParallel (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacingTable_parallel	lef/clef/xlefiLayer.cpp	/^const ::lefiParallel* lefiSpacingTable_parallel (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacingTable_twoWidths	lef/clef/xlefiLayer.cpp	/^const ::lefiTwoWidths* lefiSpacingTable_twoWidths (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacing_distance	lef/clef/xlefiMisc.cpp	/^double lefiSpacing_distance (const ::lefiSpacing* obj) {$/;"	f
lefiSpacing_hasStack	lef/clef/xlefiMisc.cpp	/^int lefiSpacing_hasStack (const ::lefiSpacing* obj) {$/;"	f
lefiSpacing_name1	lef/clef/xlefiMisc.cpp	/^const char* lefiSpacing_name1 (const ::lefiSpacing* obj) {$/;"	f
lefiSpacing_name2	lef/clef/xlefiMisc.cpp	/^const char* lefiSpacing_name2 (const ::lefiSpacing* obj) {$/;"	f
lefiSpacing_print	lef/clef/xlefiMisc.cpp	/^void lefiSpacing_print (const ::lefiSpacing* obj, FILE*  f) {$/;"	f
lefiTiming	lef/clef/lefiTypedefs.h	/^typedef void *lefiTiming;$/;"	t
lefiTiming	lef/include/lefiMacro.hpp	/^class lefiTiming {$/;"	c
lefiTiming	lef/include/lefiTypedefs.h	/^typedef void *lefiTiming;$/;"	t
lefiTiming	lef/lef/lefiMacro.cpp	/^lefiTiming::lefiTiming()$/;"	f	class:lefiTiming
lefiTiming	lef/lef/lefiMacro.hpp	/^class lefiTiming {$/;"	c
lefiTrackPattern	lef/clef/lefiTypedefs.h	/^typedef void *lefiTrackPattern;$/;"	t
lefiTrackPattern	lef/include/lefiMisc.hpp	/^class lefiTrackPattern {$/;"	c
lefiTrackPattern	lef/include/lefiTypedefs.h	/^typedef void *lefiTrackPattern;$/;"	t
lefiTrackPattern	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::lefiTrackPattern()$/;"	f	class:lefiTrackPattern
lefiTrackPattern	lef/lef/lefiMisc.hpp	/^class lefiTrackPattern {$/;"	c
lefiTrackPattern_layerName	lef/clef/xlefiMisc.cpp	/^const char* lefiTrackPattern_layerName (const ::lefiTrackPattern* obj, int  index) {$/;"	f
lefiTrackPattern_name	lef/clef/xlefiMisc.cpp	/^const char* lefiTrackPattern_name (const ::lefiTrackPattern* obj) {$/;"	f
lefiTrackPattern_numLayers	lef/clef/xlefiMisc.cpp	/^int lefiTrackPattern_numLayers (const ::lefiTrackPattern* obj) {$/;"	f
lefiTrackPattern_numTracks	lef/clef/xlefiMisc.cpp	/^int lefiTrackPattern_numTracks (const ::lefiTrackPattern* obj) {$/;"	f
lefiTrackPattern_print	lef/clef/xlefiMisc.cpp	/^void lefiTrackPattern_print (const ::lefiTrackPattern* obj, FILE*  f) {$/;"	f
lefiTrackPattern_space	lef/clef/xlefiMisc.cpp	/^double lefiTrackPattern_space (const ::lefiTrackPattern* obj) {$/;"	f
lefiTrackPattern_start	lef/clef/xlefiMisc.cpp	/^double lefiTrackPattern_start (const ::lefiTrackPattern* obj) {$/;"	f
lefiTwoWidths	lef/clef/lefiTypedefs.h	/^typedef void *lefiTwoWidths;$/;"	t
lefiTwoWidths	lef/include/lefiLayer.hpp	/^class lefiTwoWidths {$/;"	c
lefiTwoWidths	lef/include/lefiTypedefs.h	/^typedef void *lefiTwoWidths;$/;"	t
lefiTwoWidths	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::lefiTwoWidths()$/;"	f	class:lefiTwoWidths
lefiTwoWidths	lef/lef/lefiLayer.hpp	/^class lefiTwoWidths {$/;"	c
lefiTwoWidths_hasWidthPRL	lef/clef/xlefiLayer.cpp	/^int lefiTwoWidths_hasWidthPRL (const ::lefiTwoWidths* obj, int  iWidth) {$/;"	f
lefiTwoWidths_numWidth	lef/clef/xlefiLayer.cpp	/^int lefiTwoWidths_numWidth (const ::lefiTwoWidths* obj) {$/;"	f
lefiTwoWidths_numWidthSpacing	lef/clef/xlefiLayer.cpp	/^int lefiTwoWidths_numWidthSpacing (const ::lefiTwoWidths* obj, int  iWidth) {$/;"	f
lefiTwoWidths_width	lef/clef/xlefiLayer.cpp	/^double lefiTwoWidths_width (const ::lefiTwoWidths* obj, int  iWidth) {$/;"	f
lefiTwoWidths_widthPRL	lef/clef/xlefiLayer.cpp	/^double lefiTwoWidths_widthPRL (const ::lefiTwoWidths* obj, int  iWidth) {$/;"	f
lefiTwoWidths_widthSpacing	lef/clef/xlefiLayer.cpp	/^double lefiTwoWidths_widthSpacing (const ::lefiTwoWidths* obj, int  iWidth, int  iWidthSpacing) {$/;"	f
lefiUnits	lef/clef/lefiTypedefs.h	/^typedef void *lefiUnits;$/;"	t
lefiUnits	lef/include/lefiTypedefs.h	/^typedef void *lefiUnits;$/;"	t
lefiUnits	lef/include/lefiUnits.hpp	/^class lefiUnits {$/;"	c
lefiUnits	lef/lef/lefiUnits.cpp	/^lefiUnits::lefiUnits()$/;"	f	class:lefiUnits
lefiUnits	lef/lef/lefiUnits.hpp	/^class lefiUnits {$/;"	c
lefiUnits_capacitance	lef/clef/xlefiUnits.cpp	/^double lefiUnits_capacitance (const ::lefiUnits* obj) {$/;"	f
lefiUnits_current	lef/clef/xlefiUnits.cpp	/^double lefiUnits_current (const ::lefiUnits* obj) {$/;"	f
lefiUnits_databaseName	lef/clef/xlefiUnits.cpp	/^const char* lefiUnits_databaseName (const ::lefiUnits* obj) {$/;"	f
lefiUnits_databaseNumber	lef/clef/xlefiUnits.cpp	/^double lefiUnits_databaseNumber (const ::lefiUnits* obj) {$/;"	f
lefiUnits_frequency	lef/clef/xlefiUnits.cpp	/^double lefiUnits_frequency (const ::lefiUnits* obj) {$/;"	f
lefiUnits_h	lef/include/lefiUnits.hpp	31;"	d
lefiUnits_h	lef/lef/lefiUnits.hpp	31;"	d
lefiUnits_hasCapacitance	lef/clef/xlefiUnits.cpp	/^int lefiUnits_hasCapacitance (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasCurrent	lef/clef/xlefiUnits.cpp	/^int lefiUnits_hasCurrent (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasDatabase	lef/clef/xlefiUnits.cpp	/^int lefiUnits_hasDatabase (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasFrequency	lef/clef/xlefiUnits.cpp	/^int lefiUnits_hasFrequency (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasPower	lef/clef/xlefiUnits.cpp	/^int lefiUnits_hasPower (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasResistance	lef/clef/xlefiUnits.cpp	/^int lefiUnits_hasResistance (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasTime	lef/clef/xlefiUnits.cpp	/^int lefiUnits_hasTime (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasVoltage	lef/clef/xlefiUnits.cpp	/^int lefiUnits_hasVoltage (const ::lefiUnits* obj) {$/;"	f
lefiUnits_power	lef/clef/xlefiUnits.cpp	/^double lefiUnits_power (const ::lefiUnits* obj) {$/;"	f
lefiUnits_print	lef/clef/xlefiUnits.cpp	/^void lefiUnits_print (const ::lefiUnits* obj, FILE*  f) {$/;"	f
lefiUnits_resistance	lef/clef/xlefiUnits.cpp	/^double lefiUnits_resistance (const ::lefiUnits* obj) {$/;"	f
lefiUnits_time	lef/clef/xlefiUnits.cpp	/^double lefiUnits_time (const ::lefiUnits* obj) {$/;"	f
lefiUnits_voltage	lef/clef/xlefiUnits.cpp	/^double lefiUnits_voltage (const ::lefiUnits* obj) {$/;"	f
lefiUnknownObject	lef/include/lefiDefs.hpp	/^  lefiUnknownObject \/\/ void * $/;"	e	enum:__anon6
lefiUnknownObject	lef/lef/lefiDefs.hpp	/^  lefiUnknownObject \/\/ void * $/;"	e	enum:__anon1
lefiUseMinSpacing	lef/clef/lefiTypedefs.h	/^typedef void *lefiUseMinSpacing;$/;"	t
lefiUseMinSpacing	lef/include/lefiMisc.hpp	/^class lefiUseMinSpacing {$/;"	c
lefiUseMinSpacing	lef/include/lefiTypedefs.h	/^typedef void *lefiUseMinSpacing;$/;"	t
lefiUseMinSpacing	lef/lef/lefiMisc.cpp	/^lefiUseMinSpacing::lefiUseMinSpacing()$/;"	f	class:lefiUseMinSpacing
lefiUseMinSpacing	lef/lef/lefiMisc.hpp	/^class lefiUseMinSpacing {$/;"	c
lefiUseMinSpacing_name	lef/clef/xlefiMisc.cpp	/^const char* lefiUseMinSpacing_name (const ::lefiUseMinSpacing* obj) {$/;"	f
lefiUseMinSpacing_print	lef/clef/xlefiMisc.cpp	/^void lefiUseMinSpacing_print (const ::lefiUseMinSpacing* obj, FILE*  f) {$/;"	f
lefiUseMinSpacing_value	lef/clef/xlefiMisc.cpp	/^int lefiUseMinSpacing_value (const ::lefiUseMinSpacing* obj) {$/;"	f
lefiUser	lef/clef/lefiTBInt.c	/^lefiUser()$/;"	f
lefiUser	lef/clef/xlefiUtil.cpp	/^char* lefiUser () {$/;"	f
lefiUser	lef/lef/lefiTBExt.cpp	/^lefiUser()$/;"	f
lefiUserData	lef/clef/lefiTypedefs.h	42;"	d
lefiUserData	lef/include/lefiDefs.hpp	169;"	d
lefiUserData	lef/include/lefiTypedefs.h	42;"	d
lefiUserData	lef/lef/lefiDefs.hpp	169;"	d
lefiUserDataHandle	lef/clef/lefiTypedefs.h	43;"	d
lefiUserDataHandle	lef/include/lefiDefs.hpp	170;"	d
lefiUserDataHandle	lef/include/lefiTypedefs.h	43;"	d
lefiUserDataHandle	lef/lef/lefiDefs.hpp	170;"	d
lefiUtil_h	lef/include/lefiUtil.hpp	31;"	d
lefiUtil_h	lef/lef/lefiUtil.hpp	31;"	d
lefiValidTime	lef/clef/lefiTBInt.c	/^lefiValidTime()$/;"	f
lefiValidTime	lef/lef/lefiTBExt.cpp	/^lefiValidTime()$/;"	f
lefiValidUser	lef/clef/lefiTBInt.c	/^lefiValidUser()$/;"	f
lefiValidUser	lef/clef/xlefiUtil.cpp	/^int lefiValidUser () {$/;"	f
lefiValidUser	lef/lef/lefiTBExt.cpp	/^lefiValidUser()$/;"	f
lefiVia	lef/clef/lefiTypedefs.h	/^typedef void *lefiVia;$/;"	t
lefiVia	lef/include/lefiTypedefs.h	/^typedef void *lefiVia;$/;"	t
lefiVia	lef/include/lefiVia.hpp	/^class lefiVia {$/;"	c
lefiVia	lef/lef/lefiVia.cpp	/^lefiVia::lefiVia()$/;"	f	class:lefiVia
lefiVia	lef/lef/lefiVia.hpp	/^class lefiVia {$/;"	c
lefiViaLayer	lef/clef/lefiTypedefs.h	/^typedef void *lefiViaLayer;$/;"	t
lefiViaLayer	lef/include/lefiTypedefs.h	/^typedef void *lefiViaLayer;$/;"	t
lefiViaLayer	lef/include/lefiVia.hpp	/^class lefiViaLayer {$/;"	c
lefiViaLayer	lef/lef/lefiVia.cpp	/^lefiViaLayer::lefiViaLayer()$/;"	f	class:lefiViaLayer
lefiViaLayer	lef/lef/lefiVia.hpp	/^class lefiViaLayer {$/;"	c
lefiViaLayer_getPolygon	lef/clef/xlefiVia.cpp	/^struct ::lefiGeomPolygon* lefiViaLayer_getPolygon (const ::lefiViaLayer* obj, int  index) {$/;"	f
lefiViaRule	lef/clef/lefiTypedefs.h	/^typedef void *lefiViaRule;$/;"	t
lefiViaRule	lef/include/lefiTypedefs.h	/^typedef void *lefiViaRule;$/;"	t
lefiViaRule	lef/include/lefiViaRule.hpp	/^class lefiViaRule {$/;"	c
lefiViaRule	lef/lef/lefiViaRule.cpp	/^lefiViaRule::lefiViaRule()$/;"	f	class:lefiViaRule
lefiViaRule	lef/lef/lefiViaRule.hpp	/^class lefiViaRule {$/;"	c
lefiViaRuleLayer	lef/clef/lefiTypedefs.h	/^typedef void *lefiViaRuleLayer;$/;"	t
lefiViaRuleLayer	lef/include/lefiTypedefs.h	/^typedef void *lefiViaRuleLayer;$/;"	t
lefiViaRuleLayer	lef/include/lefiViaRule.hpp	/^class lefiViaRuleLayer {$/;"	c
lefiViaRuleLayer	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::lefiViaRuleLayer()$/;"	f	class:lefiViaRuleLayer
lefiViaRuleLayer	lef/lef/lefiViaRule.hpp	/^class lefiViaRuleLayer {$/;"	c
lefiViaRuleLayer_enclosureOverhang1	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_enclosureOverhang1 (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_enclosureOverhang2	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_enclosureOverhang2 (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasDirection	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasDirection (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasEnclosure	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasEnclosure (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasMetalOverhang	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasMetalOverhang (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasOverhang	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasOverhang (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasRect	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasRect (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasResistance	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasResistance (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasSpacing	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasSpacing (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasWidth	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasWidth (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_isHorizontal	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_isHorizontal (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_isVertical	lef/clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_isVertical (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_metalOverhang	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_metalOverhang (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_name	lef/clef/xlefiViaRule.cpp	/^char* lefiViaRuleLayer_name (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_overhang	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_overhang (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_print	lef/clef/xlefiViaRule.cpp	/^void lefiViaRuleLayer_print (const ::lefiViaRuleLayer* obj, FILE*  f) {$/;"	f
lefiViaRuleLayer_resistance	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_resistance (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_spacingStepX	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_spacingStepX (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_spacingStepY	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_spacingStepY (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_widthMax	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_widthMax (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_widthMin	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_widthMin (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_xh	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_xh (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_xl	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_xl (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_yh	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_yh (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_yl	lef/clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_yl (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRule_h	lef/include/lefiViaRule.hpp	31;"	d
lefiViaRule_h	lef/lef/lefiViaRule.hpp	31;"	d
lefiViaRule_hasDefault	lef/clef/xlefiViaRule.cpp	/^int lefiViaRule_hasDefault (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_hasGenerate	lef/clef/xlefiViaRule.cpp	/^int lefiViaRule_hasGenerate (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_layer	lef/clef/xlefiViaRule.cpp	/^const ::lefiViaRuleLayer* lefiViaRule_layer (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_name	lef/clef/xlefiViaRule.cpp	/^char* lefiViaRule_name (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_numLayers	lef/clef/xlefiViaRule.cpp	/^int lefiViaRule_numLayers (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_numProps	lef/clef/xlefiViaRule.cpp	/^int lefiViaRule_numProps (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_numVias	lef/clef/xlefiViaRule.cpp	/^int lefiViaRule_numVias (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_print	lef/clef/xlefiViaRule.cpp	/^void lefiViaRule_print (const ::lefiViaRule* obj, FILE*  f) {$/;"	f
lefiViaRule_propIsNumber	lef/clef/xlefiViaRule.cpp	/^int lefiViaRule_propIsNumber (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propIsString	lef/clef/xlefiViaRule.cpp	/^int lefiViaRule_propIsString (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propName	lef/clef/xlefiViaRule.cpp	/^const char* lefiViaRule_propName (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propNumber	lef/clef/xlefiViaRule.cpp	/^double lefiViaRule_propNumber (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propType	lef/clef/xlefiViaRule.cpp	/^const char lefiViaRule_propType (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propValue	lef/clef/xlefiViaRule.cpp	/^const char* lefiViaRule_propValue (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_viaName	lef/clef/xlefiViaRule.cpp	/^char* lefiViaRule_viaName (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiVia_botMetalLayer	lef/clef/xlefiVia.cpp	/^const char* lefiVia_botMetalLayer (const ::lefiVia* obj) {$/;"	f
lefiVia_cutLayer	lef/clef/xlefiVia.cpp	/^const char* lefiVia_cutLayer (const ::lefiVia* obj) {$/;"	f
lefiVia_cutPattern	lef/clef/xlefiVia.cpp	/^const char* lefiVia_cutPattern (const ::lefiVia* obj) {$/;"	f
lefiVia_foreign	lef/clef/xlefiVia.cpp	/^char* lefiVia_foreign (const ::lefiVia* obj) {$/;"	f
lefiVia_foreignOrient	lef/clef/xlefiVia.cpp	/^int lefiVia_foreignOrient (const ::lefiVia* obj) {$/;"	f
lefiVia_foreignOrientStr	lef/clef/xlefiVia.cpp	/^char* lefiVia_foreignOrientStr (const ::lefiVia* obj) {$/;"	f
lefiVia_foreignX	lef/clef/xlefiVia.cpp	/^double lefiVia_foreignX (const ::lefiVia* obj) {$/;"	f
lefiVia_foreignY	lef/clef/xlefiVia.cpp	/^double lefiVia_foreignY (const ::lefiVia* obj) {$/;"	f
lefiVia_getPolygon	lef/clef/xlefiVia.cpp	/^::lefiGeomPolygon lefiVia_getPolygon (const ::lefiVia* obj, int  layerNum, int  polyNum) {$/;"	f
lefiVia_h	lef/include/lefiVia.hpp	31;"	d
lefiVia_h	lef/lef/lefiVia.hpp	31;"	d
lefiVia_hasCutPattern	lef/clef/xlefiVia.cpp	/^int lefiVia_hasCutPattern (const ::lefiVia* obj) {$/;"	f
lefiVia_hasDefault	lef/clef/xlefiVia.cpp	/^int lefiVia_hasDefault (const ::lefiVia* obj) {$/;"	f
lefiVia_hasForeign	lef/clef/xlefiVia.cpp	/^int lefiVia_hasForeign (const ::lefiVia* obj) {$/;"	f
lefiVia_hasForeignOrient	lef/clef/xlefiVia.cpp	/^int lefiVia_hasForeignOrient (const ::lefiVia* obj) {$/;"	f
lefiVia_hasForeignPnt	lef/clef/xlefiVia.cpp	/^int lefiVia_hasForeignPnt (const ::lefiVia* obj) {$/;"	f
lefiVia_hasGenerated	lef/clef/xlefiVia.cpp	/^int lefiVia_hasGenerated (const ::lefiVia* obj) {$/;"	f
lefiVia_hasOffset	lef/clef/xlefiVia.cpp	/^int lefiVia_hasOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_hasOrigin	lef/clef/xlefiVia.cpp	/^int lefiVia_hasOrigin (const ::lefiVia* obj) {$/;"	f
lefiVia_hasProperties	lef/clef/xlefiVia.cpp	/^int lefiVia_hasProperties (const ::lefiVia* obj) {$/;"	f
lefiVia_hasResistance	lef/clef/xlefiVia.cpp	/^int lefiVia_hasResistance (const ::lefiVia* obj) {$/;"	f
lefiVia_hasRowCol	lef/clef/xlefiVia.cpp	/^int lefiVia_hasRowCol (const ::lefiVia* obj) {$/;"	f
lefiVia_hasTopOfStack	lef/clef/xlefiVia.cpp	/^int lefiVia_hasTopOfStack (const ::lefiVia* obj) {$/;"	f
lefiVia_hasViaRule	lef/clef/xlefiVia.cpp	/^int lefiVia_hasViaRule (const ::lefiVia* obj) {$/;"	f
lefiVia_layerName	lef/clef/xlefiVia.cpp	/^char* lefiVia_layerName (const ::lefiVia* obj, int  layerNum) {$/;"	f
lefiVia_name	lef/clef/xlefiVia.cpp	/^char* lefiVia_name (const ::lefiVia* obj) {$/;"	f
lefiVia_numCutCols	lef/clef/xlefiVia.cpp	/^int lefiVia_numCutCols (const ::lefiVia* obj) {$/;"	f
lefiVia_numCutRows	lef/clef/xlefiVia.cpp	/^int lefiVia_numCutRows (const ::lefiVia* obj) {$/;"	f
lefiVia_numLayers	lef/clef/xlefiVia.cpp	/^int lefiVia_numLayers (const ::lefiVia* obj) {$/;"	f
lefiVia_numPolygons	lef/clef/xlefiVia.cpp	/^int lefiVia_numPolygons (const ::lefiVia* obj, int  layerNum) {$/;"	f
lefiVia_numProperties	lef/clef/xlefiVia.cpp	/^int lefiVia_numProperties (const ::lefiVia* obj) {$/;"	f
lefiVia_numRects	lef/clef/xlefiVia.cpp	/^int lefiVia_numRects (const ::lefiVia* obj, int  layerNum) {$/;"	f
lefiVia_polyColorMask	lef/clef/xlefiVia.cpp	/^int lefiVia_polyColorMask (const ::lefiVia* obj, int  layerNum, int  polyNum) {$/;"	f
lefiVia_print	lef/clef/xlefiVia.cpp	/^void lefiVia_print (const ::lefiVia* obj, FILE*  f) {$/;"	f
lefiVia_propIsNumber	lef/clef/xlefiVia.cpp	/^int lefiVia_propIsNumber (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propIsString	lef/clef/xlefiVia.cpp	/^int lefiVia_propIsString (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propName	lef/clef/xlefiVia.cpp	/^char* lefiVia_propName (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propNumber	lef/clef/xlefiVia.cpp	/^double lefiVia_propNumber (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propType	lef/clef/xlefiVia.cpp	/^char lefiVia_propType (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propValue	lef/clef/xlefiVia.cpp	/^char* lefiVia_propValue (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_rectColorMask	lef/clef/xlefiVia.cpp	/^int lefiVia_rectColorMask (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
lefiVia_resistance	lef/clef/xlefiVia.cpp	/^double lefiVia_resistance (const ::lefiVia* obj) {$/;"	f
lefiVia_topMetalLayer	lef/clef/xlefiVia.cpp	/^const char* lefiVia_topMetalLayer (const ::lefiVia* obj) {$/;"	f
lefiVia_viaRuleName	lef/clef/xlefiVia.cpp	/^const char* lefiVia_viaRuleName (const ::lefiVia* obj) {$/;"	f
lefiVia_xBotEnc	lef/clef/xlefiVia.cpp	/^double lefiVia_xBotEnc (const ::lefiVia* obj) {$/;"	f
lefiVia_xBotOffset	lef/clef/xlefiVia.cpp	/^double lefiVia_xBotOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_xCutSize	lef/clef/xlefiVia.cpp	/^double lefiVia_xCutSize (const ::lefiVia* obj) {$/;"	f
lefiVia_xCutSpacing	lef/clef/xlefiVia.cpp	/^double lefiVia_xCutSpacing (const ::lefiVia* obj) {$/;"	f
lefiVia_xOffset	lef/clef/xlefiVia.cpp	/^double lefiVia_xOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_xTopEnc	lef/clef/xlefiVia.cpp	/^double lefiVia_xTopEnc (const ::lefiVia* obj) {$/;"	f
lefiVia_xTopOffset	lef/clef/xlefiVia.cpp	/^double lefiVia_xTopOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_xh	lef/clef/xlefiVia.cpp	/^double lefiVia_xh (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
lefiVia_xl	lef/clef/xlefiVia.cpp	/^double lefiVia_xl (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
lefiVia_yBotEnc	lef/clef/xlefiVia.cpp	/^double lefiVia_yBotEnc (const ::lefiVia* obj) {$/;"	f
lefiVia_yBotOffset	lef/clef/xlefiVia.cpp	/^double lefiVia_yBotOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_yCutSize	lef/clef/xlefiVia.cpp	/^double lefiVia_yCutSize (const ::lefiVia* obj) {$/;"	f
lefiVia_yCutSpacing	lef/clef/xlefiVia.cpp	/^double lefiVia_yCutSpacing (const ::lefiVia* obj) {$/;"	f
lefiVia_yOffset	lef/clef/xlefiVia.cpp	/^double lefiVia_yOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_yTopEnc	lef/clef/xlefiVia.cpp	/^double lefiVia_yTopEnc (const ::lefiVia* obj) {$/;"	f
lefiVia_yTopOffset	lef/clef/xlefiVia.cpp	/^double lefiVia_yTopOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_yh	lef/clef/xlefiVia.cpp	/^double lefiVia_yh (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
lefiVia_yl	lef/clef/xlefiVia.cpp	/^double lefiVia_yl (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
leflVal	lef/include/lefrData.hpp	/^    double  leflVal; $/;"	m	class:lefrData
leflVal	lef/lef/lefrData.hpp	/^    double  leflVal; $/;"	m	class:lefrData
lefrAntennaInoutCbkType	lef/clef/lefrReader.h	/^  lefrAntennaInoutCbkType = 41,$/;"	e	enum:__anon11
lefrAntennaInoutCbkType	lef/include/lefrReader.h	/^  lefrAntennaInoutCbkType = 41,$/;"	e	enum:__anon5
lefrAntennaInoutCbkType	lef/include/lefrReader.hpp	/^  lefrAntennaInoutCbkType,$/;"	e	enum:__anon9
lefrAntennaInoutCbkType	lef/lef/lefrReader.hpp	/^  lefrAntennaInoutCbkType,$/;"	e	enum:__anon3
lefrAntennaInputCbkType	lef/clef/lefrReader.h	/^  lefrAntennaInputCbkType = 40,$/;"	e	enum:__anon11
lefrAntennaInputCbkType	lef/include/lefrReader.h	/^  lefrAntennaInputCbkType = 40,$/;"	e	enum:__anon5
lefrAntennaInputCbkType	lef/include/lefrReader.hpp	/^  lefrAntennaInputCbkType,$/;"	e	enum:__anon9
lefrAntennaInputCbkType	lef/lef/lefrReader.hpp	/^  lefrAntennaInputCbkType,$/;"	e	enum:__anon3
lefrAntennaOutputCbkType	lef/clef/lefrReader.h	/^  lefrAntennaOutputCbkType = 42,$/;"	e	enum:__anon11
lefrAntennaOutputCbkType	lef/include/lefrReader.h	/^  lefrAntennaOutputCbkType = 42,$/;"	e	enum:__anon5
lefrAntennaOutputCbkType	lef/include/lefrReader.hpp	/^  lefrAntennaOutputCbkType,$/;"	e	enum:__anon9
lefrAntennaOutputCbkType	lef/lef/lefrReader.hpp	/^  lefrAntennaOutputCbkType,$/;"	e	enum:__anon3
lefrAntennaPWLPtr	lef/include/lefrData.hpp	/^    lefiAntennaPWL*  lefrAntennaPWLPtr; $/;"	m	class:lefrData
lefrAntennaPWLPtr	lef/lef/lefrData.hpp	/^    lefiAntennaPWL*  lefrAntennaPWLPtr; $/;"	m	class:lefrData
lefrArray	lef/include/lefrData.hpp	/^    lefiArray  lefrArray; $/;"	m	class:lefrData
lefrArray	lef/lef/lefrData.hpp	/^    lefiArray  lefrArray; $/;"	m	class:lefrData
lefrArrayBeginCbkType	lef/clef/lefrReader.h	/^  lefrArrayBeginCbkType = 27,$/;"	e	enum:__anon11
lefrArrayBeginCbkType	lef/include/lefrReader.h	/^  lefrArrayBeginCbkType = 27,$/;"	e	enum:__anon5
lefrArrayBeginCbkType	lef/include/lefrReader.hpp	/^  lefrArrayBeginCbkType,$/;"	e	enum:__anon9
lefrArrayBeginCbkType	lef/lef/lefrReader.hpp	/^  lefrArrayBeginCbkType,$/;"	e	enum:__anon3
lefrArrayCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrArrayCbkFnType) (lefrCallbackType_e, lefiArray* l, lefiUserData);$/;"	t
lefrArrayCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrArrayCbkFnType) (lefrCallbackType_e, lefiArray* l, lefiUserData);$/;"	t
lefrArrayCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrArrayCbkFnType) (lefrCallbackType_e, $/;"	t
lefrArrayCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrArrayCbkFnType) (lefrCallbackType_e, $/;"	t
lefrArrayCbkType	lef/clef/lefrReader.h	/^  lefrArrayCbkType = 24,$/;"	e	enum:__anon11
lefrArrayCbkType	lef/include/lefrReader.h	/^  lefrArrayCbkType = 24,$/;"	e	enum:__anon5
lefrArrayCbkType	lef/include/lefrReader.hpp	/^  lefrArrayCbkType,$/;"	e	enum:__anon9
lefrArrayCbkType	lef/lef/lefrReader.hpp	/^  lefrArrayCbkType,$/;"	e	enum:__anon3
lefrArrayEndCbkType	lef/clef/lefrReader.h	/^  lefrArrayEndCbkType = 28,$/;"	e	enum:__anon11
lefrArrayEndCbkType	lef/include/lefrReader.h	/^  lefrArrayEndCbkType = 28,$/;"	e	enum:__anon5
lefrArrayEndCbkType	lef/include/lefrReader.hpp	/^  lefrArrayEndCbkType,$/;"	e	enum:__anon9
lefrArrayEndCbkType	lef/lef/lefrReader.hpp	/^  lefrArrayEndCbkType,$/;"	e	enum:__anon3
lefrBusBitCharsCbkType	lef/clef/lefrReader.h	/^  lefrBusBitCharsCbkType = 4,$/;"	e	enum:__anon11
lefrBusBitCharsCbkType	lef/include/lefrReader.h	/^  lefrBusBitCharsCbkType = 4,$/;"	e	enum:__anon5
lefrBusBitCharsCbkType	lef/include/lefrReader.hpp	/^  lefrBusBitCharsCbkType,$/;"	e	enum:__anon9
lefrBusBitCharsCbkType	lef/lef/lefrReader.hpp	/^  lefrBusBitCharsCbkType,$/;"	e	enum:__anon3
lefrCallbackType_e	lef/clef/lefrReader.h	/^} lefrCallbackType_e;$/;"	t	typeref:enum:__anon11
lefrCallbackType_e	lef/include/lefrReader.h	/^} lefrCallbackType_e;$/;"	t	typeref:enum:__anon5
lefrCallbackType_e	lef/include/lefrReader.hpp	/^} lefrCallbackType_e;$/;"	t	typeref:enum:__anon9
lefrCallbackType_e	lef/lef/lefrReader.hpp	/^} lefrCallbackType_e;$/;"	t	typeref:enum:__anon3
lefrCallbacks	lef/include/lefrCallBacks.hpp	/^class lefrCallbacks {$/;"	c
lefrCallbacks	lef/lef/lefrCallBacks.hpp	/^class lefrCallbacks {$/;"	c
lefrCallbacks	lef/lef/lefrCallbacks.cpp	/^lefrCallbacks::lefrCallbacks()$/;"	f	class:lefrCallbacks
lefrCallbacks_h	lef/include/lefrCallBacks.hpp	31;"	d
lefrCallbacks_h	lef/lef/lefrCallBacks.hpp	31;"	d
lefrCaseSensitiveCbkType	lef/clef/lefrReader.h	/^  lefrCaseSensitiveCbkType = 6,$/;"	e	enum:__anon11
lefrCaseSensitiveCbkType	lef/include/lefrReader.h	/^  lefrCaseSensitiveCbkType = 6,$/;"	e	enum:__anon5
lefrCaseSensitiveCbkType	lef/include/lefrReader.hpp	/^  lefrCaseSensitiveCbkType,$/;"	e	enum:__anon9
lefrCaseSensitiveCbkType	lef/lef/lefrReader.hpp	/^  lefrCaseSensitiveCbkType,$/;"	e	enum:__anon3
lefrClear	lef/clef/xlefrReader.cpp	/^int lefrClear () {$/;"	f
lefrClear	lef/lef/lefrReader.cpp	/^lefrClear()$/;"	f
lefrClearanceMeasureCbkType	lef/clef/lefrReader.h	/^  lefrClearanceMeasureCbkType = 45,$/;"	e	enum:__anon11
lefrClearanceMeasureCbkType	lef/include/lefrReader.h	/^  lefrClearanceMeasureCbkType = 45,$/;"	e	enum:__anon5
lefrClearanceMeasureCbkType	lef/include/lefrReader.hpp	/^  lefrClearanceMeasureCbkType,$/;"	e	enum:__anon9
lefrClearanceMeasureCbkType	lef/lef/lefrReader.hpp	/^  lefrClearanceMeasureCbkType,$/;"	e	enum:__anon3
lefrCompProp	lef/include/lefrSettings.hpp	/^    lefiPropType  lefrCompProp; $/;"	m	class:lefrProps
lefrCompProp	lef/lef/lefrSettings.hpp	/^    lefiPropType  lefrCompProp; $/;"	m	class:lefrProps
lefrCorrectionTable	lef/include/lefrData.hpp	/^    lefiCorrectionTable  lefrCorrectionTable; $/;"	m	class:lefrData
lefrCorrectionTable	lef/lef/lefrData.hpp	/^    lefiCorrectionTable  lefrCorrectionTable; $/;"	m	class:lefrData
lefrCorrectionTableCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrCorrectionTableCbkFnType) (lefrCallbackType_e, lefiCorrectionTable* p, lefiUserData);$/;"	t
lefrCorrectionTableCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrCorrectionTableCbkFnType) (lefrCallbackType_e, lefiCorrectionTable* p, lefiUserData);$/;"	t
lefrCorrectionTableCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrCorrectionTableCbkFnType) (lefrCallbackType_e, $/;"	t
lefrCorrectionTableCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrCorrectionTableCbkFnType) (lefrCallbackType_e, $/;"	t
lefrCorrectionTableCbkType	lef/clef/lefrReader.h	/^  lefrCorrectionTableCbkType = 36,$/;"	e	enum:__anon11
lefrCorrectionTableCbkType	lef/include/lefrReader.h	/^  lefrCorrectionTableCbkType = 36,$/;"	e	enum:__anon5
lefrCorrectionTableCbkType	lef/include/lefrReader.hpp	/^  lefrCorrectionTableCbkType,$/;"	e	enum:__anon9
lefrCorrectionTableCbkType	lef/lef/lefrReader.hpp	/^  lefrCorrectionTableCbkType,$/;"	e	enum:__anon3
lefrCountFunc	lef/lef/lefrReader.cpp	/^lefrCountFunc(lefrCallbackType_e    e,$/;"	f
lefrData	lef/include/lefrData.hpp	/^class lefrData {$/;"	c
lefrData	lef/lef/lefrData.cpp	/^lefrData::lefrData()$/;"	f	class:lefrData
lefrData	lef/lef/lefrData.hpp	/^class lefrData {$/;"	c
lefrData_h	lef/include/lefrData.hpp	31;"	d
lefrData_h	lef/lef/lefrData.hpp	31;"	d
lefrDensity	lef/include/lefrData.hpp	/^    lefiDensity  lefrDensity; $/;"	m	class:lefrData
lefrDensity	lef/lef/lefrData.hpp	/^    lefiDensity  lefrDensity; $/;"	m	class:lefrData
lefrDensityCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrDensityCbkFnType) (lefrCallbackType_e, lefiDensity* l, lefiUserData);$/;"	t
lefrDensityCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrDensityCbkFnType) (lefrCallbackType_e, lefiDensity* l, lefiUserData);$/;"	t
lefrDensityCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrDensityCbkFnType) (lefrCallbackType_e, $/;"	t
lefrDensityCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrDensityCbkFnType) (lefrCallbackType_e, $/;"	t
lefrDensityCbkType	lef/clef/lefrReader.h	/^  lefrDensityCbkType = 54,$/;"	e	enum:__anon11
lefrDensityCbkType	lef/include/lefrReader.h	/^  lefrDensityCbkType = 54,$/;"	e	enum:__anon5
lefrDensityCbkType	lef/include/lefrReader.hpp	/^  lefrDensityCbkType,$/;"	e	enum:__anon9
lefrDensityCbkType	lef/lef/lefrReader.hpp	/^  lefrDensityCbkType,$/;"	e	enum:__anon3
lefrDielectricCbkType	lef/clef/lefrReader.h	/^  lefrDielectricCbkType = 16,$/;"	e	enum:__anon11
lefrDielectricCbkType	lef/include/lefrReader.h	/^  lefrDielectricCbkType = 16,$/;"	e	enum:__anon5
lefrDielectricCbkType	lef/include/lefrReader.hpp	/^  lefrDielectricCbkType,$/;"	e	enum:__anon9
lefrDielectricCbkType	lef/lef/lefrReader.hpp	/^  lefrDielectricCbkType,$/;"	e	enum:__anon3
lefrDisableAllMsgs	lef/clef/xlefrReader.cpp	/^void lefrDisableAllMsgs () {$/;"	f
lefrDisableAllMsgs	lef/lef/lefrReader.cpp	/^lefrDisableAllMsgs()$/;"	f
lefrDisableParserMsgs	lef/clef/xlefrReader.cpp	/^void lefrDisableParserMsgs (int  nMsg, int*  msgs) {$/;"	f
lefrDisableParserMsgs	lef/lef/lefrReader.cpp	/^lefrDisableParserMsgs(int   nMsg,$/;"	f
lefrDisablePropStrProcess	lef/clef/xlefrReader.cpp	/^void lefrDisablePropStrProcess () {$/;"	f
lefrDisablePropStrProcess	lef/lef/lefrReader.cpp	/^lefrDisablePropStrProcess()$/;"	f
lefrDividerCharCbkType	lef/clef/lefrReader.h	/^  lefrDividerCharCbkType = 3,$/;"	e	enum:__anon11
lefrDividerCharCbkType	lef/include/lefrReader.h	/^  lefrDividerCharCbkType = 3,$/;"	e	enum:__anon5
lefrDividerCharCbkType	lef/include/lefrReader.hpp	/^  lefrDividerCharCbkType,$/;"	e	enum:__anon9
lefrDividerCharCbkType	lef/lef/lefrReader.hpp	/^  lefrDividerCharCbkType,$/;"	e	enum:__anon3
lefrDoGcell	lef/include/lefrData.hpp	/^    int  lefrDoGcell; $/;"	m	class:lefrData
lefrDoGcell	lef/lef/lefrData.hpp	/^    int  lefrDoGcell; $/;"	m	class:lefrData
lefrDoGeometries	lef/include/lefrData.hpp	/^    int  lefrDoGeometries; $/;"	m	class:lefrData
lefrDoGeometries	lef/lef/lefrData.hpp	/^    int  lefrDoGeometries; $/;"	m	class:lefrData
lefrDoSite	lef/include/lefrData.hpp	/^    int  lefrDoSite; $/;"	m	class:lefrData
lefrDoSite	lef/lef/lefrData.hpp	/^    int  lefrDoSite; $/;"	m	class:lefrData
lefrDoTrack	lef/include/lefrData.hpp	/^    int  lefrDoTrack;$/;"	m	class:lefrData
lefrDoTrack	lef/lef/lefrData.hpp	/^    int  lefrDoTrack;$/;"	m	class:lefrData
lefrDoubleCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrDoubleCbkFnType) (lefrCallbackType_e, double number, lefiUserData);$/;"	t
lefrDoubleCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrDoubleCbkFnType) (lefrCallbackType_e, double number, lefiUserData);$/;"	t
lefrDoubleCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrDoubleCbkFnType) (lefrCallbackType_e, $/;"	t
lefrDoubleCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrDoubleCbkFnType) (lefrCallbackType_e, $/;"	t
lefrEdgeRateScaleFactorCbkType	lef/clef/lefrReader.h	/^  lefrEdgeRateScaleFactorCbkType = 34,$/;"	e	enum:__anon11
lefrEdgeRateScaleFactorCbkType	lef/include/lefrReader.h	/^  lefrEdgeRateScaleFactorCbkType = 34,$/;"	e	enum:__anon5
lefrEdgeRateScaleFactorCbkType	lef/include/lefrReader.hpp	/^  lefrEdgeRateScaleFactorCbkType,$/;"	e	enum:__anon9
lefrEdgeRateScaleFactorCbkType	lef/lef/lefrReader.hpp	/^  lefrEdgeRateScaleFactorCbkType,$/;"	e	enum:__anon3
lefrEdgeRateThreshold1CbkType	lef/clef/lefrReader.h	/^  lefrEdgeRateThreshold1CbkType = 32,$/;"	e	enum:__anon11
lefrEdgeRateThreshold1CbkType	lef/include/lefrReader.h	/^  lefrEdgeRateThreshold1CbkType = 32,$/;"	e	enum:__anon5
lefrEdgeRateThreshold1CbkType	lef/include/lefrReader.hpp	/^  lefrEdgeRateThreshold1CbkType,$/;"	e	enum:__anon9
lefrEdgeRateThreshold1CbkType	lef/lef/lefrReader.hpp	/^  lefrEdgeRateThreshold1CbkType,$/;"	e	enum:__anon3
lefrEdgeRateThreshold2CbkType	lef/clef/lefrReader.h	/^  lefrEdgeRateThreshold2CbkType = 33,$/;"	e	enum:__anon11
lefrEdgeRateThreshold2CbkType	lef/include/lefrReader.h	/^  lefrEdgeRateThreshold2CbkType = 33,$/;"	e	enum:__anon5
lefrEdgeRateThreshold2CbkType	lef/include/lefrReader.hpp	/^  lefrEdgeRateThreshold2CbkType,$/;"	e	enum:__anon9
lefrEdgeRateThreshold2CbkType	lef/lef/lefrReader.hpp	/^  lefrEdgeRateThreshold2CbkType,$/;"	e	enum:__anon3
lefrEnableAllMsgs	lef/clef/xlefrReader.cpp	/^void lefrEnableAllMsgs () {$/;"	f
lefrEnableAllMsgs	lef/lef/lefrReader.cpp	/^lefrEnableAllMsgs()$/;"	f
lefrEnableParserMsgs	lef/clef/xlefrReader.cpp	/^void lefrEnableParserMsgs (int  nMsg, int*  msgs) {$/;"	f
lefrEnableParserMsgs	lef/lef/lefrReader.cpp	/^lefrEnableParserMsgs(int    nMsg,$/;"	f
lefrEnableReadEncrypted	lef/clef/xlefiEncryptInt.cpp	/^void lefrEnableReadEncrypted () {$/;"	f
lefrEnableReadEncrypted	lef/lef/lefiEncryptInt.cpp	/^lefrEnableReadEncrypted()$/;"	f
lefrErrMsg	lef/include/lefrData.hpp	/^    char       lefrErrMsg[1024];$/;"	m	class:lefrData
lefrErrMsg	lef/lef/lefrData.hpp	/^    char       lefrErrMsg[1024];$/;"	m	class:lefrData
lefrExtensionCbkType	lef/clef/lefrReader.h	/^  lefrExtensionCbkType = 53,$/;"	e	enum:__anon11
lefrExtensionCbkType	lef/include/lefrReader.h	/^  lefrExtensionCbkType = 53,$/;"	e	enum:__anon5
lefrExtensionCbkType	lef/include/lefrReader.hpp	/^  lefrExtensionCbkType,$/;"	e	enum:__anon9
lefrExtensionCbkType	lef/lef/lefrReader.hpp	/^  lefrExtensionCbkType,$/;"	e	enum:__anon3
lefrFName	lef/clef/xlefrReader.cpp	/^const char * lefrFName () {$/;"	f
lefrFName	lef/lef/lefrReader.cpp	/^lefrFName()$/;"	f
lefrFile	lef/include/lefrData.hpp	/^    FILE*  lefrFile; $/;"	m	class:lefrData
lefrFile	lef/lef/lefrData.hpp	/^    FILE*  lefrFile; $/;"	m	class:lefrData
lefrFileName	lef/include/lefrData.hpp	/^    char*  lefrFileName; $/;"	m	class:lefrData
lefrFileName	lef/lef/lefrData.hpp	/^    char*  lefrFileName; $/;"	m	class:lefrData
lefrFixedMaskCbkType	lef/clef/lefrReader.h	/^  lefrFixedMaskCbkType = 55,$/;"	e	enum:__anon11
lefrFixedMaskCbkType	lef/include/lefrReader.h	/^  lefrFixedMaskCbkType = 55,$/;"	e	enum:__anon5
lefrFixedMaskCbkType	lef/include/lefrReader.hpp	/^  lefrFixedMaskCbkType,$/;"	e	enum:__anon9
lefrFixedMaskCbkType	lef/lef/lefrReader.hpp	/^  lefrFixedMaskCbkType,$/;"	e	enum:__anon3
lefrGcellPatternPtr	lef/include/lefrData.hpp	/^    lefiGcellPattern*  lefrGcellPatternPtr; $/;"	m	class:lefrData
lefrGcellPatternPtr	lef/lef/lefrData.hpp	/^    lefiGcellPattern*  lefrGcellPatternPtr; $/;"	m	class:lefrData
lefrGeometriesPtr	lef/include/lefrData.hpp	/^    lefiGeometries*  lefrGeometriesPtr; $/;"	m	class:lefrData
lefrGeometriesPtr	lef/lef/lefrData.hpp	/^    lefiGeometries*  lefrGeometriesPtr; $/;"	m	class:lefrData
lefrGetUserData	lef/clef/xlefrReader.cpp	/^lefiUserData lefrGetUserData () {$/;"	f
lefrGetUserData	lef/lef/lefrReader.cpp	/^lefrGetUserData()$/;"	f
lefrHasLayer	lef/include/lefrData.hpp	/^    int  lefrHasLayer; \/\/ 5.5 this & lefrHasMaxVS is to keep track that$/;"	m	class:lefrData
lefrHasLayer	lef/lef/lefrData.hpp	/^    int  lefrHasLayer; \/\/ 5.5 this & lefrHasMaxVS is to keep track that$/;"	m	class:lefrData
lefrHasMaxVS	lef/include/lefrData.hpp	/^    int  lefrHasMaxVS; \/\/ MAXVIASTACK has to be after all layers$/;"	m	class:lefrData
lefrHasMaxVS	lef/lef/lefrData.hpp	/^    int  lefrHasMaxVS; \/\/ MAXVIASTACK has to be after all layers$/;"	m	class:lefrData
lefrHasSpacing	lef/include/lefrData.hpp	/^    int  lefrHasSpacing; \/\/ keep track of spacing in a layer$/;"	m	class:lefrData
lefrHasSpacing	lef/lef/lefrData.hpp	/^    int  lefrHasSpacing; \/\/ keep track of spacing in a layer$/;"	m	class:lefrData
lefrHasSpacingTbl	lef/include/lefrData.hpp	/^    int  lefrHasSpacingTbl; \/\/ keep track of spacing table in a layer$/;"	m	class:lefrData
lefrHasSpacingTbl	lef/lef/lefrData.hpp	/^    int  lefrHasSpacingTbl; \/\/ keep track of spacing table in a layer$/;"	m	class:lefrData
lefrIRDrop	lef/include/lefrData.hpp	/^    lefiIRDrop  lefrIRDrop; $/;"	m	class:lefrData
lefrIRDrop	lef/lef/lefrData.hpp	/^    lefiIRDrop  lefrIRDrop; $/;"	m	class:lefrData
lefrIRDropBeginCbkType	lef/clef/lefrReader.h	/^  lefrIRDropBeginCbkType = 29,$/;"	e	enum:__anon11
lefrIRDropBeginCbkType	lef/include/lefrReader.h	/^  lefrIRDropBeginCbkType = 29,$/;"	e	enum:__anon5
lefrIRDropBeginCbkType	lef/include/lefrReader.hpp	/^  lefrIRDropBeginCbkType,$/;"	e	enum:__anon9
lefrIRDropBeginCbkType	lef/lef/lefrReader.hpp	/^  lefrIRDropBeginCbkType,$/;"	e	enum:__anon3
lefrIRDropCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrIRDropCbkFnType) (lefrCallbackType_e, lefiIRDrop* l, lefiUserData);$/;"	t
lefrIRDropCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrIRDropCbkFnType) (lefrCallbackType_e, lefiIRDrop* l, lefiUserData);$/;"	t
lefrIRDropCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrIRDropCbkFnType) (lefrCallbackType_e, $/;"	t
lefrIRDropCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrIRDropCbkFnType) (lefrCallbackType_e, $/;"	t
lefrIRDropCbkType	lef/clef/lefrReader.h	/^  lefrIRDropCbkType = 15,$/;"	e	enum:__anon11
lefrIRDropCbkType	lef/include/lefrReader.h	/^  lefrIRDropCbkType = 15,$/;"	e	enum:__anon5
lefrIRDropCbkType	lef/include/lefrReader.hpp	/^  lefrIRDropCbkType,$/;"	e	enum:__anon9
lefrIRDropCbkType	lef/lef/lefrReader.hpp	/^  lefrIRDropCbkType,$/;"	e	enum:__anon3
lefrIRDropEndCbkType	lef/clef/lefrReader.h	/^  lefrIRDropEndCbkType = 30,$/;"	e	enum:__anon11
lefrIRDropEndCbkType	lef/include/lefrReader.h	/^  lefrIRDropEndCbkType = 30,$/;"	e	enum:__anon5
lefrIRDropEndCbkType	lef/include/lefrReader.hpp	/^  lefrIRDropEndCbkType,$/;"	e	enum:__anon9
lefrIRDropEndCbkType	lef/lef/lefrReader.hpp	/^  lefrIRDropEndCbkType,$/;"	e	enum:__anon3
lefrInit	lef/clef/xlefrReader.cpp	/^int lefrInit () {$/;"	f
lefrInit	lef/lef/lefrReader.cpp	/^lefrInit()$/;"	f
lefrInitSession	lef/clef/xlefrReader.cpp	/^int lefrInitSession (int  startSession) {$/;"	f
lefrInitSession	lef/lef/lefrReader.cpp	/^lefrInitSession(int startSession)$/;"	f
lefrInoutAntennaCbkType	lef/clef/lefrReader.h	/^  lefrInoutAntennaCbkType = 39,$/;"	e	enum:__anon11
lefrInoutAntennaCbkType	lef/include/lefrReader.h	/^  lefrInoutAntennaCbkType = 39,$/;"	e	enum:__anon5
lefrInoutAntennaCbkType	lef/include/lefrReader.hpp	/^  lefrInoutAntennaCbkType,$/;"	e	enum:__anon9
lefrInoutAntennaCbkType	lef/lef/lefrReader.hpp	/^  lefrInoutAntennaCbkType,$/;"	e	enum:__anon3
lefrInputAntennaCbkType	lef/clef/lefrReader.h	/^  lefrInputAntennaCbkType = 37,$/;"	e	enum:__anon11
lefrInputAntennaCbkType	lef/include/lefrReader.h	/^  lefrInputAntennaCbkType = 37,$/;"	e	enum:__anon5
lefrInputAntennaCbkType	lef/include/lefrReader.hpp	/^  lefrInputAntennaCbkType,$/;"	e	enum:__anon9
lefrInputAntennaCbkType	lef/lef/lefrReader.hpp	/^  lefrInputAntennaCbkType,$/;"	e	enum:__anon3
lefrIntegerCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrIntegerCbkFnType) (lefrCallbackType_e, int number, lefiUserData);$/;"	t
lefrIntegerCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrIntegerCbkFnType) (lefrCallbackType_e, int number, lefiUserData);$/;"	t
lefrIntegerCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrIntegerCbkFnType) (lefrCallbackType_e, $/;"	t
lefrIntegerCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrIntegerCbkFnType) (lefrCallbackType_e, $/;"	t
lefrLayer	lef/include/lefrData.hpp	/^    lefiLayer  lefrLayer; $/;"	m	class:lefrData
lefrLayer	lef/lef/lefrData.hpp	/^    lefiLayer  lefrLayer; $/;"	m	class:lefrData
lefrLayerCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrLayerCbkFnType) (lefrCallbackType_e, lefiLayer* l, lefiUserData);$/;"	t
lefrLayerCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrLayerCbkFnType) (lefrCallbackType_e, lefiLayer* l, lefiUserData);$/;"	t
lefrLayerCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrLayerCbkFnType) (lefrCallbackType_e, $/;"	t
lefrLayerCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrLayerCbkFnType) (lefrCallbackType_e, $/;"	t
lefrLayerCbkType	lef/clef/lefrReader.h	/^  lefrLayerCbkType = 11,$/;"	e	enum:__anon11
lefrLayerCbkType	lef/include/lefrReader.h	/^  lefrLayerCbkType = 11,$/;"	e	enum:__anon5
lefrLayerCbkType	lef/include/lefrReader.hpp	/^  lefrLayerCbkType,$/;"	e	enum:__anon9
lefrLayerCbkType	lef/lef/lefrReader.hpp	/^  lefrLayerCbkType,$/;"	e	enum:__anon3
lefrLayerProp	lef/include/lefrSettings.hpp	/^    lefiPropType  lefrLayerProp; $/;"	m	class:lefrProps
lefrLayerProp	lef/lef/lefrSettings.hpp	/^    lefiPropType  lefrLayerProp; $/;"	m	class:lefrProps
lefrLibProp	lef/include/lefrSettings.hpp	/^    lefiPropType  lefrLibProp; $/;"	m	class:lefrProps
lefrLibProp	lef/lef/lefrSettings.hpp	/^    lefiPropType  lefrLibProp; $/;"	m	class:lefrProps
lefrLibraryEndCbkType	lef/clef/lefrReader.h	/^  lefrLibraryEndCbkType = 58$/;"	e	enum:__anon11
lefrLibraryEndCbkType	lef/include/lefrReader.h	/^  lefrLibraryEndCbkType = 58$/;"	e	enum:__anon5
lefrLibraryEndCbkType	lef/include/lefrReader.hpp	/^  lefrLibraryEndCbkType$/;"	e	enum:__anon9
lefrLibraryEndCbkType	lef/lef/lefrReader.hpp	/^  lefrLibraryEndCbkType$/;"	e	enum:__anon3
lefrLineNumber	lef/clef/xlefrReader.cpp	/^int lefrLineNumber () {$/;"	f
lefrLineNumber	lef/lef/lefrReader.cpp	/^lefrLineNumber()$/;"	f
lefrLog	lef/include/lefrData.hpp	/^    FILE*  lefrLog; $/;"	m	class:lefrData
lefrLog	lef/lef/lefrData.hpp	/^    FILE*  lefrLog; $/;"	m	class:lefrData
lefrMacro	lef/include/lefrData.hpp	/^    lefiMacro  lefrMacro; $/;"	m	class:lefrData
lefrMacro	lef/lef/lefrData.hpp	/^    lefiMacro  lefrMacro; $/;"	m	class:lefrData
lefrMacroBeginCbkType	lef/clef/lefrReader.h	/^  lefrMacroBeginCbkType = 20,$/;"	e	enum:__anon11
lefrMacroBeginCbkType	lef/include/lefrReader.h	/^  lefrMacroBeginCbkType = 20,$/;"	e	enum:__anon5
lefrMacroBeginCbkType	lef/include/lefrReader.hpp	/^  lefrMacroBeginCbkType,$/;"	e	enum:__anon9
lefrMacroBeginCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroBeginCbkType,$/;"	e	enum:__anon3
lefrMacroCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrMacroCbkFnType) (lefrCallbackType_e, lefiMacro* l, lefiUserData);$/;"	t
lefrMacroCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrMacroCbkFnType) (lefrCallbackType_e, lefiMacro* l, lefiUserData);$/;"	t
lefrMacroCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrMacroCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrMacroCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroCbkType	lef/clef/lefrReader.h	/^  lefrMacroCbkType = 22,$/;"	e	enum:__anon11
lefrMacroCbkType	lef/include/lefrReader.h	/^  lefrMacroCbkType = 22,$/;"	e	enum:__anon5
lefrMacroCbkType	lef/include/lefrReader.hpp	/^  lefrMacroCbkType,$/;"	e	enum:__anon9
lefrMacroCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroCbkType,$/;"	e	enum:__anon3
lefrMacroClassTypeCbkType	lef/clef/lefrReader.h	/^  lefrMacroClassTypeCbkType = 47,$/;"	e	enum:__anon11
lefrMacroClassTypeCbkType	lef/include/lefrReader.h	/^  lefrMacroClassTypeCbkType = 47,$/;"	e	enum:__anon5
lefrMacroClassTypeCbkType	lef/include/lefrReader.hpp	/^  lefrMacroClassTypeCbkType,$/;"	e	enum:__anon9
lefrMacroClassTypeCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroClassTypeCbkType,$/;"	e	enum:__anon3
lefrMacroEndCbkType	lef/clef/lefrReader.h	/^  lefrMacroEndCbkType = 51,$/;"	e	enum:__anon11
lefrMacroEndCbkType	lef/include/lefrReader.h	/^  lefrMacroEndCbkType = 51,$/;"	e	enum:__anon5
lefrMacroEndCbkType	lef/include/lefrReader.hpp	/^  lefrMacroEndCbkType,$/;"	e	enum:__anon9
lefrMacroEndCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroEndCbkType,$/;"	e	enum:__anon3
lefrMacroFixedMaskCbkType	lef/clef/lefrReader.h	/^  lefrMacroFixedMaskCbkType = 50,$/;"	e	enum:__anon11
lefrMacroFixedMaskCbkType	lef/include/lefrReader.h	/^  lefrMacroFixedMaskCbkType = 50,$/;"	e	enum:__anon5
lefrMacroFixedMaskCbkType	lef/include/lefrReader.hpp	/^  lefrMacroFixedMaskCbkType,$/;"	e	enum:__anon9
lefrMacroFixedMaskCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroFixedMaskCbkType,$/;"	e	enum:__anon3
lefrMacroForeignCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrMacroForeignCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroForeignCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrMacroForeignCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroForeignCbkType	lef/clef/lefrReader.h	/^  lefrMacroForeignCbkType = 57,$/;"	e	enum:__anon11
lefrMacroForeignCbkType	lef/include/lefrReader.h	/^  lefrMacroForeignCbkType = 57,$/;"	e	enum:__anon5
lefrMacroForeignCbkType	lef/include/lefrReader.hpp	/^  lefrMacroForeignCbkType,$/;"	e	enum:__anon9
lefrMacroForeignCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroForeignCbkType,$/;"	e	enum:__anon3
lefrMacroNumCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrMacroNumCbkFnType) (lefrCallbackType_e, lefiNum l, lefiUserData);$/;"	t
lefrMacroNumCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrMacroNumCbkFnType) (lefrCallbackType_e, lefiNum l, lefiUserData);$/;"	t
lefrMacroNumCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrMacroNumCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroNumCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrMacroNumCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroOriginCbkType	lef/clef/lefrReader.h	/^  lefrMacroOriginCbkType = 48,$/;"	e	enum:__anon11
lefrMacroOriginCbkType	lef/include/lefrReader.h	/^  lefrMacroOriginCbkType = 48,$/;"	e	enum:__anon5
lefrMacroOriginCbkType	lef/include/lefrReader.hpp	/^  lefrMacroOriginCbkType,$/;"	e	enum:__anon9
lefrMacroOriginCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroOriginCbkType,$/;"	e	enum:__anon3
lefrMacroProp	lef/include/lefrSettings.hpp	/^    lefiPropType  lefrMacroProp; $/;"	m	class:lefrProps
lefrMacroProp	lef/lef/lefrSettings.hpp	/^    lefiPropType  lefrMacroProp; $/;"	m	class:lefrProps
lefrMacroSiteCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrMacroSiteCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroSiteCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrMacroSiteCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroSiteCbkType	lef/clef/lefrReader.h	/^  lefrMacroSiteCbkType = 56,$/;"	e	enum:__anon11
lefrMacroSiteCbkType	lef/include/lefrReader.h	/^  lefrMacroSiteCbkType = 56,$/;"	e	enum:__anon5
lefrMacroSiteCbkType	lef/include/lefrReader.hpp	/^  lefrMacroSiteCbkType,$/;"	e	enum:__anon9
lefrMacroSiteCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroSiteCbkType,$/;"	e	enum:__anon3
lefrMacroSizeCbkType	lef/clef/lefrReader.h	/^  lefrMacroSizeCbkType = 49,$/;"	e	enum:__anon11
lefrMacroSizeCbkType	lef/include/lefrReader.h	/^  lefrMacroSizeCbkType = 49,$/;"	e	enum:__anon5
lefrMacroSizeCbkType	lef/include/lefrReader.hpp	/^  lefrMacroSizeCbkType,$/;"	e	enum:__anon9
lefrMacroSizeCbkType	lef/lef/lefrReader.hpp	/^  lefrMacroSizeCbkType,$/;"	e	enum:__anon3
lefrManufacturingCbkType	lef/clef/lefrReader.h	/^  lefrManufacturingCbkType = 43,$/;"	e	enum:__anon11
lefrManufacturingCbkType	lef/include/lefrReader.h	/^  lefrManufacturingCbkType = 43,$/;"	e	enum:__anon5
lefrManufacturingCbkType	lef/include/lefrReader.hpp	/^  lefrManufacturingCbkType,$/;"	e	enum:__anon9
lefrManufacturingCbkType	lef/lef/lefrReader.hpp	/^  lefrManufacturingCbkType,$/;"	e	enum:__anon3
lefrMaxStackVia	lef/include/lefrData.hpp	/^    lefiMaxStackVia  lefrMaxStackVia; \/\/ 5.5$/;"	m	class:lefrData
lefrMaxStackVia	lef/lef/lefrData.hpp	/^    lefiMaxStackVia  lefrMaxStackVia; \/\/ 5.5$/;"	m	class:lefrData
lefrMaxStackViaCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrMaxStackViaCbkFnType) (lefrCallbackType_e, lefiMaxStackVia* l, lefiUserData);$/;"	t
lefrMaxStackViaCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrMaxStackViaCbkFnType) (lefrCallbackType_e, lefiMaxStackVia* l, lefiUserData);$/;"	t
lefrMaxStackViaCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrMaxStackViaCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMaxStackViaCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrMaxStackViaCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMaxStackViaCbkType	lef/clef/lefrReader.h	/^  lefrMaxStackViaCbkType = 52,$/;"	e	enum:__anon11
lefrMaxStackViaCbkType	lef/include/lefrReader.h	/^  lefrMaxStackViaCbkType = 52,$/;"	e	enum:__anon5
lefrMaxStackViaCbkType	lef/include/lefrReader.hpp	/^  lefrMaxStackViaCbkType,$/;"	e	enum:__anon9
lefrMaxStackViaCbkType	lef/lef/lefrReader.hpp	/^  lefrMaxStackViaCbkType,$/;"	e	enum:__anon3
lefrMinFeature	lef/include/lefrData.hpp	/^    lefiMinFeature  lefrMinFeature; $/;"	m	class:lefrData
lefrMinFeature	lef/lef/lefrData.hpp	/^    lefiMinFeature  lefrMinFeature; $/;"	m	class:lefrData
lefrMinFeatureCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrMinFeatureCbkFnType) (lefrCallbackType_e, lefiMinFeature* l, lefiUserData);$/;"	t
lefrMinFeatureCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrMinFeatureCbkFnType) (lefrCallbackType_e, lefiMinFeature* l, lefiUserData);$/;"	t
lefrMinFeatureCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrMinFeatureCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMinFeatureCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrMinFeatureCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMinFeatureCbkType	lef/clef/lefrReader.h	/^  lefrMinFeatureCbkType = 17,$/;"	e	enum:__anon11
lefrMinFeatureCbkType	lef/include/lefrReader.h	/^  lefrMinFeatureCbkType = 17,$/;"	e	enum:__anon5
lefrMinFeatureCbkType	lef/include/lefrReader.hpp	/^  lefrMinFeatureCbkType,$/;"	e	enum:__anon9
lefrMinFeatureCbkType	lef/lef/lefrReader.hpp	/^  lefrMinFeatureCbkType,$/;"	e	enum:__anon3
lefrNoWireExtensionCbkType	lef/clef/lefrReader.h	/^  lefrNoWireExtensionCbkType = 7,$/;"	e	enum:__anon11
lefrNoWireExtensionCbkType	lef/include/lefrReader.h	/^  lefrNoWireExtensionCbkType = 7,$/;"	e	enum:__anon5
lefrNoWireExtensionCbkType	lef/include/lefrReader.hpp	/^  lefrNoWireExtensionCbkType,$/;"	e	enum:__anon9
lefrNoWireExtensionCbkType	lef/lef/lefrReader.hpp	/^  lefrNoWireExtensionCbkType,$/;"	e	enum:__anon3
lefrNoiseMargin	lef/include/lefrData.hpp	/^    lefiNoiseMargin  lefrNoiseMargin; $/;"	m	class:lefrData
lefrNoiseMargin	lef/lef/lefrData.hpp	/^    lefiNoiseMargin  lefrNoiseMargin; $/;"	m	class:lefrData
lefrNoiseMarginCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrNoiseMarginCbkFnType) (lefrCallbackType_e, struct lefiNoiseMargin* p, lefiUserData);$/;"	t
lefrNoiseMarginCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrNoiseMarginCbkFnType) (lefrCallbackType_e, struct lefiNoiseMargin* p, lefiUserData);$/;"	t
lefrNoiseMarginCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrNoiseMarginCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNoiseMarginCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrNoiseMarginCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNoiseMarginCbkType	lef/clef/lefrReader.h	/^  lefrNoiseMarginCbkType = 31,$/;"	e	enum:__anon11
lefrNoiseMarginCbkType	lef/include/lefrReader.h	/^  lefrNoiseMarginCbkType = 31,$/;"	e	enum:__anon5
lefrNoiseMarginCbkType	lef/include/lefrReader.hpp	/^  lefrNoiseMarginCbkType,$/;"	e	enum:__anon9
lefrNoiseMarginCbkType	lef/lef/lefrReader.hpp	/^  lefrNoiseMarginCbkType,$/;"	e	enum:__anon3
lefrNoiseTable	lef/include/lefrData.hpp	/^    lefiNoiseTable  lefrNoiseTable; $/;"	m	class:lefrData
lefrNoiseTable	lef/lef/lefrData.hpp	/^    lefiNoiseTable  lefrNoiseTable; $/;"	m	class:lefrData
lefrNoiseTableCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrNoiseTableCbkFnType) (lefrCallbackType_e, lefiNoiseTable* p, lefiUserData);$/;"	t
lefrNoiseTableCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrNoiseTableCbkFnType) (lefrCallbackType_e, lefiNoiseTable* p, lefiUserData);$/;"	t
lefrNoiseTableCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrNoiseTableCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNoiseTableCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrNoiseTableCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNoiseTableCbkType	lef/clef/lefrReader.h	/^  lefrNoiseTableCbkType = 35,$/;"	e	enum:__anon11
lefrNoiseTableCbkType	lef/include/lefrReader.h	/^  lefrNoiseTableCbkType = 35,$/;"	e	enum:__anon5
lefrNoiseTableCbkType	lef/include/lefrReader.hpp	/^  lefrNoiseTableCbkType,$/;"	e	enum:__anon9
lefrNoiseTableCbkType	lef/lef/lefrReader.hpp	/^  lefrNoiseTableCbkType,$/;"	e	enum:__anon3
lefrNonDefault	lef/include/lefrData.hpp	/^    lefiNonDefault  lefrNonDefault; $/;"	m	class:lefrData
lefrNonDefault	lef/lef/lefrData.hpp	/^    lefiNonDefault  lefrNonDefault; $/;"	m	class:lefrData
lefrNonDefaultCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrNonDefaultCbkFnType) (lefrCallbackType_e, lefiNonDefault* l, lefiUserData);$/;"	t
lefrNonDefaultCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrNonDefaultCbkFnType) (lefrCallbackType_e, lefiNonDefault* l, lefiUserData);$/;"	t
lefrNonDefaultCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrNonDefaultCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNonDefaultCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrNonDefaultCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNonDefaultCbkType	lef/clef/lefrReader.h	/^  lefrNonDefaultCbkType = 18,$/;"	e	enum:__anon11
lefrNonDefaultCbkType	lef/include/lefrReader.h	/^  lefrNonDefaultCbkType = 18,$/;"	e	enum:__anon5
lefrNonDefaultCbkType	lef/include/lefrReader.hpp	/^  lefrNonDefaultCbkType,$/;"	e	enum:__anon9
lefrNonDefaultCbkType	lef/lef/lefrReader.hpp	/^  lefrNonDefaultCbkType,$/;"	e	enum:__anon3
lefrNondefProp	lef/include/lefrSettings.hpp	/^    lefiPropType  lefrNondefProp; $/;"	m	class:lefrProps
lefrNondefProp	lef/lef/lefrSettings.hpp	/^    lefiPropType  lefrNondefProp; $/;"	m	class:lefrProps
lefrObstruction	lef/include/lefrData.hpp	/^    lefiObstruction  lefrObstruction; $/;"	m	class:lefrData
lefrObstruction	lef/lef/lefrData.hpp	/^    lefiObstruction  lefrObstruction; $/;"	m	class:lefrData
lefrObstructionCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrObstructionCbkFnType) (lefrCallbackType_e, lefiObstruction* l, lefiUserData);$/;"	t
lefrObstructionCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrObstructionCbkFnType) (lefrCallbackType_e, lefiObstruction* l, lefiUserData);$/;"	t
lefrObstructionCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrObstructionCbkFnType) (lefrCallbackType_e, $/;"	t
lefrObstructionCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrObstructionCbkFnType) (lefrCallbackType_e, $/;"	t
lefrObstructionCbkType	lef/clef/lefrReader.h	/^  lefrObstructionCbkType = 23,$/;"	e	enum:__anon11
lefrObstructionCbkType	lef/include/lefrReader.h	/^  lefrObstructionCbkType = 23,$/;"	e	enum:__anon5
lefrObstructionCbkType	lef/include/lefrReader.hpp	/^  lefrObstructionCbkType,$/;"	e	enum:__anon9
lefrObstructionCbkType	lef/lef/lefrReader.hpp	/^  lefrObstructionCbkType,$/;"	e	enum:__anon3
lefrOutputAntennaCbkType	lef/clef/lefrReader.h	/^  lefrOutputAntennaCbkType = 38,$/;"	e	enum:__anon11
lefrOutputAntennaCbkType	lef/include/lefrReader.h	/^  lefrOutputAntennaCbkType = 38,$/;"	e	enum:__anon5
lefrOutputAntennaCbkType	lef/include/lefrReader.hpp	/^  lefrOutputAntennaCbkType,$/;"	e	enum:__anon9
lefrOutputAntennaCbkType	lef/lef/lefrReader.hpp	/^  lefrOutputAntennaCbkType,$/;"	e	enum:__anon3
lefrPin	lef/include/lefrData.hpp	/^    lefiPin  lefrPin; $/;"	m	class:lefrData
lefrPin	lef/lef/lefrData.hpp	/^    lefiPin  lefrPin; $/;"	m	class:lefrData
lefrPinCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrPinCbkFnType) (lefrCallbackType_e, lefiPin* l, lefiUserData);$/;"	t
lefrPinCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrPinCbkFnType) (lefrCallbackType_e, lefiPin* l, lefiUserData);$/;"	t
lefrPinCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrPinCbkFnType) (lefrCallbackType_e, $/;"	t
lefrPinCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrPinCbkFnType) (lefrCallbackType_e, $/;"	t
lefrPinCbkType	lef/clef/lefrReader.h	/^  lefrPinCbkType = 21,$/;"	e	enum:__anon11
lefrPinCbkType	lef/include/lefrReader.h	/^  lefrPinCbkType = 21,$/;"	e	enum:__anon5
lefrPinCbkType	lef/include/lefrReader.hpp	/^  lefrPinCbkType,$/;"	e	enum:__anon9
lefrPinCbkType	lef/lef/lefrReader.hpp	/^  lefrPinCbkType,$/;"	e	enum:__anon3
lefrPinProp	lef/include/lefrSettings.hpp	/^    lefiPropType  lefrPinProp; $/;"	m	class:lefrProps
lefrPinProp	lef/lef/lefrSettings.hpp	/^    lefiPropType  lefrPinProp; $/;"	m	class:lefrProps
lefrPrintUnusedCallbacks	lef/clef/xlefrReader.cpp	/^void lefrPrintUnusedCallbacks (FILE*  f) {$/;"	f
lefrPrintUnusedCallbacks	lef/lef/lefrReader.cpp	/^lefrPrintUnusedCallbacks(FILE *f)$/;"	f
lefrProp	lef/include/lefrData.hpp	/^    lefiProp  lefrProp; $/;"	m	class:lefrData
lefrProp	lef/lef/lefrData.hpp	/^    lefiProp  lefrProp; $/;"	m	class:lefrData
lefrPropBeginCbkType	lef/clef/lefrReader.h	/^  lefrPropBeginCbkType = 8,$/;"	e	enum:__anon11
lefrPropBeginCbkType	lef/include/lefrReader.h	/^  lefrPropBeginCbkType = 8,$/;"	e	enum:__anon5
lefrPropBeginCbkType	lef/include/lefrReader.hpp	/^  lefrPropBeginCbkType,$/;"	e	enum:__anon9
lefrPropBeginCbkType	lef/lef/lefrReader.hpp	/^  lefrPropBeginCbkType,$/;"	e	enum:__anon3
lefrPropCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrPropCbkFnType) (lefrCallbackType_e, lefiProp* p, lefiUserData);$/;"	t
lefrPropCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrPropCbkFnType) (lefrCallbackType_e, lefiProp* p, lefiUserData);$/;"	t
lefrPropCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrPropCbkFnType) (lefrCallbackType_e, $/;"	t
lefrPropCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrPropCbkFnType) (lefrCallbackType_e, $/;"	t
lefrPropCbkType	lef/clef/lefrReader.h	/^  lefrPropCbkType = 9,$/;"	e	enum:__anon11
lefrPropCbkType	lef/include/lefrReader.h	/^  lefrPropCbkType = 9,$/;"	e	enum:__anon5
lefrPropCbkType	lef/include/lefrReader.hpp	/^  lefrPropCbkType,$/;"	e	enum:__anon9
lefrPropCbkType	lef/lef/lefrReader.hpp	/^  lefrPropCbkType,$/;"	e	enum:__anon3
lefrPropEndCbkType	lef/clef/lefrReader.h	/^  lefrPropEndCbkType = 10,$/;"	e	enum:__anon11
lefrPropEndCbkType	lef/include/lefrReader.h	/^  lefrPropEndCbkType = 10,$/;"	e	enum:__anon5
lefrPropEndCbkType	lef/include/lefrReader.hpp	/^  lefrPropEndCbkType,$/;"	e	enum:__anon9
lefrPropEndCbkType	lef/lef/lefrReader.hpp	/^  lefrPropEndCbkType,$/;"	e	enum:__anon3
lefrProps	lef/include/lefrSettings.hpp	/^class lefrProps {$/;"	c
lefrProps	lef/lef/lefrSettings.hpp	/^class lefrProps {$/;"	c
lefrRead	lef/clef/xlefrReader.cpp	/^int lefrRead (FILE * file, const char * fileName, lefiUserData  userData) {$/;"	f
lefrRead	lef/lef/lefrReader.cpp	/^lefrRead(FILE           *f,$/;"	f
lefrReadEncrypted	lef/clef/lefiEncryptExt.c	/^ *\/ int lefrReadEncrypted = 0;$/;"	v
lefrReadGZip	lef/clefzlib/clefzlib.c	/^int lefrReadGZip(lefGZFile file, const char* gzipFile, lefiUserData uData) {$/;"	f
lefrReadGZip	lef/lefzlib/lefzlib.cpp	/^int lefrReadGZip(lefGZFile file, const char* gzipFile, lefiUserData uData) {$/;"	f
lefrRegisterLef58Type	lef/lef/lefrReader.cpp	/^lefrRegisterLef58Type(const char *lef58Type,$/;"	f
lefrReleaseNResetMemory	lef/clef/xlefrReader.cpp	/^int lefrReleaseNResetMemory () {$/;"	f
lefrReleaseNResetMemory	lef/lef/lefrReader.cpp	/^lefrReleaseNResetMemory()$/;"	f
lefrReset	lef/clef/xlefrReader.cpp	/^int lefrReset () {$/;"	f
lefrReset	lef/lef/lefrReader.cpp	/^lefrReset()$/;"	f
lefrSetAntennaInoutCbk	lef/clef/xlefrReader.cpp	/^void lefrSetAntennaInoutCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetAntennaInoutCbk	lef/lef/lefrReader.cpp	/^lefrSetAntennaInoutCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetAntennaInoutWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetAntennaInoutWarnings (int  warn) {$/;"	f
lefrSetAntennaInoutWarnings	lef/lef/lefrReader.cpp	/^lefrSetAntennaInoutWarnings(int warn)$/;"	f
lefrSetAntennaInputCbk	lef/clef/xlefrReader.cpp	/^void lefrSetAntennaInputCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetAntennaInputCbk	lef/lef/lefrReader.cpp	/^lefrSetAntennaInputCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetAntennaInputWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetAntennaInputWarnings (int  warn) {$/;"	f
lefrSetAntennaInputWarnings	lef/lef/lefrReader.cpp	/^lefrSetAntennaInputWarnings(int warn)$/;"	f
lefrSetAntennaOutputCbk	lef/clef/xlefrReader.cpp	/^void lefrSetAntennaOutputCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetAntennaOutputCbk	lef/lef/lefrReader.cpp	/^lefrSetAntennaOutputCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetAntennaOutputWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetAntennaOutputWarnings (int  warn) {$/;"	f
lefrSetAntennaOutputWarnings	lef/lef/lefrReader.cpp	/^lefrSetAntennaOutputWarnings(int warn)$/;"	f
lefrSetArrayBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrSetArrayBeginCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetArrayBeginCbk	lef/lef/lefrReader.cpp	/^lefrSetArrayBeginCbk(lefrStringCbkFnType f)$/;"	f
lefrSetArrayCbk	lef/clef/xlefrReader.cpp	/^void lefrSetArrayCbk (::lefrArrayCbkFnType p0) {$/;"	f
lefrSetArrayCbk	lef/lef/lefrReader.cpp	/^lefrSetArrayCbk(lefrArrayCbkFnType f)$/;"	f
lefrSetArrayEndCbk	lef/clef/xlefrReader.cpp	/^void lefrSetArrayEndCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetArrayEndCbk	lef/lef/lefrReader.cpp	/^lefrSetArrayEndCbk(lefrStringCbkFnType f)$/;"	f
lefrSetArrayWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetArrayWarnings (int  warn) {$/;"	f
lefrSetArrayWarnings	lef/lef/lefrReader.cpp	/^lefrSetArrayWarnings(int warn)$/;"	f
lefrSetBusBitCharsCbk	lef/clef/xlefrReader.cpp	/^void lefrSetBusBitCharsCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetBusBitCharsCbk	lef/lef/lefrReader.cpp	/^lefrSetBusBitCharsCbk(lefrStringCbkFnType f)$/;"	f
lefrSetCaseSensitiveCbk	lef/clef/xlefrReader.cpp	/^void lefrSetCaseSensitiveCbk (::lefrIntegerCbkFnType p0) {$/;"	f
lefrSetCaseSensitiveCbk	lef/lef/lefrReader.cpp	/^lefrSetCaseSensitiveCbk(lefrIntegerCbkFnType f)$/;"	f
lefrSetCaseSensitiveWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetCaseSensitiveWarnings (int  warn) {$/;"	f
lefrSetCaseSensitiveWarnings	lef/lef/lefrReader.cpp	/^lefrSetCaseSensitiveWarnings(int warn)$/;"	f
lefrSetCaseSensitivity	lef/clef/xlefrReader.cpp	/^void lefrSetCaseSensitivity (int  caseSense) {$/;"	f
lefrSetCaseSensitivity	lef/lef/lefrReader.cpp	/^lefrSetCaseSensitivity(int caseSense)$/;"	f
lefrSetClearanceMeasureCbk	lef/clef/xlefrReader.cpp	/^void lefrSetClearanceMeasureCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetClearanceMeasureCbk	lef/lef/lefrReader.cpp	/^lefrSetClearanceMeasureCbk(lefrStringCbkFnType f)$/;"	f
lefrSetCommentChar	lef/clef/xlefrReader.cpp	/^void lefrSetCommentChar (char  c) {$/;"	f
lefrSetCommentChar	lef/lef/lefrReader.cpp	/^lefrSetCommentChar(char c)$/;"	f
lefrSetCorrectionTableCbk	lef/clef/xlefrReader.cpp	/^void lefrSetCorrectionTableCbk (::lefrCorrectionTableCbkFnType p0) {$/;"	f
lefrSetCorrectionTableCbk	lef/lef/lefrReader.cpp	/^lefrSetCorrectionTableCbk(lefrCorrectionTableCbkFnType f)$/;"	f
lefrSetCorrectionTableWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetCorrectionTableWarnings (int  warn) {$/;"	f
lefrSetCorrectionTableWarnings	lef/lef/lefrReader.cpp	/^lefrSetCorrectionTableWarnings(int warn)$/;"	f
lefrSetDeltaNumberLines	lef/clef/xlefrReader.cpp	/^void lefrSetDeltaNumberLines (int p0) {$/;"	f
lefrSetDeltaNumberLines	lef/lef/lefrReader.cpp	/^lefrSetDeltaNumberLines(int numLines)$/;"	f
lefrSetDensityCbk	lef/clef/xlefrReader.cpp	/^void lefrSetDensityCbk (::lefrDensityCbkFnType p0) {$/;"	f
lefrSetDensityCbk	lef/lef/lefrReader.cpp	/^lefrSetDensityCbk(lefrDensityCbkFnType f)$/;"	f
lefrSetDielectricCbk	lef/clef/xlefrReader.cpp	/^void lefrSetDielectricCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetDielectricCbk	lef/lef/lefrReader.cpp	/^lefrSetDielectricCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetDielectricWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetDielectricWarnings (int  warn) {$/;"	f
lefrSetDielectricWarnings	lef/lef/lefrReader.cpp	/^lefrSetDielectricWarnings(int warn)$/;"	f
lefrSetDividerCharCbk	lef/clef/xlefrReader.cpp	/^void lefrSetDividerCharCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetDividerCharCbk	lef/lef/lefrReader.cpp	/^lefrSetDividerCharCbk(lefrStringCbkFnType f)$/;"	f
lefrSetEdgeRateScaleFactorCbk	lef/clef/xlefrReader.cpp	/^void lefrSetEdgeRateScaleFactorCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetEdgeRateScaleFactorCbk	lef/lef/lefrReader.cpp	/^lefrSetEdgeRateScaleFactorCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetEdgeRateScaleFactorWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetEdgeRateScaleFactorWarnings (int  warn) {$/;"	f
lefrSetEdgeRateScaleFactorWarnings	lef/lef/lefrReader.cpp	/^lefrSetEdgeRateScaleFactorWarnings(int warn)$/;"	f
lefrSetEdgeRateThreshold1Cbk	lef/clef/xlefrReader.cpp	/^void lefrSetEdgeRateThreshold1Cbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetEdgeRateThreshold1Cbk	lef/lef/lefrReader.cpp	/^lefrSetEdgeRateThreshold1Cbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetEdgeRateThreshold1Warnings	lef/clef/xlefrReader.cpp	/^void lefrSetEdgeRateThreshold1Warnings (int  warn) {$/;"	f
lefrSetEdgeRateThreshold1Warnings	lef/lef/lefrReader.cpp	/^lefrSetEdgeRateThreshold1Warnings(int warn)$/;"	f
lefrSetEdgeRateThreshold2Cbk	lef/clef/xlefrReader.cpp	/^void lefrSetEdgeRateThreshold2Cbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetEdgeRateThreshold2Cbk	lef/lef/lefrReader.cpp	/^lefrSetEdgeRateThreshold2Cbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetEdgeRateThreshold2Warnings	lef/clef/xlefrReader.cpp	/^void lefrSetEdgeRateThreshold2Warnings (int  warn) {$/;"	f
lefrSetEdgeRateThreshold2Warnings	lef/lef/lefrReader.cpp	/^lefrSetEdgeRateThreshold2Warnings(int warn)$/;"	f
lefrSetExtensionCbk	lef/clef/xlefrReader.cpp	/^void lefrSetExtensionCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetExtensionCbk	lef/lef/lefrReader.cpp	/^lefrSetExtensionCbk(lefrStringCbkFnType f)$/;"	f
lefrSetFixedMaskCbk	lef/clef/xlefrReader.cpp	/^void lefrSetFixedMaskCbk (::lefrIntegerCbkFnType p0) {$/;"	f
lefrSetFixedMaskCbk	lef/lef/lefrReader.cpp	/^lefrSetFixedMaskCbk(lefrIntegerCbkFnType f)$/;"	f
lefrSetFreeFunction	lef/clef/xlefrReader.cpp	/^void lefrSetFreeFunction (::LEFI_FREE_FUNCTION p0) {$/;"	f
lefrSetFreeFunction	lef/lef/lefrReader.cpp	/^lefrSetFreeFunction(LEFI_FREE_FUNCTION f)$/;"	f
lefrSetIRDropBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrSetIRDropBeginCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetIRDropBeginCbk	lef/lef/lefrReader.cpp	/^lefrSetIRDropBeginCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetIRDropCbk	lef/clef/xlefrReader.cpp	/^void lefrSetIRDropCbk (::lefrIRDropCbkFnType p0) {$/;"	f
lefrSetIRDropCbk	lef/lef/lefrReader.cpp	/^lefrSetIRDropCbk(lefrIRDropCbkFnType f)$/;"	f
lefrSetIRDropEndCbk	lef/clef/xlefrReader.cpp	/^void lefrSetIRDropEndCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetIRDropEndCbk	lef/lef/lefrReader.cpp	/^lefrSetIRDropEndCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetIRDropWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetIRDropWarnings (int  warn) {$/;"	f
lefrSetIRDropWarnings	lef/lef/lefrReader.cpp	/^lefrSetIRDropWarnings(int warn)$/;"	f
lefrSetInoutAntennaCbk	lef/clef/xlefrReader.cpp	/^void lefrSetInoutAntennaCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetInoutAntennaCbk	lef/lef/lefrReader.cpp	/^lefrSetInoutAntennaCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetInoutAntennaWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetInoutAntennaWarnings (int  warn) {$/;"	f
lefrSetInoutAntennaWarnings	lef/lef/lefrReader.cpp	/^lefrSetInoutAntennaWarnings(int warn)$/;"	f
lefrSetInputAntennaCbk	lef/clef/xlefrReader.cpp	/^void lefrSetInputAntennaCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetInputAntennaCbk	lef/lef/lefrReader.cpp	/^lefrSetInputAntennaCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetInputAntennaWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetInputAntennaWarnings (int  warn) {$/;"	f
lefrSetInputAntennaWarnings	lef/lef/lefrReader.cpp	/^lefrSetInputAntennaWarnings(int warn)$/;"	f
lefrSetLayerCbk	lef/clef/xlefrReader.cpp	/^void lefrSetLayerCbk (::lefrLayerCbkFnType p0) {$/;"	f
lefrSetLayerCbk	lef/lef/lefrReader.cpp	/^lefrSetLayerCbk(lefrLayerCbkFnType f)$/;"	f
lefrSetLayerWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetLayerWarnings (int  warn) {$/;"	f
lefrSetLayerWarnings	lef/lef/lefrReader.cpp	/^lefrSetLayerWarnings(int warn)$/;"	f
lefrSetLibraryEndCbk	lef/clef/xlefrReader.cpp	/^void lefrSetLibraryEndCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetLibraryEndCbk	lef/lef/lefrReader.cpp	/^lefrSetLibraryEndCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetLimitPerMsg	lef/clef/xlefrReader.cpp	/^void lefrSetLimitPerMsg (int  msgId, int  numMsg) {$/;"	f
lefrSetLimitPerMsg	lef/lef/lefrReader.cpp	/^lefrSetLimitPerMsg(int  msgId,$/;"	f
lefrSetLineNumberFunction	lef/clef/xlefrReader.cpp	/^void lefrSetLineNumberFunction (::LEFI_LINE_NUMBER_FUNCTION p0) {$/;"	f
lefrSetLineNumberFunction	lef/lef/lefrReader.cpp	/^lefrSetLineNumberFunction(LEFI_LINE_NUMBER_FUNCTION f)$/;"	f
lefrSetLogFunction	lef/clef/xlefrReader.cpp	/^void lefrSetLogFunction (::LEFI_LOG_FUNCTION p0) {$/;"	f
lefrSetLogFunction	lef/lef/lefrReader.cpp	/^lefrSetLogFunction(LEFI_LOG_FUNCTION f)$/;"	f
lefrSetMacroBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMacroBeginCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetMacroBeginCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroBeginCbk(lefrStringCbkFnType f)$/;"	f
lefrSetMacroCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMacroCbk (::lefrMacroCbkFnType p0) {$/;"	f
lefrSetMacroCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroCbk(lefrMacroCbkFnType f)$/;"	f
lefrSetMacroClassTypeCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMacroClassTypeCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetMacroClassTypeCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroClassTypeCbk(lefrStringCbkFnType f)$/;"	f
lefrSetMacroEndCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMacroEndCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetMacroEndCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroEndCbk(lefrStringCbkFnType f)$/;"	f
lefrSetMacroFixedMaskCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMacroFixedMaskCbk (::lefrIntegerCbkFnType p0) {$/;"	f
lefrSetMacroFixedMaskCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroFixedMaskCbk(lefrIntegerCbkFnType f)$/;"	f
lefrSetMacroForeignCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroForeignCbk(lefrMacroForeignCbkFnType f)$/;"	f
lefrSetMacroOriginCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMacroOriginCbk (::lefrMacroNumCbkFnType p0) {$/;"	f
lefrSetMacroOriginCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroOriginCbk(lefrMacroNumCbkFnType f)$/;"	f
lefrSetMacroSiteCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroSiteCbk(lefrMacroSiteCbkFnType f)$/;"	f
lefrSetMacroSizeCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMacroSizeCbk (::lefrMacroNumCbkFnType p0) {$/;"	f
lefrSetMacroSizeCbk	lef/lef/lefrReader.cpp	/^lefrSetMacroSizeCbk(lefrMacroNumCbkFnType f)$/;"	f
lefrSetMacroWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetMacroWarnings (int  warn) {$/;"	f
lefrSetMacroWarnings	lef/lef/lefrReader.cpp	/^lefrSetMacroWarnings(int warn)$/;"	f
lefrSetMallocFunction	lef/clef/xlefrReader.cpp	/^void lefrSetMallocFunction (::LEFI_MALLOC_FUNCTION p0) {$/;"	f
lefrSetMallocFunction	lef/lef/lefrReader.cpp	/^lefrSetMallocFunction(LEFI_MALLOC_FUNCTION f)$/;"	f
lefrSetManufacturingCbk	lef/clef/xlefrReader.cpp	/^void lefrSetManufacturingCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetManufacturingCbk	lef/lef/lefrReader.cpp	/^lefrSetManufacturingCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetMaxStackViaCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMaxStackViaCbk (::lefrMaxStackViaCbkFnType p0) {$/;"	f
lefrSetMaxStackViaCbk	lef/lef/lefrReader.cpp	/^lefrSetMaxStackViaCbk(lefrMaxStackViaCbkFnType f)$/;"	f
lefrSetMaxStackViaWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetMaxStackViaWarnings (int  warn) {$/;"	f
lefrSetMaxStackViaWarnings	lef/lef/lefrReader.cpp	/^lefrSetMaxStackViaWarnings(int warn)$/;"	f
lefrSetMinFeatureCbk	lef/clef/xlefrReader.cpp	/^void lefrSetMinFeatureCbk (::lefrMinFeatureCbkFnType p0) {$/;"	f
lefrSetMinFeatureCbk	lef/lef/lefrReader.cpp	/^lefrSetMinFeatureCbk(lefrMinFeatureCbkFnType f)$/;"	f
lefrSetMinFeatureWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetMinFeatureWarnings (int  warn) {$/;"	f
lefrSetMinFeatureWarnings	lef/lef/lefrReader.cpp	/^lefrSetMinFeatureWarnings(int warn)$/;"	f
lefrSetNoWireExtensionCbk	lef/clef/xlefrReader.cpp	/^void lefrSetNoWireExtensionCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetNoWireExtensionCbk	lef/lef/lefrReader.cpp	/^lefrSetNoWireExtensionCbk(lefrStringCbkFnType f)$/;"	f
lefrSetNoWireExtensionWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetNoWireExtensionWarnings (int  warn) {$/;"	f
lefrSetNoWireExtensionWarnings	lef/lef/lefrReader.cpp	/^lefrSetNoWireExtensionWarnings(int warn)$/;"	f
lefrSetNoiseMarginCbk	lef/clef/xlefrReader.cpp	/^void lefrSetNoiseMarginCbk (::lefrNoiseMarginCbkFnType p0) {$/;"	f
lefrSetNoiseMarginCbk	lef/lef/lefrReader.cpp	/^lefrSetNoiseMarginCbk(lefrNoiseMarginCbkFnType f)$/;"	f
lefrSetNoiseMarginWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetNoiseMarginWarnings (int  warn) {$/;"	f
lefrSetNoiseMarginWarnings	lef/lef/lefrReader.cpp	/^lefrSetNoiseMarginWarnings(int warn)$/;"	f
lefrSetNoiseTableCbk	lef/clef/xlefrReader.cpp	/^void lefrSetNoiseTableCbk (::lefrNoiseTableCbkFnType p0) {$/;"	f
lefrSetNoiseTableCbk	lef/lef/lefrReader.cpp	/^lefrSetNoiseTableCbk(lefrNoiseTableCbkFnType f)$/;"	f
lefrSetNoiseTableWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetNoiseTableWarnings (int  warn) {$/;"	f
lefrSetNoiseTableWarnings	lef/lef/lefrReader.cpp	/^lefrSetNoiseTableWarnings(int warn)$/;"	f
lefrSetNonDefaultCbk	lef/clef/xlefrReader.cpp	/^void lefrSetNonDefaultCbk (::lefrNonDefaultCbkFnType p0) {$/;"	f
lefrSetNonDefaultCbk	lef/lef/lefrReader.cpp	/^lefrSetNonDefaultCbk(lefrNonDefaultCbkFnType f)$/;"	f
lefrSetNonDefaultWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetNonDefaultWarnings (int  warn) {$/;"	f
lefrSetNonDefaultWarnings	lef/lef/lefrReader.cpp	/^lefrSetNonDefaultWarnings(int warn)$/;"	f
lefrSetObstructionCbk	lef/clef/xlefrReader.cpp	/^void lefrSetObstructionCbk (::lefrObstructionCbkFnType p0) {$/;"	f
lefrSetObstructionCbk	lef/lef/lefrReader.cpp	/^lefrSetObstructionCbk(lefrObstructionCbkFnType f)$/;"	f
lefrSetOpenLogFileAppend	lef/clef/xlefrReader.cpp	/^void lefrSetOpenLogFileAppend () {$/;"	f
lefrSetOpenLogFileAppend	lef/lef/lefrReader.cpp	/^lefrSetOpenLogFileAppend()$/;"	f
lefrSetOutputAntennaCbk	lef/clef/xlefrReader.cpp	/^void lefrSetOutputAntennaCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetOutputAntennaCbk	lef/lef/lefrReader.cpp	/^lefrSetOutputAntennaCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetOutputAntennaWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetOutputAntennaWarnings (int  warn) {$/;"	f
lefrSetOutputAntennaWarnings	lef/lef/lefrReader.cpp	/^lefrSetOutputAntennaWarnings(int warn)$/;"	f
lefrSetPinCbk	lef/clef/xlefrReader.cpp	/^void lefrSetPinCbk (::lefrPinCbkFnType p0) {$/;"	f
lefrSetPinCbk	lef/lef/lefrReader.cpp	/^lefrSetPinCbk(lefrPinCbkFnType f)$/;"	f
lefrSetPinWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetPinWarnings (int  warn) {$/;"	f
lefrSetPinWarnings	lef/lef/lefrReader.cpp	/^lefrSetPinWarnings(int warn)$/;"	f
lefrSetPropBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrSetPropBeginCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetPropBeginCbk	lef/lef/lefrReader.cpp	/^lefrSetPropBeginCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetPropCbk	lef/clef/xlefrReader.cpp	/^void lefrSetPropCbk (::lefrPropCbkFnType p0) {$/;"	f
lefrSetPropCbk	lef/lef/lefrReader.cpp	/^lefrSetPropCbk(lefrPropCbkFnType f)$/;"	f
lefrSetPropEndCbk	lef/clef/xlefrReader.cpp	/^void lefrSetPropEndCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetPropEndCbk	lef/lef/lefrReader.cpp	/^lefrSetPropEndCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetReadFunction	lef/clef/xlefrReader.cpp	/^void lefrSetReadFunction (::LEFI_READ_FUNCTION p0) {$/;"	f
lefrSetReadFunction	lef/lef/lefrReader.cpp	/^lefrSetReadFunction(LEFI_READ_FUNCTION f)$/;"	f
lefrSetReallocFunction	lef/clef/xlefrReader.cpp	/^void lefrSetReallocFunction (::LEFI_REALLOC_FUNCTION p0) {$/;"	f
lefrSetReallocFunction	lef/lef/lefrReader.cpp	/^lefrSetReallocFunction(LEFI_REALLOC_FUNCTION f)$/;"	f
lefrSetRegisterUnusedCallbacks	lef/clef/xlefrReader.cpp	/^void lefrSetRegisterUnusedCallbacks () {$/;"	f
lefrSetRegisterUnusedCallbacks	lef/lef/lefrReader.cpp	/^lefrSetRegisterUnusedCallbacks()$/;"	f
lefrSetRelaxMode	lef/clef/xlefrReader.cpp	/^void lefrSetRelaxMode () {$/;"	f
lefrSetRelaxMode	lef/lef/lefrReader.cpp	/^lefrSetRelaxMode()$/;"	f
lefrSetShiftCase	lef/clef/xlefrReader.cpp	/^void lefrSetShiftCase () {$/;"	f
lefrSetShiftCase	lef/lef/lefrReader.cpp	/^lefrSetShiftCase()$/;"	f
lefrSetSiteCbk	lef/clef/xlefrReader.cpp	/^void lefrSetSiteCbk (::lefrSiteCbkFnType p0) {$/;"	f
lefrSetSiteCbk	lef/lef/lefrReader.cpp	/^lefrSetSiteCbk(lefrSiteCbkFnType f)$/;"	f
lefrSetSiteWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetSiteWarnings (int  warn) {$/;"	f
lefrSetSiteWarnings	lef/lef/lefrReader.cpp	/^lefrSetSiteWarnings(int warn)$/;"	f
lefrSetSpacingBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrSetSpacingBeginCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetSpacingBeginCbk	lef/lef/lefrReader.cpp	/^lefrSetSpacingBeginCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetSpacingCbk	lef/clef/xlefrReader.cpp	/^void lefrSetSpacingCbk (::lefrSpacingCbkFnType p0) {$/;"	f
lefrSetSpacingCbk	lef/lef/lefrReader.cpp	/^lefrSetSpacingCbk(lefrSpacingCbkFnType f)$/;"	f
lefrSetSpacingEndCbk	lef/clef/xlefrReader.cpp	/^void lefrSetSpacingEndCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetSpacingEndCbk	lef/lef/lefrReader.cpp	/^lefrSetSpacingEndCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetSpacingWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetSpacingWarnings (int  warn) {$/;"	f
lefrSetSpacingWarnings	lef/lef/lefrReader.cpp	/^lefrSetSpacingWarnings(int warn)$/;"	f
lefrSetTimingCbk	lef/clef/xlefrReader.cpp	/^void lefrSetTimingCbk (::lefrTimingCbkFnType p0) {$/;"	f
lefrSetTimingCbk	lef/lef/lefrReader.cpp	/^lefrSetTimingCbk(lefrTimingCbkFnType f)$/;"	f
lefrSetTimingWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetTimingWarnings (int  warn) {$/;"	f
lefrSetTimingWarnings	lef/lef/lefrReader.cpp	/^lefrSetTimingWarnings(int warn)$/;"	f
lefrSetTotalMsgLimit	lef/clef/xlefrReader.cpp	/^void lefrSetTotalMsgLimit (int  totNumMsgs) {$/;"	f
lefrSetTotalMsgLimit	lef/lef/lefrReader.cpp	/^lefrSetTotalMsgLimit(int totNumMsgs)$/;"	f
lefrSetUnitsCbk	lef/clef/xlefrReader.cpp	/^void lefrSetUnitsCbk (::lefrUnitsCbkFnType p0) {$/;"	f
lefrSetUnitsCbk	lef/lef/lefrReader.cpp	/^lefrSetUnitsCbk(lefrUnitsCbkFnType f)$/;"	f
lefrSetUnitsWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetUnitsWarnings (int  warn) {$/;"	f
lefrSetUnitsWarnings	lef/lef/lefrReader.cpp	/^lefrSetUnitsWarnings(int warn)$/;"	f
lefrSetUnusedCallbacks	lef/clef/xlefrReader.cpp	/^void lefrSetUnusedCallbacks (::lefrVoidCbkFnType  func) {$/;"	f
lefrSetUnusedCallbacks	lef/lef/lefrReader.cpp	/^lefrSetUnusedCallbacks(lefrVoidCbkFnType func)$/;"	f
lefrSetUseMinSpacingCbk	lef/clef/xlefrReader.cpp	/^void lefrSetUseMinSpacingCbk (::lefrUseMinSpacingCbkFnType p0) {$/;"	f
lefrSetUseMinSpacingCbk	lef/lef/lefrReader.cpp	/^lefrSetUseMinSpacingCbk(lefrUseMinSpacingCbkFnType f)$/;"	f
lefrSetUseMinSpacingWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetUseMinSpacingWarnings (int  warn) {$/;"	f
lefrSetUseMinSpacingWarnings	lef/lef/lefrReader.cpp	/^lefrSetUseMinSpacingWarnings(int warn)$/;"	f
lefrSetUserData	lef/clef/xlefrReader.cpp	/^void lefrSetUserData (lefiUserData p0) {$/;"	f
lefrSetUserData	lef/lef/lefrReader.cpp	/^lefrSetUserData(lefiUserData d)$/;"	f
lefrSetVersionCbk	lef/clef/xlefrReader.cpp	/^void lefrSetVersionCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetVersionCbk	lef/lef/lefrReader.cpp	/^lefrSetVersionCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetVersionStrCbk	lef/clef/xlefrReader.cpp	/^void lefrSetVersionStrCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetVersionStrCbk	lef/lef/lefrReader.cpp	/^lefrSetVersionStrCbk(lefrStringCbkFnType f)$/;"	f
lefrSetVersionValue	lef/clef/xlefrReader.cpp	/^void lefrSetVersionValue (const  char*   version) {$/;"	f
lefrSetVersionValue	lef/lef/lefrReader.cpp	/^lefrSetVersionValue(const char *version)$/;"	f
lefrSetViaCbk	lef/clef/xlefrReader.cpp	/^void lefrSetViaCbk (::lefrViaCbkFnType p0) {$/;"	f
lefrSetViaCbk	lef/lef/lefrReader.cpp	/^lefrSetViaCbk(lefrViaCbkFnType f)$/;"	f
lefrSetViaRuleCbk	lef/clef/xlefrReader.cpp	/^void lefrSetViaRuleCbk (::lefrViaRuleCbkFnType p0) {$/;"	f
lefrSetViaRuleCbk	lef/lef/lefrReader.cpp	/^lefrSetViaRuleCbk(lefrViaRuleCbkFnType f)$/;"	f
lefrSetViaRuleWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetViaRuleWarnings (int  warn) {$/;"	f
lefrSetViaRuleWarnings	lef/lef/lefrReader.cpp	/^lefrSetViaRuleWarnings(int warn)$/;"	f
lefrSetViaWarnings	lef/clef/xlefrReader.cpp	/^void lefrSetViaWarnings (int  warn) {$/;"	f
lefrSetViaWarnings	lef/lef/lefrReader.cpp	/^lefrSetViaWarnings(int warn)$/;"	f
lefrSetWarningLogFunction	lef/clef/xlefrReader.cpp	/^void lefrSetWarningLogFunction (::LEFI_WARNING_LOG_FUNCTION p0) {$/;"	f
lefrSetWarningLogFunction	lef/lef/lefrReader.cpp	/^lefrSetWarningLogFunction(LEFI_WARNING_LOG_FUNCTION f)$/;"	f
lefrSettings	lef/include/lefrSettings.hpp	/^class lefrSettings {$/;"	c
lefrSettings	lef/lef/lefrSettings.cpp	/^lefrSettings::lefrSettings()$/;"	f	class:lefrSettings
lefrSettings	lef/lef/lefrSettings.hpp	/^class lefrSettings {$/;"	c
lefrSettings_h	lef/include/lefrSettings.hpp	31;"	d
lefrSettings_h	lef/lef/lefrSettings.hpp	31;"	d
lefrSite	lef/include/lefrData.hpp	/^    lefiSite  lefrSite; $/;"	m	class:lefrData
lefrSite	lef/lef/lefrData.hpp	/^    lefiSite  lefrSite; $/;"	m	class:lefrData
lefrSiteCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrSiteCbkFnType) (lefrCallbackType_e, lefiSite* l, lefiUserData);$/;"	t
lefrSiteCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrSiteCbkFnType) (lefrCallbackType_e, lefiSite* l, lefiUserData);$/;"	t
lefrSiteCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrSiteCbkFnType) (lefrCallbackType_e, $/;"	t
lefrSiteCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrSiteCbkFnType) (lefrCallbackType_e, $/;"	t
lefrSiteCbkType	lef/clef/lefrReader.h	/^  lefrSiteCbkType = 19,$/;"	e	enum:__anon11
lefrSiteCbkType	lef/include/lefrReader.h	/^  lefrSiteCbkType = 19,$/;"	e	enum:__anon5
lefrSiteCbkType	lef/include/lefrReader.hpp	/^  lefrSiteCbkType,$/;"	e	enum:__anon9
lefrSiteCbkType	lef/lef/lefrReader.hpp	/^  lefrSiteCbkType,$/;"	e	enum:__anon3
lefrSitePatternPtr	lef/include/lefrData.hpp	/^    lefiSitePattern*  lefrSitePatternPtr; $/;"	m	class:lefrData
lefrSitePatternPtr	lef/lef/lefrData.hpp	/^    lefiSitePattern*  lefrSitePatternPtr; $/;"	m	class:lefrData
lefrSpacing	lef/include/lefrData.hpp	/^    lefiSpacing  lefrSpacing; $/;"	m	class:lefrData
lefrSpacing	lef/lef/lefrData.hpp	/^    lefiSpacing  lefrSpacing; $/;"	m	class:lefrData
lefrSpacingBeginCbkType	lef/clef/lefrReader.h	/^  lefrSpacingBeginCbkType = 25,$/;"	e	enum:__anon11
lefrSpacingBeginCbkType	lef/include/lefrReader.h	/^  lefrSpacingBeginCbkType = 25,$/;"	e	enum:__anon5
lefrSpacingBeginCbkType	lef/include/lefrReader.hpp	/^  lefrSpacingBeginCbkType,$/;"	e	enum:__anon9
lefrSpacingBeginCbkType	lef/lef/lefrReader.hpp	/^  lefrSpacingBeginCbkType,$/;"	e	enum:__anon3
lefrSpacingCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrSpacingCbkFnType) (lefrCallbackType_e, lefiSpacing* l, lefiUserData);$/;"	t
lefrSpacingCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrSpacingCbkFnType) (lefrCallbackType_e, lefiSpacing* l, lefiUserData);$/;"	t
lefrSpacingCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrSpacingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrSpacingCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrSpacingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrSpacingCbkType	lef/clef/lefrReader.h	/^  lefrSpacingCbkType = 14,$/;"	e	enum:__anon11
lefrSpacingCbkType	lef/include/lefrReader.h	/^  lefrSpacingCbkType = 14,$/;"	e	enum:__anon5
lefrSpacingCbkType	lef/include/lefrReader.hpp	/^  lefrSpacingCbkType,$/;"	e	enum:__anon9
lefrSpacingCbkType	lef/lef/lefrReader.hpp	/^  lefrSpacingCbkType,$/;"	e	enum:__anon3
lefrSpacingEndCbkType	lef/clef/lefrReader.h	/^  lefrSpacingEndCbkType = 26,$/;"	e	enum:__anon11
lefrSpacingEndCbkType	lef/include/lefrReader.h	/^  lefrSpacingEndCbkType = 26,$/;"	e	enum:__anon5
lefrSpacingEndCbkType	lef/include/lefrReader.hpp	/^  lefrSpacingEndCbkType,$/;"	e	enum:__anon9
lefrSpacingEndCbkType	lef/lef/lefrReader.hpp	/^  lefrSpacingEndCbkType,$/;"	e	enum:__anon3
lefrStringCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrStringCbkFnType) (lefrCallbackType_e, const char *string, lefiUserData);$/;"	t
lefrStringCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrStringCbkFnType) (lefrCallbackType_e, const char *string, lefiUserData);$/;"	t
lefrStringCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrStringCbkFnType) (lefrCallbackType_e, $/;"	t
lefrStringCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrStringCbkFnType) (lefrCallbackType_e, $/;"	t
lefrTiming	lef/include/lefrData.hpp	/^    lefiTiming  lefrTiming; $/;"	m	class:lefrData
lefrTiming	lef/lef/lefrData.hpp	/^    lefiTiming  lefrTiming; $/;"	m	class:lefrData
lefrTimingCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrTimingCbkFnType) (lefrCallbackType_e, lefiTiming* p, lefiUserData);$/;"	t
lefrTimingCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrTimingCbkFnType) (lefrCallbackType_e, lefiTiming* p, lefiUserData);$/;"	t
lefrTimingCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrTimingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrTimingCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrTimingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrTimingCbkType	lef/clef/lefrReader.h	/^  lefrTimingCbkType = 46,$/;"	e	enum:__anon11
lefrTimingCbkType	lef/include/lefrReader.h	/^  lefrTimingCbkType = 46,$/;"	e	enum:__anon5
lefrTimingCbkType	lef/include/lefrReader.hpp	/^  lefrTimingCbkType,$/;"	e	enum:__anon9
lefrTimingCbkType	lef/lef/lefrReader.hpp	/^  lefrTimingCbkType,$/;"	e	enum:__anon3
lefrTrackPatternPtr	lef/include/lefrData.hpp	/^    lefiTrackPattern*  lefrTrackPatternPtr; $/;"	m	class:lefrData
lefrTrackPatternPtr	lef/lef/lefrData.hpp	/^    lefiTrackPattern*  lefrTrackPatternPtr; $/;"	m	class:lefrData
lefrUnits	lef/include/lefrData.hpp	/^    lefiUnits  lefrUnits; $/;"	m	class:lefrData
lefrUnits	lef/lef/lefrData.hpp	/^    lefiUnits  lefrUnits; $/;"	m	class:lefrData
lefrUnitsCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrUnitsCbkFnType) (lefrCallbackType_e, lefiUnits* units, lefiUserData);$/;"	t
lefrUnitsCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrUnitsCbkFnType) (lefrCallbackType_e, lefiUnits* units, lefiUserData);$/;"	t
lefrUnitsCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrUnitsCbkFnType) (lefrCallbackType_e, $/;"	t
lefrUnitsCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrUnitsCbkFnType) (lefrCallbackType_e, $/;"	t
lefrUnitsCbkType	lef/clef/lefrReader.h	/^  lefrUnitsCbkType = 5,$/;"	e	enum:__anon11
lefrUnitsCbkType	lef/include/lefrReader.h	/^  lefrUnitsCbkType = 5,$/;"	e	enum:__anon5
lefrUnitsCbkType	lef/include/lefrReader.hpp	/^  lefrUnitsCbkType,$/;"	e	enum:__anon9
lefrUnitsCbkType	lef/lef/lefrReader.hpp	/^  lefrUnitsCbkType,$/;"	e	enum:__anon3
lefrUnsetAntennaInoutCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetAntennaInoutCbk () {$/;"	f
lefrUnsetAntennaInoutCbk	lef/lef/lefrReader.cpp	/^lefrUnsetAntennaInoutCbk()$/;"	f
lefrUnsetAntennaInputCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetAntennaInputCbk () {$/;"	f
lefrUnsetAntennaInputCbk	lef/lef/lefrReader.cpp	/^lefrUnsetAntennaInputCbk()$/;"	f
lefrUnsetAntennaOutputCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetAntennaOutputCbk () {$/;"	f
lefrUnsetAntennaOutputCbk	lef/lef/lefrReader.cpp	/^lefrUnsetAntennaOutputCbk()$/;"	f
lefrUnsetArrayBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetArrayBeginCbk () {$/;"	f
lefrUnsetArrayBeginCbk	lef/lef/lefrReader.cpp	/^lefrUnsetArrayBeginCbk()$/;"	f
lefrUnsetArrayCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetArrayCbk () {$/;"	f
lefrUnsetArrayCbk	lef/lef/lefrReader.cpp	/^lefrUnsetArrayCbk()$/;"	f
lefrUnsetArrayEndCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetArrayEndCbk () {$/;"	f
lefrUnsetArrayEndCbk	lef/lef/lefrReader.cpp	/^lefrUnsetArrayEndCbk()$/;"	f
lefrUnsetBusBitCharsCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetBusBitCharsCbk () {$/;"	f
lefrUnsetBusBitCharsCbk	lef/lef/lefrReader.cpp	/^lefrUnsetBusBitCharsCbk()$/;"	f
lefrUnsetCallbacks	lef/clef/xlefrReader.cpp	/^void lefrUnsetCallbacks () {$/;"	f
lefrUnsetCallbacks	lef/lef/lefrReader.cpp	/^lefrUnsetCallbacks()$/;"	f
lefrUnsetCaseSensitiveCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetCaseSensitiveCbk () {$/;"	f
lefrUnsetCaseSensitiveCbk	lef/lef/lefrReader.cpp	/^lefrUnsetCaseSensitiveCbk()$/;"	f
lefrUnsetClearanceMeasureCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetClearanceMeasureCbk () {$/;"	f
lefrUnsetClearanceMeasureCbk	lef/lef/lefrReader.cpp	/^lefrUnsetClearanceMeasureCbk()$/;"	f
lefrUnsetCorrectionTableCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetCorrectionTableCbk () {$/;"	f
lefrUnsetCorrectionTableCbk	lef/lef/lefrReader.cpp	/^lefrUnsetCorrectionTableCbk()$/;"	f
lefrUnsetDensityCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetDensityCbk () {$/;"	f
lefrUnsetDensityCbk	lef/lef/lefrReader.cpp	/^lefrUnsetDensityCbk()$/;"	f
lefrUnsetDielectricCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetDielectricCbk () {$/;"	f
lefrUnsetDielectricCbk	lef/lef/lefrReader.cpp	/^lefrUnsetDielectricCbk()$/;"	f
lefrUnsetDividerCharCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetDividerCharCbk () {$/;"	f
lefrUnsetDividerCharCbk	lef/lef/lefrReader.cpp	/^lefrUnsetDividerCharCbk()$/;"	f
lefrUnsetEdgeRateScaleFactorCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetEdgeRateScaleFactorCbk () {$/;"	f
lefrUnsetEdgeRateScaleFactorCbk	lef/lef/lefrReader.cpp	/^lefrUnsetEdgeRateScaleFactorCbk()$/;"	f
lefrUnsetEdgeRateThreshold1Cbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetEdgeRateThreshold1Cbk () {$/;"	f
lefrUnsetEdgeRateThreshold1Cbk	lef/lef/lefrReader.cpp	/^lefrUnsetEdgeRateThreshold1Cbk()$/;"	f
lefrUnsetEdgeRateThreshold2Cbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetEdgeRateThreshold2Cbk () {$/;"	f
lefrUnsetEdgeRateThreshold2Cbk	lef/lef/lefrReader.cpp	/^lefrUnsetEdgeRateThreshold2Cbk()$/;"	f
lefrUnsetExtensionCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetExtensionCbk () {$/;"	f
lefrUnsetExtensionCbk	lef/lef/lefrReader.cpp	/^lefrUnsetExtensionCbk()$/;"	f
lefrUnsetFixedMaskCbk	lef/lef/lefrReader.cpp	/^lefrUnsetFixedMaskCbk()$/;"	f
lefrUnsetIRDropBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetIRDropBeginCbk () {$/;"	f
lefrUnsetIRDropBeginCbk	lef/lef/lefrReader.cpp	/^lefrUnsetIRDropBeginCbk()$/;"	f
lefrUnsetIRDropCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetIRDropCbk () {$/;"	f
lefrUnsetIRDropCbk	lef/lef/lefrReader.cpp	/^lefrUnsetIRDropCbk()$/;"	f
lefrUnsetIRDropEndCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetIRDropEndCbk () {$/;"	f
lefrUnsetIRDropEndCbk	lef/lef/lefrReader.cpp	/^lefrUnsetIRDropEndCbk()$/;"	f
lefrUnsetInoutAntennaCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetInoutAntennaCbk () {$/;"	f
lefrUnsetInoutAntennaCbk	lef/lef/lefrReader.cpp	/^lefrUnsetInoutAntennaCbk()$/;"	f
lefrUnsetInputAntennaCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetInputAntennaCbk () {$/;"	f
lefrUnsetInputAntennaCbk	lef/lef/lefrReader.cpp	/^lefrUnsetInputAntennaCbk()$/;"	f
lefrUnsetLayerCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetLayerCbk () {$/;"	f
lefrUnsetLayerCbk	lef/lef/lefrReader.cpp	/^lefrUnsetLayerCbk()$/;"	f
lefrUnsetLibraryEndCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetLibraryEndCbk () {$/;"	f
lefrUnsetLibraryEndCbk	lef/lef/lefrReader.cpp	/^lefrUnsetLibraryEndCbk()$/;"	f
lefrUnsetMacroBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetMacroBeginCbk () {$/;"	f
lefrUnsetMacroBeginCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroBeginCbk()$/;"	f
lefrUnsetMacroCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetMacroCbk () {$/;"	f
lefrUnsetMacroCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroCbk()$/;"	f
lefrUnsetMacroClassTypeCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetMacroClassTypeCbk () {$/;"	f
lefrUnsetMacroClassTypeCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroClassTypeCbk()$/;"	f
lefrUnsetMacroEndCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetMacroEndCbk () {$/;"	f
lefrUnsetMacroEndCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroEndCbk()$/;"	f
lefrUnsetMacroFixedMaskCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroFixedMaskCbk()$/;"	f
lefrUnsetMacroForeignCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroForeignCbk()$/;"	f
lefrUnsetMacroOriginCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetMacroOriginCbk () {$/;"	f
lefrUnsetMacroOriginCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroOriginCbk()$/;"	f
lefrUnsetMacroSiteCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroSiteCbk()$/;"	f
lefrUnsetMacroSizeCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetMacroSizeCbk () {$/;"	f
lefrUnsetMacroSizeCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMacroSizeCbk()$/;"	f
lefrUnsetManufacturingCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetManufacturingCbk () {$/;"	f
lefrUnsetManufacturingCbk	lef/lef/lefrReader.cpp	/^lefrUnsetManufacturingCbk()$/;"	f
lefrUnsetMaxStackViaCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetMaxStackViaCbk () {$/;"	f
lefrUnsetMaxStackViaCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMaxStackViaCbk()$/;"	f
lefrUnsetMinFeatureCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetMinFeatureCbk () {$/;"	f
lefrUnsetMinFeatureCbk	lef/lef/lefrReader.cpp	/^lefrUnsetMinFeatureCbk()$/;"	f
lefrUnsetNoWireExtensionCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetNoWireExtensionCbk () {$/;"	f
lefrUnsetNoWireExtensionCbk	lef/lef/lefrReader.cpp	/^lefrUnsetNoWireExtensionCbk()$/;"	f
lefrUnsetNoiseMarginCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetNoiseMarginCbk () {$/;"	f
lefrUnsetNoiseMarginCbk	lef/lef/lefrReader.cpp	/^lefrUnsetNoiseMarginCbk()$/;"	f
lefrUnsetNoiseTableCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetNoiseTableCbk () {$/;"	f
lefrUnsetNoiseTableCbk	lef/lef/lefrReader.cpp	/^lefrUnsetNoiseTableCbk()$/;"	f
lefrUnsetNonDefaultCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetNonDefaultCbk () {$/;"	f
lefrUnsetNonDefaultCbk	lef/lef/lefrReader.cpp	/^lefrUnsetNonDefaultCbk()$/;"	f
lefrUnsetObstructionCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetObstructionCbk () {$/;"	f
lefrUnsetObstructionCbk	lef/lef/lefrReader.cpp	/^lefrUnsetObstructionCbk()$/;"	f
lefrUnsetOpenLogFileAppend	lef/clef/xlefrReader.cpp	/^void lefrUnsetOpenLogFileAppend () {$/;"	f
lefrUnsetOpenLogFileAppend	lef/lef/lefrReader.cpp	/^lefrUnsetOpenLogFileAppend()$/;"	f
lefrUnsetOutputAntennaCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetOutputAntennaCbk () {$/;"	f
lefrUnsetOutputAntennaCbk	lef/lef/lefrReader.cpp	/^lefrUnsetOutputAntennaCbk()$/;"	f
lefrUnsetPinCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetPinCbk () {$/;"	f
lefrUnsetPinCbk	lef/lef/lefrReader.cpp	/^lefrUnsetPinCbk()$/;"	f
lefrUnsetPropBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetPropBeginCbk () {$/;"	f
lefrUnsetPropBeginCbk	lef/lef/lefrReader.cpp	/^lefrUnsetPropBeginCbk()$/;"	f
lefrUnsetPropCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetPropCbk () {$/;"	f
lefrUnsetPropCbk	lef/lef/lefrReader.cpp	/^lefrUnsetPropCbk()$/;"	f
lefrUnsetPropEndCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetPropEndCbk () {$/;"	f
lefrUnsetPropEndCbk	lef/lef/lefrReader.cpp	/^lefrUnsetPropEndCbk()$/;"	f
lefrUnsetReadFunction	lef/clef/xlefrReader.cpp	/^void lefrUnsetReadFunction () {$/;"	f
lefrUnsetReadFunction	lef/lef/lefrReader.cpp	/^lefrUnsetReadFunction()$/;"	f
lefrUnsetRelaxMode	lef/clef/xlefrReader.cpp	/^void lefrUnsetRelaxMode () {$/;"	f
lefrUnsetRelaxMode	lef/lef/lefrReader.cpp	/^lefrUnsetRelaxMode()$/;"	f
lefrUnsetSiteCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetSiteCbk () {$/;"	f
lefrUnsetSiteCbk	lef/lef/lefrReader.cpp	/^lefrUnsetSiteCbk()$/;"	f
lefrUnsetSpacingBeginCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetSpacingBeginCbk () {$/;"	f
lefrUnsetSpacingBeginCbk	lef/lef/lefrReader.cpp	/^lefrUnsetSpacingBeginCbk()$/;"	f
lefrUnsetSpacingCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetSpacingCbk () {$/;"	f
lefrUnsetSpacingCbk	lef/lef/lefrReader.cpp	/^lefrUnsetSpacingCbk()$/;"	f
lefrUnsetSpacingEndCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetSpacingEndCbk () {$/;"	f
lefrUnsetSpacingEndCbk	lef/lef/lefrReader.cpp	/^lefrUnsetSpacingEndCbk()$/;"	f
lefrUnsetTimingCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetTimingCbk () {$/;"	f
lefrUnsetTimingCbk	lef/lef/lefrReader.cpp	/^lefrUnsetTimingCbk()$/;"	f
lefrUnsetUnitsCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetUnitsCbk () {$/;"	f
lefrUnsetUnitsCbk	lef/lef/lefrReader.cpp	/^lefrUnsetUnitsCbk()$/;"	f
lefrUnsetUseMinSpacingCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetUseMinSpacingCbk () {$/;"	f
lefrUnsetUseMinSpacingCbk	lef/lef/lefrReader.cpp	/^lefrUnsetUseMinSpacingCbk()$/;"	f
lefrUnsetVersionCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetVersionCbk () {$/;"	f
lefrUnsetVersionCbk	lef/lef/lefrReader.cpp	/^lefrUnsetVersionCbk()$/;"	f
lefrUnsetVersionStrCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetVersionStrCbk () {$/;"	f
lefrUnsetVersionStrCbk	lef/lef/lefrReader.cpp	/^lefrUnsetVersionStrCbk()$/;"	f
lefrUnsetViaCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetViaCbk () {$/;"	f
lefrUnsetViaCbk	lef/lef/lefrReader.cpp	/^lefrUnsetViaCbk()$/;"	f
lefrUnsetViaRuleCbk	lef/clef/xlefrReader.cpp	/^void lefrUnsetViaRuleCbk () {$/;"	f
lefrUnsetViaRuleCbk	lef/lef/lefrReader.cpp	/^lefrUnsetViaRuleCbk()$/;"	f
lefrUnspecifiedCbkType	lef/clef/lefrReader.h	/^  lefrUnspecifiedCbkType = 0,$/;"	e	enum:__anon11
lefrUnspecifiedCbkType	lef/include/lefrReader.h	/^  lefrUnspecifiedCbkType = 0,$/;"	e	enum:__anon5
lefrUnspecifiedCbkType	lef/include/lefrReader.hpp	/^  lefrUnspecifiedCbkType = 0,$/;"	e	enum:__anon9
lefrUnspecifiedCbkType	lef/lef/lefrReader.hpp	/^  lefrUnspecifiedCbkType = 0,$/;"	e	enum:__anon3
lefrUnusedCount	lef/lef/lefrReader.cpp	/^static int lefrUnusedCount[NOCBK];$/;"	v	file:
lefrUseMinSpacing	lef/include/lefrData.hpp	/^    lefiUseMinSpacing  lefrUseMinSpacing; $/;"	m	class:lefrData
lefrUseMinSpacing	lef/lef/lefrData.hpp	/^    lefiUseMinSpacing  lefrUseMinSpacing; $/;"	m	class:lefrData
lefrUseMinSpacingCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrUseMinSpacingCbkFnType) (lefrCallbackType_e, lefiUseMinSpacing* l, lefiUserData);$/;"	t
lefrUseMinSpacingCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrUseMinSpacingCbkFnType) (lefrCallbackType_e, lefiUseMinSpacing* l, lefiUserData);$/;"	t
lefrUseMinSpacingCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrUseMinSpacingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrUseMinSpacingCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrUseMinSpacingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrUseMinSpacingCbkType	lef/clef/lefrReader.h	/^  lefrUseMinSpacingCbkType = 44,$/;"	e	enum:__anon11
lefrUseMinSpacingCbkType	lef/include/lefrReader.h	/^  lefrUseMinSpacingCbkType = 44,$/;"	e	enum:__anon5
lefrUseMinSpacingCbkType	lef/include/lefrReader.hpp	/^  lefrUseMinSpacingCbkType,$/;"	e	enum:__anon9
lefrUseMinSpacingCbkType	lef/lef/lefrReader.hpp	/^  lefrUseMinSpacingCbkType,$/;"	e	enum:__anon3
lefrVal	lef/include/lefrData.hpp	/^    double  lefrVal; $/;"	m	class:lefrData
lefrVal	lef/lef/lefrData.hpp	/^    double  lefrVal; $/;"	m	class:lefrData
lefrVersionCbkType	lef/clef/lefrReader.h	/^  lefrVersionCbkType = 1,$/;"	e	enum:__anon11
lefrVersionCbkType	lef/include/lefrReader.h	/^  lefrVersionCbkType = 1,$/;"	e	enum:__anon5
lefrVersionCbkType	lef/include/lefrReader.hpp	/^  lefrVersionCbkType,$/;"	e	enum:__anon9
lefrVersionCbkType	lef/lef/lefrReader.hpp	/^  lefrVersionCbkType,$/;"	e	enum:__anon3
lefrVersionStrCbkType	lef/clef/lefrReader.h	/^  lefrVersionStrCbkType = 2,$/;"	e	enum:__anon11
lefrVersionStrCbkType	lef/include/lefrReader.h	/^  lefrVersionStrCbkType = 2,$/;"	e	enum:__anon5
lefrVersionStrCbkType	lef/include/lefrReader.hpp	/^  lefrVersionStrCbkType,$/;"	e	enum:__anon9
lefrVersionStrCbkType	lef/lef/lefrReader.hpp	/^  lefrVersionStrCbkType,$/;"	e	enum:__anon3
lefrVia	lef/include/lefrData.hpp	/^    lefiVia  lefrVia; $/;"	m	class:lefrData
lefrVia	lef/lef/lefrData.hpp	/^    lefiVia  lefrVia; $/;"	m	class:lefrData
lefrViaCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrViaCbkFnType) (lefrCallbackType_e, lefiVia* l, lefiUserData);$/;"	t
lefrViaCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrViaCbkFnType) (lefrCallbackType_e, lefiVia* l, lefiUserData);$/;"	t
lefrViaCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrViaCbkFnType) (lefrCallbackType_e, $/;"	t
lefrViaCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrViaCbkFnType) (lefrCallbackType_e, $/;"	t
lefrViaCbkType	lef/clef/lefrReader.h	/^  lefrViaCbkType = 12,$/;"	e	enum:__anon11
lefrViaCbkType	lef/include/lefrReader.h	/^  lefrViaCbkType = 12,$/;"	e	enum:__anon5
lefrViaCbkType	lef/include/lefrReader.hpp	/^  lefrViaCbkType,$/;"	e	enum:__anon9
lefrViaCbkType	lef/lef/lefrReader.hpp	/^  lefrViaCbkType,$/;"	e	enum:__anon3
lefrViaProp	lef/include/lefrSettings.hpp	/^    lefiPropType  lefrViaProp; $/;"	m	class:lefrProps
lefrViaProp	lef/lef/lefrSettings.hpp	/^    lefiPropType  lefrViaProp; $/;"	m	class:lefrProps
lefrViaRule	lef/include/lefrData.hpp	/^    lefiViaRule  lefrViaRule; $/;"	m	class:lefrData
lefrViaRule	lef/lef/lefrData.hpp	/^    lefiViaRule  lefrViaRule; $/;"	m	class:lefrData
lefrViaRuleCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrViaRuleCbkFnType) (lefrCallbackType_e, lefiViaRule* l, lefiUserData);$/;"	t
lefrViaRuleCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrViaRuleCbkFnType) (lefrCallbackType_e, lefiViaRule* l, lefiUserData);$/;"	t
lefrViaRuleCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrViaRuleCbkFnType) (lefrCallbackType_e, $/;"	t
lefrViaRuleCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrViaRuleCbkFnType) (lefrCallbackType_e, $/;"	t
lefrViaRuleCbkType	lef/clef/lefrReader.h	/^  lefrViaRuleCbkType = 13,$/;"	e	enum:__anon11
lefrViaRuleCbkType	lef/include/lefrReader.h	/^  lefrViaRuleCbkType = 13,$/;"	e	enum:__anon5
lefrViaRuleCbkType	lef/include/lefrReader.hpp	/^  lefrViaRuleCbkType,$/;"	e	enum:__anon9
lefrViaRuleCbkType	lef/lef/lefrReader.hpp	/^  lefrViaRuleCbkType,$/;"	e	enum:__anon3
lefrViaRuleProp	lef/include/lefrSettings.hpp	/^    lefiPropType  lefrViaRuleProp; $/;"	m	class:lefrProps
lefrViaRuleProp	lef/lef/lefrSettings.hpp	/^    lefiPropType  lefrViaRuleProp; $/;"	m	class:lefrProps
lefrVoidCbkFnType	lef/clef/lefrReader.h	/^typedef int (*lefrVoidCbkFnType) (lefrCallbackType_e, void* num, lefiUserData);$/;"	t
lefrVoidCbkFnType	lef/include/lefrReader.h	/^typedef int (*lefrVoidCbkFnType) (lefrCallbackType_e, void* num, lefiUserData);$/;"	t
lefrVoidCbkFnType	lef/include/lefrReader.hpp	/^typedef int (*lefrVoidCbkFnType) (lefrCallbackType_e, $/;"	t
lefrVoidCbkFnType	lef/lef/lefrReader.hpp	/^typedef int (*lefrVoidCbkFnType) (lefrCallbackType_e, $/;"	t
lefsublex	lef/lef/lef_keywords.cpp	/^lefsublex()$/;"	f
left	def/def/defiProp.cpp	/^double defiProp::left() const {$/;"	f	class:defiProp
left	lef/lef/lefiProp.cpp	/^lefiProp::left() const$/;"	f	class:lefiProp
leftHalo_	def/def/defiComponent.hpp	/^  int leftHalo_;$/;"	m	class:defiComponent
left_	def/def/defiProp.hpp	/^  double left_, right_; \/\/ if it has a range the numbers are here.$/;"	m	class:defiProp
left_	lef/include/lefiProp.hpp	/^  double left_;$/;"	m	class:lefiProp
left_	lef/lef/lefiProp.hpp	/^  double left_;$/;"	m	class:lefiProp
lefuc_array	lef/lef/lef_keywords.cpp	/^lefuc_array(char    *source,$/;"	f
lefw54Num	lef/lef/lefwWriter.cpp	/^static int lefw54Num = -1; \/\/ keep track the 5.4 syntax for error$/;"	v	file:
lefwAMaxAreaCar	lef/lef/lefwWriter.cpp	/^static int lefwAMaxAreaCar = 0;  \/\/ only allow to define once per pin$/;"	v	file:
lefwAMaxCutCar	lef/lef/lefwWriter.cpp	/^static int lefwAMaxCutCar = 0; \/\/ only allow to define once per pin$/;"	v	file:
lefwAMaxSideAreaCar	lef/lef/lefwWriter.cpp	/^static int lefwAMaxSideAreaCar = 0; \/\/ only allow to define once per pin$/;"	v	file:
lefwAddComment	lef/clef/xlefwWriter.cpp	/^void lefwAddComment (const char*  comment) {$/;"	f
lefwAddComment	lef/lef/lefwWriter.cpp	/^lefwAddComment(const char *comment)$/;"	f
lefwAddIndent	lef/clef/xlefwWriter.cpp	/^void lefwAddIndent () {$/;"	f
lefwAddIndent	lef/lef/lefwWriter.cpp	/^lefwAddIndent()$/;"	f
lefwAddr	lef/lef/lefwWriter.cpp	/^lefwAddr(const char *x)$/;"	f
lefwAntenna	lef/clef/xlefwWriter.cpp	/^int lefwAntenna (const char*  type, double  value) {$/;"	f
lefwAntenna	lef/lef/lefwWriter.cpp	/^lefwAntenna(const char  *type,$/;"	f
lefwAntenna53	lef/lef/lefwWriter.cpp	/^static int lefwAntenna53 = 0;  \/\/ to keep track 5.3 antenna is used$/;"	v	file:
lefwAntenna54	lef/lef/lefwWriter.cpp	/^static int lefwAntenna54 = 0;  \/\/ to keep track 5.4 antenna is used$/;"	v	file:
lefwAntennaCbk	lef/lef/lefwWriterCalls.cpp	75;"	d	file:
lefwAntennaCbkType	lef/clef/lefwWriterCalls.h	/^  lefwAntennaCbkType = 28,$/;"	e	enum:__anon12
lefwAntennaCbkType	lef/include/lefwWriterCalls.h	/^  lefwAntennaCbkType = 28,$/;"	e	enum:__anon8
lefwAntennaCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwAntennaCbkType,$/;"	e	enum:__anon10
lefwAntennaCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwAntennaCbkType,$/;"	e	enum:__anon4
lefwAntennaInOutDiffArea	lef/clef/xlefwWriter.cpp	/^int lefwAntennaInOutDiffArea (double  inOutDiffArea) {$/;"	f
lefwAntennaInOutDiffArea	lef/lef/lefwWriter.cpp	/^lefwAntennaInOutDiffArea(double inOutDiffArea)$/;"	f
lefwAntennaInOutDiffAreaCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwAntennaInOutDiffAreaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwAntennaInOutDiffAreaCbk	lef/lef/lefwWriterCalls.cpp	58;"	d	file:
lefwAntennaInOutDiffAreaCbkType	lef/clef/lefwWriterCalls.h	/^  lefwAntennaInOutDiffAreaCbkType = 11,$/;"	e	enum:__anon12
lefwAntennaInOutDiffAreaCbkType	lef/include/lefwWriterCalls.h	/^  lefwAntennaInOutDiffAreaCbkType = 11,$/;"	e	enum:__anon8
lefwAntennaInOutDiffAreaCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwAntennaInOutDiffAreaCbkType,$/;"	e	enum:__anon10
lefwAntennaInOutDiffAreaCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwAntennaInOutDiffAreaCbkType,$/;"	e	enum:__anon4
lefwAntennaInputGateArea	lef/clef/xlefwWriter.cpp	/^int lefwAntennaInputGateArea (double  inputGateArea) {$/;"	f
lefwAntennaInputGateArea	lef/lef/lefwWriter.cpp	/^lefwAntennaInputGateArea(double inputGateArea)$/;"	f
lefwAntennaInputGateAreaCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwAntennaInputGateAreaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwAntennaInputGateAreaCbk	lef/lef/lefwWriterCalls.cpp	57;"	d	file:
lefwAntennaInputGateAreaCbkType	lef/clef/lefwWriterCalls.h	/^  lefwAntennaInputGateAreaCbkType = 10,$/;"	e	enum:__anon12
lefwAntennaInputGateAreaCbkType	lef/include/lefwWriterCalls.h	/^  lefwAntennaInputGateAreaCbkType = 10,$/;"	e	enum:__anon8
lefwAntennaInputGateAreaCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwAntennaInputGateAreaCbkType,$/;"	e	enum:__anon10
lefwAntennaInputGateAreaCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwAntennaInputGateAreaCbkType,$/;"	e	enum:__anon4
lefwAntennaOutputDiffArea	lef/clef/xlefwWriter.cpp	/^int lefwAntennaOutputDiffArea (double  outputDiffArea) {$/;"	f
lefwAntennaOutputDiffArea	lef/lef/lefwWriter.cpp	/^lefwAntennaOutputDiffArea(double outputDiffArea)$/;"	f
lefwAntennaOutputDiffAreaCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwAntennaOutputDiffAreaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwAntennaOutputDiffAreaCbk	lef/lef/lefwWriterCalls.cpp	59;"	d	file:
lefwAntennaOutputDiffAreaCbkType	lef/clef/lefwWriterCalls.h	/^  lefwAntennaOutputDiffAreaCbkType = 12,$/;"	e	enum:__anon12
lefwAntennaOutputDiffAreaCbkType	lef/include/lefwWriterCalls.h	/^  lefwAntennaOutputDiffAreaCbkType = 12,$/;"	e	enum:__anon8
lefwAntennaOutputDiffAreaCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwAntennaOutputDiffAreaCbkType,$/;"	e	enum:__anon10
lefwAntennaOutputDiffAreaCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwAntennaOutputDiffAreaCbkType,$/;"	e	enum:__anon4
lefwArrayCannotoccupy	lef/clef/xlefwWriter.cpp	/^int lefwArrayCannotoccupy (const char*  name, double  origX, double  origY, int  orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayCannotoccupy	lef/lef/lefwWriter.cpp	/^lefwArrayCannotoccupy(const char    *name,$/;"	f
lefwArrayCannotoccupyStr	lef/clef/xlefwWriter.cpp	/^int lefwArrayCannotoccupyStr (const char*  name, double  origX, double  origY, const char * orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayCannotoccupyStr	lef/lef/lefwWriter.cpp	/^lefwArrayCannotoccupyStr(const char *name,$/;"	f
lefwArrayCanplace	lef/clef/xlefwWriter.cpp	/^int lefwArrayCanplace (const char*  name, double  origX, double  origY, int  orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayCanplace	lef/lef/lefwWriter.cpp	/^lefwArrayCanplace(const char    *name,$/;"	f
lefwArrayCanplaceStr	lef/clef/xlefwWriter.cpp	/^int lefwArrayCanplaceStr (const char*  name, double  origX, double  origY, const char * orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayCanplaceStr	lef/lef/lefwWriter.cpp	/^lefwArrayCanplaceStr(const char *name,$/;"	f
lefwArrayCbk	lef/lef/lefwWriterCalls.cpp	73;"	d	file:
lefwArrayCbkType	lef/clef/lefwWriterCalls.h	/^  lefwArrayCbkType = 26,$/;"	e	enum:__anon12
lefwArrayCbkType	lef/include/lefwWriterCalls.h	/^  lefwArrayCbkType = 26,$/;"	e	enum:__anon8
lefwArrayCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwArrayCbkType,$/;"	e	enum:__anon10
lefwArrayCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwArrayCbkType,$/;"	e	enum:__anon4
lefwArrayDefaultCap	lef/clef/xlefwWriter.cpp	/^int lefwArrayDefaultCap (double  numPins, double  cap) {$/;"	f
lefwArrayDefaultCap	lef/lef/lefwWriter.cpp	/^lefwArrayDefaultCap(double  numPins,$/;"	f
lefwArrayFloorplan	lef/clef/xlefwWriter.cpp	/^int lefwArrayFloorplan (const char*  site, const char*  name, double  origX, double  origY, int  orient, int  numX, int  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayFloorplan	lef/lef/lefwWriter.cpp	/^lefwArrayFloorplan(const char   *site,$/;"	f
lefwArrayFloorplanStr	lef/clef/xlefwWriter.cpp	/^int lefwArrayFloorplanStr (const char*  site, const char*  name, double  origX, double  origY, const char * orient, int  numX, int  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayFloorplanStr	lef/lef/lefwWriter.cpp	/^lefwArrayFloorplanStr(const char    *site,$/;"	f
lefwArrayGcellgrid	lef/clef/xlefwWriter.cpp	/^int lefwArrayGcellgrid (const char*  xy, double  startXY, int  colRows, double  spaceXY) {$/;"	f
lefwArrayGcellgrid	lef/lef/lefwWriter.cpp	/^lefwArrayGcellgrid(const char   *xy,$/;"	f
lefwArraySite	lef/clef/xlefwWriter.cpp	/^int lefwArraySite (const char*  name, double  origX, double  origY, int  orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArraySite	lef/lef/lefwWriter.cpp	/^lefwArraySite(const char    *name,$/;"	f
lefwArraySiteStr	lef/clef/xlefwWriter.cpp	/^int lefwArraySiteStr (const char*  name, double  origX, double  origY, const char * orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArraySiteStr	lef/lef/lefwWriter.cpp	/^lefwArraySiteStr(const char *name,$/;"	f
lefwArrayTracks	lef/clef/xlefwWriter.cpp	/^int lefwArrayTracks (const char*  xy, double  start, int  numTracks, double  space, const char*  layers) {$/;"	f
lefwArrayTracks	lef/lef/lefwWriter.cpp	/^lefwArrayTracks(const char  *xy,$/;"	f
lefwBeginextCreator	lef/clef/xlefwWriter.cpp	/^int lefwBeginextCreator (const char*  creatorName) {$/;"	f
lefwBeginextCreator	lef/lef/lefwWriter.cpp	/^lefwBeginextCreator(const char *creatorName)$/;"	f
lefwBeginextDate	lef/clef/xlefwWriter.cpp	/^int lefwBeginextDate () {$/;"	f
lefwBeginextDate	lef/lef/lefwWriter.cpp	/^lefwBeginextDate()$/;"	f
lefwBeginextRevision	lef/clef/xlefwWriter.cpp	/^int lefwBeginextRevision (int  vers1, int  vers2) {$/;"	f
lefwBeginextRevision	lef/lef/lefwWriter.cpp	/^lefwBeginextRevision(int    vers1,$/;"	f
lefwBeginextSyntax	lef/clef/xlefwWriter.cpp	/^int lefwBeginextSyntax (const char*  title, const char*  string) {$/;"	f
lefwBeginextSyntax	lef/lef/lefwWriter.cpp	/^lefwBeginextSyntax(const char   *title,$/;"	f
lefwBusBitChars	lef/clef/xlefwWriter.cpp	/^int lefwBusBitChars (const char*  busBitChars) {$/;"	f
lefwBusBitChars	lef/lef/lefwWriter.cpp	/^lefwBusBitChars(const char *busBitChars)$/;"	f
lefwBusBitCharsCbk	lef/lef/lefwWriterCalls.cpp	51;"	d	file:
lefwBusBitCharsCbkType	lef/clef/lefwWriterCalls.h	/^  lefwBusBitCharsCbkType = 4,$/;"	e	enum:__anon12
lefwBusBitCharsCbkType	lef/include/lefwWriterCalls.h	/^  lefwBusBitCharsCbkType = 4,$/;"	e	enum:__anon8
lefwBusBitCharsCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwBusBitCharsCbkType,$/;"	e	enum:__anon10
lefwBusBitCharsCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwBusBitCharsCbkType,$/;"	e	enum:__anon4
lefwCallbackType_e	lef/clef/lefwWriterCalls.h	/^} lefwCallbackType_e;$/;"	t	typeref:enum:__anon12
lefwCallbackType_e	lef/include/lefwWriterCalls.h	/^} lefwCallbackType_e;$/;"	t	typeref:enum:__anon8
lefwCallbackType_e	lef/include/lefwWriterCalls.hpp	/^} lefwCallbackType_e;$/;"	t	typeref:enum:__anon10
lefwCallbackType_e	lef/lef/lefwWriterCalls.hpp	/^} lefwCallbackType_e;$/;"	t	typeref:enum:__anon4
lefwCallbacksReq	lef/lef/lefwWriterCalls.cpp	/^int lefwCallbacksReq[MAXCBS] = {$/;"	v
lefwCallbacksSeq	lef/lef/lefwWriterCalls.cpp	/^lefwVoidCbkFnType lefwCallbacksSeq[MAXCBS] = {$/;"	v
lefwCallbacksType	lef/lef/lefwWriterCalls.cpp	/^lefwCallbackType_e lefwCallbacksType[MAXCBS] = {$/;"	v
lefwCaseSensitive	lef/clef/xlefwWriter.cpp	/^int lefwCaseSensitive (const char*  caseSensitive) {$/;"	f
lefwCaseSensitive	lef/lef/lefwWriter.cpp	/^lefwCaseSensitive(const char *caseSensitive)$/;"	f
lefwCaseSensitiveCbk	lef/lef/lefwWriterCalls.cpp	49;"	d	file:
lefwCaseSensitiveCbkType	lef/clef/lefwWriterCalls.h	/^  lefwCaseSensitiveCbkType = 2,$/;"	e	enum:__anon12
lefwCaseSensitiveCbkType	lef/include/lefwWriterCalls.h	/^  lefwCaseSensitiveCbkType = 2,$/;"	e	enum:__anon8
lefwCaseSensitiveCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwCaseSensitiveCbkType,$/;"	e	enum:__anon10
lefwCaseSensitiveCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwCaseSensitiveCbkType,$/;"	e	enum:__anon4
lefwClearanceMeasure	lef/clef/xlefwWriter.cpp	/^int lefwClearanceMeasure (const char*  type) {$/;"	f
lefwClearanceMeasure	lef/lef/lefwWriter.cpp	/^lefwClearanceMeasure(const char *type)$/;"	f
lefwClearanceMeasureCbk	lef/lef/lefwWriterCalls.cpp	55;"	d	file:
lefwClearanceMeasureCbkType	lef/clef/lefwWriterCalls.h	/^  lefwClearanceMeasureCbkType = 8,$/;"	e	enum:__anon12
lefwClearanceMeasureCbkType	lef/include/lefwWriterCalls.h	/^  lefwClearanceMeasureCbkType = 8,$/;"	e	enum:__anon8
lefwClearanceMeasureCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwClearanceMeasureCbkType,$/;"	e	enum:__anon10
lefwClearanceMeasureCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwClearanceMeasureCbkType,$/;"	e	enum:__anon4
lefwCloseEncrypt	lef/clef/xlefwWriter.cpp	/^int lefwCloseEncrypt () {$/;"	f
lefwCloseEncrypt	lef/lef/lefwWriter.cpp	/^lefwCloseEncrypt()$/;"	f
lefwCorrectionTableCbk	lef/lef/lefwWriterCalls.cpp	67;"	d	file:
lefwCorrectionTableCbkType	lef/clef/lefwWriterCalls.h	/^  lefwCorrectionTableCbkType = 20,$/;"	e	enum:__anon12
lefwCorrectionTableCbkType	lef/include/lefwWriterCalls.h	/^  lefwCorrectionTableCbkType = 20,$/;"	e	enum:__anon8
lefwCorrectionTableCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwCorrectionTableCbkType,$/;"	e	enum:__anon10
lefwCorrectionTableCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwCorrectionTableCbkType,$/;"	e	enum:__anon4
lefwCountFunc	lef/lef/lefwWriterCalls.cpp	/^lefwCountFunc(lefwCallbackType_e    e,$/;"	f
lefwCounter	lef/lef/lefwWriter.cpp	/^int lefwCounter = 0;  \/\/ number of nets, components in section$/;"	v
lefwCrossTalkCbk	lef/lef/lefwWriterCalls.cpp	65;"	d	file:
lefwCrossTalkCbkType	lef/clef/lefwWriterCalls.h	/^  lefwCrossTalkCbkType = 18,$/;"	e	enum:__anon12
lefwCrossTalkCbkType	lef/include/lefwWriterCalls.h	/^  lefwCrossTalkCbkType = 18,$/;"	e	enum:__anon8
lefwCrossTalkCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwCrossTalkCbkType,$/;"	e	enum:__anon10
lefwCrossTalkCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwCrossTalkCbkType,$/;"	e	enum:__anon4
lefwCurrentLineNumber	lef/clef/xlefwWriter.cpp	/^int lefwCurrentLineNumber () {$/;"	f
lefwCurrentLineNumber	lef/lef/lefwWriter.cpp	/^lefwCurrentLineNumber()$/;"	f
lefwDensityCheckStep	lef/clef/xlefwWriter.cpp	/^int lefwDensityCheckStep (double  checkStepValue) {$/;"	f
lefwDensityCheckStep	lef/lef/lefwWriter.cpp	/^lefwDensityCheckStep(double checkStepValue)$/;"	f
lefwDensityCheckWindow	lef/clef/xlefwWriter.cpp	/^int lefwDensityCheckWindow (double  checkWindowLength, double  checkWindowWidth) {$/;"	f
lefwDensityCheckWindow	lef/lef/lefwWriter.cpp	/^lefwDensityCheckWindow(double   checkWindowLength,$/;"	f
lefwDidInit	lef/lef/lefwWriter.cpp	/^int lefwDidInit = 0; \/\/ required section$/;"	v
lefwDidLayer	lef/lef/lefwWriter.cpp	/^int lefwDidLayer = 0; \/\/ required section$/;"	v
lefwDidVia	lef/lef/lefwWriter.cpp	/^int lefwDidVia = 0; \/\/ required section$/;"	v
lefwDidViaMacro	lef/lef/lefwWriter.cpp	/^int lefwDidViaMacro = 0; \/\/ required section$/;"	v
lefwDidViaRule	lef/lef/lefwWriter.cpp	/^int lefwDidViaRule = 0; \/\/ required section$/;"	v
lefwDidViaSite	lef/lef/lefwWriter.cpp	/^int lefwDidViaSite = 0; \/\/ required section$/;"	v
lefwDielectric	lef/clef/xlefwWriter.cpp	/^int lefwDielectric (double  dielectric) {$/;"	f
lefwDielectric	lef/lef/lefwWriter.cpp	/^lefwDielectric(double dielectric)$/;"	f
lefwDielectricCbk	lef/lef/lefwWriterCalls.cpp	70;"	d	file:
lefwDielectricCbkType	lef/clef/lefwWriterCalls.h	/^  lefwDielectricCbkType = 23,$/;"	e	enum:__anon12
lefwDielectricCbkType	lef/include/lefwWriterCalls.h	/^  lefwDielectricCbkType = 23,$/;"	e	enum:__anon8
lefwDielectricCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwDielectricCbkType,$/;"	e	enum:__anon10
lefwDielectricCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwDielectricCbkType,$/;"	e	enum:__anon4
lefwDividerChar	lef/clef/xlefwWriter.cpp	/^int lefwDividerChar (const char*  dividerChar) {$/;"	f
lefwDividerChar	lef/lef/lefwWriter.cpp	/^lefwDividerChar(const char *dividerChar)$/;"	f
lefwDividerCharCbk	lef/lef/lefwWriterCalls.cpp	52;"	d	file:
lefwDividerCharCbkType	lef/clef/lefwWriterCalls.h	/^  lefwDividerCharCbkType = 5,$/;"	e	enum:__anon12
lefwDividerCharCbkType	lef/include/lefwWriterCalls.h	/^  lefwDividerCharCbkType = 5,$/;"	e	enum:__anon8
lefwDividerCharCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwDividerCharCbkType,$/;"	e	enum:__anon10
lefwDividerCharCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwDividerCharCbkType,$/;"	e	enum:__anon4
lefwEdgeRate	lef/clef/xlefwWriter.cpp	/^int lefwEdgeRate (double  num) {$/;"	f
lefwEdgeRate	lef/lef/lefwWriter.cpp	/^lefwEdgeRate(double num)$/;"	f
lefwEdgeRateScaleFactor	lef/clef/xlefwWriter.cpp	/^int lefwEdgeRateScaleFactor (double  num) {$/;"	f
lefwEdgeRateScaleFactor	lef/lef/lefwWriter.cpp	/^lefwEdgeRateScaleFactor(double num)$/;"	f
lefwEdgeRateThreshold1	lef/clef/xlefwWriter.cpp	/^int lefwEdgeRateThreshold1 (double  num) {$/;"	f
lefwEdgeRateThreshold1	lef/lef/lefwWriter.cpp	/^lefwEdgeRateThreshold1(double num)$/;"	f
lefwEdgeRateThreshold2	lef/clef/xlefwWriter.cpp	/^int lefwEdgeRateThreshold2 (double  num) {$/;"	f
lefwEdgeRateThreshold2	lef/lef/lefwWriter.cpp	/^lefwEdgeRateThreshold2(double num)$/;"	f
lefwEncrypt	lef/clef/xlefwWriter.cpp	/^int lefwEncrypt () {$/;"	f
lefwEncrypt	lef/lef/lefwWriter.cpp	/^lefwEncrypt()$/;"	f
lefwEnd	lef/clef/xlefwWriter.cpp	/^int lefwEnd () {$/;"	f
lefwEnd	lef/lef/lefwWriter.cpp	/^lefwEnd()$/;"	f
lefwEndArray	lef/clef/xlefwWriter.cpp	/^int lefwEndArray (const char*  arrayName) {$/;"	f
lefwEndArray	lef/lef/lefwWriter.cpp	/^lefwEndArray(const char *arrayName)$/;"	f
lefwEndArrayDefaultCap	lef/clef/xlefwWriter.cpp	/^int lefwEndArrayDefaultCap () {$/;"	f
lefwEndArrayDefaultCap	lef/lef/lefwWriter.cpp	/^lefwEndArrayDefaultCap()$/;"	f
lefwEndArrayFloorplan	lef/clef/xlefwWriter.cpp	/^int lefwEndArrayFloorplan (const char*  name) {$/;"	f
lefwEndArrayFloorplan	lef/lef/lefwWriter.cpp	/^lefwEndArrayFloorplan(const char *name)$/;"	f
lefwEndBeginext	lef/clef/xlefwWriter.cpp	/^int lefwEndBeginext () {$/;"	f
lefwEndBeginext	lef/lef/lefwWriter.cpp	/^lefwEndBeginext()$/;"	f
lefwEndCorrectTable	lef/clef/xlefwWriter.cpp	/^int lefwEndCorrectTable () {$/;"	f
lefwEndCorrectTable	lef/lef/lefwWriter.cpp	/^lefwEndCorrectTable()$/;"	f
lefwEndIrdrop	lef/clef/xlefwWriter.cpp	/^int lefwEndIrdrop () {$/;"	f
lefwEndIrdrop	lef/lef/lefwWriter.cpp	/^lefwEndIrdrop()$/;"	f
lefwEndLayer	lef/clef/xlefwWriter.cpp	/^int lefwEndLayer (const char*  layerName) {$/;"	f
lefwEndLayer	lef/lef/lefwWriter.cpp	/^lefwEndLayer(const char *layerName)$/;"	f
lefwEndLayerRouting	lef/clef/xlefwWriter.cpp	/^int lefwEndLayerRouting (const char*  layerName) {$/;"	f
lefwEndLayerRouting	lef/lef/lefwWriter.cpp	/^lefwEndLayerRouting(const char *layerName)$/;"	f
lefwEndLibCbk	lef/lef/lefwWriterCalls.cpp	77;"	d	file:
lefwEndLibCbkType	lef/clef/lefwWriterCalls.h	/^  lefwEndLibCbkType = 30$/;"	e	enum:__anon12
lefwEndLibCbkType	lef/include/lefwWriterCalls.h	/^  lefwEndLibCbkType = 30$/;"	e	enum:__anon8
lefwEndLibCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwEndLibCbkType$/;"	e	enum:__anon10
lefwEndLibCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwEndLibCbkType$/;"	e	enum:__anon4
lefwEndMacro	lef/clef/xlefwWriter.cpp	/^int lefwEndMacro (const char*  macroName) {$/;"	f
lefwEndMacro	lef/lef/lefwWriter.cpp	/^lefwEndMacro(const char *macroName)$/;"	f
lefwEndMacroDensity	lef/clef/xlefwWriter.cpp	/^int lefwEndMacroDensity () {$/;"	f
lefwEndMacroDensity	lef/lef/lefwWriter.cpp	/^lefwEndMacroDensity()$/;"	f
lefwEndMacroObs	lef/clef/xlefwWriter.cpp	/^int lefwEndMacroObs () {$/;"	f
lefwEndMacroObs	lef/lef/lefwWriter.cpp	/^lefwEndMacroObs()$/;"	f
lefwEndMacroPin	lef/clef/xlefwWriter.cpp	/^int lefwEndMacroPin (const char*  pinName) {$/;"	f
lefwEndMacroPin	lef/lef/lefwWriter.cpp	/^lefwEndMacroPin(const char *pinName)$/;"	f
lefwEndMacroPinPort	lef/clef/xlefwWriter.cpp	/^int lefwEndMacroPinPort () {$/;"	f
lefwEndMacroPinPort	lef/lef/lefwWriter.cpp	/^lefwEndMacroPinPort()$/;"	f
lefwEndMacroTiming	lef/clef/xlefwWriter.cpp	/^int lefwEndMacroTiming () {$/;"	f
lefwEndMacroTiming	lef/lef/lefwWriter.cpp	/^lefwEndMacroTiming()$/;"	f
lefwEndNoiseTable	lef/clef/xlefwWriter.cpp	/^int lefwEndNoiseTable () {$/;"	f
lefwEndNoiseTable	lef/lef/lefwWriter.cpp	/^lefwEndNoiseTable()$/;"	f
lefwEndNonDefaultRule	lef/clef/xlefwWriter.cpp	/^int lefwEndNonDefaultRule (const char*  ruleName) {$/;"	f
lefwEndNonDefaultRule	lef/lef/lefwWriter.cpp	/^lefwEndNonDefaultRule(const char *ruleName)$/;"	f
lefwEndPropDef	lef/clef/xlefwWriter.cpp	/^int lefwEndPropDef () {$/;"	f
lefwEndPropDef	lef/lef/lefwWriter.cpp	/^lefwEndPropDef()$/;"	f
lefwEndSite	lef/clef/xlefwWriter.cpp	/^int lefwEndSite (const char*  siteName) {$/;"	f
lefwEndSite	lef/lef/lefwWriter.cpp	/^lefwEndSite(const char *siteName)$/;"	f
lefwEndSpacing	lef/clef/xlefwWriter.cpp	/^int lefwEndSpacing () {$/;"	f
lefwEndSpacing	lef/lef/lefwWriter.cpp	/^lefwEndSpacing()$/;"	f
lefwEndUnits	lef/clef/xlefwWriter.cpp	/^int lefwEndUnits () {$/;"	f
lefwEndUnits	lef/lef/lefwWriter.cpp	/^lefwEndUnits()$/;"	f
lefwEndVia	lef/clef/xlefwWriter.cpp	/^int lefwEndVia (const char*  viaName) {$/;"	f
lefwEndVia	lef/lef/lefwWriter.cpp	/^lefwEndVia(const char *viaName)$/;"	f
lefwEndViaRule	lef/clef/xlefwWriter.cpp	/^int lefwEndViaRule (const char*  viaRuleName) {$/;"	f
lefwEndViaRule	lef/lef/lefwWriter.cpp	/^lefwEndViaRule(const char *viaRuleName)$/;"	f
lefwEndViaRuleGen	lef/clef/xlefwWriter.cpp	/^int lefwEndViaRuleGen (const char*  viaRuleName) {$/;"	f
lefwEndViaRuleGen	lef/lef/lefwWriter.cpp	/^lefwEndViaRuleGen(const char *viaRuleName)$/;"	f
lefwErrorLogFunction	lef/lef/lefwWriter.cpp	/^LEFI_LOG_FUNCTION lefwErrorLogFunction;$/;"	v
lefwExtCbk	lef/lef/lefwWriterCalls.cpp	76;"	d	file:
lefwExtCbkType	lef/clef/lefwWriterCalls.h	/^  lefwExtCbkType = 29,$/;"	e	enum:__anon12
lefwExtCbkType	lef/include/lefwWriterCalls.h	/^  lefwExtCbkType = 29,$/;"	e	enum:__anon8
lefwExtCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwExtCbkType,$/;"	e	enum:__anon10
lefwExtCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwExtCbkType,$/;"	e	enum:__anon4
lefwFName	lef/lef/lefwWriterCalls.cpp	/^lefwFName()$/;"	f
lefwFile	lef/lef/lefwWriter.cpp	/^FILE *lefwFile = 0;   \/\/ File to write to.$/;"	v
lefwFileName	lef/lef/lefwWriterCalls.cpp	/^static char *lefwFileName = 0;$/;"	v	file:
lefwFillActiveSpacing	lef/clef/xlefwWriter.cpp	/^int lefwFillActiveSpacing (double  fillToActiveSpacing) {$/;"	f
lefwFillActiveSpacing	lef/lef/lefwWriter.cpp	/^lefwFillActiveSpacing(double fillToActiveSpacing)$/;"	f
lefwFixedMask	lef/clef/xlefwWriter.cpp	/^int lefwFixedMask () {$/;"	f
lefwFixedMask	lef/lef/lefwWriter.cpp	/^lefwFixedMask()$/;"	f
lefwGetUserData	lef/clef/xlefwWriterCalls.cpp	/^lefiUserData lefwGetUserData () {$/;"	f
lefwGetUserData	lef/lef/lefwWriterCalls.cpp	/^lefwGetUserData()$/;"	f
lefwHasArrayReq	lef/lef/lefwWriter.cpp	/^int lefwHasArrayReq = 0; \/\/ array required data$/;"	v
lefwHasInit	lef/lef/lefwWriter.cpp	/^int lefwHasInit = 0;    \/\/ for lefwInit has called$/;"	v
lefwHasInitCbk	lef/lef/lefwWriter.cpp	/^int lefwHasInitCbk = 0; \/\/ for lefwInitCbk has called$/;"	v
lefwHasLayerRoutingEol	lef/lef/lefwWriter.cpp	/^static int lefwHasLayerRoutingEol = 0;  \/\/ mark if layer routing is endofline$/;"	v	file:
lefwHasLayerRoutingRange	lef/lef/lefwWriter.cpp	/^static int lefwHasLayerRoutingRange = 0;  \/\/ mark if layer routing has range$/;"	v	file:
lefwHasLayerRoutingSpacing	lef/lef/lefwWriter.cpp	/^static int lefwHasLayerRoutingSpacing = 0;  \/\/ layer routing is lengththreshold$/;"	v	file:
lefwIRDropCbk	lef/lef/lefwWriterCalls.cpp	71;"	d	file:
lefwIRDropCbkType	lef/clef/lefwWriterCalls.h	/^  lefwIRDropCbkType = 24,$/;"	e	enum:__anon12
lefwIRDropCbkType	lef/include/lefwWriterCalls.h	/^  lefwIRDropCbkType = 24,$/;"	e	enum:__anon8
lefwIRDropCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwIRDropCbkType,$/;"	e	enum:__anon10
lefwIRDropCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwIRDropCbkType,$/;"	e	enum:__anon4
lefwInit	lef/clef/xlefwWriter.cpp	/^int lefwInit (FILE*  f) {$/;"	f
lefwInit	lef/lef/lefwWriter.cpp	/^lefwInit(FILE *f)$/;"	f
lefwInitCbk	lef/clef/xlefwWriter.cpp	/^int lefwInitCbk (FILE*  f) {$/;"	f
lefwInitCbk	lef/lef/lefwWriter.cpp	/^lefwInitCbk(FILE *f)$/;"	f
lefwIntPropDef	lef/clef/xlefwWriter.cpp	/^int lefwIntPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, int     propValue) {$/;"	f
lefwIntPropDef	lef/lef/lefwWriter.cpp	/^lefwIntPropDef(const char   *objType,$/;"	f
lefwIntProperty	lef/clef/xlefwWriter.cpp	/^int lefwIntProperty (const char*  propName, int  propValue) {$/;"	f
lefwIntProperty	lef/lef/lefwWriter.cpp	/^lefwIntProperty(const char  *propName,$/;"	f
lefwIrdropTable	lef/clef/xlefwWriter.cpp	/^int lefwIrdropTable (const char*  tableName, const char*  currentsNvolts) {$/;"	f
lefwIrdropTable	lef/lef/lefwWriter.cpp	/^lefwIrdropTable(const char  *tableName,$/;"	f
lefwIsArrayDef	lef/lef/lefwWriter.cpp	/^int lefwIsArrayDef = 0; \/\/ array default cap flag$/;"	v
lefwIsArrayFloorp	lef/lef/lefwWriter.cpp	/^int lefwIsArrayFloorp = 0; \/\/ array floorplan flag$/;"	v
lefwIsCorrectTable	lef/lef/lefwWriter.cpp	/^int lefwIsCorrectTable = 0; \/\/ correctiontable flag$/;"	v
lefwIsCut	lef/lef/lefwWriter.cpp	/^int lefwIsCut = 0; \/\/ cut layer$/;"	v
lefwIsEdgerate	lef/lef/lefwWriter.cpp	/^int lefwIsEdgerate = 0; \/\/ edgerate within noisetable$/;"	v
lefwIsFloorp	lef/lef/lefwWriter.cpp	/^int lefwIsFloorp = 0; \/\/ floorplan within array$/;"	v
lefwIsImplant	lef/lef/lefwWriter.cpp	/^int lefwIsImplant = 0; \/\/ implant layer$/;"	v
lefwIsLayerCutSpacing	lef/lef/lefwWriter.cpp	/^static int lefwIsLayerCutSpacing = 0;  \/\/ mark if layer cut spacing$/;"	v	file:
lefwIsMacroDensity	lef/lef/lefwWriter.cpp	/^int lefwIsMacroDensity = 0; \/\/ macro density flag$/;"	v
lefwIsMacroObs	lef/lef/lefwWriter.cpp	/^int lefwIsMacroObs = 0; \/\/ macro obs flag$/;"	v
lefwIsMacroObsLayer	lef/lef/lefwWriter.cpp	/^int lefwIsMacroObsLayer = 0; \/\/ macro obs layer within macro obs$/;"	v
lefwIsMacroPin	lef/lef/lefwWriter.cpp	/^int lefwIsMacroPin = 0; \/\/ macro pin flag$/;"	v
lefwIsMacroPinPort	lef/lef/lefwWriter.cpp	/^int lefwIsMacroPinPort = 0; \/\/ macro pin port within macro pin$/;"	v
lefwIsMacroPinPortLayer	lef/lef/lefwWriter.cpp	/^int lefwIsMacroPinPortLayer = 0; \/\/ macro pin port layer within macro pin port$/;"	v
lefwIsMacroTiming	lef/lef/lefwWriter.cpp	/^int lefwIsMacroTiming = 0; \/\/ macro timing flag$/;"	v
lefwIsMacroTimingModel	lef/lef/lefwWriter.cpp	/^int lefwIsMacroTimingModel = 0; \/\/ macro timing model flag$/;"	v
lefwIsMaxviastack	lef/lef/lefwWriter.cpp	/^int lefwIsMaxviastack = 0; \/\/ maximum stacked-via$/;"	v
lefwIsNoiseTable	lef/lef/lefwWriter.cpp	/^int lefwIsNoiseTable = 0; \/\/ noisetable flag$/;"	v
lefwIsNonDefaultRule	lef/lef/lefwWriter.cpp	/^int lefwIsNonDefaultRule = 0; \/\/ nondefaultrule flag$/;"	v
lefwIsOutResist	lef/lef/lefwWriter.cpp	/^int lefwIsOutResist = 0; \/\/ outputResistance within edgerate$/;"	v
lefwIsRouting	lef/lef/lefwWriter.cpp	/^int lefwIsRouting = 0; \/\/ routing$/;"	v
lefwIsRoutingMinCut	lef/lef/lefwWriter.cpp	/^int lefwIsRoutingMinCut = 0; \/\/ routing Minimumcut$/;"	v
lefwIsRoutingMinCutDist	lef/lef/lefwWriter.cpp	/^int lefwIsRoutingMinCutDist = 0; \/\/ routing Minimumcut distance$/;"	v
lefwIsRoutingMinCutLen	lef/lef/lefwWriter.cpp	/^int lefwIsRoutingMinCutLen = 0; \/\/ routing Minimumcut length within$/;"	v
lefwIsRoutingReqData	lef/lef/lefwWriter.cpp	/^int lefwIsRoutingReqData = 0; \/\/ layer routing required data are provided$/;"	v
lefwLayerACCurrentDensity	lef/clef/xlefwWriter.cpp	/^int lefwLayerACCurrentDensity (const char*  type, double  value) {$/;"	f
lefwLayerACCurrentDensity	lef/lef/lefwWriter.cpp	/^lefwLayerACCurrentDensity(const char    *type,$/;"	f
lefwLayerACCutarea	lef/clef/xlefwWriter.cpp	/^int lefwLayerACCutarea (int  numCutareas, double*  cutareas) {$/;"	f
lefwLayerACCutarea	lef/lef/lefwWriter.cpp	/^lefwLayerACCutarea(int      numCutareas,$/;"	f
lefwLayerACFrequency	lef/clef/xlefwWriter.cpp	/^int lefwLayerACFrequency (int  numFrequency, double*  frequency) {$/;"	f
lefwLayerACFrequency	lef/lef/lefwWriter.cpp	/^lefwLayerACFrequency(int    numFrequency,$/;"	f
lefwLayerACTableEntries	lef/clef/xlefwWriter.cpp	/^int lefwLayerACTableEntries (int  numEntries, double*  entries) {$/;"	f
lefwLayerACTableEntries	lef/lef/lefwWriter.cpp	/^lefwLayerACTableEntries(int     numEntries,$/;"	f
lefwLayerACWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerACWidth (int  numWidths, double*  widths) {$/;"	f
lefwLayerACWidth	lef/lef/lefwWriter.cpp	/^lefwLayerACWidth(int    numWidths,$/;"	f
lefwLayerAntennaAreaDiffReducePwl	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaAreaDiffReducePwl (int  numPwls, double*  diffAreas, double*  metalDiffFactors) {$/;"	f
lefwLayerAntennaAreaDiffReducePwl	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaAreaDiffReducePwl(int       numPwls,$/;"	f
lefwLayerAntennaAreaFactor	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaAreaFactor (double  value, const char*  diffUseOnly) {$/;"	f
lefwLayerAntennaAreaFactor	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaAreaFactor(double       value,$/;"	f
lefwLayerAntennaAreaMinusDiff	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaAreaMinusDiff (double  minusDiffFactor) {$/;"	f
lefwLayerAntennaAreaMinusDiff	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaAreaMinusDiff(double minusDiffFactor)$/;"	f
lefwLayerAntennaAreaRatio	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaAreaRatio (double  value) {$/;"	f
lefwLayerAntennaAreaRatio	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaAreaRatio(double value)$/;"	f
lefwLayerAntennaCumAreaRatio	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumAreaRatio (double  value) {$/;"	f
lefwLayerAntennaCumAreaRatio	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaCumAreaRatio(double value)$/;"	f
lefwLayerAntennaCumDiffAreaRatio	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumDiffAreaRatio (double  value) {$/;"	f
lefwLayerAntennaCumDiffAreaRatio	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaCumDiffAreaRatio(double value)$/;"	f
lefwLayerAntennaCumDiffAreaRatioPwl	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumDiffAreaRatioPwl (int  numPwls, double*  diffusions, double*  ratios) {$/;"	f
lefwLayerAntennaCumDiffAreaRatioPwl	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaCumDiffAreaRatioPwl(int     numPwls,$/;"	f
lefwLayerAntennaCumDiffSideAreaRatio	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumDiffSideAreaRatio (double  value) {$/;"	f
lefwLayerAntennaCumDiffSideAreaRatio	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaCumDiffSideAreaRatio(double value)$/;"	f
lefwLayerAntennaCumDiffSideAreaRatioPwl	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumDiffSideAreaRatioPwl (int  numPwls, double*  diffusions, double*  ratios) {$/;"	f
lefwLayerAntennaCumDiffSideAreaRatioPwl	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaCumDiffSideAreaRatioPwl(int     numPwls,$/;"	f
lefwLayerAntennaCumRoutingPlusCut	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumRoutingPlusCut () {$/;"	f
lefwLayerAntennaCumRoutingPlusCut	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaCumRoutingPlusCut()$/;"	f
lefwLayerAntennaCumSideAreaRatio	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumSideAreaRatio (double  value) {$/;"	f
lefwLayerAntennaCumSideAreaRatio	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaCumSideAreaRatio(double value)$/;"	f
lefwLayerAntennaDiffAreaRatio	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaDiffAreaRatio (double  value) {$/;"	f
lefwLayerAntennaDiffAreaRatio	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaDiffAreaRatio(double value)$/;"	f
lefwLayerAntennaDiffAreaRatioPwl	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaDiffAreaRatioPwl (int  numPwls, double*  diffusions, double*  ratios) {$/;"	f
lefwLayerAntennaDiffAreaRatioPwl	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaDiffAreaRatioPwl(int    numPwls,$/;"	f
lefwLayerAntennaDiffSideAreaRatio	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaDiffSideAreaRatio (double  value) {$/;"	f
lefwLayerAntennaDiffSideAreaRatio	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaDiffSideAreaRatio(double value)$/;"	f
lefwLayerAntennaDiffSideAreaRatioPwl	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaDiffSideAreaRatioPwl (int  numPwls, double*  diffusions, double*  ratios) {$/;"	f
lefwLayerAntennaDiffSideAreaRatioPwl	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaDiffSideAreaRatioPwl(int    numPwls,$/;"	f
lefwLayerAntennaGatePlusDiff	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaGatePlusDiff (double  plusDiffFactor) {$/;"	f
lefwLayerAntennaGatePlusDiff	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaGatePlusDiff(double plusDiffFactor)$/;"	f
lefwLayerAntennaModel	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaModel (const char*  oxide) {$/;"	f
lefwLayerAntennaModel	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaModel(const char *oxide)$/;"	f
lefwLayerAntennaSideAreaFactor	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaSideAreaFactor (double  value, const char*  diffUseOnly) {$/;"	f
lefwLayerAntennaSideAreaFactor	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaSideAreaFactor(double       value,$/;"	f
lefwLayerAntennaSideAreaRatio	lef/clef/xlefwWriter.cpp	/^int lefwLayerAntennaSideAreaRatio (double  value) {$/;"	f
lefwLayerAntennaSideAreaRatio	lef/lef/lefwWriter.cpp	/^lefwLayerAntennaSideAreaRatio(double value)$/;"	f
lefwLayerArraySpacing	lef/clef/xlefwWriter.cpp	/^int lefwLayerArraySpacing (int  longArray, double  viaWidth, double  cutSpacing, int  numArrayCut, int*  arrayCuts, double*  arraySpacings) {$/;"	f
lefwLayerArraySpacing	lef/lef/lefwWriter.cpp	/^lefwLayerArraySpacing(int       longArray,$/;"	f
lefwLayerCbk	lef/lef/lefwWriterCalls.cpp	61;"	d	file:
lefwLayerCbkType	lef/clef/lefwWriterCalls.h	/^  lefwLayerCbkType = 14,$/;"	e	enum:__anon12
lefwLayerCbkType	lef/include/lefwWriterCalls.h	/^  lefwLayerCbkType = 14,$/;"	e	enum:__anon8
lefwLayerCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwLayerCbkType,$/;"	e	enum:__anon10
lefwLayerCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwLayerCbkType,$/;"	e	enum:__anon4
lefwLayerCutSpacing	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacing (double  spacing) {$/;"	f
lefwLayerCutSpacing	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacing(double spacing)$/;"	f
lefwLayerCutSpacingAdjacent	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingAdjacent (int  viaCuts, double  distance, int  stack) {$/;"	f
lefwLayerCutSpacingAdjacent	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacingAdjacent(int     viaCuts,    \/\/ either 2, 3 or 4, optional $/;"	f
lefwLayerCutSpacingArea	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingArea (double  cutArea) {$/;"	f
lefwLayerCutSpacingArea	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacingArea(double cutArea)$/;"	f
lefwLayerCutSpacingCenterToCenter	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingCenterToCenter () {$/;"	f
lefwLayerCutSpacingCenterToCenter	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacingCenterToCenter()$/;"	f
lefwLayerCutSpacingEnd	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingEnd () {$/;"	f
lefwLayerCutSpacingEnd	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacingEnd()$/;"	f
lefwLayerCutSpacingLayer	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingLayer (const char*  name2, int  stack) {$/;"	f
lefwLayerCutSpacingLayer	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacingLayer(const char *name2,$/;"	f
lefwLayerCutSpacingParallel	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingParallel () {$/;"	f
lefwLayerCutSpacingParallel	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacingParallel()$/;"	f
lefwLayerCutSpacingSameNet	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingSameNet () {$/;"	f
lefwLayerCutSpacingSameNet	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacingSameNet()$/;"	f
lefwLayerCutSpacingTableOrtho	lef/clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingTableOrtho (int  numSpacing, double*  cutWithins, double*  orthoSpacings) {$/;"	f
lefwLayerCutSpacingTableOrtho	lef/lef/lefwWriter.cpp	/^lefwLayerCutSpacingTableOrtho(int       numSpacing,$/;"	f
lefwLayerDCCurrentDensity	lef/clef/xlefwWriter.cpp	/^int lefwLayerDCCurrentDensity (const char*  type, double  value) {$/;"	f
lefwLayerDCCurrentDensity	lef/lef/lefwWriter.cpp	/^lefwLayerDCCurrentDensity(const char    *type,$/;"	f
lefwLayerDCCutarea	lef/clef/xlefwWriter.cpp	/^int lefwLayerDCCutarea (int  numCutareas, double*  cutareas) {$/;"	f
lefwLayerDCCutarea	lef/lef/lefwWriter.cpp	/^lefwLayerDCCutarea(int      numCutareas,$/;"	f
lefwLayerDCTableEntries	lef/clef/xlefwWriter.cpp	/^int lefwLayerDCTableEntries (int  numEntries, double*  entries) {$/;"	f
lefwLayerDCTableEntries	lef/lef/lefwWriter.cpp	/^lefwLayerDCTableEntries(int     numEntries,$/;"	f
lefwLayerDCWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerDCWidth (int  numWidths, double*  widths) {$/;"	f
lefwLayerDCWidth	lef/lef/lefwWriter.cpp	/^lefwLayerDCWidth(int    numWidths,$/;"	f
lefwLayerEnclosure	lef/clef/xlefwWriter.cpp	/^int lefwLayerEnclosure (const char*  location, double  overhang1, double  overhang2, double  width) {$/;"	f
lefwLayerEnclosure	lef/lef/lefwWriter.cpp	/^lefwLayerEnclosure(const char   *location,$/;"	f
lefwLayerEnclosureLength	lef/clef/xlefwWriter.cpp	/^int lefwLayerEnclosureLength (const char*  location, double  overhang1, double  overhang2, double  minLength) {$/;"	f
lefwLayerEnclosureLength	lef/lef/lefwWriter.cpp	/^lefwLayerEnclosureLength(const char *location,$/;"	f
lefwLayerEnclosureWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerEnclosureWidth (const char*  location, double  overhang1, double  overhang2, double  width, double  cutWithin) {$/;"	f
lefwLayerEnclosureWidth	lef/lef/lefwWriter.cpp	/^lefwLayerEnclosureWidth(const char  *location,$/;"	f
lefwLayerMask	lef/clef/xlefwWriter.cpp	/^int lefwLayerMask (int  maskColor) {$/;"	f
lefwLayerMask	lef/lef/lefwWriter.cpp	/^lefwLayerMask(int colorMask)$/;"	f
lefwLayerPreferEnclosure	lef/clef/xlefwWriter.cpp	/^int lefwLayerPreferEnclosure (const char*  location, double  overhang1, double  overhang2, double  width) {$/;"	f
lefwLayerPreferEnclosure	lef/lef/lefwWriter.cpp	/^lefwLayerPreferEnclosure(const char *location,$/;"	f
lefwLayerResistancePerCut	lef/clef/xlefwWriter.cpp	/^int lefwLayerResistancePerCut (double  resistance) {$/;"	f
lefwLayerResistancePerCut	lef/lef/lefwWriter.cpp	/^lefwLayerResistancePerCut(double resistance)$/;"	f
lefwLayerRoutineEndSpacingtable	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutineEndSpacingtable () {$/;"	f
lefwLayerRoutineEndSpacingtable	lef/lef/lefwWriter.cpp	/^lefwLayerRoutineEndSpacingtable()$/;"	f
lefwLayerRouting	lef/clef/xlefwWriter.cpp	/^int lefwLayerRouting (const char*  direction, double  width) {$/;"	f
lefwLayerRouting	lef/lef/lefwWriter.cpp	/^lefwLayerRouting(const char *direction,$/;"	f
lefwLayerRoutingAntennaArea	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingAntennaArea (double  antennaArea) {$/;"	f
lefwLayerRoutingAntennaArea	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingAntennaArea(double antennaArea)$/;"	f
lefwLayerRoutingAntennaLength	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingAntennaLength (double  antennaLength) {$/;"	f
lefwLayerRoutingAntennaLength	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingAntennaLength(double antennaLength)$/;"	f
lefwLayerRoutingArea	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingArea (double  area) {$/;"	f
lefwLayerRoutingArea	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingArea(double area)$/;"	f
lefwLayerRoutingCapMultiplier	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingCapMultiplier (double  capMultiplier) {$/;"	f
lefwLayerRoutingCapMultiplier	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingCapMultiplier(double capMultiplier)$/;"	f
lefwLayerRoutingCapacitance	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingCapacitance (const char*  capacitance) {$/;"	f
lefwLayerRoutingCapacitance	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingCapacitance(const char *capacitance)$/;"	f
lefwLayerRoutingDiagMinEdgeLength	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagMinEdgeLength (double  diagLength) {$/;"	f
lefwLayerRoutingDiagMinEdgeLength	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingDiagMinEdgeLength(double diagLength)$/;"	f
lefwLayerRoutingDiagPitch	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagPitch (double  distance) {$/;"	f
lefwLayerRoutingDiagPitch	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingDiagPitch(double distance)$/;"	f
lefwLayerRoutingDiagPitchXYDistance	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagPitchXYDistance (double  diag45Distance, double  diag135Distance) {$/;"	f
lefwLayerRoutingDiagPitchXYDistance	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingDiagPitchXYDistance(double  xDistance,$/;"	f
lefwLayerRoutingDiagSpacing	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagSpacing (double  diagSpacing) {$/;"	f
lefwLayerRoutingDiagSpacing	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingDiagSpacing(double diagSpacing)$/;"	f
lefwLayerRoutingDiagWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagWidth (double  diagWidth) {$/;"	f
lefwLayerRoutingDiagWidth	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingDiagWidth(double diagWidth)$/;"	f
lefwLayerRoutingEdgeCap	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingEdgeCap (double  edgeCap) {$/;"	f
lefwLayerRoutingEdgeCap	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingEdgeCap(double edgeCap)$/;"	f
lefwLayerRoutingHeight	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingHeight (double  height) {$/;"	f
lefwLayerRoutingHeight	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingHeight(double height)$/;"	f
lefwLayerRoutingMaxwidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMaxwidth (double  width) {$/;"	f
lefwLayerRoutingMaxwidth	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMaxwidth(double width)$/;"	f
lefwLayerRoutingMinenclosedarea	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinenclosedarea (int  numMinenclosed, double*  area, double*  width) {$/;"	f
lefwLayerRoutingMinenclosedarea	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinenclosedarea(int     numMinenclosed,$/;"	f
lefwLayerRoutingMinimumcut	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinimumcut (double  numCuts, double  minWidth) {$/;"	f
lefwLayerRoutingMinimumcut	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinimumcut(double   numCuts,$/;"	f
lefwLayerRoutingMinimumcutConnections	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinimumcutConnections (const char*  direction) {$/;"	f
lefwLayerRoutingMinimumcutConnections	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinimumcutConnections(const char *direction)$/;"	f
lefwLayerRoutingMinimumcutLengthWithin	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinimumcutLengthWithin (double  length, double  distance) {$/;"	f
lefwLayerRoutingMinimumcutLengthWithin	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinimumcutLengthWithin(double   length,$/;"	f
lefwLayerRoutingMinimumcutWithin	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinimumcutWithin (double  numCuts, double  minWidth, double  cutDistance) {$/;"	f
lefwLayerRoutingMinimumcutWithin	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinimumcutWithin(double numCuts,$/;"	f
lefwLayerRoutingMinsize	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinsize (int  numRect, double*  minWidth, double*  minLength) {$/;"	f
lefwLayerRoutingMinsize	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinsize(int     numRect,$/;"	f
lefwLayerRoutingMinstep	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinstep (double  distance) {$/;"	f
lefwLayerRoutingMinstep	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinstep(double distance)$/;"	f
lefwLayerRoutingMinstepMaxEdges	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinstepMaxEdges (double  distance, double  maxEdges) {$/;"	f
lefwLayerRoutingMinstepMaxEdges	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinstepMaxEdges(double  distance,$/;"	f
lefwLayerRoutingMinstepWithOptions	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinstepWithOptions (double  distance, const char*  rule, double  maxLength) {$/;"	f
lefwLayerRoutingMinstepWithOptions	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinstepWithOptions(double       distance,$/;"	f
lefwLayerRoutingMinwidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinwidth (double  width) {$/;"	f
lefwLayerRoutingMinwidth	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingMinwidth(double width)$/;"	f
lefwLayerRoutingOffset	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingOffset (double  offset) {$/;"	f
lefwLayerRoutingOffset	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingOffset(double offset)$/;"	f
lefwLayerRoutingOffsetXYDistance	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingOffsetXYDistance (double  xDistance, double  yDistance) {$/;"	f
lefwLayerRoutingOffsetXYDistance	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingOffsetXYDistance(double xDistance,$/;"	f
lefwLayerRoutingPitch	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingPitch (double  pitch) {$/;"	f
lefwLayerRoutingPitch	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingPitch(double pitch)$/;"	f
lefwLayerRoutingPitchXYDistance	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingPitchXYDistance (double  xDistance, double  yDistance) {$/;"	f
lefwLayerRoutingPitchXYDistance	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingPitchXYDistance(double  xDistance,$/;"	f
lefwLayerRoutingProtrusion	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingProtrusion (double  width1, double  length, double  width2) {$/;"	f
lefwLayerRoutingProtrusion	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingProtrusion(double   width1,$/;"	f
lefwLayerRoutingResistance	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingResistance (const char*  resistance) {$/;"	f
lefwLayerRoutingResistance	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingResistance(const char *resistance)$/;"	f
lefwLayerRoutingShrinkage	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingShrinkage (double  shrinkage) {$/;"	f
lefwLayerRoutingShrinkage	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingShrinkage(double shrinkage)$/;"	f
lefwLayerRoutingSpacing	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacing (double  spacing) {$/;"	f
lefwLayerRoutingSpacing	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacing(double spacing)$/;"	f
lefwLayerRoutingSpacingEOLParallel	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingEOLParallel (double  parSpace, double  parWithin, int  twoEdges) {$/;"	f
lefwLayerRoutingSpacingEOLParallel	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingEOLParallel(double   parSpace,$/;"	f
lefwLayerRoutingSpacingEndOfLine	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingEndOfLine (double  eolWidth, double  eolWithin) {$/;"	f
lefwLayerRoutingSpacingEndOfLine	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingEndOfLine(double eolWidth,$/;"	f
lefwLayerRoutingSpacingEndOfNotchWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingEndOfNotchWidth (double  eonWidth, double  minNSpacing, double  minNLength) {$/;"	f
lefwLayerRoutingSpacingEndOfNotchWidth	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingEndOfNotchWidth(double   eonWidth,$/;"	f
lefwLayerRoutingSpacingInfluenceWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingInfluenceWidth (double  width, double  distance, double  spacing) {$/;"	f
lefwLayerRoutingSpacingInfluenceWidth	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingInfluenceWidth(double    width,$/;"	f
lefwLayerRoutingSpacingLengthThreshold	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingLengthThreshold (double  lengthValue, double  minWidth, double  maxWidth) {$/;"	f
lefwLayerRoutingSpacingLengthThreshold	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingLengthThreshold(double   lengthValue,$/;"	f
lefwLayerRoutingSpacingNotchLength	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingNotchLength (double  minNLength) {$/;"	f
lefwLayerRoutingSpacingNotchLength	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingNotchLength(double minNLength)$/;"	f
lefwLayerRoutingSpacingRange	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingRange (double  minWidth, double  maxWidth) {$/;"	f
lefwLayerRoutingSpacingRange	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingRange(double leftRange,$/;"	f
lefwLayerRoutingSpacingRangeInfluence	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingRangeInfluence (double  infValue, double  subMinWidth, double  subMaxWidth) {$/;"	f
lefwLayerRoutingSpacingRangeInfluence	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingRangeInfluence(double    infValue,$/;"	f
lefwLayerRoutingSpacingRangeRange	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingRangeRange (double  minWidth, double  maxWidth) {$/;"	f
lefwLayerRoutingSpacingRangeRange	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingRangeRange(double    minWidth,$/;"	f
lefwLayerRoutingSpacingRangeUseLengthThreshold	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingRangeUseLengthThreshold () {$/;"	f
lefwLayerRoutingSpacingRangeUseLengthThreshold	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingRangeUseLengthThreshold()$/;"	f
lefwLayerRoutingSpacingSameNet	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingSameNet (int  PGOnly) {$/;"	f
lefwLayerRoutingSpacingSameNet	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingSameNet(int PGOnly)$/;"	f
lefwLayerRoutingSpacingtableParallelWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingtableParallelWidth (double  width, int  numSpacing, double*  spacing) {$/;"	f
lefwLayerRoutingSpacingtableParallelWidth	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingtableParallelWidth(double    width,$/;"	f
lefwLayerRoutingSpacingtableTwoWidthsWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingtableTwoWidthsWidth (double  width, double  runLength, int  numSpacing, double*  spacing) {$/;"	f
lefwLayerRoutingSpacingtableTwoWidthsWidth	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingtableTwoWidthsWidth(double   width,$/;"	f
lefwLayerRoutingStartSpacingtableInfluence	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingStartSpacingtableInfluence () {$/;"	f
lefwLayerRoutingStartSpacingtableInfluence	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingStartSpacingtableInfluence()$/;"	f
lefwLayerRoutingStartSpacingtableParallel	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingStartSpacingtableParallel (int  numLength, double*  length) {$/;"	f
lefwLayerRoutingStartSpacingtableParallel	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingStartSpacingtableParallel(int       numLength,$/;"	f
lefwLayerRoutingStartSpacingtableTwoWidths	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingStartSpacingtableTwoWidths () {$/;"	f
lefwLayerRoutingStartSpacingtableTwoWidths	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingStartSpacingtableTwoWidths()$/;"	f
lefwLayerRoutingThickness	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingThickness (double  thickness) {$/;"	f
lefwLayerRoutingThickness	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingThickness(double thickness)$/;"	f
lefwLayerRoutingWireExtension	lef/clef/xlefwWriter.cpp	/^int lefwLayerRoutingWireExtension (double  wireExtension) {$/;"	f
lefwLayerRoutingWireExtension	lef/lef/lefwWriter.cpp	/^lefwLayerRoutingWireExtension(double wireExtension)$/;"	f
lefwLayerWidth	lef/clef/xlefwWriter.cpp	/^int lefwLayerWidth (double  minWidth) {$/;"	f
lefwLayerWidth	lef/lef/lefwWriter.cpp	/^lefwLayerWidth(double minWidth)$/;"	f
lefwLineItemCounter	lef/lef/lefwWriter.cpp	/^int lefwLineItemCounter = 0; \/\/ number of items on current line$/;"	v
lefwLines	lef/lef/lefwWriter.cpp	/^int lefwLines = 0;    \/\/ number of lines written$/;"	v
lefwMacroCbk	lef/lef/lefwWriterCalls.cpp	74;"	d	file:
lefwMacroCbkType	lef/clef/lefwWriterCalls.h	/^  lefwMacroCbkType = 27,$/;"	e	enum:__anon12
lefwMacroCbkType	lef/include/lefwWriterCalls.h	/^  lefwMacroCbkType = 27,$/;"	e	enum:__anon8
lefwMacroCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwMacroCbkType,$/;"	e	enum:__anon10
lefwMacroCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwMacroCbkType,$/;"	e	enum:__anon4
lefwMacroClass	lef/clef/xlefwWriter.cpp	/^int lefwMacroClass (const char*  value1, const char*  value2) {$/;"	f
lefwMacroClass	lef/lef/lefwWriter.cpp	/^lefwMacroClass(const char   *value1,$/;"	f
lefwMacroDensityLayerRect	lef/clef/xlefwWriter.cpp	/^int lefwMacroDensityLayerRect (double  x1, double  y1, double  x2, double  y2, double  densityValue) {$/;"	f
lefwMacroDensityLayerRect	lef/lef/lefwWriter.cpp	/^lefwMacroDensityLayerRect(double    x1,$/;"	f
lefwMacroEEQ	lef/clef/xlefwWriter.cpp	/^int lefwMacroEEQ (const char*  macroName) {$/;"	f
lefwMacroEEQ	lef/lef/lefwWriter.cpp	/^lefwMacroEEQ(const char *macroName)$/;"	f
lefwMacroExceptPGNet	lef/clef/xlefwWriter.cpp	/^int lefwMacroExceptPGNet (const char*  layerName) {$/;"	f
lefwMacroExceptPGNet	lef/lef/lefwWriter.cpp	/^lefwMacroExceptPGNet(const char *layerName)$/;"	f
lefwMacroFixedMask	lef/clef/xlefwWriter.cpp	/^int lefwMacroFixedMask () {$/;"	f
lefwMacroFixedMask	lef/lef/lefwWriter.cpp	/^lefwMacroFixedMask()$/;"	f
lefwMacroForeign	lef/clef/xlefwWriter.cpp	/^int lefwMacroForeign (const char*  name, double  xl, double  yl, int  orient) {$/;"	f
lefwMacroForeign	lef/lef/lefwWriter.cpp	/^lefwMacroForeign(const char *name,$/;"	f
lefwMacroForeignStr	lef/clef/xlefwWriter.cpp	/^int lefwMacroForeignStr (const char*  name, double  xl, double  yl, const char * orient) {$/;"	f
lefwMacroForeignStr	lef/lef/lefwWriter.cpp	/^lefwMacroForeignStr(const char  *name,$/;"	f
lefwMacroLEQ	lef/clef/xlefwWriter.cpp	/^int lefwMacroLEQ (const char*  macroName) {$/;"	f
lefwMacroLEQ	lef/lef/lefwWriter.cpp	/^lefwMacroLEQ(const char *macroName)$/;"	f
lefwMacroObsDesignRuleWidth	lef/clef/xlefwWriter.cpp	/^int lefwMacroObsDesignRuleWidth (const char*  layerName, double  width) {$/;"	f
lefwMacroObsDesignRuleWidth	lef/lef/lefwWriter.cpp	/^lefwMacroObsDesignRuleWidth(const char  *layerName,$/;"	f
lefwMacroObsLayer	lef/clef/xlefwWriter.cpp	/^int lefwMacroObsLayer (const char*  layerName, double  spacing) {$/;"	f
lefwMacroObsLayer	lef/lef/lefwWriter.cpp	/^lefwMacroObsLayer(const char    *layerName,$/;"	f
lefwMacroObsLayerPath	lef/clef/xlefwWriter.cpp	/^int lefwMacroObsLayerPath (int  num_paths, double*  xl, double*  yl, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroObsLayerPath	lef/lef/lefwWriter.cpp	/^lefwMacroObsLayerPath(int       num_paths,$/;"	f
lefwMacroObsLayerPolygon	lef/clef/xlefwWriter.cpp	/^int lefwMacroObsLayerPolygon (int  num_polys, double*  xl, double*  yl, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroObsLayerPolygon	lef/lef/lefwWriter.cpp	/^lefwMacroObsLayerPolygon(int    num_polys,$/;"	f
lefwMacroObsLayerRect	lef/clef/xlefwWriter.cpp	/^int lefwMacroObsLayerRect (double  xl1, double  yl1, double  xl2, double  yl2, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroObsLayerRect	lef/lef/lefwWriter.cpp	/^lefwMacroObsLayerRect(double    xl1,$/;"	f
lefwMacroObsLayerWidth	lef/clef/xlefwWriter.cpp	/^int lefwMacroObsLayerWidth (double  width) {$/;"	f
lefwMacroObsLayerWidth	lef/lef/lefwWriter.cpp	/^lefwMacroObsLayerWidth(double width)$/;"	f
lefwMacroObsVia	lef/clef/xlefwWriter.cpp	/^int lefwMacroObsVia (double  xl, double  yl, const char*  viaName, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroObsVia	lef/lef/lefwWriter.cpp	/^lefwMacroObsVia(double      xl,$/;"	f
lefwMacroOrigin	lef/clef/xlefwWriter.cpp	/^int lefwMacroOrigin (double  xl, double  yl) {$/;"	f
lefwMacroOrigin	lef/lef/lefwWriter.cpp	/^lefwMacroOrigin(double  xl,$/;"	f
lefwMacroPinAntennaDiffArea	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaDiffArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaDiffArea	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaDiffArea(double      value,$/;"	f
lefwMacroPinAntennaGateArea	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaGateArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaGateArea	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaGateArea(double      value,$/;"	f
lefwMacroPinAntennaMaxAreaCar	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMaxAreaCar (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMaxAreaCar	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaMaxAreaCar(double        value,$/;"	f
lefwMacroPinAntennaMaxCutCar	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMaxCutCar (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMaxCutCar	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaMaxCutCar(double     value,$/;"	f
lefwMacroPinAntennaMaxSideAreaCar	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMaxSideAreaCar (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMaxSideAreaCar	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaMaxSideAreaCar(double        value,$/;"	f
lefwMacroPinAntennaMetalArea	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMetalArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMetalArea	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaMetalArea(double     value,$/;"	f
lefwMacroPinAntennaMetalLength	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMetalLength (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMetalLength	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaMetalLength(double       value,$/;"	f
lefwMacroPinAntennaModel	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaModel (const char*  oxide) {$/;"	f
lefwMacroPinAntennaModel	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaModel(const char *oxide)$/;"	f
lefwMacroPinAntennaPartialCutArea	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaPartialCutArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaPartialCutArea	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaPartialCutArea(double        value,$/;"	f
lefwMacroPinAntennaPartialMetalArea	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaPartialMetalArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaPartialMetalArea	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaPartialMetalArea(double      value,$/;"	f
lefwMacroPinAntennaPartialMetalSideArea	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaPartialMetalSideArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaPartialMetalSideArea	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennaPartialMetalSideArea(double      value,$/;"	f
lefwMacroPinAntennasize	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinAntennasize (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennasize	lef/lef/lefwWriter.cpp	/^lefwMacroPinAntennasize(double      value,$/;"	f
lefwMacroPinCapacitance	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinCapacitance (double  capacitance) {$/;"	f
lefwMacroPinCapacitance	lef/lef/lefwWriter.cpp	/^lefwMacroPinCapacitance(double capacitance)$/;"	f
lefwMacroPinCurrentsource	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinCurrentsource (const char*  name) {$/;"	f
lefwMacroPinCurrentsource	lef/lef/lefwWriter.cpp	/^lefwMacroPinCurrentsource(const char *name)$/;"	f
lefwMacroPinDirection	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinDirection (const char*  direction) {$/;"	f
lefwMacroPinDirection	lef/lef/lefwWriter.cpp	/^lefwMacroPinDirection(const char *direction)$/;"	f
lefwMacroPinFallsatcur	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinFallsatcur (double  current) {$/;"	f
lefwMacroPinFallsatcur	lef/lef/lefwWriter.cpp	/^lefwMacroPinFallsatcur(double current)$/;"	f
lefwMacroPinFallthresh	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinFallthresh (double  capacitance) {$/;"	f
lefwMacroPinFallthresh	lef/lef/lefwWriter.cpp	/^lefwMacroPinFallthresh(double capacitance)$/;"	f
lefwMacroPinFallvoltagethreshold	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinFallvoltagethreshold (double  voltage) {$/;"	f
lefwMacroPinFallvoltagethreshold	lef/lef/lefwWriter.cpp	/^lefwMacroPinFallvoltagethreshold(double voltage)$/;"	f
lefwMacroPinForeign	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinForeign (const char*  name, double  xl, double  yl, int  orient) {$/;"	f
lefwMacroPinForeign	lef/lef/lefwWriter.cpp	/^lefwMacroPinForeign(const char  *name,$/;"	f
lefwMacroPinForeignStr	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinForeignStr (const char*  name, double  xl, double  yl, const char*  orient) {$/;"	f
lefwMacroPinForeignStr	lef/lef/lefwWriter.cpp	/^lefwMacroPinForeignStr(const char   *name,$/;"	f
lefwMacroPinGroundSensitivity	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinGroundSensitivity (const char*  pinName) {$/;"	f
lefwMacroPinGroundSensitivity	lef/lef/lefwWriter.cpp	/^lefwMacroPinGroundSensitivity(const char *pinName)$/;"	f
lefwMacroPinIV_Tables	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinIV_Tables (const char*  lowName, const char*  highName) {$/;"	f
lefwMacroPinIV_Tables	lef/lef/lefwWriter.cpp	/^lefwMacroPinIV_Tables(const char    *lowName,$/;"	f
lefwMacroPinInputnoisemargin	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinInputnoisemargin (int  high, int  low) {$/;"	f
lefwMacroPinInputnoisemargin	lef/lef/lefwWriter.cpp	/^lefwMacroPinInputnoisemargin(int    high,$/;"	f
lefwMacroPinLEQ	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinLEQ (const char*  pinName) {$/;"	f
lefwMacroPinLEQ	lef/lef/lefwWriter.cpp	/^lefwMacroPinLEQ(const char *pinName)$/;"	f
lefwMacroPinLeakage	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinLeakage (double  leakage) {$/;"	f
lefwMacroPinLeakage	lef/lef/lefwWriter.cpp	/^lefwMacroPinLeakage(double leakage)$/;"	f
lefwMacroPinMustjoin	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinMustjoin (const char*  name) {$/;"	f
lefwMacroPinMustjoin	lef/lef/lefwWriter.cpp	/^lefwMacroPinMustjoin(const char *name)$/;"	f
lefwMacroPinNetExpr	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinNetExpr (const char*  name) {$/;"	f
lefwMacroPinNetExpr	lef/lef/lefwWriter.cpp	/^lefwMacroPinNetExpr(const char *name)$/;"	f
lefwMacroPinOutputnoisemargin	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinOutputnoisemargin (int  high, int  low) {$/;"	f
lefwMacroPinOutputnoisemargin	lef/lef/lefwWriter.cpp	/^lefwMacroPinOutputnoisemargin(int   high,$/;"	f
lefwMacroPinOutputresistance	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinOutputresistance (int  high, int  low) {$/;"	f
lefwMacroPinOutputresistance	lef/lef/lefwWriter.cpp	/^lefwMacroPinOutputresistance(int    high,$/;"	f
lefwMacroPinPortDesignRuleWidth	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPortDesignRuleWidth (const char*  layerName, double  width) {$/;"	f
lefwMacroPinPortDesignRuleWidth	lef/lef/lefwWriter.cpp	/^lefwMacroPinPortDesignRuleWidth(const char  *layerName,$/;"	f
lefwMacroPinPortLayer	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayer (const char*  layerName, double  spacing) {$/;"	f
lefwMacroPinPortLayer	lef/lef/lefwWriter.cpp	/^lefwMacroPinPortLayer(const char    *layerName,$/;"	f
lefwMacroPinPortLayerPath	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayerPath (int  num_paths, double*  xl, double*  yl, int  numX, int  numY, double  spaceX, double  spaceY, int     mask) {$/;"	f
lefwMacroPinPortLayerPath	lef/lef/lefwWriter.cpp	/^lefwMacroPinPortLayerPath(int       num_paths,$/;"	f
lefwMacroPinPortLayerPolygon	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayerPolygon (int  num_polys, double*  xl, double*  yl, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroPinPortLayerPolygon	lef/lef/lefwWriter.cpp	/^lefwMacroPinPortLayerPolygon(int    num_polys,$/;"	f
lefwMacroPinPortLayerRect	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayerRect (double  xl1, double  yl1, double  xl2, double  yl2, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroPinPortLayerRect	lef/lef/lefwWriter.cpp	/^lefwMacroPinPortLayerRect(double    xl1,$/;"	f
lefwMacroPinPortLayerWidth	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayerWidth (double  width) {$/;"	f
lefwMacroPinPortLayerWidth	lef/lef/lefwWriter.cpp	/^lefwMacroPinPortLayerWidth(double width)$/;"	f
lefwMacroPinPortVia	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPortVia (double  xl, double  yl, const char*  viaName, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroPinPortVia	lef/lef/lefwWriter.cpp	/^lefwMacroPinPortVia(double      xl,$/;"	f
lefwMacroPinPower	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPower (double  power) {$/;"	f
lefwMacroPinPower	lef/lef/lefwWriter.cpp	/^lefwMacroPinPower(double power)$/;"	f
lefwMacroPinPulldownres	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinPulldownres (double  resistance) {$/;"	f
lefwMacroPinPulldownres	lef/lef/lefwWriter.cpp	/^lefwMacroPinPulldownres(double resistance)$/;"	f
lefwMacroPinResistance	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinResistance (double  resistance) {$/;"	f
lefwMacroPinResistance	lef/lef/lefwWriter.cpp	/^lefwMacroPinResistance(double resistance)$/;"	f
lefwMacroPinRisesatcur	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinRisesatcur (double  current) {$/;"	f
lefwMacroPinRisesatcur	lef/lef/lefwWriter.cpp	/^lefwMacroPinRisesatcur(double current)$/;"	f
lefwMacroPinRisethresh	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinRisethresh (double  capacitance) {$/;"	f
lefwMacroPinRisethresh	lef/lef/lefwWriter.cpp	/^lefwMacroPinRisethresh(double capacitance)$/;"	f
lefwMacroPinRisevoltagethreshold	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinRisevoltagethreshold (double  voltage) {$/;"	f
lefwMacroPinRisevoltagethreshold	lef/lef/lefwWriter.cpp	/^lefwMacroPinRisevoltagethreshold(double voltage)$/;"	f
lefwMacroPinShape	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinShape (const char*  name) {$/;"	f
lefwMacroPinShape	lef/lef/lefwWriter.cpp	/^lefwMacroPinShape(const char *name)$/;"	f
lefwMacroPinSupplySensitivity	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinSupplySensitivity (const char*  pinName) {$/;"	f
lefwMacroPinSupplySensitivity	lef/lef/lefwWriter.cpp	/^lefwMacroPinSupplySensitivity(const char *pinName)$/;"	f
lefwMacroPinTaperRule	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinTaperRule (const char*  ruleName) {$/;"	f
lefwMacroPinTaperRule	lef/lef/lefwWriter.cpp	/^lefwMacroPinTaperRule(const char *ruleName)$/;"	f
lefwMacroPinTieoffr	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinTieoffr (double  resistance) {$/;"	f
lefwMacroPinTieoffr	lef/lef/lefwWriter.cpp	/^lefwMacroPinTieoffr(double resistance)$/;"	f
lefwMacroPinUse	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinUse (const char*  use) {$/;"	f
lefwMacroPinUse	lef/lef/lefwWriter.cpp	/^lefwMacroPinUse(const char *use)$/;"	f
lefwMacroPinVHI	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinVHI (double  voltage) {$/;"	f
lefwMacroPinVHI	lef/lef/lefwWriter.cpp	/^lefwMacroPinVHI(double voltage)$/;"	f
lefwMacroPinVLO	lef/clef/xlefwWriter.cpp	/^int lefwMacroPinVLO (double  voltage) {$/;"	f
lefwMacroPinVLO	lef/lef/lefwWriter.cpp	/^lefwMacroPinVLO(double voltage)$/;"	f
lefwMacroPower	lef/clef/xlefwWriter.cpp	/^int lefwMacroPower (double  power) {$/;"	f
lefwMacroPower	lef/lef/lefwWriter.cpp	/^lefwMacroPower(double power)$/;"	f
lefwMacroSite	lef/clef/xlefwWriter.cpp	/^int lefwMacroSite (const char*  siteName) {$/;"	f
lefwMacroSite	lef/lef/lefwWriter.cpp	/^lefwMacroSite(const char *siteName)$/;"	f
lefwMacroSitePattern	lef/clef/xlefwWriter.cpp	/^int lefwMacroSitePattern (const char*  name, double  origX, double  origY, int  orient, int  numX, int  numY, double  spaceX, double  spaceY) {$/;"	f
lefwMacroSitePattern	lef/lef/lefwWriter.cpp	/^lefwMacroSitePattern(const char *name,$/;"	f
lefwMacroSitePatternStr	lef/clef/xlefwWriter.cpp	/^int lefwMacroSitePatternStr (const char*  name, double  origX, double  origY, const char * orient, int  numX, int  numY, double  spaceX, double  spaceY) {$/;"	f
lefwMacroSitePatternStr	lef/lef/lefwWriter.cpp	/^lefwMacroSitePatternStr(const char  *name,$/;"	f
lefwMacroSize	lef/clef/xlefwWriter.cpp	/^int lefwMacroSize (double  width, double  height) {$/;"	f
lefwMacroSize	lef/lef/lefwWriter.cpp	/^lefwMacroSize(double    width,$/;"	f
lefwMacroSource	lef/clef/xlefwWriter.cpp	/^int lefwMacroSource (const char*  value1) {$/;"	f
lefwMacroSource	lef/lef/lefwWriter.cpp	/^lefwMacroSource(const char *value1)$/;"	f
lefwMacroSymmetry	lef/clef/xlefwWriter.cpp	/^int lefwMacroSymmetry (const char*  symmetry) {$/;"	f
lefwMacroSymmetry	lef/lef/lefwWriter.cpp	/^lefwMacroSymmetry(const char *symmetry)$/;"	f
lefwMacroTimingFallcs	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingFallcs (double  min, double  max) {$/;"	f
lefwMacroTimingFallcs	lef/lef/lefwWriter.cpp	/^lefwMacroTimingFallcs(double    min,$/;"	f
lefwMacroTimingFallrs	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingFallrs (double  min, double  max) {$/;"	f
lefwMacroTimingFallrs	lef/lef/lefwWriter.cpp	/^lefwMacroTimingFallrs(double    min,$/;"	f
lefwMacroTimingFallsatt1	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingFallsatt1 (double  min, double  max) {$/;"	f
lefwMacroTimingFallsatt1	lef/lef/lefwWriter.cpp	/^lefwMacroTimingFallsatt1(double min,$/;"	f
lefwMacroTimingFallt0	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingFallt0 (double  min, double  max) {$/;"	f
lefwMacroTimingFallt0	lef/lef/lefwWriter.cpp	/^lefwMacroTimingFallt0(double    min,$/;"	f
lefwMacroTimingIntrinsic	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingIntrinsic (const char*  riseFall, double  min, double  max, double  slewT1, double  slewT1Min, double  slewT1Max, double  slewT2, double  slewT2Min, double  slewT2Max, double  slewT3, double  varMin, double  varMax) {$/;"	f
lefwMacroTimingIntrinsic	lef/lef/lefwWriter.cpp	/^lefwMacroTimingIntrinsic(const char *riseFall,$/;"	f
lefwMacroTimingPin	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingPin (const char*  fromPin, const char*  toPin) {$/;"	f
lefwMacroTimingPin	lef/lef/lefwWriter.cpp	/^lefwMacroTimingPin(const char   *fromPin,$/;"	f
lefwMacroTimingRisecs	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingRisecs (double  min, double  max) {$/;"	f
lefwMacroTimingRisecs	lef/lef/lefwWriter.cpp	/^lefwMacroTimingRisecs(double    min,$/;"	f
lefwMacroTimingRisers	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingRisers (double  min, double  max) {$/;"	f
lefwMacroTimingRisers	lef/lef/lefwWriter.cpp	/^lefwMacroTimingRisers(double    min,$/;"	f
lefwMacroTimingRisesatt1	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingRisesatt1 (double  min, double  max) {$/;"	f
lefwMacroTimingRisesatt1	lef/lef/lefwWriter.cpp	/^lefwMacroTimingRisesatt1(double min,$/;"	f
lefwMacroTimingRiset0	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingRiset0 (double  min, double  max) {$/;"	f
lefwMacroTimingRiset0	lef/lef/lefwWriter.cpp	/^lefwMacroTimingRiset0(double    min,$/;"	f
lefwMacroTimingUnateness	lef/clef/xlefwWriter.cpp	/^int lefwMacroTimingUnateness (const char*  unateness) {$/;"	f
lefwMacroTimingUnateness	lef/lef/lefwWriter.cpp	/^lefwMacroTimingUnateness(const char *unateness)$/;"	f
lefwManufacturingGrid	lef/clef/xlefwWriter.cpp	/^int lefwManufacturingGrid (double  grid) {$/;"	f
lefwManufacturingGrid	lef/lef/lefwWriter.cpp	/^lefwManufacturingGrid(double grid)$/;"	f
lefwManufacturingGridCbk	lef/lef/lefwWriterCalls.cpp	53;"	d	file:
lefwManufacturingGridCbkType	lef/clef/lefwWriterCalls.h	/^  lefwManufacturingGridCbkType = 6,$/;"	e	enum:__anon12
lefwManufacturingGridCbkType	lef/include/lefwWriterCalls.h	/^  lefwManufacturingGridCbkType = 6,$/;"	e	enum:__anon8
lefwManufacturingGridCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwManufacturingGridCbkType,$/;"	e	enum:__anon10
lefwManufacturingGridCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwManufacturingGridCbkType,$/;"	e	enum:__anon4
lefwMaximumDensity	lef/clef/xlefwWriter.cpp	/^int lefwMaximumDensity (double  maxDensity) {$/;"	f
lefwMaximumDensity	lef/lef/lefwWriter.cpp	/^lefwMaximumDensity(double maxDensity)$/;"	f
lefwMaxviastack	lef/clef/xlefwWriter.cpp	/^int lefwMaxviastack (int  value, const char*  bottomLayer, const char*  topLayer) {$/;"	f
lefwMaxviastack	lef/lef/lefwWriter.cpp	/^lefwMaxviastack(int         value,$/;"	f
lefwMinFeature	lef/clef/xlefwWriter.cpp	/^int lefwMinFeature (double  x, double  y) {$/;"	f
lefwMinFeature	lef/lef/lefwWriter.cpp	/^lefwMinFeature(double   x,$/;"	f
lefwMinFeatureCbk	lef/lef/lefwWriterCalls.cpp	69;"	d	file:
lefwMinFeatureCbkType	lef/clef/lefwWriterCalls.h	/^  lefwMinFeatureCbkType = 22,$/;"	e	enum:__anon12
lefwMinFeatureCbkType	lef/include/lefwWriterCalls.h	/^  lefwMinFeatureCbkType = 22,$/;"	e	enum:__anon8
lefwMinFeatureCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwMinFeatureCbkType,$/;"	e	enum:__anon10
lefwMinFeatureCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwMinFeatureCbkType,$/;"	e	enum:__anon4
lefwMinfeature	lef/clef/xlefwWriter.cpp	/^int lefwMinfeature (double  minFeatureX, double  minFeatureY) {$/;"	f
lefwMinfeature	lef/lef/lefwWriter.cpp	/^lefwMinfeature(double   minFeatureX,$/;"	f
lefwMinimumDensity	lef/clef/xlefwWriter.cpp	/^int lefwMinimumDensity (double  minDensity) {$/;"	f
lefwMinimumDensity	lef/lef/lefwWriter.cpp	/^lefwMinimumDensity(double minDensity)$/;"	f
lefwNewLine	lef/clef/xlefwWriter.cpp	/^int lefwNewLine () {$/;"	f
lefwNewLine	lef/lef/lefwWriter.cpp	/^lefwNewLine()$/;"	f
lefwNoWireExtensionAtPin	lef/clef/xlefwWriter.cpp	/^int lefwNoWireExtensionAtPin (const char*  noWireExt) {$/;"	f
lefwNoWireExtensionAtPin	lef/lef/lefwWriter.cpp	/^lefwNoWireExtensionAtPin(const char *noWireExt)$/;"	f
lefwNoWireExtensionCbk	lef/lef/lefwWriterCalls.cpp	50;"	d	file:
lefwNoWireExtensionCbkType	lef/clef/lefwWriterCalls.h	/^  lefwNoWireExtensionCbkType = 3,$/;"	e	enum:__anon12
lefwNoWireExtensionCbkType	lef/include/lefwWriterCalls.h	/^  lefwNoWireExtensionCbkType = 3,$/;"	e	enum:__anon8
lefwNoWireExtensionCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwNoWireExtensionCbkType,$/;"	e	enum:__anon10
lefwNoWireExtensionCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwNoWireExtensionCbkType,$/;"	e	enum:__anon4
lefwNoiseTableCbk	lef/lef/lefwWriterCalls.cpp	66;"	d	file:
lefwNoiseTableCbkType	lef/clef/lefwWriterCalls.h	/^  lefwNoiseTableCbkType = 19,$/;"	e	enum:__anon12
lefwNoiseTableCbkType	lef/include/lefwWriterCalls.h	/^  lefwNoiseTableCbkType = 19,$/;"	e	enum:__anon8
lefwNoiseTableCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwNoiseTableCbkType,$/;"	e	enum:__anon10
lefwNoiseTableCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwNoiseTableCbkType,$/;"	e	enum:__anon4
lefwNonDefaultCbk	lef/lef/lefwWriterCalls.cpp	64;"	d	file:
lefwNonDefaultCbkType	lef/clef/lefwWriterCalls.h	/^  lefwNonDefaultCbkType = 17,$/;"	e	enum:__anon12
lefwNonDefaultCbkType	lef/include/lefwWriterCalls.h	/^  lefwNonDefaultCbkType = 17,$/;"	e	enum:__anon8
lefwNonDefaultCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwNonDefaultCbkType,$/;"	e	enum:__anon10
lefwNonDefaultCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwNonDefaultCbkType,$/;"	e	enum:__anon4
lefwNonDefaultRuleEndVia	lef/clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleEndVia (const char*  viaName) {$/;"	f
lefwNonDefaultRuleEndVia	lef/lef/lefwWriter.cpp	/^lefwNonDefaultRuleEndVia(const char *viaName)$/;"	f
lefwNonDefaultRuleHardspacing	lef/clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleHardspacing () {$/;"	f
lefwNonDefaultRuleHardspacing	lef/lef/lefwWriter.cpp	/^lefwNonDefaultRuleHardspacing()$/;"	f
lefwNonDefaultRuleLayer	lef/clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleLayer (const char*  routingLayerName, double  width, double  minSpacing, double  wireExtension, double  resistance, double  capacitance, double  edgeCap) {$/;"	f
lefwNonDefaultRuleLayer	lef/lef/lefwWriter.cpp	/^lefwNonDefaultRuleLayer(const char  *routingLayerName,$/;"	f
lefwNonDefaultRuleMinCuts	lef/clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleMinCuts (const char*  layerName, int  numCuts) {$/;"	f
lefwNonDefaultRuleMinCuts	lef/lef/lefwWriter.cpp	/^lefwNonDefaultRuleMinCuts(const char    *layerName,$/;"	f
lefwNonDefaultRuleStartVia	lef/clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleStartVia (const char*  viaName, const char*  isDefault) {$/;"	f
lefwNonDefaultRuleStartVia	lef/lef/lefwWriter.cpp	/^lefwNonDefaultRuleStartVia(const char   *viaName,$/;"	f
lefwNonDefaultRuleUseVia	lef/clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleUseVia (const char*  viaName) {$/;"	f
lefwNonDefaultRuleUseVia	lef/lef/lefwWriter.cpp	/^lefwNonDefaultRuleUseVia(const char *viaName)$/;"	f
lefwNonDefaultRuleUseViaRule	lef/clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleUseViaRule (const char*  viaRuleName) {$/;"	f
lefwNonDefaultRuleUseViaRule	lef/lef/lefwWriter.cpp	/^lefwNonDefaultRuleUseViaRule(const char *viaRuleName)$/;"	f
lefwNumViaRuleLayers	lef/lef/lefwWriter.cpp	/^int lefwNumViaRuleLayers = 0; \/\/ number of via rule in a via rule$/;"	v
lefwObsoleteNum	lef/lef/lefwWriter.cpp	/^static int lefwObsoleteNum = -1; \/\/ keep track the obsolote syntax for error$/;"	v	file:
lefwOldState	lef/lef/lefwWriter.cpp	/^int lefwOldState = 0;  \/\/ the previous state$/;"	v
lefwOrient	lef/lef/lefwWriter.cpp	/^lefwOrient(int num)$/;"	f
lefwOutputResistance	lef/clef/xlefwWriter.cpp	/^int lefwOutputResistance (int  numResists, double*  resistance) {$/;"	f
lefwOutputResistance	lef/lef/lefwWriter.cpp	/^lefwOutputResistance(int    numResists,$/;"	f
lefwPrintError	lef/clef/xlefwWriter.cpp	/^void lefwPrintError (int  status) {$/;"	f
lefwPrintError	lef/lef/lefwWriter.cpp	/^lefwPrintError(int status)$/;"	f
lefwPrintUnusedCallbacks	lef/clef/xlefwWriterCalls.cpp	/^void lefwPrintUnusedCallbacks (FILE*  f) {$/;"	f
lefwPrintUnusedCallbacks	lef/lef/lefwWriterCalls.cpp	/^lefwPrintUnusedCallbacks(FILE *f)$/;"	f
lefwPropDefCbk	lef/lef/lefwWriterCalls.cpp	60;"	d	file:
lefwPropDefCbkType	lef/clef/lefwWriterCalls.h	/^  lefwPropDefCbkType = 13,$/;"	e	enum:__anon12
lefwPropDefCbkType	lef/include/lefwWriterCalls.h	/^  lefwPropDefCbkType = 13,$/;"	e	enum:__anon8
lefwPropDefCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwPropDefCbkType,$/;"	e	enum:__anon10
lefwPropDefCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwPropDefCbkType,$/;"	e	enum:__anon4
lefwRealPropDef	lef/clef/xlefwWriter.cpp	/^int lefwRealPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, double  propValue) {$/;"	f
lefwRealPropDef	lef/lef/lefwWriter.cpp	/^lefwRealPropDef(const char  *objType,$/;"	f
lefwRealProperty	lef/clef/xlefwWriter.cpp	/^int lefwRealProperty (const char*  propName, double  propValue) {$/;"	f
lefwRealProperty	lef/lef/lefwWriter.cpp	/^lefwRealProperty(const char *propName,$/;"	f
lefwRegisterUnused	lef/lef/lefwWriterCalls.cpp	/^static int lefwRegisterUnused = 0;$/;"	v	file:
lefwSectionNames	lef/lef/lefwWriterCalls.cpp	/^char lefwSectionNames[MAXCBS] [80] = {$/;"	v
lefwSetAntennaCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetAntennaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetAntennaCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetAntennaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetAntennaInOutDiffAreaCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetAntennaInOutDiffAreaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetAntennaInputGateAreaCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetAntennaInputGateAreaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetAntennaOutputDiffAreaCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetAntennaOutputDiffAreaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetArrayCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetArrayCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetArrayCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetArrayCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetBusBitCharsCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetBusBitCharsCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetBusBitCharsCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetBusBitCharsCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetCaseSensitiveCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetCaseSensitiveCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetCaseSensitiveCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetCaseSensitiveCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetClearanceMeasureCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetClearanceMeasureCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetClearanceMeasureCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetClearanceMeasureCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetCorrectionTableCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetCorrectionTableCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetCorrectionTableCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetCorrectionTableCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetCrossTalkCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetCrossTalkCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetCrossTalkCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetCrossTalkCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetDielectricCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetDielectricCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetDielectricCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetDielectricCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetDividerCharCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetDividerCharCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetDividerCharCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetDividerCharCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetEndLibCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetEndLibCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetEndLibCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetEndLibCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetExtCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetExtCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetExtCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetExtCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetIRDropCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetIRDropCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetIRDropCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetIRDropCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetLayerCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetLayerCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetLayerCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetLayerCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetLogFunction	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetLogFunction (::LEFI_LOG_FUNCTION  p0) {$/;"	f
lefwSetLogFunction	lef/lef/lefwWriterCalls.cpp	/^lefwSetLogFunction(LEFI_LOG_FUNCTION f)$/;"	f
lefwSetMacroCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetMacroCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetMacroCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetMacroCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetManufacturingGridCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetManufacturingGridCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetManufacturingGridCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetManufacturingGridCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetMinFeatureCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetMinFeatureCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetMinFeatureCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetMinFeatureCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetNoWireExtensionCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetNoWireExtensionCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetNoWireExtensionCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetNoWireExtensionCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetNoiseTableCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetNoiseTableCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetNoiseTableCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetNoiseTableCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetNonDefaultCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetNonDefaultCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetNonDefaultCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetNonDefaultCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetPropDefCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetPropDefCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetPropDefCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetPropDefCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetRegisterUnusedCallbacks	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetRegisterUnusedCallbacks () {$/;"	f
lefwSetRegisterUnusedCallbacks	lef/lef/lefwWriterCalls.cpp	/^lefwSetRegisterUnusedCallbacks()$/;"	f
lefwSetSiteCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetSiteCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetSiteCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetSiteCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetSpacingCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetSpacingCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetSpacingCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetSpacingCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetUnitsCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetUnitsCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetUnitsCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetUnitsCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetUnusedCallbacks	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetUnusedCallbacks (::lefwVoidCbkFnType  func) {$/;"	f
lefwSetUnusedCallbacks	lef/lef/lefwWriterCalls.cpp	/^lefwSetUnusedCallbacks(lefwVoidCbkFnType func)$/;"	f
lefwSetUseMinSpacingCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetUseMinSpacingCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetUseMinSpacingCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetUseMinSpacingCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetUserData	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetUserData (lefiUserData  p0) {$/;"	f
lefwSetUserData	lef/lef/lefwWriterCalls.cpp	/^lefwSetUserData(lefiUserData d)$/;"	f
lefwSetVersionCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetVersionCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetVersionCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetVersionCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetViaCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetViaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetViaCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetViaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetViaRuleCbk	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetViaRuleCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetViaRuleCbk	lef/lef/lefwWriterCalls.cpp	/^lefwSetViaRuleCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetWarningLogFunction	lef/clef/xlefwWriterCalls.cpp	/^void lefwSetWarningLogFunction (::LEFI_WARNING_LOG_FUNCTION  p0) {$/;"	f
lefwSetWarningLogFunction	lef/lef/lefwWriterCalls.cpp	/^lefwSetWarningLogFunction(LEFI_WARNING_LOG_FUNCTION f)$/;"	f
lefwSite	lef/clef/xlefwWriter.cpp	/^int lefwSite (const char*  siteName, const char*  classType, const char*  symmetry, double  width, double  height) {$/;"	f
lefwSite	lef/lef/lefwWriter.cpp	/^lefwSite(const char *siteName,$/;"	f
lefwSiteCbk	lef/lef/lefwWriterCalls.cpp	72;"	d	file:
lefwSiteCbkType	lef/clef/lefwWriterCalls.h	/^  lefwSiteCbkType = 25,$/;"	e	enum:__anon12
lefwSiteCbkType	lef/include/lefwWriterCalls.h	/^  lefwSiteCbkType = 25,$/;"	e	enum:__anon8
lefwSiteCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwSiteCbkType,$/;"	e	enum:__anon10
lefwSiteCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwSiteCbkType,$/;"	e	enum:__anon4
lefwSiteRowPattern	lef/clef/xlefwWriter.cpp	/^int lefwSiteRowPattern (const char*  siteName, int  orient) {$/;"	f
lefwSiteRowPattern	lef/lef/lefwWriter.cpp	/^lefwSiteRowPattern(const char   *siteName,$/;"	f
lefwSiteRowPatternStr	lef/clef/xlefwWriter.cpp	/^int lefwSiteRowPatternStr (const char*  siteName, const char * orient) {$/;"	f
lefwSiteRowPatternStr	lef/lef/lefwWriter.cpp	/^lefwSiteRowPatternStr(const char    *siteName,$/;"	f
lefwSpacing	lef/clef/xlefwWriter.cpp	/^int lefwSpacing (const char*  layerName1, const char*  layerName2, double  minSpace, const char*  stack) {$/;"	f
lefwSpacing	lef/lef/lefwWriter.cpp	/^lefwSpacing(const char  *layerName1,$/;"	f
lefwSpacingCbk	lef/lef/lefwWriterCalls.cpp	68;"	d	file:
lefwSpacingCbkType	lef/clef/lefwWriterCalls.h	/^  lefwSpacingCbkType = 21,$/;"	e	enum:__anon12
lefwSpacingCbkType	lef/include/lefwWriterCalls.h	/^  lefwSpacingCbkType = 21,$/;"	e	enum:__anon8
lefwSpacingCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwSpacingCbkType,$/;"	e	enum:__anon10
lefwSpacingCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwSpacingCbkType,$/;"	e	enum:__anon4
lefwSpacingVal	lef/lef/lefwWriter.cpp	/^static int lefwSpacingVal = 0; \/\/ either this or lefwWidthVal$/;"	v	file:
lefwStartArray	lef/clef/xlefwWriter.cpp	/^int lefwStartArray (const char*  arrayName) {$/;"	f
lefwStartArray	lef/lef/lefwWriter.cpp	/^lefwStartArray(const char *arrayName)$/;"	f
lefwStartArrayDefaultCap	lef/clef/xlefwWriter.cpp	/^int lefwStartArrayDefaultCap (int  size) {$/;"	f
lefwStartArrayDefaultCap	lef/lef/lefwWriter.cpp	/^lefwStartArrayDefaultCap(int size)$/;"	f
lefwStartArrayFloorplan	lef/clef/xlefwWriter.cpp	/^int lefwStartArrayFloorplan (const char*  name) {$/;"	f
lefwStartArrayFloorplan	lef/lef/lefwWriter.cpp	/^lefwStartArrayFloorplan(const char *name)$/;"	f
lefwStartBeginext	lef/clef/xlefwWriter.cpp	/^int lefwStartBeginext (const char*  name) {$/;"	f
lefwStartBeginext	lef/lef/lefwWriter.cpp	/^lefwStartBeginext(const char *name)$/;"	f
lefwStartCorrectTable	lef/clef/xlefwWriter.cpp	/^int lefwStartCorrectTable (int  num) {$/;"	f
lefwStartCorrectTable	lef/lef/lefwWriter.cpp	/^lefwStartCorrectTable(int num)$/;"	f
lefwStartIrdrop	lef/clef/xlefwWriter.cpp	/^int lefwStartIrdrop () {$/;"	f
lefwStartIrdrop	lef/lef/lefwWriter.cpp	/^lefwStartIrdrop()$/;"	f
lefwStartLayer	lef/clef/xlefwWriter.cpp	/^int lefwStartLayer (const char*  layerName, const char*  type) {$/;"	f
lefwStartLayer	lef/lef/lefwWriter.cpp	/^lefwStartLayer(const char   *layerName,$/;"	f
lefwStartLayerRouting	lef/clef/xlefwWriter.cpp	/^int lefwStartLayerRouting (const char*  layerName) {$/;"	f
lefwStartLayerRouting	lef/lef/lefwWriter.cpp	/^lefwStartLayerRouting(const char *layerName)$/;"	f
lefwStartMacro	lef/clef/xlefwWriter.cpp	/^int lefwStartMacro (const char*  macroName) {$/;"	f
lefwStartMacro	lef/lef/lefwWriter.cpp	/^lefwStartMacro(const char *macroName)$/;"	f
lefwStartMacroDensity	lef/clef/xlefwWriter.cpp	/^int lefwStartMacroDensity (const char*  layerName) {$/;"	f
lefwStartMacroDensity	lef/lef/lefwWriter.cpp	/^lefwStartMacroDensity(const char *layerName)$/;"	f
lefwStartMacroObs	lef/clef/xlefwWriter.cpp	/^int lefwStartMacroObs () {$/;"	f
lefwStartMacroObs	lef/lef/lefwWriter.cpp	/^lefwStartMacroObs()$/;"	f
lefwStartMacroPin	lef/clef/xlefwWriter.cpp	/^int lefwStartMacroPin (const char*  pinName) {$/;"	f
lefwStartMacroPin	lef/lef/lefwWriter.cpp	/^lefwStartMacroPin(const char *pinName)$/;"	f
lefwStartMacroPinPort	lef/clef/xlefwWriter.cpp	/^int lefwStartMacroPinPort (const char*  classType) {$/;"	f
lefwStartMacroPinPort	lef/lef/lefwWriter.cpp	/^lefwStartMacroPinPort(const char *classType)$/;"	f
lefwStartMacroTiming	lef/clef/xlefwWriter.cpp	/^int lefwStartMacroTiming () {$/;"	f
lefwStartMacroTiming	lef/lef/lefwWriter.cpp	/^lefwStartMacroTiming()$/;"	f
lefwStartNoiseTable	lef/clef/xlefwWriter.cpp	/^int lefwStartNoiseTable (int  num) {$/;"	f
lefwStartNoiseTable	lef/lef/lefwWriter.cpp	/^lefwStartNoiseTable(int num)$/;"	f
lefwStartNonDefaultRule	lef/clef/xlefwWriter.cpp	/^int lefwStartNonDefaultRule (const char*  ruleName) {$/;"	f
lefwStartNonDefaultRule	lef/lef/lefwWriter.cpp	/^lefwStartNonDefaultRule(const char *ruleName)$/;"	f
lefwStartPropDef	lef/clef/xlefwWriter.cpp	/^int lefwStartPropDef () {$/;"	f
lefwStartPropDef	lef/lef/lefwWriter.cpp	/^lefwStartPropDef()$/;"	f
lefwStartSpacing	lef/clef/xlefwWriter.cpp	/^int lefwStartSpacing () {$/;"	f
lefwStartSpacing	lef/lef/lefwWriter.cpp	/^lefwStartSpacing()$/;"	f
lefwStartUnits	lef/clef/xlefwWriter.cpp	/^int lefwStartUnits () {$/;"	f
lefwStartUnits	lef/lef/lefwWriter.cpp	/^lefwStartUnits()$/;"	f
lefwStartVia	lef/clef/xlefwWriter.cpp	/^int lefwStartVia (const char*  viaName, const char*  isDefault) {$/;"	f
lefwStartVia	lef/lef/lefwWriter.cpp	/^lefwStartVia(const char *viaName,$/;"	f
lefwStartViaRule	lef/clef/xlefwWriter.cpp	/^int lefwStartViaRule (const char*  viaRuleName) {$/;"	f
lefwStartViaRule	lef/lef/lefwWriter.cpp	/^lefwStartViaRule(const char *viaRuleName)$/;"	f
lefwStartViaRuleGen	lef/clef/xlefwWriter.cpp	/^int lefwStartViaRuleGen (const char*  viaRuleName) {$/;"	f
lefwStartViaRuleGen	lef/lef/lefwWriter.cpp	/^lefwStartViaRuleGen(const char *viaRuleName)$/;"	f
lefwState	lef/lef/lefwWriter.cpp	/^int lefwState = LEFW_UNINIT;  \/\/ Current state of writer$/;"	v
lefwStateStr	lef/lef/lefwWriter.cpp	/^char lefwStateStr[MAXSYN] [80] = {$/;"	v
lefwStringPropDef	lef/clef/xlefwWriter.cpp	/^int lefwStringPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, const char*  propValue) {$/;"	f
lefwStringPropDef	lef/lef/lefwWriter.cpp	/^lefwStringPropDef(const char    *objType,$/;"	f
lefwStringProperty	lef/clef/xlefwWriter.cpp	/^int lefwStringProperty (const char*  propName, const char*  propValue) {$/;"	f
lefwStringProperty	lef/lef/lefwWriter.cpp	/^lefwStringProperty(const char   *propName,$/;"	f
lefwSynArray	lef/lef/lefwWriter.cpp	/^int lefwSynArray[MAXSYN]; \/\/ array of syntax$/;"	v
lefwTableLen	lef/lef/lefwWriter.cpp	/^int lefwTableLen = 0; \/\/ width or cutarea for the tableEntries$/;"	v
lefwUnits	lef/clef/xlefwWriter.cpp	/^int lefwUnits (double  time, double  capacitance, double  resistance, double  power, double  current, double  voltage, double  database) {$/;"	f
lefwUnits	lef/lef/lefwWriter.cpp	/^lefwUnits(double    time,        \/\/ optional $/;"	f
lefwUnitsCbk	lef/lef/lefwWriterCalls.cpp	56;"	d	file:
lefwUnitsCbkType	lef/clef/lefwWriterCalls.h	/^  lefwUnitsCbkType = 9,$/;"	e	enum:__anon12
lefwUnitsCbkType	lef/include/lefwWriterCalls.h	/^  lefwUnitsCbkType = 9,$/;"	e	enum:__anon8
lefwUnitsCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwUnitsCbkType,$/;"	e	enum:__anon10
lefwUnitsCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwUnitsCbkType,$/;"	e	enum:__anon4
lefwUnitsFrequency	lef/clef/xlefwWriter.cpp	/^int lefwUnitsFrequency (double  frequency) {$/;"	f
lefwUnitsFrequency	lef/lef/lefwWriter.cpp	/^lefwUnitsFrequency(double frequency)$/;"	f
lefwUniversalNoiseMargin	lef/clef/xlefwWriter.cpp	/^int lefwUniversalNoiseMargin (double  high, double  low) {$/;"	f
lefwUniversalNoiseMargin	lef/lef/lefwWriter.cpp	/^lefwUniversalNoiseMargin(double high,$/;"	f
lefwUnspecifiedCbkType	lef/clef/lefwWriterCalls.h	/^  lefwUnspecifiedCbkType = 0,$/;"	e	enum:__anon12
lefwUnspecifiedCbkType	lef/include/lefwWriterCalls.h	/^  lefwUnspecifiedCbkType = 0,$/;"	e	enum:__anon8
lefwUnspecifiedCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwUnspecifiedCbkType = 0,$/;"	e	enum:__anon10
lefwUnspecifiedCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwUnspecifiedCbkType = 0,$/;"	e	enum:__anon4
lefwUnusedCount	lef/lef/lefwWriterCalls.cpp	/^static int lefwUnusedCount[100];$/;"	v	file:
lefwUseMinSpacing	lef/clef/xlefwWriter.cpp	/^int lefwUseMinSpacing (const char*  type, const char*  onOff) {$/;"	f
lefwUseMinSpacing	lef/lef/lefwWriter.cpp	/^lefwUseMinSpacing(const char    *type,$/;"	f
lefwUseMinSpacingCbk	lef/lef/lefwWriterCalls.cpp	54;"	d	file:
lefwUseMinSpacingCbkType	lef/clef/lefwWriterCalls.h	/^  lefwUseMinSpacingCbkType = 7,$/;"	e	enum:__anon12
lefwUseMinSpacingCbkType	lef/include/lefwWriterCalls.h	/^  lefwUseMinSpacingCbkType = 7,$/;"	e	enum:__anon8
lefwUseMinSpacingCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwUseMinSpacingCbkType,$/;"	e	enum:__anon10
lefwUseMinSpacingCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwUseMinSpacingCbkType,$/;"	e	enum:__anon4
lefwUserData	lef/lef/lefwWriterCalls.cpp	/^lefiUserData lefwUserData = 0;$/;"	v
lefwValidateMaskNumber	lef/lef/lefwWriter.cpp	/^lefwValidateMaskNumber(int num)$/;"	f
lefwVersion	lef/clef/xlefwWriter.cpp	/^int lefwVersion (int  vers1, int  vers2) {$/;"	f
lefwVersion	lef/lef/lefwWriter.cpp	/^lefwVersion(int vers1,$/;"	f
lefwVersionCbk	lef/lef/lefwWriterCalls.cpp	48;"	d	file:
lefwVersionCbkType	lef/clef/lefwWriterCalls.h	/^  lefwVersionCbkType = 1,$/;"	e	enum:__anon12
lefwVersionCbkType	lef/include/lefwWriterCalls.h	/^  lefwVersionCbkType = 1,$/;"	e	enum:__anon8
lefwVersionCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwVersionCbkType,$/;"	e	enum:__anon10
lefwVersionCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwVersionCbkType,$/;"	e	enum:__anon4
lefwViaCbk	lef/lef/lefwWriterCalls.cpp	62;"	d	file:
lefwViaCbkType	lef/clef/lefwWriterCalls.h	/^  lefwViaCbkType = 15,$/;"	e	enum:__anon12
lefwViaCbkType	lef/include/lefwWriterCalls.h	/^  lefwViaCbkType = 15,$/;"	e	enum:__anon8
lefwViaCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwViaCbkType,$/;"	e	enum:__anon10
lefwViaCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwViaCbkType,$/;"	e	enum:__anon4
lefwViaForeign	lef/clef/xlefwWriter.cpp	/^int lefwViaForeign (const char*  foreignName, double  xl, double  yl, int  orient) {$/;"	f
lefwViaForeign	lef/lef/lefwWriter.cpp	/^lefwViaForeign(const char   *foreignName,$/;"	f
lefwViaForeignStr	lef/clef/xlefwWriter.cpp	/^int lefwViaForeignStr (const char*  foreignName, double  xl, double  yl, const char*  orient) {$/;"	f
lefwViaForeignStr	lef/lef/lefwWriter.cpp	/^lefwViaForeignStr(const char    *foreignName,$/;"	f
lefwViaHasVal	lef/lef/lefwWriter.cpp	/^static int lefwViaHasVal = 0; \/\/ keep track only ViaRule or Resistance in a via$/;"	v	file:
lefwViaLayer	lef/clef/xlefwWriter.cpp	/^int lefwViaLayer (const char*  layerName) {$/;"	f
lefwViaLayer	lef/lef/lefwWriter.cpp	/^lefwViaLayer(const char *layerName)$/;"	f
lefwViaLayerPolygon	lef/clef/xlefwWriter.cpp	/^int lefwViaLayerPolygon (int  num_polys, double*  xl, double*  yl, int  mask) {$/;"	f
lefwViaLayerPolygon	lef/lef/lefwWriter.cpp	/^lefwViaLayerPolygon(int     num_polys,$/;"	f
lefwViaLayerRect	lef/clef/xlefwWriter.cpp	/^int lefwViaLayerRect (double  x1l, double  y1l, double  x2l, double  y2l, int  mask) {$/;"	f
lefwViaLayerRect	lef/lef/lefwWriter.cpp	/^lefwViaLayerRect(double x1l,$/;"	f
lefwViaResistance	lef/clef/xlefwWriter.cpp	/^int lefwViaResistance (double  resistance) {$/;"	f
lefwViaResistance	lef/lef/lefwWriter.cpp	/^lefwViaResistance(double resistance)$/;"	f
lefwViaRuleCbk	lef/lef/lefwWriterCalls.cpp	63;"	d	file:
lefwViaRuleCbkType	lef/clef/lefwWriterCalls.h	/^  lefwViaRuleCbkType = 16,$/;"	e	enum:__anon12
lefwViaRuleCbkType	lef/include/lefwWriterCalls.h	/^  lefwViaRuleCbkType = 16,$/;"	e	enum:__anon8
lefwViaRuleCbkType	lef/include/lefwWriterCalls.hpp	/^  lefwViaRuleCbkType,$/;"	e	enum:__anon10
lefwViaRuleCbkType	lef/lef/lefwWriterCalls.hpp	/^  lefwViaRuleCbkType,$/;"	e	enum:__anon4
lefwViaRuleGenDefault	lef/clef/xlefwWriter.cpp	/^int lefwViaRuleGenDefault () {$/;"	f
lefwViaRuleGenDefault	lef/lef/lefwWriter.cpp	/^lefwViaRuleGenDefault()$/;"	f
lefwViaRuleGenLayer	lef/clef/xlefwWriter.cpp	/^int lefwViaRuleGenLayer (const char*  layerName, const char*  direction, double  minWidth, double  maxWidth, double  overhang, double  metalOverhang) {$/;"	f
lefwViaRuleGenLayer	lef/lef/lefwWriter.cpp	/^lefwViaRuleGenLayer(const char  *layerName,$/;"	f
lefwViaRuleGenLayer3	lef/clef/xlefwWriter.cpp	/^int lefwViaRuleGenLayer3 (const char*  layerName, double  xl, double  yl, double  xh, double  yh, double  xSpacing, double  ySpacing, double  resistance) {$/;"	f
lefwViaRuleGenLayer3	lef/lef/lefwWriter.cpp	/^lefwViaRuleGenLayer3(const char *layerName,$/;"	f
lefwViaRuleGenLayerEnclosure	lef/clef/xlefwWriter.cpp	/^int lefwViaRuleGenLayerEnclosure (const char*  layerName, double  overhang1, double  overhang2, double  minWidth, double  maxWidth) {$/;"	f
lefwViaRuleGenLayerEnclosure	lef/lef/lefwWriter.cpp	/^lefwViaRuleGenLayerEnclosure(const char *layerName,$/;"	f
lefwViaRuleLayer	lef/clef/xlefwWriter.cpp	/^int lefwViaRuleLayer (const char*  layerName, const char*  direction, double  minWidth, double  maxWidth, double  overhang, double  metalOverhang) {$/;"	f
lefwViaRuleLayer	lef/lef/lefwWriter.cpp	/^lefwViaRuleLayer(const char *layerName,$/;"	f
lefwViaRulePrtLayer	lef/lef/lefwWriter.cpp	/^lefwViaRulePrtLayer(const char  *layerName,$/;"	f
lefwViaRuleVia	lef/clef/xlefwWriter.cpp	/^int lefwViaRuleVia (const char*  viaName) {$/;"	f
lefwViaRuleVia	lef/lef/lefwWriter.cpp	/^lefwViaRuleVia(const char *viaName)$/;"	f
lefwViaTopofstackonly	lef/clef/xlefwWriter.cpp	/^int lefwViaTopofstackonly () {$/;"	f
lefwViaTopofstackonly	lef/lef/lefwWriter.cpp	/^lefwViaTopofstackonly()$/;"	f
lefwViaViarule	lef/clef/xlefwWriter.cpp	/^int lefwViaViarule (const char*  viaRuleName, double  xCutSize, double  yCutSize, const char*  botMetalLayer, const char*  cutLayer, const char*  topMetalLayer, double  xCutSpacing, double  yCutSpacing, double  xBotEnc, double  yBotEnc, double  xTopEnc, double  yTopEnc) {$/;"	f
lefwViaViarule	lef/lef/lefwWriter.cpp	/^lefwViaViarule(const char   *viaRuleName,$/;"	f
lefwViaViaruleOffset	lef/clef/xlefwWriter.cpp	/^int lefwViaViaruleOffset (double  xBotOffset, double  yBotOffset, double  xTopOffset, double  yTopOffset) {$/;"	f
lefwViaViaruleOffset	lef/lef/lefwWriter.cpp	/^lefwViaViaruleOffset(double xBotOffset,$/;"	f
lefwViaViaruleOrigin	lef/clef/xlefwWriter.cpp	/^int lefwViaViaruleOrigin (double  xOffset, double  yOffset) {$/;"	f
lefwViaViaruleOrigin	lef/lef/lefwWriter.cpp	/^lefwViaViaruleOrigin(double xOffset,$/;"	f
lefwViaViarulePattern	lef/clef/xlefwWriter.cpp	/^int lefwViaViarulePattern (const char*  cutPattern) {$/;"	f
lefwViaViarulePattern	lef/lef/lefwWriter.cpp	/^lefwViaViarulePattern(const char *cutPattern)$/;"	f
lefwViaViaruleRowCol	lef/clef/xlefwWriter.cpp	/^int lefwViaViaruleRowCol (int  numCutRows, int  numCutCols) {$/;"	f
lefwViaViaruleRowCol	lef/lef/lefwWriter.cpp	/^lefwViaViaruleRowCol(int    numCutRows,$/;"	f
lefwVictims	lef/clef/xlefwWriter.cpp	/^int lefwVictims (int  length, int  numNoises, double*  noises) {$/;"	f
lefwVictims	lef/lef/lefwWriter.cpp	/^lefwVictims(int     length,$/;"	f
lefwVoidCbkFnType	lef/clef/lefwWriterCalls.h	/^typedef int (*lefwVoidCbkFnType) ( lefwCallbackType_e, lefiUserData );$/;"	t
lefwVoidCbkFnType	lef/include/lefwWriterCalls.h	/^typedef int (*lefwVoidCbkFnType) ( lefwCallbackType_e, lefiUserData );$/;"	t
lefwVoidCbkFnType	lef/include/lefwWriterCalls.hpp	/^typedef int (*lefwVoidCbkFnType) ( lefwCallbackType_e, lefiUserData );$/;"	t
lefwVoidCbkFnType	lef/lef/lefwWriterCalls.hpp	/^typedef int (*lefwVoidCbkFnType) ( lefwCallbackType_e, lefiUserData );$/;"	t
lefwWarningLogFunction	lef/lef/lefwWriter.cpp	/^LEFI_WARNING_LOG_FUNCTION lefwWarningLogFunction;$/;"	v
lefwWidthVal	lef/lef/lefwWriter.cpp	/^static int lefwWidthVal = 0;   \/\/ is allowed$/;"	v	file:
lefwWrite	lef/clef/xlefwWriterCalls.cpp	/^int lefwWrite (FILE * file, const char * fileName, lefiUserData  userData) {$/;"	f
lefwWrite	lef/lef/lefwWriterCalls.cpp	/^lefwWrite(FILE          *f,$/;"	f
lefwWriteEncrypt	lef/lef/lefwWriter.cpp	/^static int lefwWriteEncrypt = 0; \/\/ for writing out encrypted file, default is 0$/;"	v	file:
leh_h	lef/lef/lex.h	31;"	d
length	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::length()$/;"	f	class:lefiCorrectionVictim
length	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::length() const$/;"	f	class:lefiNoiseVictim
length	lef/lef/lefiLayer.cpp	/^lefiParallel::length(int index) const$/;"	f	class:lefiParallel
lengthThresholdRangeMax_	lef/include/lefiLayer.hpp	/^  double* lengthThresholdRangeMax_;         \/\/ pcr 408930$/;"	m	class:lefiLayer
lengthThresholdRangeMax_	lef/lef/lefiLayer.hpp	/^  double* lengthThresholdRangeMax_;         \/\/ pcr 408930$/;"	m	class:lefiLayer
lengthThresholdRangeMin_	lef/include/lefiLayer.hpp	/^  double* lengthThresholdRangeMin_;         \/\/ pcr 408930$/;"	m	class:lefiLayer
lengthThresholdRangeMin_	lef/lef/lefiLayer.hpp	/^  double* lengthThresholdRangeMin_;         \/\/ pcr 408930$/;"	m	class:lefiLayer
lengthThreshold_	lef/include/lefiLayer.hpp	/^  double* lengthThreshold_;                 \/\/ pcr 408930$/;"	m	class:lefiLayer
lengthThreshold_	lef/lef/lefiLayer.hpp	/^  double* lengthThreshold_;                 \/\/ pcr 408930$/;"	m	class:lefiLayer
length_	lef/include/lefiCrossTalk.hpp	/^  double length_;$/;"	m	class:lefiCorrectionVictim
length_	lef/include/lefiCrossTalk.hpp	/^  double length_;$/;"	m	class:lefiNoiseVictim
length_	lef/include/lefiLayer.hpp	/^  double* length_;$/;"	m	class:lefiParallel
length_	lef/lef/lefiCrossTalk.hpp	/^  double length_;$/;"	m	class:lefiCorrectionVictim
length_	lef/lef/lefiCrossTalk.hpp	/^  double length_;$/;"	m	class:lefiNoiseVictim
length_	lef/lef/lefiLayer.hpp	/^  double* length_;$/;"	m	class:lefiParallel
lineBuffer	def/def/defrData.hpp	/^    char                lineBuffer[MSG_SIZE];$/;"	m	class:defrData
lineNumberCB	def/defrw/defrw.cpp	/^void lineNumberCB(long long lineNo) {$/;"	f
lineNumberCB	lef/lefrw/lefrw.cpp	/^void lineNumberCB(int lineNo) {$/;"	f
lines2str	def/def/def_keywords.cpp	/^defrData::lines2str(long long lines) $/;"	f	class:defrData
list_of_from_strings	lef/lef/lef.y	/^list_of_from_strings:$/;"	l
list_of_table_axis_dnumbers	lef/lef/lef.y	/^list_of_table_axis_dnumbers:$/;"	l
list_of_table_entries	lef/lef/lef.y	/^list_of_table_entries:$/;"	l
list_of_to_strings	lef/lef/lef.y	/^list_of_to_strings:$/;"	l
ll	def/def/defiDefs.hpp	/^    defPOINT ll,ur;$/;"	m	struct:defrect
ll	lef/include/lefiDefs.hpp	/^    lefPOINT ll,ur;$/;"	m	struct:rect
ll	lef/lef/lefiDefs.hpp	/^    lefPOINT ll,ur;$/;"	m	struct:rect
low	lef/clef/lefiTypedefs.h	/^  double low;$/;"	m	struct:lefiNoiseMargin
low	lef/include/lefiCrossTalk.hpp	/^  double low;$/;"	m	struct:lefiNoiseMargin
low	lef/include/lefiTypedefs.h	/^  double low;$/;"	m	struct:lefiNoiseMargin
low	lef/lef/lefiCrossTalk.hpp	/^  double low;$/;"	m	struct:lefiNoiseMargin
lowTableSize_	lef/include/lefiMacro.hpp	/^  int lowTableSize_;$/;"	m	class:lefiPin
lowTableSize_	lef/lef/lefiMacro.hpp	/^  int lowTableSize_;$/;"	m	class:lefiPin
lowTable_	lef/include/lefiMacro.hpp	/^  char* lowTable_;$/;"	m	class:lefiPin
lowTable_	lef/lef/lefiMacro.hpp	/^  char* lowTable_;$/;"	m	class:lefiPin
macro	def/def/defiRowTrack.cpp	/^const char* defiGcellGrid::macro() const {$/;"	f	class:defiGcellGrid
macro	def/def/defiRowTrack.cpp	/^const char* defiRow::macro() const {$/;"	f	class:defiRow
macro	def/def/defiRowTrack.cpp	/^const char* defiTrack::macro() const {$/;"	f	class:defiTrack
macro	lef/lef/lef.y	/^macro: start_macro macro_options$/;"	l
macroBeginCB	lef/lefrw/lefrw.cpp	/^int macroBeginCB(lefrCallbackType_e c, const char* macroName, lefiUserData) {$/;"	f
macroCB	lef/lefdiff/diffLefRW.cpp	/^int macroCB(lefrCallbackType_e c, lefiMacro* macro, lefiUserData ud) {$/;"	f
macroCB	lef/lefrw/lefrw.cpp	/^int macroCB(lefrCallbackType_e c, lefiMacro* macro, lefiUserData) {$/;"	f
macroCB	lef/lefwrite/lefwriteCbs.cpp	/^int macroCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
macroClass	lef/lef/lefiMacro.cpp	/^lefiMacro::macroClass() const$/;"	f	class:lefiMacro
macroClassTypeCB	lef/lefrw/lefrw.cpp	/^int macroClassTypeCB(lefrCallbackType_e c, const char* macroClassType,$/;"	f
macroClass_	lef/include/lefiMacro.hpp	/^  char macroClass_[32];$/;"	m	class:lefiMacro
macroClass_	lef/lef/lefiMacro.hpp	/^  char macroClass_[32];$/;"	m	class:lefiMacro
macroEndCB	lef/lefrw/lefrw.cpp	/^int macroEndCB(lefrCallbackType_e c, const char* macroName, lefiUserData) {$/;"	f
macroFixedMaskCB	lef/lefrw/lefrw.cpp	/^int macroFixedMaskCB(lefrCallbackType_e c, int, $/;"	f
macroLength_	def/def/defiRowTrack.hpp	/^  int macroLength_;  \/\/ allocated size of macro_;$/;"	m	class:defiTrack
macroLength_	def/def/defiRowTrack.hpp	/^  int macroLength_;$/;"	m	class:defiGcellGrid
macroLength_	def/def/defiRowTrack.hpp	/^  int macroLength_;$/;"	m	class:defiRow
macroName	def/def/defiComponent.cpp	/^const char* defiComponent::macroName() const {$/;"	f	class:defiComponent
macroName	def/def/defiTimingDisable.cpp	/^const char* defiTimingDisable::macroName() const {$/;"	f	class:defiTimingDisable
macroName	lef/include/lefrData.hpp	/^    char*  macroName; $/;"	m	class:lefrData
macroName	lef/lef/lefrData.hpp	/^    char*  macroName; $/;"	m	class:lefrData
macroNameSize_	def/def/defiComponent.hpp	/^  int macroNameSize_;$/;"	m	class:defiComponent
macroName_	def/def/defiComponent.hpp	/^  char* macroName_;$/;"	m	class:defiComponent
macroNum	lef/include/lefrData.hpp	/^    lefiNum  macroNum; $/;"	m	class:lefrData
macroNum	lef/lef/lefrData.hpp	/^    lefiNum  macroNum; $/;"	m	class:lefrData
macroOriginCB	lef/lefrw/lefrw.cpp	/^int macroOriginCB(lefrCallbackType_e c, lefiNum,$/;"	f
macroSizeCB	lef/lefrw/lefrw.cpp	/^int macroSizeCB(lefrCallbackType_e c, lefiNum,$/;"	f
macroWarnings	lef/include/lefrData.hpp	/^    int  macroWarnings; $/;"	m	class:lefrData
macroWarnings	lef/lef/lefrData.hpp	/^    int  macroWarnings; $/;"	m	class:lefrData
macro_	def/def/defiRowTrack.hpp	/^  char* macro_;$/;"	m	class:defiGcellGrid
macro_	def/def/defiRowTrack.hpp	/^  char* macro_;$/;"	m	class:defiRow
macro_	def/def/defiRowTrack.hpp	/^  char* macro_;$/;"	m	class:defiTrack
macro_class	lef/lef/lef.y	/^macro_class: K_CLASS class_type ';'$/;"	l
macro_clocktype	lef/lef/lef.y	/^macro_clocktype: K_CLOCKTYPE { lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
macro_density	lef/lef/lef.y	/^macro_density: K_DENSITY density_layer density_layers K_END$/;"	l
macro_eeq	lef/lef/lef.y	/^macro_eeq: K_EEQ { lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
macro_fixedMask	lef/lef/lef.y	/^macro_fixedMask:$/;"	l
macro_foreign	lef/lef/lef.y	/^macro_foreign:$/;"	l
macro_generate	lef/lef/lef.y	/^macro_generate: K_GENERATE T_STRING T_STRING ';'$/;"	l
macro_generator	lef/lef/lef.y	/^macro_generator: K_GENERATOR T_STRING ';'$/;"	l
macro_leq	lef/lef/lef.y	/^macro_leq: K_LEQ { lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
macro_name_value_pair	lef/lef/lef.y	/^macro_name_value_pair:$/;"	l
macro_obs	lef/lef/lef.y	/^macro_obs: start_macro_obs geometries K_END$/;"	l
macro_option	lef/lef/lef.y	/^macro_option:$/;"	l
macro_options	lef/lef/lef.y	/^macro_options:$/;"	l
macro_origin	lef/lef/lef.y	/^macro_origin: K_ORIGIN pt ';'$/;"	l
macro_pin	lef/lef/lef.y	/^macro_pin: start_macro_pin macro_pin_options end_macro_pin$/;"	l
macro_pin_option	lef/lef/lef.y	/^macro_pin_option:$/;"	l
macro_pin_options	lef/lef/lef.y	/^macro_pin_options:$/;"	l
macro_pin_use	lef/lef/lef.y	/^macro_pin_use:$/;"	l
macro_port_class_option	lef/lef/lef.y	/^macro_port_class_option: \/\/ empty $/;"	l
macro_power	lef/lef/lef.y	/^macro_power: K_POWER int_number ';'$/;"	l
macro_prop_list	lef/lef/lef.y	/^macro_prop_list:$/;"	l
macro_scan_use	lef/lef/lef.y	/^macro_scan_use:$/;"	l
macro_site	lef/lef/lef.y	/^macro_site:$/;"	l
macro_site_word	lef/lef/lef.y	/^macro_site_word: K_SITE$/;"	l
macro_size	lef/lef/lef.y	/^macro_size: K_SIZE int_number K_BY int_number ';'$/;"	l
macro_source	lef/lef/lef.y	/^macro_source:$/;"	l
macro_symmetries	lef/lef/lef.y	/^macro_symmetries:$/;"	l
macro_symmetry	lef/lef/lef.y	/^macro_symmetry:$/;"	l
macro_symmetry_statement	lef/lef/lef.y	/^macro_symmetry_statement: K_SYMMETRY macro_symmetries ';'$/;"	l
magic	def/def/defrData.hpp	/^    char*  magic; $/;"	m	class:defrData
main	def/defdiff/differDef.cpp	/^int main(int argc, char** argv) {$/;"	f
main	def/defrw/defrw.cpp	/^int main(int argc, char** argv) {$/;"	f
main	def/defwrite/defwrite.cpp	/^int main(int argc, char** argv) {$/;"	f
main	def/defwrite/defwriteCbs.cpp	/^main(int argc, char** argv) {$/;"	f
main	lef/lefdiff/differLef.cpp	/^int main(int argc, char** argv) {$/;"	f
main	lef/lefrw/lefrw.cpp	/^main(int argc, char** argv) {$/;"	f
main	lef/lefwrite/lefwrite.cpp	/^int main(int argc, char** argv) {$/;"	f
main	lef/lefwrite/lefwriteCbs.cpp	/^main(int argc, char** argv) {$/;"	f
mallocCB	def/defrw/defrw.cpp	/^void* mallocCB(size_t size) {$/;"	f
mallocCB	lef/lefrw/lefrw.cpp	/^void* mallocCB(int size) {$/;"	f
manufacturing	lef/lef/lef.y	/^manufacturing: K_MANUFACTURINGGRID int_number ';'$/;"	l
manufacturingCB	lef/lefdiff/diffLefRW.cpp	/^int manufacturingCB(lefrCallbackType_e c, double num, lefiUserData ud) {$/;"	f
manufacturingCB	lef/lefrw/lefrw.cpp	/^int manufacturingCB(lefrCallbackType_e c, double num, lefiUserData) {$/;"	f
mask	def/def/def.y	/^mask: \/\/ empty $/;"	l
mask	def/def/defiBlockage.cpp	/^int defiBlockage::mask() const {$/;"	f	class:defiBlockage
mask	lef/lef/lefiLayer.cpp	/^lefiLayer::mask() const$/;"	f	class:lefiLayer
maskColor	lef/lef/lef.y	/^maskColor:$/;"	l
maskLayer	def/def/def.y	/^maskLayer: T_STRING$/;"	l
maskNumber_	lef/include/lefiLayer.hpp	/^  int maskNumber_;                     \/\/ 5.8$/;"	m	class:lefiLayer
maskNumber_	lef/lef/lefiLayer.hpp	/^  int maskNumber_;                     \/\/ 5.8$/;"	m	class:lefiLayer
maskShift	def/def/def.y	/^maskShift: '+' K_MASKSHIFT { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING$/;"	l
maskShift	def/def/defiComponent.cpp	/^int defiComponent::maskShift(int index) const {$/;"	f	class:defiComponent
maskShiftLayer	def/def/defiComponent.cpp	/^const char* defiComponentMaskShiftLayer::maskShiftLayer(int index) const {$/;"	f	class:defiComponentMaskShiftLayer
maskShiftSize	def/def/defiComponent.cpp	/^int defiComponent::maskShiftSize() const {$/;"	f	class:defiComponent
maskShiftSize_	def/def/defiComponent.hpp	/^  int maskShiftSize_;$/;"	m	class:defiComponent
maskShift_	def/def/defiComponent.hpp	/^  int* maskShift_; $/;"	m	class:defiComponent
mask_	def/def/defiBlockage.hpp	/^  int    mask_;                          \/\/ 5.8$/;"	m	class:defiBlockage
mask_	def/def/defiFill.hpp	/^  int   mask_;                      \/\/ 5.8$/;"	m	class:defiFill
mask_	def/def/defiPath.hpp	/^  int mask_;$/;"	m	class:defiPath
mask_blockage_rule	def/def/def.y	/^mask_blockage_rule: $/;"	l
mask_is_keyword	def/def/defrData.hpp	/^    int  mask_is_keyword; $/;"	m	class:defrData
maxAdjacentSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::maxAdjacentSlotSpacing() const$/;"	f	class:lefiLayer
maxAdjacentSlotSpacing_	lef/include/lefiLayer.hpp	/^  double maxAdjacentSlotSpacing_; $/;"	m	class:lefiLayer
maxAdjacentSlotSpacing_	lef/lef/lefiLayer.hpp	/^  double maxAdjacentSlotSpacing_; $/;"	m	class:lefiLayer
maxArea_	lef/include/lefiLayer.hpp	/^  double  maxArea_;$/;"	m	class:lefiLayer
maxArea_	lef/lef/lefiLayer.hpp	/^  double  maxArea_;$/;"	m	class:lefiLayer
maxBits_	def/def/defiScanchain.hpp	/^  int   maxBits_;       \/\/ 5.4.1$/;"	m	class:defiScanchain
maxCoaxialSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::maxCoaxialSlotSpacing() const$/;"	f	class:lefiLayer
maxCoaxialSlotSpacing_	lef/include/lefiLayer.hpp	/^  double maxCoaxialSlotSpacing_; $/;"	m	class:lefiLayer
maxCoaxialSlotSpacing_	lef/lef/lefiLayer.hpp	/^  double maxCoaxialSlotSpacing_; $/;"	m	class:lefiLayer
maxDensity_	def/def/defiBlockage.hpp	/^  double maxDensity_;                    \/\/ 5.7$/;"	m	class:defiBlockage
maxEdgeSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::maxEdgeSlotSpacing() const$/;"	f	class:lefiLayer
maxEdgeSlotSpacing_	lef/include/lefiLayer.hpp	/^  double maxEdgeSlotSpacing_; $/;"	m	class:lefiLayer
maxEdgeSlotSpacing_	lef/lef/lefiLayer.hpp	/^  double maxEdgeSlotSpacing_; $/;"	m	class:lefiLayer
maxFloatingArea	lef/lef/lefiLayer.cpp	/^lefiLayer::maxFloatingArea() const$/;"	f	class:lefiLayer
maxLayer	def/def/defiComponent.cpp	/^const char* defiComponent::maxLayer() const {$/;"	f	class:defiComponent
maxLayerSize_	def/def/defiComponent.hpp	/^  int maxLayerSize_;          \/\/ 5.7$/;"	m	class:defiComponent
maxLayer_	def/def/defiComponent.hpp	/^  char* maxLayer_;            \/\/ 5.7$/;"	m	class:defiComponent
maxLimit	def/def/defiNet.cpp	40;"	d	file:
maxStackVia	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::maxStackVia() const$/;"	f	class:lefiMaxStackVia
maxStackViaBottomLayer	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::maxStackViaBottomLayer() const$/;"	f	class:lefiMaxStackVia
maxStackViaCB	lef/lefdiff/diffLefRW.cpp	/^int maxStackViaCB(lefrCallbackType_e c, lefiMaxStackVia* maxStack,$/;"	f
maxStackViaCB	lef/lefrw/lefrw.cpp	/^int maxStackViaCB(lefrCallbackType_e c, lefiMaxStackVia* maxStack,$/;"	f
maxStackViaTopLayer	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::maxStackViaTopLayer() const$/;"	f	class:lefiMaxStackVia
maxStackViaWarnings	lef/include/lefrData.hpp	/^    int  maxStackViaWarnings; $/;"	m	class:lefrData
maxStackViaWarnings	lef/lef/lefrData.hpp	/^    int  maxStackViaWarnings; $/;"	m	class:lefrData
maxX	def/def/defiGroup.cpp	/^int defiGroup::maxX() const {$/;"	f	class:defiGroup
maxX_	def/def/defiGroup.hpp	/^  int maxX_;$/;"	m	class:defiGroup
maxY	def/def/defiGroup.cpp	/^int defiGroup::maxY() const {$/;"	f	class:defiGroup
maxY_	def/def/defiGroup.hpp	/^  int maxY_;$/;"	m	class:defiGroup
max_	def/def/defiPartition.hpp	/^  double min_, max_;$/;"	m	class:defiPartition
maxdelay	lef/lef/lefiMacro.cpp	/^lefiPin::maxdelay() const$/;"	f	class:lefiPin
maxdelay_	lef/include/lefiMacro.hpp	/^  double maxdelay_;$/;"	m	class:lefiPin
maxdelay_	lef/lef/lefiMacro.hpp	/^  double maxdelay_;$/;"	m	class:lefiPin
maximumDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::maximumDensity() const$/;"	f	class:lefiLayer
maximumDensity_	lef/include/lefiLayer.hpp	/^  double maximumDensity_; $/;"	m	class:lefiLayer
maximumDensity_	lef/lef/lefiLayer.hpp	/^  double maximumDensity_; $/;"	m	class:lefiLayer
maxload	lef/lef/lefiMacro.cpp	/^lefiPin::maxload() const$/;"	f	class:lefiPin
maxload_	lef/include/lefiMacro.hpp	/^  double maxload_;$/;"	m	class:lefiPin
maxload_	lef/lef/lefiMacro.hpp	/^  double maxload_;$/;"	m	class:lefiPin
maxstack_via	lef/lef/lef.y	/^maxstack_via: K_MAXVIASTACK int_number ';'$/;"	l
maxwidth	lef/lef/lefiLayer.cpp	/^lefiLayer::maxwidth() const$/;"	f	class:lefiLayer
maxwidth_	lef/include/lefiLayer.hpp	/^  double  maxwidth_;                          \/\/ 5.5$/;"	m	class:lefiLayer
maxwidth_	lef/lef/lefiLayer.hpp	/^  double  maxwidth_;                          \/\/ 5.5$/;"	m	class:lefiLayer
me	def/def/defiAlias.cpp	/^    std::map<std::string, std::string, defCompareStrings>::iterator me; $/;"	m	class:defAliasIterator	file:
metalOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::metalOverhang() const$/;"	f	class:lefiViaRuleLayer
metalOverhang_	lef/include/lefiViaRule.hpp	/^  double metalOverhang_;$/;"	m	class:lefiViaRuleLayer
metalOverhang_	lef/lef/lefiViaRule.hpp	/^  double metalOverhang_;$/;"	m	class:lefiViaRuleLayer
minCutsAllocated_	def/def/defiNonDefault.hpp	/^  int     minCutsAllocated_;$/;"	m	class:defiNonDefault
minFeatureCB	lef/lefdiff/diffLefRW.cpp	/^int minFeatureCB(lefrCallbackType_e c, lefiMinFeature* min, lefiUserData ud) {$/;"	f
minFeatureCB	lef/lefrw/lefrw.cpp	/^int minFeatureCB(lefrCallbackType_e c, lefiMinFeature* min, lefiUserData) {$/;"	f
minFeatureCB	lef/lefwrite/lefwriteCbs.cpp	/^int minFeatureCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
minFeatureWarnings	lef/include/lefrData.hpp	/^    int  minFeatureWarnings; $/;"	m	class:lefrData
minFeatureWarnings	lef/lef/lefrData.hpp	/^    int  minFeatureWarnings; $/;"	m	class:lefrData
minLayer	def/def/defiComponent.cpp	/^const char* defiComponent::minLayer() const {$/;"	f	class:defiComponent
minLayerSize_	def/def/defiComponent.hpp	/^  int minLayerSize_;          \/\/ 5.7$/;"	m	class:defiComponent
minLayer_	def/def/defiComponent.hpp	/^  char* minLayer_;            \/\/ 5.7$/;"	m	class:defiComponent
minLength_	lef/include/lefiLayer.hpp	/^  double* minLength_;$/;"	m	class:lefiLayer
minLength_	lef/lef/lefiLayer.hpp	/^  double* minLength_;$/;"	m	class:lefiLayer
minMaxEqual_	def/def/defiFPC.hpp	/^  double minMaxEqual_;$/;"	m	class:defiFPC
minNotchSpacing_	lef/include/lefiLayer.hpp	/^  double* minNotchSpacing_;$/;"	m	class:lefiLayer
minNotchSpacing_	lef/lef/lefiLayer.hpp	/^  double* minNotchSpacing_;$/;"	m	class:lefiLayer
minPins_	lef/include/lefiArray.hpp	/^  int* minPins_;$/;"	m	class:lefiArray
minPins_	lef/lef/lefiArray.hpp	/^  int* minPins_;$/;"	m	class:lefiArray
minSizeLength	lef/lef/lefiLayer.cpp	/^lefiLayer::minSizeLength(int index) const$/;"	f	class:lefiLayer
minSizeLength_	lef/include/lefiLayer.hpp	/^  double* minSizeLength_;$/;"	m	class:lefiLayer
minSizeLength_	lef/lef/lefiLayer.hpp	/^  double* minSizeLength_;$/;"	m	class:lefiLayer
minSizeWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::minSizeWidth(int index) const$/;"	f	class:lefiLayer
minSizeWidth_	lef/include/lefiLayer.hpp	/^  double* minSizeWidth_;$/;"	m	class:lefiLayer
minSizeWidth_	lef/lef/lefiLayer.hpp	/^  double* minSizeWidth_;$/;"	m	class:lefiLayer
minSpacing	def/def/defiBlockage.cpp	/^int defiBlockage::minSpacing() const {$/;"	f	class:defiBlockage
minSpacing_	def/def/defiBlockage.hpp	/^  int    minSpacing_;$/;"	m	class:defiBlockage
min_	def/def/defiPartition.hpp	/^  double min_, max_;$/;"	m	class:defiPartition
min_or_max_list	def/def/def.y	/^min_or_max_list: \/\/ empty $/;"	l
min_or_max_member	def/def/def.y	/^min_or_max_member: K_MIN NUMBER NUMBER$/;"	l
mincuts	lef/lef/lef.y	/^mincuts: K_MINCUTS T_STRING int_number ';'$/;"	l
minenclosedarea	lef/lef/lefiLayer.cpp	/^lefiLayer::minenclosedarea(int index) const$/;"	f	class:lefiLayer
minenclosedareaAllocated_	lef/include/lefiLayer.hpp	/^  int     minenclosedareaAllocated_;          \/\/ 5.5$/;"	m	class:lefiLayer
minenclosedareaAllocated_	lef/lef/lefiLayer.hpp	/^  int     minenclosedareaAllocated_;          \/\/ 5.5$/;"	m	class:lefiLayer
minenclosedareaWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::minenclosedareaWidth(int index) const$/;"	f	class:lefiLayer
minenclosedareaWidth_	lef/include/lefiLayer.hpp	/^  double* minenclosedareaWidth_;              \/\/ 5.5$/;"	m	class:lefiLayer
minenclosedareaWidth_	lef/lef/lefiLayer.hpp	/^  double* minenclosedareaWidth_;              \/\/ 5.5$/;"	m	class:lefiLayer
minenclosedarea_	lef/include/lefiLayer.hpp	/^  double* minenclosedarea_;                   \/\/ 5.5$/;"	m	class:lefiLayer
minenclosedarea_	lef/lef/lefiLayer.hpp	/^  double* minenclosedarea_;                   \/\/ 5.5$/;"	m	class:lefiLayer
minfeature	lef/lef/lef.y	/^minfeature: K_MINFEATURE int_number int_number ';'$/;"	l
minimumDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::minimumDensity() const$/;"	f	class:lefiLayer
minimumDensity_	lef/include/lefiLayer.hpp	/^  double minimumDensity_; $/;"	m	class:lefiLayer
minimumDensity_	lef/lef/lefiLayer.hpp	/^  double minimumDensity_; $/;"	m	class:lefiLayer
minimumcut	lef/lef/lefiLayer.cpp	/^lefiLayer::minimumcut(int index) const$/;"	f	class:lefiLayer
minimumcutAllocated_	lef/include/lefiLayer.hpp	/^  int     minimumcutAllocated_;$/;"	m	class:lefiLayer
minimumcutAllocated_	lef/lef/lefiLayer.hpp	/^  int     minimumcutAllocated_;$/;"	m	class:lefiLayer
minimumcutConnection	lef/lef/lefiLayer.cpp	/^lefiLayer::minimumcutConnection(int index) const$/;"	f	class:lefiLayer
minimumcutConnection_	lef/include/lefiLayer.hpp	/^  char**  minimumcutConnection_;$/;"	m	class:lefiLayer
minimumcutConnection_	lef/lef/lefiLayer.hpp	/^  char**  minimumcutConnection_;$/;"	m	class:lefiLayer
minimumcutDistance	lef/lef/lefiLayer.cpp	/^lefiLayer::minimumcutDistance(int index) const$/;"	f	class:lefiLayer
minimumcutDistance_	lef/include/lefiLayer.hpp	/^  double* minimumcutDistance_;$/;"	m	class:lefiLayer
minimumcutDistance_	lef/lef/lefiLayer.hpp	/^  double* minimumcutDistance_;$/;"	m	class:lefiLayer
minimumcutLength	lef/lef/lefiLayer.cpp	/^lefiLayer::minimumcutLength(int index) const$/;"	f	class:lefiLayer
minimumcutLength_	lef/include/lefiLayer.hpp	/^  double* minimumcutLength_;$/;"	m	class:lefiLayer
minimumcutLength_	lef/lef/lefiLayer.hpp	/^  double* minimumcutLength_;$/;"	m	class:lefiLayer
minimumcutWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::minimumcutWidth(int index) const$/;"	f	class:lefiLayer
minimumcutWidth_	lef/include/lefiLayer.hpp	/^  double* minimumcutWidth_;                  \/\/ pcr 409334$/;"	m	class:lefiLayer
minimumcutWidth_	lef/lef/lefiLayer.hpp	/^  double* minimumcutWidth_;                  \/\/ pcr 409334$/;"	m	class:lefiLayer
minimumcutWithin	lef/lef/lefiLayer.cpp	/^lefiLayer::minimumcutWithin(int index) const$/;"	f	class:lefiLayer
minimumcutWithin_	lef/include/lefiLayer.hpp	/^  double* minimumcutWithin_;                 \/\/ 5.7$/;"	m	class:lefiLayer
minimumcutWithin_	lef/lef/lefiLayer.hpp	/^  double* minimumcutWithin_;                 \/\/ 5.7$/;"	m	class:lefiLayer
minimumcut_	lef/include/lefiLayer.hpp	/^  int*    minimumcut_;                       \/\/ pcr 409334$/;"	m	class:lefiLayer
minimumcut_	lef/lef/lefiLayer.hpp	/^  int*    minimumcut_;                       \/\/ pcr 409334$/;"	m	class:lefiLayer
minmaxpins	def/def/def.y	/^minmaxpins: min_or_max_list K_PINS$/;"	l
minstep	lef/lef/lefiLayer.cpp	/^lefiLayer::minstep(int index) const$/;"	f	class:lefiLayer
minstepLengthsum	lef/lef/lefiLayer.cpp	/^lefiLayer::minstepLengthsum(int index) const$/;"	f	class:lefiLayer
minstepLengthsum_	lef/include/lefiLayer.hpp	/^  double* minstepLengthsum_; $/;"	m	class:lefiLayer
minstepLengthsum_	lef/lef/lefiLayer.hpp	/^  double* minstepLengthsum_; $/;"	m	class:lefiLayer
minstepMaxEdges_	lef/include/lefiLayer.hpp	/^  int*    minstepMaxEdges_;                   \/\/ 5.7$/;"	m	class:lefiLayer
minstepMaxEdges_	lef/lef/lefiLayer.hpp	/^  int*    minstepMaxEdges_;                   \/\/ 5.7$/;"	m	class:lefiLayer
minstepMaxedges	lef/lef/lefiLayer.cpp	/^lefiLayer::minstepMaxedges(int index) const$/;"	f	class:lefiLayer
minstepMinAdjLength	lef/lef/lefiLayer.cpp	/^lefiLayer::minstepMinAdjLength(int index) const$/;"	f	class:lefiLayer
minstepMinAdjLength_	lef/include/lefiLayer.hpp	/^  double* minstepMinAdjLength_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstepMinAdjLength_	lef/lef/lefiLayer.hpp	/^  double* minstepMinAdjLength_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstepMinBetLength	lef/lef/lefiLayer.cpp	/^lefiLayer::minstepMinBetLength(int index) const$/;"	f	class:lefiLayer
minstepMinBetLength_	lef/include/lefiLayer.hpp	/^  double* minstepMinBetLength_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstepMinBetLength_	lef/lef/lefiLayer.hpp	/^  double* minstepMinBetLength_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstepType	lef/lef/lefiLayer.cpp	/^lefiLayer::minstepType(int index) const$/;"	f	class:lefiLayer
minstepType_	lef/include/lefiLayer.hpp	/^  char**  minstepType_;                       \/\/ INSIDECORNER|OUTSIDECORNER|STEP$/;"	m	class:lefiLayer
minstepType_	lef/lef/lefiLayer.hpp	/^  char**  minstepType_;                       \/\/ INSIDECORNER|OUTSIDECORNER|STEP$/;"	m	class:lefiLayer
minstepXSameCorners_	lef/include/lefiLayer.hpp	/^  int*    minstepXSameCorners_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstepXSameCorners_	lef/lef/lefiLayer.hpp	/^  int*    minstepXSameCorners_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstep_	lef/include/lefiLayer.hpp	/^  double* minstep_;                           \/\/ 5.6, switch to multiple$/;"	m	class:lefiLayer
minstep_	lef/lef/lefiLayer.hpp	/^  double* minstep_;                           \/\/ 5.6, switch to multiple$/;"	m	class:lefiLayer
minwidth	lef/lef/lefiLayer.cpp	/^lefiLayer::minwidth() const$/;"	f	class:lefiLayer
minwidth_	lef/include/lefiLayer.hpp	/^  double  minwidth_;                          \/\/ 5.5$/;"	m	class:lefiLayer
minwidth_	lef/lef/lefiLayer.hpp	/^  double  minwidth_;                          \/\/ 5.5$/;"	m	class:lefiLayer
msgCnt	lef/include/lefrData.hpp	/^    int  msgCnt; $/;"	m	class:lefrData
msgCnt	lef/lef/lefrData.hpp	/^    int  msgCnt; $/;"	m	class:lefrData
msgLimit	def/def/defrData.hpp	/^    int msgLimit[DEF_MSGS];$/;"	m	class:defrData
msgLimit	lef/include/lefrData.hpp	/^    int msgLimit[2][MAX_LEF_MSGS];$/;"	m	class:lefrData
msgLimit	lef/lef/lefrData.hpp	/^    int msgLimit[2][MAX_LEF_MSGS];$/;"	m	class:lefrData
msg_statement	lef/lef/lef.y	/^msg_statement:$/;"	l
msgsDisableMap	lef/include/lefrSettings.hpp	/^    MsgsDisableMap msgsDisableMap;$/;"	m	class:lefrSettings
msgsDisableMap	lef/lef/lefrSettings.hpp	/^    MsgsDisableMap msgsDisableMap;$/;"	m	class:lefrSettings
mustjoin	lef/lef/lefiMacro.cpp	/^lefiPin::mustjoin() const$/;"	f	class:lefiPin
mustjoinSize_	lef/include/lefiMacro.hpp	/^  int    mustjoinSize_;$/;"	m	class:lefiPin
mustjoinSize_	lef/lef/lefiMacro.hpp	/^  int    mustjoinSize_;$/;"	m	class:lefiPin
mustjoin_	lef/include/lefiMacro.hpp	/^  char*  mustjoin_;$/;"	m	class:lefiPin
mustjoin_	lef/lef/lefiMacro.hpp	/^  char*  mustjoin_;$/;"	m	class:lefiPin
mustjoin_is_keyword	def/def/defrData.hpp	/^    int  mustjoin_is_keyword; $/;"	m	class:defrData
musts_	def/def/defiNet.hpp	/^  char*         musts_;           \/\/ must-join flags$/;"	m	class:defiSubnet
musts_	def/def/defiNet.hpp	/^  char*     musts_;         \/\/ must-join flags for pins$/;"	m	class:defiNet
myLogFunction	def/defrw/defrw.cpp	/^void myLogFunction(const char* errMsg){$/;"	f
myWarningLogFunction	def/defrw/defrw.cpp	/^void myWarningLogFunction(const char* errMsg){$/;"	f
nDDMsgs	def/def/defrSettings.hpp	/^    int  nDDMsgs; $/;"	m	class:defrSettings
name	def/def/defiComponent.cpp	/^const char* defiComponent::name() const {$/;"	f	class:defiComponent
name	def/def/defiFPC.cpp	/^const char* defiFPC::name() const {$/;"	f	class:defiFPC
name	def/def/defiGroup.cpp	/^const char* defiGroup::name() const {$/;"	f	class:defiGroup
name	def/def/defiNet.cpp	/^const char* defiNet::name() const {$/;"	f	class:defiNet
name	def/def/defiNet.cpp	/^const char* defiSubnet::name() const {$/;"	f	class:defiSubnet
name	def/def/defiNet.cpp	/^const char* defiVpin::name() const {$/;"	f	class:defiVpin
name	def/def/defiNonDefault.cpp	/^const char* defiNonDefault::name() const {$/;"	f	class:defiNonDefault
name	def/def/defiPartition.cpp	/^const char* defiPartition::name() const {$/;"	f	class:defiPartition
name	def/def/defiRegion.cpp	/^const char* defiRegion::name() const {$/;"	f	class:defiRegion
name	def/def/defiRowTrack.cpp	/^const char* defiRow::name() const {$/;"	f	class:defiRow
name	def/def/defiScanchain.cpp	/^const char* defiScanchain::name() const {$/;"	f	class:defiScanchain
name	def/def/defiSite.cpp	/^const char* defiSite::name() const {$/;"	f	class:defiSite
name	def/def/defiVia.cpp	/^const char* defiVia::name() const {$/;"	f	class:defiVia
name	lef/clef/lefiTypedefs.h	/^  char*  name;$/;"	m	struct:lefiGeomVia
name	lef/clef/lefiTypedefs.h	/^  char*  name;$/;"	m	struct:lefiGeomViaIter
name	lef/include/lefiMisc.hpp	/^  char*  name;$/;"	m	struct:lefiGeomVia
name	lef/include/lefiMisc.hpp	/^  char*  name;$/;"	m	struct:lefiGeomViaIter
name	lef/include/lefiTypedefs.h	/^  char*  name;$/;"	m	struct:lefiGeomVia
name	lef/include/lefiTypedefs.h	/^  char*  name;$/;"	m	struct:lefiGeomViaIter
name	lef/lef/lefiArray.cpp	/^lefiArray::name() const$/;"	f	class:lefiArray
name	lef/lef/lefiArray.cpp	/^lefiArrayFloorPlan::name() const$/;"	f	class:lefiArrayFloorPlan
name	lef/lef/lefiLayer.cpp	/^lefiLayer::name() const$/;"	f	class:lefiLayer
name	lef/lef/lefiMacro.cpp	/^lefiMacro::name() const$/;"	f	class:lefiMacro
name	lef/lef/lefiMacro.cpp	/^lefiPin::name() const$/;"	f	class:lefiPin
name	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::name() const$/;"	f	class:lefiGcellPattern
name	lef/lef/lefiMisc.cpp	/^lefiIRDrop::name() const$/;"	f	class:lefiIRDrop
name	lef/lef/lefiMisc.cpp	/^lefiSite::name() const$/;"	f	class:lefiSite
name	lef/lef/lefiMisc.cpp	/^lefiSitePattern::name() const$/;"	f	class:lefiSitePattern
name	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::name() const$/;"	f	class:lefiTrackPattern
name	lef/lef/lefiMisc.cpp	/^lefiUseMinSpacing::name() const$/;"	f	class:lefiUseMinSpacing
name	lef/lef/lefiMisc.hpp	/^  char*  name;$/;"	m	struct:lefiGeomVia
name	lef/lef/lefiMisc.hpp	/^  char*  name;$/;"	m	struct:lefiGeomViaIter
name	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::name() const$/;"	f	class:lefiNonDefault
name	lef/lef/lefiVia.cpp	/^lefiVia::name() const$/;"	f	class:lefiVia
name	lef/lef/lefiVia.cpp	/^lefiViaLayer::name()$/;"	f	class:lefiViaLayer
name	lef/lef/lefiViaRule.cpp	/^lefiViaRule::name() const$/;"	f	class:lefiViaRule
name	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::name() const$/;"	f	class:lefiViaRuleLayer
name1	lef/lef/lefiMisc.cpp	/^lefiSpacing::name1() const$/;"	f	class:lefiSpacing
name1Size_	lef/include/lefiMisc.hpp	/^  int    name1Size_;$/;"	m	class:lefiSpacing
name1Size_	lef/lef/lefiMisc.hpp	/^  int    name1Size_;$/;"	m	class:lefiSpacing
name1_	lef/include/lefiMisc.hpp	/^  char*  name1_;$/;"	m	class:lefiSpacing
name1_	lef/lef/lefiMisc.hpp	/^  char*  name1_;$/;"	m	class:lefiSpacing
name2	lef/lef/lefiMisc.cpp	/^lefiSpacing::name2() const$/;"	f	class:lefiSpacing
name2Size_	lef/include/lefiMisc.hpp	/^  int    name2Size_;$/;"	m	class:lefiSpacing
name2Size_	lef/lef/lefiMisc.hpp	/^  int    name2Size_;$/;"	m	class:lefiSpacing
name2_	lef/include/lefiMisc.hpp	/^  char*  name2_;$/;"	m	class:lefiSpacing
name2_	lef/lef/lefiMisc.hpp	/^  char*  name2_;$/;"	m	class:lefiSpacing
nameLength_	def/def/defiFPC.hpp	/^  int nameLength_;$/;"	m	class:defiFPC
nameLength_	def/def/defiGroup.hpp	/^  int nameLength_;$/;"	m	class:defiGroup
nameLength_	def/def/defiPartition.hpp	/^  int nameLength_;$/;"	m	class:defiPartition
nameLength_	def/def/defiRegion.hpp	/^  int nameLength_;$/;"	m	class:defiRegion
nameLength_	def/def/defiRowTrack.hpp	/^  int nameLength_;$/;"	m	class:defiRow
nameLength_	def/def/defiScanchain.hpp	/^  int nameLength_;$/;"	m	class:defiScanchain
nameLength_	def/def/defiVia.hpp	/^  int nameLength_;$/;"	m	class:defiVia
nameSize_	def/def/defiComponent.hpp	/^  int nameSize_;        \/\/ allocated size of name.$/;"	m	class:defiComponent
nameSize_	def/def/defiNet.hpp	/^  int           nameSize_;          \/\/ allocated size of name.$/;"	m	class:defiSubnet
nameSize_	def/def/defiNet.hpp	/^  int       nameSize_;      \/\/ allocated size of name.$/;"	m	class:defiNet
nameSize_	def/def/defiProp.hpp	/^  int nameSize_;        \/\/ allocated size of name.$/;"	m	class:defiProp
nameSize_	def/def/defiSite.hpp	/^  int nameSize_;       \/\/ allocated size of siteName_$/;"	m	class:defiSite
nameSize_	lef/include/lefiArray.hpp	/^  int nameSize_;$/;"	m	class:lefiArray
nameSize_	lef/include/lefiLayer.hpp	/^  int nameSize_;$/;"	m	class:lefiLayer
nameSize_	lef/include/lefiMacro.hpp	/^  int   nameSize_;$/;"	m	class:lefiPin
nameSize_	lef/include/lefiMacro.hpp	/^  int nameSize_;$/;"	m	class:lefiMacro
nameSize_	lef/include/lefiMisc.hpp	/^  int     nameSize_;$/;"	m	class:lefiIRDrop
nameSize_	lef/include/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiGcellPattern
nameSize_	lef/include/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiSite
nameSize_	lef/include/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiSitePattern
nameSize_	lef/include/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiTrackPattern
nameSize_	lef/include/lefiNonDefault.hpp	/^  int nameSize_;$/;"	m	class:lefiNonDefault
nameSize_	lef/include/lefiProp.hpp	/^  int nameSize_;        \/\/ allocated size of name.$/;"	m	class:lefiProp
nameSize_	lef/include/lefiVia.hpp	/^  int nameSize_;$/;"	m	class:lefiVia
nameSize_	lef/include/lefiViaRule.hpp	/^  int nameSize_;$/;"	m	class:lefiViaRule
nameSize_	lef/lef/lefiArray.hpp	/^  int nameSize_;$/;"	m	class:lefiArray
nameSize_	lef/lef/lefiLayer.hpp	/^  int nameSize_;$/;"	m	class:lefiLayer
nameSize_	lef/lef/lefiMacro.hpp	/^  int   nameSize_;$/;"	m	class:lefiPin
nameSize_	lef/lef/lefiMacro.hpp	/^  int nameSize_;$/;"	m	class:lefiMacro
nameSize_	lef/lef/lefiMisc.hpp	/^  int     nameSize_;$/;"	m	class:lefiIRDrop
nameSize_	lef/lef/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiGcellPattern
nameSize_	lef/lef/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiSite
nameSize_	lef/lef/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiSitePattern
nameSize_	lef/lef/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiTrackPattern
nameSize_	lef/lef/lefiNonDefault.hpp	/^  int nameSize_;$/;"	m	class:lefiNonDefault
nameSize_	lef/lef/lefiProp.hpp	/^  int nameSize_;        \/\/ allocated size of name.$/;"	m	class:lefiProp
nameSize_	lef/lef/lefiVia.hpp	/^  int nameSize_;$/;"	m	class:lefiVia
nameSize_	lef/lef/lefiViaRule.hpp	/^  int nameSize_;$/;"	m	class:lefiViaRule
name_	def/def/defiComponent.hpp	/^  char* name_;          \/\/ name.$/;"	m	class:defiComponent
name_	def/def/defiFPC.hpp	/^  char* name_;$/;"	m	class:defiFPC
name_	def/def/defiGroup.hpp	/^  char* name_;$/;"	m	class:defiGroup
name_	def/def/defiNet.hpp	/^  char*         name_;            \/\/ name.$/;"	m	class:defiSubnet
name_	def/def/defiNet.hpp	/^  char*      name_;$/;"	m	class:defiShield
name_	def/def/defiNet.hpp	/^  char*     name_;          \/\/ name.$/;"	m	class:defiNet
name_	def/def/defiNet.hpp	/^  char* name_;$/;"	m	class:defiVpin
name_	def/def/defiNonDefault.hpp	/^  char*   name_;$/;"	m	class:defiNonDefault
name_	def/def/defiPartition.hpp	/^  char* name_;$/;"	m	class:defiPartition
name_	def/def/defiRegion.hpp	/^  char* name_;$/;"	m	class:defiRegion
name_	def/def/defiRowTrack.hpp	/^  char* name_;$/;"	m	class:defiRow
name_	def/def/defiScanchain.hpp	/^  char* name_;$/;"	m	class:defiScanchain
name_	def/def/defiVia.hpp	/^  char* name_;$/;"	m	class:defiVia
name_	lef/include/lefiArray.hpp	/^  char* name_;$/;"	m	class:lefiArray
name_	lef/include/lefiArray.hpp	/^  char* name_;$/;"	m	class:lefiArrayFloorPlan
name_	lef/include/lefiLayer.hpp	/^  char* name_;$/;"	m	class:lefiLayer
name_	lef/include/lefiMacro.hpp	/^  char* name_;$/;"	m	class:lefiMacro
name_	lef/include/lefiMacro.hpp	/^  char* name_;$/;"	m	class:lefiPin
name_	lef/include/lefiMisc.hpp	/^  char*   name_;$/;"	m	class:lefiIRDrop
name_	lef/include/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiGcellPattern
name_	lef/include/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiSite
name_	lef/include/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiSitePattern
name_	lef/include/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiTrackPattern
name_	lef/include/lefiMisc.hpp	/^  char* name_;$/;"	m	class:lefiUseMinSpacing
name_	lef/include/lefiNonDefault.hpp	/^  char* name_;$/;"	m	class:lefiNonDefault
name_	lef/include/lefiVia.hpp	/^  char* name_;$/;"	m	class:lefiVia
name_	lef/include/lefiVia.hpp	/^  char* name_;$/;"	m	class:lefiViaLayer
name_	lef/include/lefiViaRule.hpp	/^  char* name_;$/;"	m	class:lefiViaRule
name_	lef/include/lefiViaRule.hpp	/^  char* name_;$/;"	m	class:lefiViaRuleLayer
name_	lef/lef/lefiArray.hpp	/^  char* name_;$/;"	m	class:lefiArray
name_	lef/lef/lefiArray.hpp	/^  char* name_;$/;"	m	class:lefiArrayFloorPlan
name_	lef/lef/lefiLayer.hpp	/^  char* name_;$/;"	m	class:lefiLayer
name_	lef/lef/lefiMacro.hpp	/^  char* name_;$/;"	m	class:lefiMacro
name_	lef/lef/lefiMacro.hpp	/^  char* name_;$/;"	m	class:lefiPin
name_	lef/lef/lefiMisc.hpp	/^  char*   name_;$/;"	m	class:lefiIRDrop
name_	lef/lef/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiGcellPattern
name_	lef/lef/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiSite
name_	lef/lef/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiSitePattern
name_	lef/lef/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiTrackPattern
name_	lef/lef/lefiMisc.hpp	/^  char* name_;$/;"	m	class:lefiUseMinSpacing
name_	lef/lef/lefiNonDefault.hpp	/^  char* name_;$/;"	m	class:lefiNonDefault
name_	lef/lef/lefiVia.hpp	/^  char* name_;$/;"	m	class:lefiVia
name_	lef/lef/lefiVia.hpp	/^  char* name_;$/;"	m	class:lefiViaLayer
name_	lef/lef/lefiViaRule.hpp	/^  char* name_;$/;"	m	class:lefiViaRule
name_	lef/lef/lefiViaRule.hpp	/^  char* name_;$/;"	m	class:lefiViaRuleLayer
namesAllocated_	def/def/defiFPC.hpp	/^  int namesAllocated_;  \/\/ allocated size of names_ and rowOrComp_$/;"	m	class:defiFPC
namesCaseSensitive	lef/include/lefrData.hpp	/^    int  namesCaseSensitive; \/\/ always true in 5.6$/;"	m	class:lefrData
namesCaseSensitive	lef/lef/lefrData.hpp	/^    int  namesCaseSensitive; \/\/ always true in 5.6$/;"	m	class:lefrData
namesUsed_	def/def/defiFPC.hpp	/^  int namesUsed_;       \/\/ number of entries used in the arrays$/;"	m	class:defiFPC
names_	def/def/defiComponent.hpp	/^  char**  names_;$/;"	m	class:defiComponent
names_	def/def/defiFPC.hpp	/^  char** names_;$/;"	m	class:defiFPC
names_	def/def/defiNonDefault.hpp	/^  char**  names_;$/;"	m	class:defiNonDefault
names_	lef/include/lefiLayer.hpp	/^  char**  names_;$/;"	m	class:lefiLayer
names_	lef/include/lefiNonDefault.hpp	/^  char**  names_;$/;"	m	class:lefiNonDefault
names_	lef/include/lefiViaRule.hpp	/^  char**  names_;$/;"	m	class:lefiViaRule
names_	lef/lef/lefiLayer.hpp	/^  char**  names_;$/;"	m	class:lefiLayer
names_	lef/lef/lefiNonDefault.hpp	/^  char**  names_;$/;"	m	class:lefiNonDefault
names_	lef/lef/lefiViaRule.hpp	/^  char**  names_;$/;"	m	class:lefiViaRule
names_case_sensitive	def/def/defrData.hpp	/^    int  names_case_sensitive; \/\/ always true in 5.6$/;"	m	class:defrData
nd	lef/include/lefrData.hpp	/^    lefiNonDefault*  nd; \/\/ PCR 909010 - For VIA in the nondefaultrule$/;"	m	class:lefrData
nd	lef/lef/lefrData.hpp	/^    lefiNonDefault*  nd; \/\/ PCR 909010 - For VIA in the nondefaultrule$/;"	m	class:lefrData
ndLayer	lef/include/lefrData.hpp	/^    int  ndLayer; $/;"	m	class:lefrData
ndLayer	lef/lef/lefrData.hpp	/^    int  ndLayer; $/;"	m	class:lefrData
ndLayerSpace	lef/include/lefrData.hpp	/^    int  ndLayerSpace; $/;"	m	class:lefrData
ndLayerSpace	lef/lef/lefrData.hpp	/^    int  ndLayerSpace; $/;"	m	class:lefrData
ndLayerWidth	lef/include/lefrData.hpp	/^    int  ndLayerWidth; $/;"	m	class:lefrData
ndLayerWidth	lef/lef/lefrData.hpp	/^    int  ndLayerWidth; $/;"	m	class:lefrData
ndName	lef/include/lefrData.hpp	/^    char*  ndName; $/;"	m	class:lefrData
ndName	lef/lef/lefrData.hpp	/^    char*  ndName; $/;"	m	class:lefrData
ndRule	lef/include/lefrData.hpp	/^    int  ndRule; $/;"	m	class:lefrData
ndRule	lef/lef/lefrData.hpp	/^    int  ndRule; $/;"	m	class:lefrData
nd_hardspacing	lef/lef/lef.y	/^nd_hardspacing:$/;"	l
nd_layer	lef/lef/lef.y	/^nd_layer: K_LAYER {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
nd_layer_stmt	lef/lef/lef.y	/^nd_layer_stmt:$/;"	l
nd_layer_stmts	lef/lef/lef.y	/^nd_layer_stmts:$/;"	l
nd_prop	lef/lef/lef.y	/^nd_prop: K_PROPERTY { lefData->lefDumbMode = 10000000;} nd_prop_list ';'$/;"	l
nd_prop	lef/lef/lef.y	/^nd_prop:$/;"	l
nd_prop_list	lef/lef/lef.y	/^nd_prop_list:$/;"	l
nd_rule	lef/lef/lef.y	/^nd_rule:$/;"	l
nd_rules	lef/lef/lef.y	/^nd_rules: \/\/ empty $/;"	l
ndr	def/defdiff/diffDefRW.cpp	/^int ndr(defrCallbackType_e c, defiNonDefault* nd, defiUserData ud) {$/;"	f
ndr	def/defrw/defrw.cpp	/^int ndr(defrCallbackType_e c, defiNonDefault* nd, defiUserData ud) {$/;"	f
need58PropsProcessing	lef/lef/lefiLayer.cpp	/^lefiLayer::need58PropsProcessing() const$/;"	f	class:lefiLayer
needGeometry	lef/include/lefrData.hpp	/^    int  needGeometry; $/;"	m	class:lefrData
needGeometry	lef/lef/lefrData.hpp	/^    int  needGeometry; $/;"	m	class:lefrData
needNPCbk	def/def/defrData.hpp	/^    int  needNPCbk; \/\/ if cbk for net path is needed$/;"	m	class:defrData
needSNPCbk	def/def/defrData.hpp	/^    int  needSNPCbk; \/\/ if cbk for snet path is needed$/;"	m	class:defrData
net	def/def/defiAssertion.cpp	/^void defiAssertion::net(int index, char** netName) const {$/;"	f	class:defiAssertion
net	def/def/defiComponent.cpp	/^const char* defiComponent::net(int index) const {$/;"	f	class:defiComponent
netCB	def/defwrite/defwriteCbs.cpp	/^int netCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
netEpxr_	lef/include/lefiMacro.hpp	/^  char* netEpxr_;$/;"	m	class:lefiPin
netEpxr_	lef/lef/lefiMacro.hpp	/^  char* netEpxr_;$/;"	m	class:lefiPin
netExpr	def/def/defiPinCap.cpp	/^const char* defiPin::netExpr() const {$/;"	f	class:defiPin
netExpr	lef/lef/lefiMacro.cpp	/^lefiPin::netExpr() const$/;"	f	class:lefiPin
netExprLength_	def/def/defiPinCap.hpp	/^  int netExprLength_;                    \/\/ 5.6$/;"	m	class:defiPin
netExpr_	def/def/defiPinCap.hpp	/^  char* netExpr_;                        \/\/ 5.6$/;"	m	class:defiPin
netName	def/def/defiAssertion.cpp	/^const char* defiAssertion::netName() const {$/;"	f	class:defiAssertion
netName	def/def/defiPinCap.cpp	/^const char* defiPin::netName() const {$/;"	f	class:defiPin
netNameLength_	def/def/defiAssertion.hpp	/^  int netNameLength_;$/;"	m	class:defiAssertion
netNameLength_	def/def/defiPinCap.hpp	/^  int netNameLength_;    \/\/ allocated size of net name$/;"	m	class:defiPin
netName_	def/def/defiAssertion.hpp	/^  char* netName_;     \/\/ wired logic net name$/;"	m	class:defiAssertion
netName_	def/def/defiPinCap.hpp	/^  char* netName_;$/;"	m	class:defiPin
netNamef	def/defrw/defrw.cpp	/^int netNamef(defrCallbackType_e c, const char* netName, defiUserData ud) {$/;"	f
netOsnet	def/def/defrData.hpp	/^    int  netOsnet; \/\/ net = 1 & snet = 2$/;"	m	class:defrData
netSeCmp	def/defdiff/diffDefRW.cpp	/^static int netSeCmp = 0;$/;"	v	file:
netWarnings	def/def/defrData.hpp	/^    int  netWarnings; $/;"	m	class:defrData
net_and_connections	def/def/def.y	/^net_and_connections: net_start$/;"	l
net_connection	def/def/def.y	/^net_connection: '(' T_STRING {defData->dumb_mode = DEF_MAX_INT; defData->no_num = DEF_MAX_INT;}$/;"	l
net_connections	def/def/def.y	/^net_connections: \/\/ empty $/;"	l
net_name	def/def/def.y	/^net_name: T_STRING$/;"	l
net_option	def/def/def.y	/^net_option: '+' net_type $/;"	l
net_options	def/def/def.y	/^net_options: \/\/ empty $/;"	l
net_prop	def/def/def.y	/^net_prop: T_STRING NUMBER$/;"	l
net_prop_list	def/def/def.y	/^net_prop_list: net_prop$/;"	l
net_rules	def/def/def.y	/^net_rules: \/\/ empty $/;"	l
net_start	def/def/def.y	/^net_start: '-' {defData->dumb_mode = DEF_MAX_INT; defData->no_num = DEF_MAX_INT; defData->nondef_is_keyword = TRUE; defData->mustjoin_is_keyword = TRUE;} net_name $/;"	l
net_type	def/def/def.y	/^net_type: K_FIXED$/;"	l
netf	def/defdiff/diffDefRW.cpp	/^int netf(defrCallbackType_e c, defiNet* net, defiUserData ud) {$/;"	f
netf	def/defrw/defrw.cpp	/^int netf(defrCallbackType_e c, defiNet* net, defiUserData ud) {$/;"	f
netpath	def/defrw/defrw.cpp	/^int netpath(defrCallbackType_e, defiNet*, defiUserData) {$/;"	f
netsAllocated_	def/def/defiComponent.hpp	/^  int netsAllocated_;   \/\/ allocated size of nets array$/;"	m	class:defiComponent
nets_	def/def/defiComponent.hpp	/^  char** nets_;         \/\/ net connections$/;"	m	class:defiComponent
nets_section	def/def/def.y	/^nets_section:  start_nets net_rules end_nets$/;"	l
netsource_type	def/def/def.y	/^netsource_type: K_NETLIST$/;"	l
newEdge	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::newEdge()$/;"	f	class:lefiCorrectionTable
newEdge	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::newEdge()$/;"	f	class:lefiNoiseTable
new_is_keyword	def/def/defrData.hpp	/^    int  new_is_keyword; $/;"	m	class:defrData
new_path	def/def/def.y	/^new_path: K_NEW { defData->dumb_mode = 1; } path$/;"	l
next	def/def/defiDefs.hpp	/^    defTOKEN *next;$/;"	m	struct:deftoken
next	def/def/defiPath.cpp	/^int defiPath::next() const $/;"	f	class:defiPath
next	def/def/defrData.hpp	/^    char*  next; $/;"	m	class:defrData
next	lef/include/lefiDefs.hpp	/^    lefTOKEN *next;$/;"	m	struct:token
next	lef/include/lefrData.hpp	/^    char*  next; $/;"	m	class:lefrData
next	lef/lef/lefiDefs.hpp	/^    lefTOKEN *next;$/;"	m	struct:token
next	lef/lef/lefrData.hpp	/^    char*  next; $/;"	m	class:lefrData
nextPt	def/def/def.y	/^nextPt: pt$/;"	l
nextPt	lef/lef/lef.y	/^nextPt:  pt$/;"	l
nl_token	def/def/defrData.hpp	/^    int  nl_token; $/;"	m	class:defrData
nlines	def/def/defrData.hpp	/^    long long nlines;$/;"	m	class:defrData
noShield	def/def/defiNet.cpp	/^const defiShield* defiNet::noShield(int index) const {$/;"	f	class:defiNet
noShield	def/def/defiNet.cpp	/^defiShield* defiNet::noShield(int index) {$/;"	f	class:defiNet
noWireExtCB	lef/lefdiff/diffLefRW.cpp	/^int noWireExtCB(lefrCallbackType_e c, const char* wireExt, lefiUserData ud) {$/;"	f
noWireExtCB	lef/lefrw/lefrw.cpp	/^int noWireExtCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
noWireExtensionWarnings	lef/include/lefrData.hpp	/^    int  noWireExtensionWarnings; $/;"	m	class:lefrData
noWireExtensionWarnings	lef/lef/lefrData.hpp	/^    int  noWireExtensionWarnings; $/;"	m	class:lefrData
no_num	def/def/defrData.hpp	/^    int  no_num; $/;"	m	class:defrData
noise	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::noise(int index) const$/;"	f	class:lefiNoiseVictim
noiseMarCB	lef/lefrw/lefrw.cpp	/^int noiseMarCB(lefrCallbackType_e c, lefiNoiseMargin *, lefiUserData) {$/;"	f
noiseMarginCB	lef/lefdiff/diffLefRW.cpp	/^int noiseMarginCB(lefrCallbackType_e c, lefiNoiseMargin* margin,$/;"	f
noiseMarginWarnings	lef/include/lefrData.hpp	/^    int  noiseMarginWarnings; $/;"	m	class:lefrData
noiseMarginWarnings	lef/lef/lefrData.hpp	/^    int  noiseMarginWarnings; $/;"	m	class:lefrData
noiseTableCB	lef/lefdiff/diffLefRW.cpp	/^int noiseTableCB(lefrCallbackType_e c, lefiNoiseTable* table, lefiUserData ud) {$/;"	f
noiseTableCB	lef/lefrw/lefrw.cpp	/^int noiseTableCB(lefrCallbackType_e c, lefiNoiseTable *, lefiUserData) {$/;"	f
noiseTableWarnings	lef/include/lefrData.hpp	/^    int  noiseTableWarnings; $/;"	m	class:lefrData
noiseTableWarnings	lef/lef/lefrData.hpp	/^    int  noiseTableWarnings; $/;"	m	class:lefrData
noise_table_entry	lef/lef/lef.y	/^noise_table_entry:$/;"	l
noise_table_list	lef/lef/lef.y	/^noise_table_list :$/;"	l
noisesAllocated_	lef/include/lefiCrossTalk.hpp	/^  int noisesAllocated_;$/;"	m	class:lefiNoiseVictim
noisesAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int noisesAllocated_;$/;"	m	class:lefiNoiseVictim
noises_	lef/include/lefiCrossTalk.hpp	/^  double* noises_;$/;"	m	class:lefiNoiseVictim
noises_	lef/lef/lefiCrossTalk.hpp	/^  double* noises_;$/;"	m	class:lefiNoiseVictim
noisetable	lef/lef/lef.y	/^noisetable: K_NOISETABLE int_number$/;"	l
nonDefaultCB	lef/lefdiff/diffLefRW.cpp	/^int nonDefaultCB(lefrCallbackType_e c, lefiNonDefault* def, lefiUserData ud) {$/;"	f
nonDefaultCB	lef/lefrw/lefrw.cpp	/^int nonDefaultCB(lefrCallbackType_e c, lefiNonDefault* def, lefiUserData) {$/;"	f
nonDefaultCB	lef/lefwrite/lefwriteCbs.cpp	/^int nonDefaultCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
nonDefaultRule	def/def/defiNet.cpp	/^const char* defiNet::nonDefaultRule() const {$/;"	f	class:defiNet
nonDefaultRule	def/def/defiNet.cpp	/^const char* defiSubnet::nonDefaultRule() const {$/;"	f	class:defiSubnet
nonDefaultRuleName	lef/include/lefrData.hpp	/^    char*  nonDefaultRuleName; $/;"	m	class:lefrData
nonDefaultRuleName	lef/lef/lefrData.hpp	/^    char*  nonDefaultRuleName; $/;"	m	class:lefrData
nonDefaultRule_	def/def/defiNet.hpp	/^  char*      nonDefaultRule_;$/;"	m	class:defiSubnet
nonDefaultRule_	def/def/defiNet.hpp	/^  char* nonDefaultRule_;$/;"	m	class:defiNet
nonDefaultWarnings	def/def/defrData.hpp	/^    int  nonDefaultWarnings; $/;"	m	class:defrData
nonDefaultWarnings	lef/include/lefrData.hpp	/^    int  nonDefaultWarnings; $/;"	m	class:lefrData
nonDefaultWarnings	lef/lef/lefrData.hpp	/^    int  nonDefaultWarnings; $/;"	m	class:lefrData
nondefRulef	def/defrw/defrw.cpp	/^int nondefRulef(defrCallbackType_e c, const char* ruleName, defiUserData ud) {$/;"	f
nondef_is_keyword	def/def/defrData.hpp	/^    int  nondef_is_keyword; $/;"	m	class:defrData
nondefault_def	def/def/def.y	/^nondefault_def: '-' { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING$/;"	l
nondefault_defs	def/def/def.y	/^nondefault_defs: \/\/ empty $/;"	l
nondefault_end	def/def/def.y	/^nondefault_end: K_END K_NONDEFAULTRULES$/;"	l
nondefault_layer_option	def/def/def.y	/^nondefault_layer_option:$/;"	l
nondefault_layer_options	def/def/def.y	/^nondefault_layer_options: \/\/ empty $/;"	l
nondefault_option	def/def/def.y	/^nondefault_option: '+' K_HARDSPACING$/;"	l
nondefault_options	def/def/def.y	/^nondefault_options: \/\/ empty  $/;"	l
nondefault_prop	def/def/def.y	/^nondefault_prop: T_STRING NUMBER$/;"	l
nondefault_prop_list	def/def/def.y	/^nondefault_prop_list: \/\/ empty $/;"	l
nondefault_prop_opt	def/def/def.y	/^nondefault_prop_opt: '+' K_PROPERTY { defData->dumb_mode = DEF_MAX_INT;  }$/;"	l
nondefault_rule	lef/lef/lef.y	/^nondefault_rule: K_NONDEFAULTRULE {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
nondefault_start	def/def/def.y	/^nondefault_start: K_NONDEFAULTRULES NUMBER ';'$/;"	l
nondefaultrule_section	def/def/def.y	/^nondefaultrule_section: nondefault_start nondefault_def nondefault_defs$/;"	l
notchLength_	lef/include/lefiLayer.hpp	/^  double* notchLength_;$/;"	m	class:lefiLayer
notchLength_	lef/lef/lefiLayer.hpp	/^  double* notchLength_;$/;"	m	class:lefiLayer
nowRise_	lef/include/lefiMacro.hpp	/^  int nowRise_;$/;"	m	class:lefiTiming
nowRise_	lef/lef/lefiMacro.hpp	/^  int nowRise_;$/;"	m	class:lefiTiming
ntokens	def/def/defrData.hpp	/^    int  ntokens; $/;"	m	class:defrData
num	def/def/defiScanchain.cpp	/^int defiOrdered::num() const {$/;"	f	class:defiOrdered
num	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::num(int index)$/;"	f	class:lefiCorrectionResistance
num	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::num()$/;"	f	class:lefiCorrectionTable
num	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::num(int index) const$/;"	f	class:lefiNoiseResistance
num	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::num()$/;"	f	class:lefiNoiseTable
numAPinDiffArea	def/def/defiPinCap.cpp	/^int defiPin::numAPinDiffArea() const {$/;"	f	class:defiPin
numAPinDiffArea_	def/def/defiPinCap.hpp	/^  int numAPinDiffArea_;                  \/\/ 5.4$/;"	m	class:defiPin
numAPinGateArea	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::numAPinGateArea() const {$/;"	f	class:defiPinAntennaModel
numAPinGateArea_	def/def/defiPinCap.hpp	/^  int numAPinGateArea_;                  \/\/ 5.4$/;"	m	class:defiPinAntennaModel
numAPinMaxAreaCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::numAPinMaxAreaCar() const {$/;"	f	class:defiPinAntennaModel
numAPinMaxAreaCar_	def/def/defiPinCap.hpp	/^  int numAPinMaxAreaCar_;                \/\/ 5.4$/;"	m	class:defiPinAntennaModel
numAPinMaxCutCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::numAPinMaxCutCar() const {$/;"	f	class:defiPinAntennaModel
numAPinMaxCutCar_	def/def/defiPinCap.hpp	/^  int numAPinMaxCutCar_;                 \/\/ 5.4$/;"	m	class:defiPinAntennaModel
numAPinMaxSideAreaCar	def/def/defiPinCap.cpp	/^int defiPinAntennaModel::numAPinMaxSideAreaCar() const {$/;"	f	class:defiPinAntennaModel
numAPinMaxSideAreaCar_	def/def/defiPinCap.hpp	/^  int numAPinMaxSideAreaCar_;            \/\/ 5.4$/;"	m	class:defiPinAntennaModel
numAPinPartialCutArea	def/def/defiPinCap.cpp	/^int defiPin::numAPinPartialCutArea() const {$/;"	f	class:defiPin
numAPinPartialCutArea_	def/def/defiPinCap.hpp	/^  int numAPinPartialCutArea_;            \/\/ 5.4$/;"	m	class:defiPin
numAPinPartialMetalArea	def/def/defiPinCap.cpp	/^int defiPin::numAPinPartialMetalArea() const {$/;"	f	class:defiPin
numAPinPartialMetalArea_	def/def/defiPinCap.hpp	/^  int numAPinPartialMetalArea_;          \/\/ 5.4$/;"	m	class:defiPin
numAPinPartialMetalSideArea	def/def/defiPinCap.cpp	/^int defiPin::numAPinPartialMetalSideArea() const {$/;"	f	class:defiPin
numAPinPartialMetalSideArea_	def/def/defiPinCap.hpp	/^  int numAPinPartialMetalSideArea_;      \/\/ 5.4$/;"	m	class:defiPin
numAccurrentDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::numAccurrentDensity() const$/;"	f	class:lefiLayer
numAccurrents_	lef/include/lefiLayer.hpp	/^  int numAccurrents_;                 \/\/ number of ACCURRENTDENSITY$/;"	m	class:lefiLayer
numAccurrents_	lef/lef/lefiLayer.hpp	/^  int numAccurrents_;                 \/\/ number of ACCURRENTDENSITY$/;"	m	class:lefiLayer
numAlloc_	lef/include/lefiLayer.hpp	/^  int numAlloc_;$/;"	m	class:lefiAntennaPWL
numAlloc_	lef/lef/lefiLayer.hpp	/^  int numAlloc_;$/;"	m	class:lefiAntennaPWL
numAllocated_	def/def/defiPath.hpp	/^  int numAllocated_;    \/\/ allocated size of keys and data$/;"	m	class:defiPath
numAllocated_	lef/include/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiInfluence
numAllocated_	lef/include/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiLayer
numAllocated_	lef/include/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiOrthogonal
numAllocated_	lef/lef/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiInfluence
numAllocated_	lef/lef/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiLayer
numAllocated_	lef/lef/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiOrthogonal
numAntennaDiffArea	lef/lef/lefiMacro.cpp	/^lefiPin::numAntennaDiffArea() const$/;"	f	class:lefiPin
numAntennaDiffArea_	lef/include/lefiMacro.hpp	/^  int numAntennaDiffArea_;$/;"	m	class:lefiPin
numAntennaDiffArea_	lef/lef/lefiMacro.hpp	/^  int numAntennaDiffArea_;$/;"	m	class:lefiPin
numAntennaGateArea	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::numAntennaGateArea() const$/;"	f	class:lefiPinAntennaModel
numAntennaGateArea_	lef/include/lefiMacro.hpp	/^  int numAntennaGateArea_;$/;"	m	class:lefiPinAntennaModel
numAntennaGateArea_	lef/lef/lefiMacro.hpp	/^  int numAntennaGateArea_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxAreaCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::numAntennaMaxAreaCar() const$/;"	f	class:lefiPinAntennaModel
numAntennaMaxAreaCar_	lef/include/lefiMacro.hpp	/^  int numAntennaMaxAreaCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxAreaCar_	lef/lef/lefiMacro.hpp	/^  int numAntennaMaxAreaCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxCutCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::numAntennaMaxCutCar() const$/;"	f	class:lefiPinAntennaModel
numAntennaMaxCutCar_	lef/include/lefiMacro.hpp	/^  int numAntennaMaxCutCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxCutCar_	lef/lef/lefiMacro.hpp	/^  int numAntennaMaxCutCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxSideAreaCar	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::numAntennaMaxSideAreaCar() const$/;"	f	class:lefiPinAntennaModel
numAntennaMaxSideAreaCar_	lef/include/lefiMacro.hpp	/^  int numAntennaMaxSideAreaCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxSideAreaCar_	lef/lef/lefiMacro.hpp	/^  int numAntennaMaxSideAreaCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMetalArea	lef/lef/lefiMacro.cpp	/^lefiPin::numAntennaMetalArea() const$/;"	f	class:lefiPin
numAntennaMetalArea_	lef/include/lefiMacro.hpp	/^  int numAntennaMetalArea_;$/;"	m	class:lefiPin
numAntennaMetalArea_	lef/lef/lefiMacro.hpp	/^  int numAntennaMetalArea_;$/;"	m	class:lefiPin
numAntennaMetalLength	lef/lef/lefiMacro.cpp	/^lefiPin::numAntennaMetalLength() const$/;"	f	class:lefiPin
numAntennaMetalLength_	lef/include/lefiMacro.hpp	/^  int numAntennaMetalLength_;$/;"	m	class:lefiPin
numAntennaMetalLength_	lef/lef/lefiMacro.hpp	/^  int numAntennaMetalLength_;$/;"	m	class:lefiPin
numAntennaModel	def/def/defiPinCap.cpp	/^int defiPin::numAntennaModel() const {$/;"	f	class:defiPin
numAntennaModel	lef/lef/lefiLayer.cpp	/^lefiLayer::numAntennaModel() const$/;"	f	class:lefiLayer
numAntennaModel	lef/lef/lefiMacro.cpp	/^lefiPin::numAntennaModel() const$/;"	f	class:lefiPin
numAntennaModel_	def/def/defiPinCap.hpp	/^  int numAntennaModel_;$/;"	m	class:defiPin
numAntennaModel_	lef/include/lefiLayer.hpp	/^  int numAntennaModel_;$/;"	m	class:lefiLayer
numAntennaModel_	lef/include/lefiMacro.hpp	/^  int numAntennaModel_;$/;"	m	class:lefiPin
numAntennaModel_	lef/lef/lefiLayer.hpp	/^  int numAntennaModel_;$/;"	m	class:lefiLayer
numAntennaModel_	lef/lef/lefiMacro.hpp	/^  int numAntennaModel_;$/;"	m	class:lefiPin
numAntennaPartialCutArea	lef/lef/lefiMacro.cpp	/^lefiPin::numAntennaPartialCutArea() const$/;"	f	class:lefiPin
numAntennaPartialCutArea_	lef/include/lefiMacro.hpp	/^  int numAntennaPartialCutArea_;$/;"	m	class:lefiPin
numAntennaPartialCutArea_	lef/lef/lefiMacro.hpp	/^  int numAntennaPartialCutArea_;$/;"	m	class:lefiPin
numAntennaPartialMetalArea	lef/lef/lefiMacro.cpp	/^lefiPin::numAntennaPartialMetalArea() const$/;"	f	class:lefiPin
numAntennaPartialMetalArea_	lef/include/lefiMacro.hpp	/^  int numAntennaPartialMetalArea_;$/;"	m	class:lefiPin
numAntennaPartialMetalArea_	lef/lef/lefiMacro.hpp	/^  int numAntennaPartialMetalArea_;$/;"	m	class:lefiPin
numAntennaPartialMetalSideArea	lef/lef/lefiMacro.cpp	/^lefiPin::numAntennaPartialMetalSideArea() const$/;"	f	class:lefiPin
numAntennaPartialMetalSideArea_	lef/include/lefiMacro.hpp	/^  int numAntennaPartialMetalSideArea_;$/;"	m	class:lefiPin
numAntennaPartialMetalSideArea_	lef/lef/lefiMacro.hpp	/^  int numAntennaPartialMetalSideArea_;$/;"	m	class:lefiPin
numAntennaSize	lef/lef/lefiMacro.cpp	/^lefiPin::numAntennaSize() const$/;"	f	class:lefiPin
numAntennaSize_	lef/include/lefiMacro.hpp	/^  int numAntennaSize_;$/;"	m	class:lefiPin
numAntennaSize_	lef/lef/lefiMacro.hpp	/^  int numAntennaSize_;$/;"	m	class:lefiPin
numArrayCuts	lef/lef/lefiLayer.cpp	/^lefiLayer::numArrayCuts() const$/;"	f	class:lefiLayer
numArrayCuts_	lef/include/lefiLayer.hpp	/^  int     numArrayCuts_;$/;"	m	class:lefiLayer
numArrayCuts_	lef/lef/lefiLayer.hpp	/^  int     numArrayCuts_;$/;"	m	class:lefiLayer
numCRs	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::numCRs() const$/;"	f	class:lefiGcellPattern
numCRs_	lef/include/lefiMisc.hpp	/^  int    numCRs_;$/;"	m	class:lefiGcellPattern
numCRs_	lef/lef/lefiMisc.hpp	/^  int    numCRs_;$/;"	m	class:lefiGcellPattern
numCanPlace	lef/lef/lefiArray.cpp	/^lefiArray::numCanPlace() const$/;"	f	class:lefiArray
numCan_	lef/include/lefiArray.hpp	/^  int numCan_;$/;"	m	class:lefiArray
numCan_	lef/lef/lefiArray.hpp	/^  int numCan_;$/;"	m	class:lefiArray
numCannotOccupy	lef/lef/lefiArray.cpp	/^lefiArray::numCannotOccupy() const$/;"	f	class:lefiArray
numCannot_	lef/include/lefiArray.hpp	/^  int numCannot_;$/;"	m	class:lefiArray
numCannot_	lef/lef/lefiArray.hpp	/^  int numCannot_;$/;"	m	class:lefiArray
numCapacitancePoints_	lef/include/lefiLayer.hpp	/^  int numCapacitancePoints_;$/;"	m	class:lefiLayer
numCapacitancePoints_	lef/lef/lefiLayer.hpp	/^  int numCapacitancePoints_;$/;"	m	class:lefiLayer
numCols_	lef/include/lefiVia.hpp	/^  int numCols_;                \/\/ 5.6$/;"	m	class:lefiVia
numCols_	lef/lef/lefiVia.hpp	/^  int numCols_;                \/\/ 5.6$/;"	m	class:lefiVia
numConnections	def/def/defiNet.cpp	/^int defiNet::numConnections() const {$/;"	f	class:defiNet
numConnections	def/def/defiNet.cpp	/^int defiSubnet::numConnections() const {$/;"	f	class:defiSubnet
numCorrections	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::numCorrections()$/;"	f	class:lefiCorrectionVictim
numCorrections_	lef/include/lefiCrossTalk.hpp	/^  int numCorrections_;$/;"	m	class:lefiCorrectionVictim
numCorrections_	lef/lef/lefiCrossTalk.hpp	/^  int numCorrections_;$/;"	m	class:lefiCorrectionVictim
numCurrentPoints_	lef/include/lefiLayer.hpp	/^  int numCurrentPoints_;$/;"	m	class:lefiLayer
numCurrentPoints_	lef/lef/lefiLayer.hpp	/^  int numCurrentPoints_;$/;"	m	class:lefiLayer
numCutCols	lef/lef/lefiVia.cpp	/^lefiVia::numCutCols() const$/;"	f	class:lefiVia
numCutOrtho_	lef/include/lefiLayer.hpp	/^  int numCutOrtho_;$/;"	m	class:lefiOrthogonal
numCutOrtho_	lef/lef/lefiLayer.hpp	/^  int numCutOrtho_;$/;"	m	class:lefiOrthogonal
numCutRows	lef/lef/lefiVia.cpp	/^lefiVia::numCutRows() const$/;"	f	class:lefiVia
numCutareas	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::numCutareas() const$/;"	f	class:lefiLayerDensity
numCutareas_	lef/include/lefiLayer.hpp	/^  int numCutareas_;$/;"	m	class:lefiLayerDensity
numCutareas_	lef/lef/lefiLayer.hpp	/^  int numCutareas_;$/;"	m	class:lefiLayerDensity
numCuts	def/def/defiNonDefault.cpp	/^int defiNonDefault::numCuts(int index) const {$/;"	f	class:defiNonDefault
numCuts	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::numCuts(int index) const$/;"	f	class:lefiNonDefault
numCuts_	def/def/defiNonDefault.hpp	/^  int*    numCuts_;$/;"	m	class:defiNonDefault
numCuts_	lef/include/lefiNonDefault.hpp	/^  int*   numCuts_;                 \/\/ 5.6$/;"	m	class:lefiNonDefault
numCuts_	lef/lef/lefiNonDefault.hpp	/^  int*   numCuts_;                 \/\/ 5.6$/;"	m	class:lefiNonDefault
numDccurrentDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::numDccurrentDensity() const$/;"	f	class:lefiLayer
numDccurrents_	lef/include/lefiLayer.hpp	/^  int numDccurrents_;                 \/\/ number of DCCURRENTDENSITY$/;"	m	class:lefiLayer
numDccurrents_	lef/lef/lefiLayer.hpp	/^  int numDccurrents_;                 \/\/ number of DCCURRENTDENSITY$/;"	m	class:lefiLayer
numDefaultCaps	lef/lef/lefiArray.cpp	/^lefiArray::numDefaultCaps() const$/;"	f	class:lefiArray
numDefault_	lef/include/lefiArray.hpp	/^  int numDefault_;$/;"	m	class:lefiArray
numDefault_	lef/lef/lefiArray.hpp	/^  int numDefault_;$/;"	m	class:lefiArray
numDistance_	lef/include/lefiLayer.hpp	/^  int numDistance_;$/;"	m	class:lefiInfluence
numDistance_	lef/lef/lefiLayer.hpp	/^  int numDistance_;$/;"	m	class:lefiInfluence
numEdges	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::numEdges()$/;"	f	class:lefiCorrectionTable
numEdges	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::numEdges()$/;"	f	class:lefiNoiseTable
numEdges_	lef/include/lefiCrossTalk.hpp	/^  int numEdges_;$/;"	m	class:lefiCorrectionTable
numEdges_	lef/include/lefiCrossTalk.hpp	/^  int numEdges_;$/;"	m	class:lefiNoiseTable
numEdges_	lef/lef/lefiCrossTalk.hpp	/^  int numEdges_;$/;"	m	class:lefiCorrectionTable
numEdges_	lef/lef/lefiCrossTalk.hpp	/^  int numEdges_;$/;"	m	class:lefiNoiseTable
numEnclosure	lef/lef/lefiLayer.cpp	/^lefiLayer::numEnclosure() const$/;"	f	class:lefiLayer
numEnclosure_	lef/include/lefiLayer.hpp	/^  int numEnclosure_;$/;"	m	class:lefiLayer
numEnclosure_	lef/lef/lefiLayer.hpp	/^  int numEnclosure_;$/;"	m	class:lefiLayer
numFloatingAllocated_	def/def/defiScanchain.hpp	/^  int numFloatingAllocated_;$/;"	m	class:defiScanchain
numFloating_	def/def/defiScanchain.hpp	/^  int numFloating_;$/;"	m	class:defiScanchain
numFloorPlans	lef/lef/lefiArray.cpp	/^lefiArray::numFloorPlans() const$/;"	f	class:lefiArray
numFloorPlans_	lef/include/lefiArray.hpp	/^  int numFloorPlans_;$/;"	m	class:lefiArray
numFloorPlans_	lef/lef/lefiArray.hpp	/^  int numFloorPlans_;$/;"	m	class:lefiArray
numForeigns	lef/lef/lefiMacro.cpp	/^lefiMacro::numForeigns() const$/;"	f	class:lefiMacro
numForeigns	lef/lef/lefiMacro.cpp	/^lefiPin::numForeigns() const$/;"	f	class:lefiPin
numForeigns_	lef/include/lefiMacro.hpp	/^  int     numForeigns_;$/;"	m	class:lefiPin
numForeigns_	lef/include/lefiMacro.hpp	/^  int numForeigns_;$/;"	m	class:lefiMacro
numForeigns_	lef/lef/lefiMacro.hpp	/^  int     numForeigns_;$/;"	m	class:lefiPin
numForeigns_	lef/lef/lefiMacro.hpp	/^  int numForeigns_;$/;"	m	class:lefiMacro
numFrequency	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::numFrequency() const$/;"	f	class:lefiLayerDensity
numFrequency_	lef/include/lefiLayer.hpp	/^  int numFrequency_;$/;"	m	class:lefiLayerDensity
numFrequency_	lef/lef/lefiLayer.hpp	/^  int numFrequency_;$/;"	m	class:lefiLayerDensity
numFromPins	lef/lef/lefiMacro.cpp	/^lefiTiming::numFromPins()$/;"	f	class:lefiTiming
numFrom_	lef/include/lefiMacro.hpp	/^  int numFrom_;$/;"	m	class:lefiTiming
numFrom_	lef/lef/lefiMacro.hpp	/^  int numFrom_;$/;"	m	class:lefiTiming
numG_	lef/include/lefiArray.hpp	/^  int numG_;$/;"	m	class:lefiArray
numG_	lef/lef/lefiArray.hpp	/^  int numG_;$/;"	m	class:lefiArray
numGcell	lef/lef/lefiArray.cpp	/^lefiArray::numGcell() const$/;"	f	class:lefiArray
numInfluenceEntry	lef/lef/lefiLayer.cpp	/^lefiInfluence::numInfluenceEntry() const$/;"	f	class:lefiInfluence
numIsInt	def/def/defrData.cpp	/^defrData::numIsInt (char* volt) {$/;"	f	class:defrData
numItems	def/def/defiAssertion.cpp	/^int defiAssertion::numItems() const {$/;"	f	class:defiAssertion
numItems	lef/lef/lefiMisc.cpp	/^lefiGeometries::numItems() const$/;"	f	class:lefiGeometries
numItemsAllocated_	def/def/defiAssertion.hpp	/^  int numItemsAllocated_;$/;"	m	class:defiAssertion
numItems_	def/def/defiAssertion.hpp	/^  int numItems_;$/;"	m	class:defiAssertion
numItems_	lef/include/lefiMisc.hpp	/^  int numItems_;$/;"	m	class:lefiGeometries
numItems_	lef/lef/lefiMisc.hpp	/^  int numItems_;$/;"	m	class:lefiGeometries
numLayer	def/def/defiPinCap.cpp	/^int defiPin::numLayer() const {$/;"	f	class:defiPin
numLayer	def/def/defiPinCap.cpp	/^int defiPinPort::numLayer() const {$/;"	f	class:defiPinPort
numLayer	lef/lef/lefiMacro.cpp	/^lefiDensity::numLayer() const$/;"	f	class:lefiDensity
numLayers	def/def/defiNonDefault.cpp	/^int defiNonDefault::numLayers() const { $/;"	f	class:defiNonDefault
numLayers	def/def/defiRowTrack.cpp	/^int defiTrack::numLayers() const {$/;"	f	class:defiTrack
numLayers	def/def/defiVia.cpp	/^int defiVia::numLayers() const {$/;"	f	class:defiVia
numLayers	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::numLayers() const$/;"	f	class:lefiTrackPattern
numLayers	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::numLayers() const$/;"	f	class:lefiNonDefault
numLayers	lef/lef/lefiVia.cpp	/^lefiVia::numLayers() const$/;"	f	class:lefiVia
numLayers	lef/lef/lefiViaRule.cpp	/^lefiViaRule::numLayers() const$/;"	f	class:lefiViaRule
numLayers_	def/def/defiComponent.hpp	/^    int          numLayers_;        \/\/ number of places used in layers_$/;"	m	class:defiComponentMaskShiftLayer
numLayers_	def/def/defiNonDefault.hpp	/^  int     numLayers_;$/;"	m	class:defiNonDefault
numLayers_	def/def/defiPinCap.hpp	/^  int    numLayers_;$/;"	m	class:defiPinPort
numLayers_	def/def/defiPinCap.hpp	/^  int numLayers_;                   \/\/ 5.6$/;"	m	class:defiPin
numLayers_	def/def/defiRowTrack.hpp	/^  int numLayers_;  \/\/ number of places used in layers_$/;"	m	class:defiTrack
numLayers_	def/def/defiVia.hpp	/^  int numLayers_;$/;"	m	class:defiVia
numLayers_	lef/include/lefiMacro.hpp	/^  int    numLayers_;$/;"	m	class:lefiDensity
numLayers_	lef/include/lefiMisc.hpp	/^  int    numLayers_;$/;"	m	class:lefiTrackPattern
numLayers_	lef/include/lefiNonDefault.hpp	/^  int numLayers_;$/;"	m	class:lefiNonDefault
numLayers_	lef/include/lefiVia.hpp	/^  int numLayers_;$/;"	m	class:lefiVia
numLayers_	lef/include/lefiViaRule.hpp	/^  int numLayers_;$/;"	m	class:lefiViaRule
numLayers_	lef/lef/lefiMacro.hpp	/^  int    numLayers_;$/;"	m	class:lefiDensity
numLayers_	lef/lef/lefiMisc.hpp	/^  int    numLayers_;$/;"	m	class:lefiTrackPattern
numLayers_	lef/lef/lefiNonDefault.hpp	/^  int numLayers_;$/;"	m	class:lefiNonDefault
numLayers_	lef/lef/lefiVia.hpp	/^  int numLayers_;$/;"	m	class:lefiVia
numLayers_	lef/lef/lefiViaRule.hpp	/^  int numLayers_;$/;"	m	class:lefiViaRule
numLength	lef/lef/lefiLayer.cpp	/^lefiParallel::numLength() const$/;"	f	class:lefiParallel
numLength_	lef/include/lefiLayer.hpp	/^  int numLength_;$/;"	m	class:lefiParallel
numLength_	lef/lef/lefiLayer.hpp	/^  int numLength_;$/;"	m	class:lefiParallel
numMaskShiftLayers	def/def/defiComponent.cpp	/^int defiComponentMaskShiftLayer::numMaskShiftLayers() const {$/;"	f	class:defiComponentMaskShiftLayer
numMinCuts	def/def/defiNonDefault.cpp	/^int defiNonDefault::numMinCuts() const {$/;"	f	class:defiNonDefault
numMinCuts	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::numMinCuts() const$/;"	f	class:lefiNonDefault
numMinCuts_	def/def/defiNonDefault.hpp	/^  int     numMinCuts_;$/;"	m	class:defiNonDefault
numMinCuts_	lef/include/lefiNonDefault.hpp	/^  int    numMinCuts_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
numMinCuts_	lef/lef/lefiNonDefault.hpp	/^  int    numMinCuts_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
numMinSize	lef/lef/lefiLayer.cpp	/^lefiLayer::numMinSize() const$/;"	f	class:lefiLayer
numMinSize_	lef/include/lefiLayer.hpp	/^  int numMinSize_;$/;"	m	class:lefiLayer
numMinSize_	lef/lef/lefiLayer.hpp	/^  int numMinSize_;$/;"	m	class:lefiLayer
numMinenclosedarea	lef/lef/lefiLayer.cpp	/^lefiLayer::numMinenclosedarea() const$/;"	f	class:lefiLayer
numMinenclosedarea_	lef/include/lefiLayer.hpp	/^  int     numMinenclosedarea_;                \/\/ 5.5$/;"	m	class:lefiLayer
numMinenclosedarea_	lef/lef/lefiLayer.hpp	/^  int     numMinenclosedarea_;                \/\/ 5.5$/;"	m	class:lefiLayer
numMinimumcut	lef/lef/lefiLayer.cpp	/^lefiLayer::numMinimumcut() const$/;"	f	class:lefiLayer
numMinimumcut_	lef/include/lefiLayer.hpp	/^  int     numMinimumcut_;$/;"	m	class:lefiLayer
numMinimumcut_	lef/lef/lefiLayer.hpp	/^  int     numMinimumcut_;$/;"	m	class:lefiLayer
numMinstep	lef/lef/lefiLayer.cpp	/^lefiLayer::numMinstep() const$/;"	f	class:lefiLayer
numMinstepAlloc_	lef/include/lefiLayer.hpp	/^  int     numMinstepAlloc_;                   \/\/ 5.6$/;"	m	class:lefiLayer
numMinstepAlloc_	lef/lef/lefiLayer.hpp	/^  int     numMinstepAlloc_;                   \/\/ 5.6$/;"	m	class:lefiLayer
numMinstep_	lef/include/lefiLayer.hpp	/^  int     numMinstep_;                        \/\/ 5.6$/;"	m	class:lefiLayer
numMinstep_	lef/lef/lefiLayer.hpp	/^  int     numMinstep_;                        \/\/ 5.6$/;"	m	class:lefiLayer
numNets	def/def/defiComponent.cpp	/^int defiComponent::numNets() const {$/;"	f	class:defiComponent
numNets_	def/def/defiComponent.hpp	/^  int numNets_;         \/\/ number of net connections$/;"	m	class:defiComponent
numNoShields	def/def/defiNet.cpp	/^int defiNet::numNoShields() const {$/;"	f	class:defiNet
numNoShields_	def/def/defiNet.hpp	/^  int          numNoShields_;          \/\/ number of NOSHIELD paths used$/;"	m	class:defiNet
numNoises	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::numNoises() const$/;"	f	class:lefiNoiseVictim
numNoises_	lef/include/lefiCrossTalk.hpp	/^  int numNoises_;$/;"	m	class:lefiNoiseVictim
numNoises_	lef/lef/lefiCrossTalk.hpp	/^  int numNoises_;$/;"	m	class:lefiNoiseVictim
numNums	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::numNums()$/;"	f	class:lefiCorrectionResistance
numNums	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::numNums() const$/;"	f	class:lefiNoiseResistance
numNums_	lef/include/lefiCrossTalk.hpp	/^  int numNums_;$/;"	m	class:lefiCorrectionResistance
numNums_	lef/include/lefiCrossTalk.hpp	/^  int numNums_;$/;"	m	class:lefiNoiseResistance
numNums_	lef/include/lefiLayer.hpp	/^  int numNums_;$/;"	m	class:lefiLayer
numNums_	lef/lef/lefiCrossTalk.hpp	/^  int numNums_;$/;"	m	class:lefiCorrectionResistance
numNums_	lef/lef/lefiCrossTalk.hpp	/^  int numNums_;$/;"	m	class:lefiNoiseResistance
numNums_	lef/lef/lefiLayer.hpp	/^  int numNums_;$/;"	m	class:lefiLayer
numObjs	def/defdiff/diffDefRW.cpp	/^int numObjs;$/;"	v
numObjs	def/defrw/defrw.cpp	/^int numObjs;$/;"	v
numOfAxisNumbers	lef/lef/lefiMacro.cpp	/^lefiTiming::numOfAxisNumbers()$/;"	f	class:lefiTiming
numOfAxisNumbers_	lef/include/lefiMacro.hpp	/^  int numOfAxisNumbers_;$/;"	m	class:lefiTiming
numOfAxisNumbers_	lef/lef/lefiMacro.hpp	/^  int numOfAxisNumbers_;$/;"	m	class:lefiTiming
numOfTableEntries	lef/lef/lefiMacro.cpp	/^lefiTiming::numOfTableEntries()$/;"	f	class:lefiTiming
numOfTableEntries_	lef/include/lefiMacro.hpp	/^  int numOfTableEntries_;$/;"	m	class:lefiTiming
numOfTableEntries_	lef/lef/lefiMacro.hpp	/^  int numOfTableEntries_;$/;"	m	class:lefiTiming
numOrderedAllocated_	def/def/defiScanchain.hpp	/^  int numOrderedAllocated_;$/;"	m	class:defiScanchain
numOrderedLists	def/def/defiScanchain.cpp	/^int defiScanchain::numOrderedLists() const {$/;"	f	class:defiScanchain
numOrdered_	def/def/defiScanchain.hpp	/^  int numOrdered_;$/;"	m	class:defiScanchain
numOrthogonal	lef/lef/lefiLayer.cpp	/^lefiOrthogonal::numOrthogonal() const$/;"	f	class:lefiOrthogonal
numPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::numPWL() const$/;"	f	class:lefiAntennaPWL
numPWL_	lef/include/lefiLayer.hpp	/^  int numPWL_;$/;"	m	class:lefiAntennaPWL
numPWL_	lef/lef/lefiLayer.hpp	/^  int numPWL_;$/;"	m	class:lefiAntennaPWL
numParts	def/def/defiFPC.cpp	/^int defiFPC::numParts() const {$/;"	f	class:defiFPC
numPaths	def/def/defiNet.cpp	/^int defiNet::numPaths() const {$/;"	f	class:defiNet
numPaths	def/def/defiNet.cpp	/^int defiShield::numPaths() const {$/;"	f	class:defiShield
numPaths	def/def/defiNet.cpp	/^int defiSubnet::numPaths() const {$/;"	f	class:defiSubnet
numPaths	def/def/defiNet.cpp	/^int defiWire::numPaths() const {$/;"	f	class:defiWire
numPaths_	def/def/defiNet.hpp	/^  int        numPaths_;       \/\/ number of paths used$/;"	m	class:defiNet
numPaths_	def/def/defiNet.hpp	/^  int        numPaths_;       \/\/ number of paths used$/;"	m	class:defiSubnet
numPaths_	def/def/defiNet.hpp	/^  int        numPaths_;$/;"	m	class:defiShield
numPaths_	def/def/defiNet.hpp	/^  int        numPaths_;$/;"	m	class:defiWire
numPatterns	lef/lef/lefiArray.cpp	/^lefiArrayFloorPlan::numPatterns() const$/;"	f	class:lefiArrayFloorPlan
numPatterns_	lef/include/lefiArray.hpp	/^  int numPatterns_;$/;"	m	class:lefiArray
numPatterns_	lef/include/lefiArray.hpp	/^  int numPatterns_;$/;"	m	class:lefiArrayFloorPlan
numPatterns_	lef/lef/lefiArray.hpp	/^  int numPatterns_;$/;"	m	class:lefiArray
numPatterns_	lef/lef/lefiArray.hpp	/^  int numPatterns_;$/;"	m	class:lefiArrayFloorPlan
numPins	def/def/defiPartition.cpp	/^int defiPartition::numPins() const {$/;"	f	class:defiPartition
numPins_	def/def/defiNet.hpp	/^  int           numPins_;           \/\/ number of pins used in array.$/;"	m	class:defiSubnet
numPins_	def/def/defiNet.hpp	/^  int       numPins_;       \/\/ number of pins used in array.$/;"	m	class:defiNet
numPins_	def/def/defiPartition.hpp	/^  int numPins_;$/;"	m	class:defiPartition
numPointAlloc_	def/def/defiMisc.hpp	/^    int    numPointAlloc_;$/;"	m	class:defiStyles
numPoints	def/cdef/defiTypedefs.h	/^  int numPoints;$/;"	m	struct:defiPoints
numPoints	def/def/defiMisc.cpp	/^int defiGeometries::numPoints() const {$/;"	f	class:defiGeometries
numPoints	def/def/defiMisc.hpp	/^  int numPoints;$/;"	m	struct:defiPoints
numPoints	lef/clef/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPath
numPoints	lef/clef/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPathIter
numPoints	lef/clef/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPolygon
numPoints	lef/clef/lefiTypedefs.h	/^  int numPoints;$/;"	m	struct:lefiGeomPolygonIter
numPoints	lef/include/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPath
numPoints	lef/include/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPathIter
numPoints	lef/include/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPolygon
numPoints	lef/include/lefiMisc.hpp	/^  int numPoints;$/;"	m	struct:lefiGeomPolygonIter
numPoints	lef/include/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPath
numPoints	lef/include/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPathIter
numPoints	lef/include/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPolygon
numPoints	lef/include/lefiTypedefs.h	/^  int numPoints;$/;"	m	struct:lefiGeomPolygonIter
numPoints	lef/lef/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPath
numPoints	lef/lef/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPathIter
numPoints	lef/lef/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPolygon
numPoints	lef/lef/lefiMisc.hpp	/^  int numPoints;$/;"	m	struct:lefiGeomPolygonIter
numPoints_	def/def/defiMisc.hpp	/^  int numPoints_;$/;"	m	class:defiGeometries
numPoints_	lef/include/lefiMisc.hpp	/^  int numPoints_;$/;"	m	class:lefiGeometries
numPoints_	lef/lef/lefiMisc.hpp	/^  int numPoints_;$/;"	m	class:lefiGeometries
numPolygons	def/def/defiBlockage.cpp	/^int defiBlockage::numPolygons() const {$/;"	f	class:defiBlockage
numPolygons	def/def/defiFill.cpp	/^int defiFill::numPolygons() const {$/;"	f	class:defiFill
numPolygons	def/def/defiNet.cpp	/^int defiNet::numPolygons() const {$/;"	f	class:defiNet
numPolygons	def/def/defiPinCap.cpp	/^int defiPin::numPolygons() const {$/;"	f	class:defiPin
numPolygons	def/def/defiPinCap.cpp	/^int defiPinPort::numPolygons() const {$/;"	f	class:defiPinPort
numPolygons	def/def/defiSlot.cpp	/^int defiSlot::numPolygons() const {$/;"	f	class:defiSlot
numPolygons	def/def/defiVia.cpp	/^int defiVia::numPolygons() const {$/;"	f	class:defiVia
numPolygons	lef/lef/lefiVia.cpp	/^lefiVia::numPolygons(int layerNum) const$/;"	f	class:lefiVia
numPolygons	lef/lef/lefiVia.cpp	/^lefiViaLayer::numPolygons()$/;"	f	class:lefiViaLayer
numPolys_	def/def/defiBlockage.hpp	/^  int    numPolys_;                      \/\/ 5.6$/;"	m	class:defiBlockage
numPolys_	def/def/defiFill.hpp	/^  int   numPolys_;                  \/\/ 5.6$/;"	m	class:defiFill
numPolys_	def/def/defiNet.hpp	/^  int          numPolys_;              \/\/ 5.6$/;"	m	class:defiNet
numPolys_	def/def/defiPinCap.hpp	/^  int    numPolys_;$/;"	m	class:defiPinPort
numPolys_	def/def/defiPinCap.hpp	/^  int numPolys_;                    \/\/ 5.6$/;"	m	class:defiPin
numPolys_	def/def/defiSlot.hpp	/^  int   numPolys_;                  \/\/ 5.6$/;"	m	class:defiSlot
numPolys_	def/def/defiVia.hpp	/^  int numPolys_;            \/\/ 5.6$/;"	m	class:defiVia
numPolys_	lef/include/lefiVia.hpp	/^  int numPolys_;$/;"	m	class:lefiViaLayer
numPolys_	lef/lef/lefiVia.hpp	/^  int numPolys_;$/;"	m	class:lefiViaLayer
numPorts	def/def/defiPinCap.cpp	/^int defiPin::numPorts() const {$/;"	f	class:defiPin
numPorts	lef/lef/lefiMacro.cpp	/^lefiPin::numPorts() const$/;"	f	class:lefiPin
numPorts_	def/def/defiPinCap.hpp	/^  int numPorts_;                    \/\/ 5.7$/;"	m	class:defiPin
numPorts_	lef/include/lefiMacro.hpp	/^  int numPorts_;$/;"	m	class:lefiPin
numPorts_	lef/lef/lefiMacro.hpp	/^  int numPorts_;$/;"	m	class:lefiPin
numPreferEnclosure	lef/lef/lefiLayer.cpp	/^lefiLayer::numPreferEnclosure() const$/;"	f	class:lefiLayer
numPreferEnclosure_	lef/include/lefiLayer.hpp	/^  int numPreferEnclosure_;$/;"	m	class:lefiLayer
numPreferEnclosure_	lef/lef/lefiLayer.hpp	/^  int numPreferEnclosure_;$/;"	m	class:lefiLayer
numProperties	lef/lef/lefiMacro.cpp	/^lefiMacro::numProperties() const$/;"	f	class:lefiMacro
numProperties	lef/lef/lefiMacro.cpp	/^lefiPin::numProperties() const$/;"	f	class:lefiPin
numProperties	lef/lef/lefiVia.cpp	/^lefiVia::numProperties() const$/;"	f	class:lefiVia
numProperties_	def/def/defiPropType.hpp	/^  int    numProperties_;$/;"	m	class:defiPropType
numProperties_	lef/include/lefiMacro.hpp	/^  int numProperties_;$/;"	m	class:lefiMacro
numProperties_	lef/include/lefiMacro.hpp	/^  int numProperties_;$/;"	m	class:lefiPin
numProperties_	lef/include/lefiPropType.hpp	/^  int    numProperties_;$/;"	m	class:lefiPropType
numProperties_	lef/lef/lefiMacro.hpp	/^  int numProperties_;$/;"	m	class:lefiMacro
numProperties_	lef/lef/lefiMacro.hpp	/^  int numProperties_;$/;"	m	class:lefiPin
numProperties_	lef/lef/lefiPropType.hpp	/^  int    numProperties_;$/;"	m	class:lefiPropType
numProps	def/def/defiComponent.cpp	/^int defiComponent::numProps() const {$/;"	f	class:defiComponent
numProps	def/def/defiGroup.cpp	/^int defiGroup::numProps() const {$/;"	f	class:defiGroup
numProps	def/def/defiNet.cpp	/^int defiNet::numProps() const {$/;"	f	class:defiNet
numProps	def/def/defiNonDefault.cpp	/^int defiNonDefault::numProps() const {$/;"	f	class:defiNonDefault
numProps	def/def/defiPinProp.cpp	/^int defiPinProp::numProps() const {$/;"	f	class:defiPinProp
numProps	def/def/defiRegion.cpp	/^int defiRegion::numProps() const {$/;"	f	class:defiRegion
numProps	def/def/defiRowTrack.cpp	/^int defiRow::numProps() const {$/;"	f	class:defiRow
numProps	lef/lef/lefiLayer.cpp	/^lefiLayer::numProps() const$/;"	f	class:lefiLayer
numProps	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::numProps() const$/;"	f	class:lefiNonDefault
numProps	lef/lef/lefiViaRule.cpp	/^lefiViaRule::numProps() const$/;"	f	class:lefiViaRule
numProps_	def/def/defiComponent.hpp	/^  int numProps_;$/;"	m	class:defiComponent
numProps_	def/def/defiGroup.hpp	/^  int numProps_;$/;"	m	class:defiGroup
numProps_	def/def/defiNet.hpp	/^  int numProps_;        \/\/ num of props in array$/;"	m	class:defiNet
numProps_	def/def/defiNonDefault.hpp	/^  int     numProps_;$/;"	m	class:defiNonDefault
numProps_	def/def/defiPinProp.hpp	/^  int numProps_;$/;"	m	class:defiPinProp
numProps_	def/def/defiRegion.hpp	/^  int numProps_;$/;"	m	class:defiRegion
numProps_	def/def/defiRowTrack.hpp	/^  int numProps_;$/;"	m	class:defiRow
numProps_	lef/include/lefiLayer.hpp	/^  int numProps_;$/;"	m	class:lefiLayer
numProps_	lef/include/lefiNonDefault.hpp	/^  int numProps_;$/;"	m	class:lefiNonDefault
numProps_	lef/include/lefiVia.hpp	/^  int numProps_;$/;"	m	class:lefiVia
numProps_	lef/include/lefiViaRule.hpp	/^  int numProps_;$/;"	m	class:lefiViaRule
numProps_	lef/lef/lefiLayer.hpp	/^  int numProps_;$/;"	m	class:lefiLayer
numProps_	lef/lef/lefiNonDefault.hpp	/^  int numProps_;$/;"	m	class:lefiNonDefault
numProps_	lef/lef/lefiVia.hpp	/^  int numProps_;$/;"	m	class:lefiVia
numProps_	lef/lef/lefiViaRule.hpp	/^  int numProps_;$/;"	m	class:lefiViaRule
numPts_	def/def/defiFill.hpp	/^  int   numPts_;                    \/\/ 5.7$/;"	m	class:defiFill
numPts_	def/def/defiNet.hpp	/^  int                 numPts_;                    $/;"	m	class:defiNet
numRectangles	def/def/defiBlockage.cpp	/^int defiBlockage::numRectangles() const {$/;"	f	class:defiBlockage
numRectangles	def/def/defiFill.cpp	/^int defiFill::numRectangles() const {$/;"	f	class:defiFill
numRectangles	def/def/defiNet.cpp	/^int defiNet::numRectangles() const {$/;"	f	class:defiNet
numRectangles	def/def/defiRegion.cpp	/^int defiRegion::numRectangles() const {$/;"	f	class:defiRegion
numRectangles	def/def/defiSlot.cpp	/^int defiSlot::numRectangles() const {$/;"	f	class:defiSlot
numRectangles_	def/def/defiBlockage.hpp	/^  int    numRectangles_;$/;"	m	class:defiBlockage
numRectangles_	def/def/defiFill.hpp	/^  int   numRectangles_;$/;"	m	class:defiFill
numRectangles_	def/def/defiRegion.hpp	/^  int numRectangles_;$/;"	m	class:defiRegion
numRectangles_	def/def/defiSlot.hpp	/^  int   numRectangles_;$/;"	m	class:defiSlot
numRects	lef/lef/lefiMacro.cpp	/^lefiDensity::numRects(int index) const$/;"	f	class:lefiDensity
numRects	lef/lef/lefiVia.cpp	/^lefiVia::numRects(int layerNum) const$/;"	f	class:lefiVia
numRects	lef/lef/lefiVia.cpp	/^lefiViaLayer::numRects()$/;"	f	class:lefiViaLayer
numRects_	def/def/defiComponent.hpp	/^  int numRects_;$/;"	m	class:defiComponent
numRects_	def/def/defiGroup.hpp	/^  int numRects_;$/;"	m	class:defiGroup
numRects_	def/def/defiNet.hpp	/^  int        numRects_;                    \/\/ 5.6$/;"	m	class:defiNet
numRects_	lef/include/lefiMacro.hpp	/^  int*   numRects_;$/;"	m	class:lefiDensity
numRects_	lef/include/lefiVia.hpp	/^  int numRects_;$/;"	m	class:lefiViaLayer
numRects_	lef/lef/lefiMacro.hpp	/^  int*   numRects_;$/;"	m	class:lefiDensity
numRects_	lef/lef/lefiVia.hpp	/^  int numRects_;$/;"	m	class:lefiViaLayer
numResistancePoints_	lef/include/lefiLayer.hpp	/^  int numResistancePoints_;$/;"	m	class:lefiLayer
numResistancePoints_	lef/lef/lefiLayer.hpp	/^  int numResistancePoints_;$/;"	m	class:lefiLayer
numResistances	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::numResistances()$/;"	f	class:lefiCorrectionEdge
numResistances	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::numResistances()$/;"	f	class:lefiNoiseEdge
numResistances_	lef/include/lefiCrossTalk.hpp	/^  int numResistances_;$/;"	m	class:lefiCorrectionEdge
numResistances_	lef/include/lefiCrossTalk.hpp	/^  int numResistances_;$/;"	m	class:lefiNoiseEdge
numResistances_	lef/lef/lefiCrossTalk.hpp	/^  int numResistances_;$/;"	m	class:lefiCorrectionEdge
numResistances_	lef/lef/lefiCrossTalk.hpp	/^  int numResistances_;$/;"	m	class:lefiNoiseEdge
numRowPattern_	lef/include/lefiMisc.hpp	/^  int    numRowPattern_;         \/\/ 5.6 ROWPATTERN$/;"	m	class:lefiSite
numRowPattern_	lef/lef/lefiMisc.hpp	/^  int    numRowPattern_;         \/\/ 5.6 ROWPATTERN$/;"	m	class:lefiSite
numRows_	lef/include/lefiVia.hpp	/^  int numRows_;                \/\/ 5.6$/;"	m	class:lefiVia
numRows_	lef/lef/lefiVia.hpp	/^  int numRows_;                \/\/ 5.6$/;"	m	class:lefiVia
numShieldNet_	def/def/defiNet.hpp	/^  int          numShieldNet_;          \/\/ number of SHIELDNETS used in array.$/;"	m	class:defiNet
numShieldNets	def/def/defiNet.cpp	/^int defiNet::numShieldNets() const {$/;"	f	class:defiNet
numShields	def/def/defiNet.cpp	/^int defiNet::numShields() const {$/;"	f	class:defiNet
numShields_	def/def/defiNet.hpp	/^  int          numShields_;            \/\/ number of SHIELD paths used$/;"	m	class:defiNet
numSitePattern	lef/lef/lefiArray.cpp	/^lefiArray::numSitePattern() const$/;"	f	class:lefiArray
numSitePattern	lef/lef/lefiMacro.cpp	/^lefiMacro::numSitePattern() const$/;"	f	class:lefiMacro
numSites	lef/lef/lefiArray.cpp	/^lefiArray::numSites(int index) const$/;"	f	class:lefiArray
numSites	lef/lef/lefiMisc.cpp	/^lefiSite::numSites() const$/;"	f	class:lefiSite
numSites_	lef/include/lefiMacro.hpp	/^  int numSites_;$/;"	m	class:lefiMacro
numSites_	lef/lef/lefiMacro.hpp	/^  int numSites_;$/;"	m	class:lefiMacro
numSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::numSpacing() const$/;"	f	class:lefiLayer
numSpacingRules	def/def/defiNet.cpp	/^int defiNet::numSpacingRules() const {$/;"	f	class:defiNet
numSpacingRules	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::numSpacingRules() const$/;"	f	class:lefiNonDefault
numSpacingTable	lef/lef/lefiLayer.cpp	/^lefiLayer::numSpacingTable()$/;"	f	class:lefiLayer
numSpacingTable_	lef/include/lefiLayer.hpp	/^  int numSpacingTable_;$/;"	m	class:lefiLayer
numSpacingTable_	lef/lef/lefiLayer.hpp	/^  int numSpacingTable_;$/;"	m	class:lefiLayer
numSpacing_	def/def/defiNet.hpp	/^  int         numSpacing_;$/;"	m	class:defiNet
numSpacing_	lef/include/lefiLayer.hpp	/^  int numSpacing_;$/;"	m	class:lefiInfluence
numSpacing_	lef/include/lefiNonDefault.hpp	/^  int numSpacing_;$/;"	m	class:lefiNonDefault
numSpacing_	lef/lef/lefiLayer.hpp	/^  int numSpacing_;$/;"	m	class:lefiInfluence
numSpacing_	lef/lef/lefiNonDefault.hpp	/^  int numSpacing_;$/;"	m	class:lefiNonDefault
numSpacings_	lef/include/lefiLayer.hpp	/^  int numSpacings_;$/;"	m	class:lefiLayer
numSpacings_	lef/lef/lefiLayer.hpp	/^  int numSpacings_;$/;"	m	class:lefiLayer
numSubnets	def/def/defiNet.cpp	/^int defiNet::numSubnets() const {$/;"	f	class:defiNet
numSubnets_	def/def/defiNet.hpp	/^  int          numSubnets_;       \/\/ num of subnets in array$/;"	m	class:defiNet
numTableEntries	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::numTableEntries() const$/;"	f	class:lefiLayerDensity
numTableEntries_	lef/include/lefiLayer.hpp	/^  int numTableEntries_;$/;"	m	class:lefiLayerDensity
numTableEntries_	lef/lef/lefiLayer.hpp	/^  int numTableEntries_;$/;"	m	class:lefiLayerDensity
numToPins	lef/lef/lefiMacro.cpp	/^lefiTiming::numToPins()$/;"	f	class:lefiTiming
numTo_	lef/include/lefiMacro.hpp	/^  int numTo_;$/;"	m	class:lefiTiming
numTo_	lef/lef/lefiMacro.hpp	/^  int numTo_;$/;"	m	class:lefiTiming
numTrack	lef/lef/lefiArray.cpp	/^lefiArray::numTrack() const$/;"	f	class:lefiArray
numTracks	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::numTracks() const$/;"	f	class:lefiTrackPattern
numTracks_	lef/include/lefiArray.hpp	/^  int numTracks_;$/;"	m	class:lefiArray
numTracks_	lef/include/lefiMisc.hpp	/^  int    numTracks_;$/;"	m	class:lefiTrackPattern
numTracks_	lef/lef/lefiArray.hpp	/^  int numTracks_;$/;"	m	class:lefiArray
numTracks_	lef/lef/lefiMisc.hpp	/^  int    numTracks_;$/;"	m	class:lefiTrackPattern
numUseVia	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::numUseVia() const$/;"	f	class:lefiNonDefault
numUseViaRule	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::numUseViaRule() const$/;"	f	class:lefiNonDefault
numUseViaRules_	lef/include/lefiNonDefault.hpp	/^  int    numUseViaRules_;          \/\/ 5.6$/;"	m	class:lefiNonDefault
numUseViaRules_	lef/lef/lefiNonDefault.hpp	/^  int    numUseViaRules_;          \/\/ 5.6$/;"	m	class:lefiNonDefault
numUseVias_	lef/include/lefiNonDefault.hpp	/^  int    numUseVias_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
numUseVias_	lef/lef/lefiNonDefault.hpp	/^  int    numUseVias_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
numUsed_	def/def/defiPath.hpp	/^  int numUsed_;         \/\/ number of items used in array$/;"	m	class:defiPath
numValues	lef/lef/lefiMisc.cpp	/^lefiIRDrop::numValues() const$/;"	f	class:lefiIRDrop
numValues_	lef/include/lefiMisc.hpp	/^  int     numValues_;$/;"	m	class:lefiIRDrop
numValues_	lef/lef/lefiMisc.hpp	/^  int     numValues_;$/;"	m	class:lefiIRDrop
numVia	lef/include/lefrData.hpp	/^    int  numVia; $/;"	m	class:lefrData
numVia	lef/lef/lefrData.hpp	/^    int  numVia; $/;"	m	class:lefrData
numViaPts	def/def/defiFill.cpp	/^int defiFill::numViaPts() const {$/;"	f	class:defiFill
numViaRules	def/def/defiNonDefault.cpp	/^int defiNonDefault::numViaRules() const { $/;"	f	class:defiNonDefault
numViaRules_	def/def/defiNonDefault.hpp	/^  int     numViaRules_;$/;"	m	class:defiNonDefault
numViaSpecs	def/def/defiNet.cpp	/^int defiNet::numViaSpecs() const {$/;"	f	class:defiNet
numVias	def/def/defiNonDefault.cpp	/^int defiNonDefault::numVias() const { $/;"	f	class:defiNonDefault
numVias	def/def/defiPinCap.cpp	/^int defiPin::numVias() const {$/;"	f	class:defiPin
numVias	def/def/defiPinCap.cpp	/^int defiPinPort::numVias() const {$/;"	f	class:defiPinPort
numVias	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::numVias() const$/;"	f	class:lefiNonDefault
numVias	lef/lef/lefiViaRule.cpp	/^lefiViaRule::numVias() const$/;"	f	class:lefiViaRule
numVias_	def/def/defiNonDefault.hpp	/^  int     numVias_;$/;"	m	class:defiNonDefault
numVias_	def/def/defiPinCap.hpp	/^  int    numVias_;$/;"	m	class:defiPinPort
numVias_	def/def/defiPinCap.hpp	/^  int numVias_;                     \/\/ 5.7$/;"	m	class:defiPin
numVias_	lef/include/lefiNonDefault.hpp	/^  int numVias_;$/;"	m	class:lefiNonDefault
numVias_	lef/include/lefiViaRule.hpp	/^  int numVias_;$/;"	m	class:lefiViaRule
numVias_	lef/lef/lefiNonDefault.hpp	/^  int numVias_;$/;"	m	class:lefiNonDefault
numVias_	lef/lef/lefiViaRule.hpp	/^  int numVias_;$/;"	m	class:lefiViaRule
numVictims	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::numVictims()$/;"	f	class:lefiCorrectionResistance
numVictims	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::numVictims() const$/;"	f	class:lefiNoiseResistance
numVictims_	lef/include/lefiCrossTalk.hpp	/^  int numVictims_;$/;"	m	class:lefiCorrectionResistance
numVictims_	lef/include/lefiCrossTalk.hpp	/^  int numVictims_;$/;"	m	class:lefiNoiseResistance
numVictims_	lef/lef/lefiCrossTalk.hpp	/^  int numVictims_;$/;"	m	class:lefiCorrectionResistance
numVictims_	lef/lef/lefiCrossTalk.hpp	/^  int numVictims_;$/;"	m	class:lefiNoiseResistance
numVpins	def/def/defiNet.cpp	/^int defiNet::numVpins() const {$/;"	f	class:defiNet
numVpins_	def/def/defiNet.hpp	/^  int         numVpins_;$/;"	m	class:defiNet
numWidth	lef/lef/lefiLayer.cpp	/^lefiParallel::numWidth() const$/;"	f	class:lefiParallel
numWidth	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::numWidth() const$/;"	f	class:lefiTwoWidths
numWidthAllocated_	lef/include/lefiLayer.hpp	/^  int numWidthAllocated_;$/;"	m	class:lefiParallel
numWidthAllocated_	lef/include/lefiLayer.hpp	/^  int numWidthAllocated_;$/;"	m	class:lefiTwoWidths
numWidthAllocated_	lef/lef/lefiLayer.hpp	/^  int numWidthAllocated_;$/;"	m	class:lefiParallel
numWidthAllocated_	lef/lef/lefiLayer.hpp	/^  int numWidthAllocated_;$/;"	m	class:lefiTwoWidths
numWidthRules	def/def/defiNet.cpp	/^int defiNet::numWidthRules() const {$/;"	f	class:defiNet
numWidthSpacing	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::numWidthSpacing(int index) const$/;"	f	class:lefiTwoWidths
numWidthSpacing_	lef/include/lefiLayer.hpp	/^  int*    numWidthSpacing_;   \/\/ each slot contains number of spacing of slot$/;"	m	class:lefiTwoWidths
numWidthSpacing_	lef/lef/lefiLayer.hpp	/^  int*    numWidthSpacing_;   \/\/ each slot contains number of spacing of slot$/;"	m	class:lefiTwoWidths
numWidth_	lef/include/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiInfluence
numWidth_	lef/include/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiParallel
numWidth_	lef/include/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiTwoWidths
numWidth_	lef/lef/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiInfluence
numWidth_	lef/lef/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiParallel
numWidth_	lef/lef/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiTwoWidths
numWidths	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::numWidths() const$/;"	f	class:lefiLayerDensity
numWidths_	def/def/defiNet.hpp	/^  int         numWidths_;$/;"	m	class:defiNet
numWidths_	lef/include/lefiLayer.hpp	/^  int numWidths_;$/;"	m	class:lefiLayerDensity
numWidths_	lef/lef/lefiLayer.hpp	/^  int numWidths_;$/;"	m	class:lefiLayerDensity
numWires	def/def/defiNet.cpp	/^int defiNet::numWires() const {$/;"	f	class:defiNet
numWires	def/def/defiNet.cpp	/^int defiSubnet::numWires() const {$/;"	f	class:defiSubnet
numWires_	def/def/defiNet.hpp	/^  int         numWires_;         \/\/ number of wires defined in the net$/;"	m	class:defiNet
numWires_	def/def/defiNet.hpp	/^  int        numWires_;          \/\/ number of wires defined in the subnet$/;"	m	class:defiSubnet
numX	def/cdef/defiTypedefs.h	/^  int numX;$/;"	m	struct:defiViaData
numX	def/def/defiPath.hpp	/^  int numX;$/;"	m	struct:defiViaData
numX_	def/def/defiPath.hpp	/^  int numX_;      $/;"	m	class:defiPath
numY	def/cdef/defiTypedefs.h	/^  int numY;$/;"	m	struct:defiViaData
numY	def/def/defiPath.hpp	/^  int numY;$/;"	m	struct:defiViaData
numY_	def/def/defiPath.hpp	/^  int numY_;$/;"	m	class:defiPath
num_	def/def/defiScanchain.hpp	/^  int num_;$/;"	m	class:defiOrdered
num_	lef/include/lefiCrossTalk.hpp	/^  int num_;$/;"	m	class:lefiCorrectionTable
num_	lef/include/lefiCrossTalk.hpp	/^  int num_;$/;"	m	class:lefiNoiseTable
num_	lef/lef/lefiCrossTalk.hpp	/^  int num_;$/;"	m	class:lefiCorrectionTable
num_	lef/lef/lefiCrossTalk.hpp	/^  int num_;$/;"	m	class:lefiNoiseTable
num_list	lef/lef/lef.y	/^num_list:$/;"	l
number	def/def/defiProp.cpp	/^double defiProp::number() const {$/;"	f	class:defiProp
number	lef/lef/lefiProp.cpp	/^lefiProp::number() const$/;"	f	class:lefiProp
number_list	lef/lef/lef.y	/^number_list:$/;"	l
numo_list	lef/lef/lef.y	/^numo_list:$/;"	l
numsAllocated_	lef/include/lefiCrossTalk.hpp	/^  int numsAllocated_;$/;"	m	class:lefiCorrectionResistance
numsAllocated_	lef/include/lefiCrossTalk.hpp	/^  int numsAllocated_;$/;"	m	class:lefiNoiseResistance
numsAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int numsAllocated_;$/;"	m	class:lefiCorrectionResistance
numsAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int numsAllocated_;$/;"	m	class:lefiNoiseResistance
nums_	lef/include/lefiCrossTalk.hpp	/^  double* nums_;$/;"	m	class:lefiCorrectionResistance
nums_	lef/include/lefiCrossTalk.hpp	/^  double* nums_;$/;"	m	class:lefiNoiseResistance
nums_	lef/include/lefiLayer.hpp	/^  double* nums_;$/;"	m	class:lefiLayer
nums_	lef/lef/lefiCrossTalk.hpp	/^  double* nums_;$/;"	m	class:lefiCorrectionResistance
nums_	lef/lef/lefiCrossTalk.hpp	/^  double* nums_;$/;"	m	class:lefiNoiseResistance
nums_	lef/lef/lefiLayer.hpp	/^  double* nums_;$/;"	m	class:lefiLayer
obsDef	lef/include/lefrData.hpp	/^    int  obsDef; $/;"	m	class:lefrData
obsDef	lef/lef/lefrData.hpp	/^    int  obsDef; $/;"	m	class:lefrData
obstructionCB	lef/lefdiff/diffLefRW.cpp	/^int obstructionCB(lefrCallbackType_e c, lefiObstruction* obs,$/;"	f
obstructionCB	lef/lefrw/lefrw.cpp	/^int obstructionCB(lefrCallbackType_e c, lefiObstruction* obs,$/;"	f
offset	def/def/defiVia.cpp	/^void defiVia::offset(int* xBotOffset, int* yBotOffset, int* xTopOffset,$/;"	f	class:defiVia
offset	lef/lef/lefiLayer.cpp	/^lefiLayer::offset() const$/;"	f	class:lefiLayer
offsetX	lef/lef/lefiLayer.cpp	/^lefiLayer::offsetX() const$/;"	f	class:lefiLayer
offsetX_	lef/include/lefiLayer.hpp	/^  double offsetX_;                    \/\/ 5.6$/;"	m	class:lefiLayer
offsetX_	lef/lef/lefiLayer.hpp	/^  double offsetX_;                    \/\/ 5.6$/;"	m	class:lefiLayer
offsetY	lef/lef/lefiLayer.cpp	/^lefiLayer::offsetY() const$/;"	f	class:lefiLayer
offsetY_	lef/include/lefiLayer.hpp	/^  double offsetY_;                    \/\/ 5.6$/;"	m	class:lefiLayer
offsetY_	lef/lef/lefiLayer.hpp	/^  double offsetY_;                    \/\/ 5.6$/;"	m	class:lefiLayer
one	lef/lef/lefiMisc.cpp	/^lefiMinFeature::one() const$/;"	f	class:lefiMinFeature
oneEntry	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::oneEntry() const$/;"	f	class:lefiLayerDensity
oneEntry_	lef/include/lefiLayer.hpp	/^  double oneEntry_;$/;"	m	class:lefiLayerDensity
oneEntry_	lef/lef/lefiLayer.hpp	/^  double oneEntry_;$/;"	m	class:lefiLayerDensity
one_	lef/include/lefiMisc.hpp	/^  double one_;$/;"	m	class:lefiMinFeature
one_	lef/lef/lefiMisc.hpp	/^  double one_;$/;"	m	class:lefiMinFeature
one_cap	lef/lef/lef.y	/^one_cap: K_MINPINS int_number K_WIRECAP int_number ';'$/;"	l
one_floating_inst	def/def/def.y	/^one_floating_inst: T_STRING$/;"	l
one_net	def/def/def.y	/^one_net: net_and_connections net_options ';'$/;"	l
one_ordered_inst	def/def/def.y	/^one_ordered_inst: T_STRING$/;"	l
one_pin_trigger	lef/lef/lef.y	/^one_pin_trigger:$/;"	l
operand	def/def/def.y	/^operand: K_NET { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING $/;"	l
operand	def/defdiff/diffDefRW.cpp	/^void operand(defrCallbackType_e c, defiAssertion* a, int ind) {$/;"	f
operand	def/defrw/defrw.cpp	/^void operand(defrCallbackType_e c, defiAssertion* a, int ind) {$/;"	f
operand_list	def/def/def.y	/^operand_list: operand $/;"	l
operand_rule	def/def/def.y	/^operand_rule: '-' operand delay_specs ';'$/;"	l
operator ()	def/def/defrData.hpp	/^    bool operator()(const std::string &lhs, const std::string &rhs) const {$/;"	f	struct:defCompareStrings
operator ()	def/def/defrSettings.hpp	/^    bool operator()(const char* lhs, const char* rhs) const {$/;"	f	struct:defCompareCStrings
operator ()	lef/include/lefrData.hpp	/^    bool operator()(const std::string &lhs, const std::string &rhs) const {$/;"	f	struct:lefCompareStrings
operator ()	lef/include/lefrSettings.hpp	/^    bool operator()(const char* lhs, const char* rhs) const {$/;"	f	struct:lefCompareCStrings
operator ()	lef/lef/lefrData.hpp	/^    bool operator()(const std::string &lhs, const std::string &rhs) const {$/;"	f	struct:lefCompareStrings
operator ()	lef/lef/lefrSettings.hpp	/^    bool operator()(const char* lhs, const char* rhs) const {$/;"	f	struct:lefCompareCStrings
opt_adjacentcuts_exceptsame	lef/lef/lef.y	/^opt_adjacentcuts_exceptsame:                \/\/ 5.7 $/;"	l
opt_common_pins	def/def/def.y	/^opt_common_pins: \/\/ empty $/;"	l
opt_def_dvalue	lef/lef/lef.y	/^opt_def_dvalue:$/;"	l
opt_def_range	lef/lef/lef.y	/^opt_def_range:$/;"	l
opt_def_value	lef/lef/lef.y	/^opt_def_value:$/;"	l
opt_endofline	lef/lef/lef.y	/^opt_endofline:                                      \/\/ 5.7 $/;"	l
opt_endofline_twoedges	lef/lef/lef.y	/^opt_endofline_twoedges:                             \/\/ 5.7 $/;"	l
opt_layer_name	lef/lef/lef.y	/^opt_layer_name:$/;"	l
opt_mask_opc	def/def/def.y	/^opt_mask_opc: fill_via_opc$/;"	l
opt_mask_opc_l	def/def/def.y	/^opt_mask_opc_l: fill_layer_opc$/;"	l
opt_num_val	def/def/def.y	/^opt_num_val: \/\/ empty $/;"	l
opt_paren	def/def/def.y	/^opt_paren:$/;"	l
opt_pattern	def/def/def.y	/^opt_pattern :$/;"	l
opt_pin	def/def/def.y	/^opt_pin :$/;"	l
opt_plus	def/def/def.y	/^opt_plus:$/;"	l
opt_range	def/def/def.y	/^opt_range: \/\/ nothing $/;"	l
opt_range_second	lef/lef/lef.y	/^opt_range_second:$/;"	l
opt_samenetPGonly	lef/lef/lef.y	/^opt_samenetPGonly:                                  \/\/ 5.7 $/;"	l
opt_semi	def/def/def.y	/^opt_semi:$/;"	l
opt_shape_style	def/def/def.y	/^opt_shape_style:$/;"	l
opt_snet_range	def/def/def.y	/^opt_snet_range: \/\/ nothing $/;"	l
opt_spaths	def/def/def.y	/^opt_spaths: \/\/ empty $/;"	l
opt_style	def/def/def.y	/^opt_style: K_STYLE NUMBER$/;"	l
opt_taper	def/def/def.y	/^opt_taper: K_TAPER$/;"	l
opt_taper_style	def/def/def.y	/^opt_taper_style: opt_style$/;"	l
opt_taper_style_s	def/def/def.y	/^opt_taper_style_s: \/\/ empty $/;"	l
opt_viarule_props	lef/lef/lef.y	/^opt_viarule_props:$/;"	l
ordered	def/def/defiScanchain.cpp	/^void defiScanchain::ordered(int index, int* size, char*** inst,$/;"	f	class:defiScanchain
ordered_	def/def/defiScanchain.hpp	/^  defiOrdered** ordered_; $/;"	m	class:defiScanchain
ordered_inst_list	def/def/def.y	/^ordered_inst_list: \/\/ empty $/;"	l
ordered_pins	def/def/def.y	/^ordered_pins: \/\/ empty  $/;"	l
orient	def/def/def.y	/^orient: K_N    {$$ = 0;}$/;"	l
orient	def/def/defiNet.cpp	/^int defiVpin::orient() const  {$/;"	f	class:defiVpin
orient	def/def/defiPinCap.cpp	/^int defiPin::orient() const {$/;"	f	class:defiPin
orient	def/def/defiPinCap.cpp	/^int defiPinPort::orient() const {$/;"	f	class:defiPinPort
orient	def/def/defiRowTrack.cpp	/^int defiRow::orient() const {$/;"	f	class:defiRow
orient	def/def/defiSite.cpp	/^int defiSite::orient() const {$/;"	f	class:defiSite
orient	lef/lef/lefiMisc.cpp	/^lefiSitePattern::orient() const$/;"	f	class:lefiSitePattern
orientStr	def/def/defiNet.cpp	/^const char* defiVpin::orientStr() const  {$/;"	f	class:defiVpin
orientStr	def/def/defiPinCap.cpp	/^const char* defiPin::orientStr() const {$/;"	f	class:defiPin
orientStr	def/def/defiPinCap.cpp	/^const char* defiPinPort::orientStr() const {$/;"	f	class:defiPinPort
orientStr	def/def/defiRowTrack.cpp	/^const char* defiRow::orientStr() const {$/;"	f	class:defiRow
orientStr	def/def/defiSite.cpp	/^const char* defiSite::orientStr() const {$/;"	f	class:defiSite
orientStr	def/defrw/defrw.cpp	/^char* orientStr(int orient) {$/;"	f
orientStr	lef/lef/lefiMisc.cpp	/^lefiSitePattern::orientStr() const$/;"	f	class:lefiSitePattern
orientStr	lef/lefrw/lefrw.cpp	/^char* orientStr(int orient) {$/;"	f
orient_	def/def/defiComponent.hpp	/^  int orient_;          \/\/ orientation$/;"	m	class:defiComponent
orient_	def/def/defiNet.hpp	/^  int orient_;  \/* 0-7  -1 is no orient *\/$/;"	m	class:defiVpin
orient_	def/def/defiPinCap.hpp	/^  char   orient_;$/;"	m	class:defiPinPort
orient_	def/def/defiPinCap.hpp	/^  char orient_;          \/\/ orient 0-7$/;"	m	class:defiPin
orient_	def/def/defiRowTrack.hpp	/^  int orient_;$/;"	m	class:defiRow
orient_	def/def/defiSite.hpp	/^  int orient_;         \/\/ orientation$/;"	m	class:defiSite
orient_	lef/include/lefiMisc.hpp	/^  int    orient_;$/;"	m	class:lefiSitePattern
orient_	lef/lef/lefiMisc.hpp	/^  int    orient_;$/;"	m	class:lefiSitePattern
orient_is_keyword	def/def/defrData.hpp	/^    int  orient_is_keyword; $/;"	m	class:defrData
orient_pt	def/def/def.y	/^orient_pt: \/\/ empty $/;"	l
orientation	lef/lef/lef.y	/^orientation:$/;"	l
origDef	lef/include/lefrData.hpp	/^    int  origDef; $/;"	m	class:lefrData
origDef	lef/lef/lefrData.hpp	/^    int  origDef; $/;"	m	class:lefrData
origin	def/def/defiVia.cpp	/^void defiVia::origin(int* xOffset, int* yOffset) const {$/;"	f	class:defiVia
originX	lef/lef/lefiMacro.cpp	/^lefiMacro::originX() const$/;"	f	class:lefiMacro
originX_	lef/include/lefiMacro.hpp	/^  double originX_;$/;"	m	class:lefiMacro
originX_	lef/lef/lefiMacro.hpp	/^  double originX_;$/;"	m	class:lefiMacro
originY	lef/lef/lefiMacro.cpp	/^lefiMacro::originY() const$/;"	f	class:lefiMacro
originY_	lef/include/lefiMacro.hpp	/^  double originY_;$/;"	m	class:lefiMacro
originY_	lef/lef/lefiMacro.hpp	/^  double originY_;$/;"	m	class:lefiMacro
original	def/def/defiNet.cpp	/^const char* defiNet::original() const {$/;"	f	class:defiNet
original_	def/def/defiNet.hpp	/^  char* original_;$/;"	m	class:defiNet
orthoSpacing	lef/lef/lefiLayer.cpp	/^lefiOrthogonal::orthoSpacing(int index) const$/;"	f	class:lefiOrthogonal
ortho_	lef/include/lefiLayer.hpp	/^  double* ortho_;$/;"	m	class:lefiOrthogonal
ortho_	lef/lef/lefiLayer.hpp	/^  double* ortho_;$/;"	m	class:lefiOrthogonal
orthogonal	lef/lef/lefiLayer.cpp	/^lefiLayer::orthogonal() const$/;"	f	class:lefiLayer
otherPts	def/def/def.y	/^otherPts: \/\/ empty $/;"	l
otherPts	lef/lef/lef.y	/^otherPts:$/;"	l
out	def/def/defiScanchain.cpp	/^char** defiOrdered::out() const {$/;"	f	class:defiOrdered
outMarginH_	lef/include/lefiMacro.hpp	/^  double outMarginH_;$/;"	m	class:lefiPin
outMarginH_	lef/lef/lefiMacro.hpp	/^  double outMarginH_;$/;"	m	class:lefiPin
outMarginHigh	lef/lef/lefiMacro.cpp	/^lefiPin::outMarginHigh() const$/;"	f	class:lefiPin
outMarginL_	lef/include/lefiMacro.hpp	/^  double outMarginL_;$/;"	m	class:lefiPin
outMarginL_	lef/lef/lefiMacro.hpp	/^  double outMarginL_;$/;"	m	class:lefiPin
outMarginLow	lef/lef/lefiMacro.cpp	/^lefiPin::outMarginLow() const$/;"	f	class:lefiPin
outMsg	lef/include/lefrData.hpp	/^    char*  outMsg; $/;"	m	class:lefrData
outMsg	lef/lef/lefrData.hpp	/^    char*  outMsg; $/;"	m	class:lefrData
outResistanceH_	lef/include/lefiMacro.hpp	/^  double outResistanceH_;$/;"	m	class:lefiPin
outResistanceH_	lef/lef/lefiMacro.hpp	/^  double outResistanceH_;$/;"	m	class:lefiPin
outResistanceHigh	lef/lef/lefiMacro.cpp	/^lefiPin::outResistanceHigh() const$/;"	f	class:lefiPin
outResistanceL_	lef/include/lefiMacro.hpp	/^  double outResistanceL_;$/;"	m	class:lefiPin
outResistanceL_	lef/lef/lefiMacro.hpp	/^  double outResistanceL_;$/;"	m	class:lefiPin
outResistanceLow	lef/lef/lefiMacro.cpp	/^lefiPin::outResistanceLow() const$/;"	f	class:lefiPin
out_	def/def/defiScanchain.hpp	/^  char** out_;$/;"	m	class:defiOrdered
outputAntCB	lef/lefdiff/diffLefRW.cpp	/^int outputAntCB(lefrCallbackType_e c, double antenna, lefiUserData ud) {$/;"	f
outputAntennaWarnings	lef/include/lefrData.hpp	/^    int  outputAntennaWarnings; $/;"	m	class:lefrData
outputAntennaWarnings	lef/lef/lefrData.hpp	/^    int  outputAntennaWarnings; $/;"	m	class:lefrData
output_antenna	lef/lef/lef.y	/^output_antenna: K_OUTPUTPINANTENNASIZE int_number ';'$/;"	l
output_list	lef/lef/lef.y	/^output_list: K_OUTPUTRESISTANCE$/;"	l
output_resistance_entry	lef/lef/lef.y	/^output_resistance_entry: K_OUTPUTRESISTANCE$/;"	l
overhang	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::overhang() const$/;"	f	class:lefiViaRuleLayer
overhang1_	lef/include/lefiLayer.hpp	/^  double* overhang1_;$/;"	m	class:lefiLayer
overhang1_	lef/include/lefiViaRule.hpp	/^  double overhang1_;                                       \/\/ 5.5$/;"	m	class:lefiViaRuleLayer
overhang1_	lef/lef/lefiLayer.hpp	/^  double* overhang1_;$/;"	m	class:lefiLayer
overhang1_	lef/lef/lefiViaRule.hpp	/^  double overhang1_;                                       \/\/ 5.5$/;"	m	class:lefiViaRuleLayer
overhang2_	lef/include/lefiLayer.hpp	/^  double* overhang2_;$/;"	m	class:lefiLayer
overhang2_	lef/include/lefiViaRule.hpp	/^  double overhang2_;                                       \/\/ 5.5$/;"	m	class:lefiViaRuleLayer
overhang2_	lef/lef/lefiLayer.hpp	/^  double* overhang2_;$/;"	m	class:lefiLayer
overhang2_	lef/lef/lefiViaRule.hpp	/^  double overhang2_;                                       \/\/ 5.5$/;"	m	class:lefiViaRuleLayer
overhang_	lef/include/lefiViaRule.hpp	/^  double overhang_;$/;"	m	class:lefiViaRuleLayer
overhang_	lef/lef/lefiViaRule.hpp	/^  double overhang_;$/;"	m	class:lefiViaRuleLayer
ownConfig	def/def/defrData.hpp	/^    int                   ownConfig;$/;"	m	class:defrContext
oxide_	def/def/defiPinCap.hpp	/^  char* oxide_;$/;"	m	class:defiPinAntennaModel
oxide_	lef/include/lefiLayer.hpp	/^  char*  oxide_;$/;"	m	class:lefiAntennaModel
oxide_	lef/include/lefiMacro.hpp	/^  char* oxide_;$/;"	m	class:lefiPinAntennaModel
oxide_	lef/lef/lefiLayer.hpp	/^  char*  oxide_;$/;"	m	class:lefiAntennaModel
oxide_	lef/lef/lefiMacro.hpp	/^  char* oxide_;$/;"	m	class:lefiPinAntennaModel
pad_type	lef/lef/lef.y	/^pad_type: $/;"	l
parSpace_	lef/include/lefiLayer.hpp	/^  double* parSpace_;$/;"	m	class:lefiLayer
parSpace_	lef/lef/lefiLayer.hpp	/^  double* parSpace_;$/;"	m	class:lefiLayer
parWithin_	lef/include/lefiLayer.hpp	/^  double* parWithin_;$/;"	m	class:lefiLayer
parWithin_	lef/lef/lefiLayer.hpp	/^  double* parWithin_;$/;"	m	class:lefiLayer
parallel	def/def/defiIOTiming.cpp	/^double defiIOTiming::parallel() const {$/;"	f	class:defiIOTiming
parallel	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::parallel() const$/;"	f	class:lefiSpacingTable
parallel_	def/def/defiIOTiming.hpp	/^  double parallel_;$/;"	m	class:defiIOTiming
parallel_	lef/include/lefiLayer.hpp	/^  lefiParallel*    parallel_;$/;"	m	class:lefiSpacingTable
parallel_	lef/lef/lefiLayer.hpp	/^  lefiParallel*    parallel_;$/;"	m	class:lefiSpacingTable
parse65nm	lef/lefrw/lefrw.cpp	/^int parse65nm = 0;$/;"	v
parse65nmRules	lef/lef/lefiLayer.cpp	/^lefiLayer::parse65nmRules()$/;"	f	class:lefiLayer
parseAntennaAreaDiff	lef/lef/lefiLayer.cpp	/^lefiLayer::parseAntennaAreaDiff(int index)$/;"	f	class:lefiLayer
parseAntennaAreaMinus	lef/lef/lefiLayer.cpp	/^lefiLayer::parseAntennaAreaMinus(int index)$/;"	f	class:lefiLayer
parseAntennaCumRouting	lef/lef/lefiLayer.cpp	/^lefiLayer::parseAntennaCumRouting(int index)$/;"	f	class:lefiLayer
parseAntennaGatePlus	lef/lef/lefiLayer.cpp	/^lefiLayer::parseAntennaGatePlus(int index)$/;"	f	class:lefiLayer
parseArraySpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::parseArraySpacing(int index)$/;"	f	class:lefiLayer
parseLEF58Layer	lef/lef/lefiLayer.cpp	/^lefiLayer::parseLEF58Layer()$/;"	f	class:lefiLayer
parseLayerEnclosure	lef/lef/lefiLayer.cpp	/^lefiLayer::parseLayerEnclosure(int index)$/;"	f	class:lefiLayer
parseLayerType	lef/lef/lefiLayer.cpp	/^lefiLayer::parseLayerType(int index)$/;"	f	class:lefiLayer
parseLef58Type	lef/lefrw/lefrw.cpp	/^int parseLef58Type = 0;$/;"	v
parseMinstep	lef/lef/lefiLayer.cpp	/^lefiLayer::parseMinstep(int index)$/;"	f	class:lefiLayer
parseSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::parseSpacing(int index)$/;"	f	class:lefiLayer
partName_	def/def/defiScanchain.hpp	/^  char* partName_;      \/\/ 5.4.1$/;"	m	class:defiScanchain
partitionMax	def/def/defiPartition.cpp	/^double defiPartition::partitionMax() const {$/;"	f	class:defiPartition
partitionMaxBits	def/def/defiScanchain.cpp	/^int defiScanchain::partitionMaxBits() const {$/;"	f	class:defiScanchain
partitionMin	def/def/defiPartition.cpp	/^double defiPartition::partitionMin() const {$/;"	f	class:defiPartition
partitionName	def/def/defiScanchain.cpp	/^const char* defiScanchain::partitionName() const {$/;"	f	class:defiScanchain
partition_maxbits	def/def/def.y	/^partition_maxbits: \/\/ empty $/;"	l
partition_member	def/def/def.y	/^partition_member: '+' K_FROMCLOCKPIN {defData->dumb_mode=2; defData->no_num = 2;}$/;"	l
partition_members	def/def/def.y	/^partition_members: \/\/ empty $/;"	l
partition_rule	def/def/def.y	/^partition_rule: start_partition partition_members ';' $/;"	l
partition_rules	def/def/def.y	/^partition_rules: \/\/ empty $/;"	l
partitions_end	def/def/def.y	/^partitions_end: K_END K_PARTITIONS$/;"	l
partitions_section	def/def/def.y	/^partitions_section: partitions_start partition_rules partitions_end$/;"	l
partitions_start	def/def/def.y	/^partitions_start: K_PARTITIONS NUMBER ';'$/;"	l
path	def/def/def.y	/^path:  T_STRING$/;"	l
path	def/def/defiAssertion.cpp	/^void defiAssertion::path(int index, char** fromInst, char** fromPin,$/;"	f	class:defiAssertion
path	def/def/defiNet.cpp	/^const defiPath* defiNet::path(int index) const {$/;"	f	class:defiNet
path	def/def/defiNet.cpp	/^const defiPath* defiShield::path(int index) const {$/;"	f	class:defiShield
path	def/def/defiNet.cpp	/^const defiPath* defiSubnet::path(int index) const {$/;"	f	class:defiSubnet
path	def/def/defiNet.cpp	/^const defiPath* defiWire::path(int index) const {$/;"	f	class:defiWire
path	def/def/defiNet.cpp	/^defiPath* defiNet::path(int index) {$/;"	f	class:defiNet
path	def/def/defiNet.cpp	/^defiPath* defiShield::path(int index) {$/;"	f	class:defiShield
path	def/def/defiNet.cpp	/^defiPath* defiSubnet::path(int index) {$/;"	f	class:defiSubnet
path	def/def/defiNet.cpp	/^defiPath* defiWire::path(int index) {$/;"	f	class:defiWire
pathIsDone	def/def/def_keywords.cpp	/^defrData::pathIsDone(int  sh, int  reset, int  osNet, int  *needCbk)$/;"	f	class:defrData
path_item	def/def/def.y	/^path_item:$/;"	l
path_item_list	def/def/def.y	/^path_item_list: \/\/ empty $/;"	l
path_pt	def/def/def.y	/^path_pt :$/;"	l
paths	def/def/def.y	/^paths:$/;"	l
pathsAllocated_	def/def/defiNet.hpp	/^  long long  pathsAllocated_; \/\/ allocated size of paths array$/;"	m	class:defiNet
pathsAllocated_	def/def/defiNet.hpp	/^  long long  pathsAllocated_; \/\/ allocated size of paths array$/;"	m	class:defiSubnet
pathsAllocated_	def/def/defiNet.hpp	/^  long long  pathsAllocated_;$/;"	m	class:defiShield
pathsAllocated_	def/def/defiNet.hpp	/^  long long  pathsAllocated_;$/;"	m	class:defiWire
paths_	def/def/defiNet.hpp	/^  defiPath** paths_;          \/\/ paths for this subnet$/;"	m	class:defiNet
paths_	def/def/defiNet.hpp	/^  defiPath** paths_;          \/\/ paths for this subnet$/;"	m	class:defiSubnet
paths_	def/def/defiNet.hpp	/^  defiPath** paths_;$/;"	m	class:defiShield
paths_	def/def/defiNet.hpp	/^  defiPath** paths_;$/;"	m	class:defiWire
pattern	def/def/defiNet.cpp	/^const char* defiNet::pattern() const {$/;"	f	class:defiNet
pattern	def/def/defiVia.cpp	/^const char* defiVia::pattern() const {$/;"	f	class:defiVia
pattern	lef/lef/lefiArray.cpp	/^lefiArrayFloorPlan::pattern(int index) const$/;"	f	class:lefiArrayFloorPlan
patternLength_	def/def/defiVia.hpp	/^  int patternLength_;$/;"	m	class:defiVia
pattern_	def/def/defiNet.hpp	/^  char* pattern_;$/;"	m	class:defiNet
pattern_	def/def/defiVia.hpp	/^  char* pattern_;$/;"	m	class:defiVia
pattern_	lef/include/lefiArray.hpp	/^  lefiSitePattern** pattern_;$/;"	m	class:lefiArray
pattern_	lef/include/lefiMacro.hpp	/^  lefiSitePattern** pattern_;$/;"	m	class:lefiMacro
pattern_	lef/lef/lefiArray.hpp	/^  lefiSitePattern** pattern_;$/;"	m	class:lefiArray
pattern_	lef/lef/lefiMacro.hpp	/^  lefiSitePattern** pattern_;$/;"	m	class:lefiMacro
pattern_type	def/def/def.y	/^pattern_type: K_BALANCED$/;"	l
patternsAllocated_	lef/include/lefiArray.hpp	/^  int patternsAllocated_;$/;"	m	class:lefiArray
patternsAllocated_	lef/include/lefiArray.hpp	/^  int patternsAllocated_;$/;"	m	class:lefiArrayFloorPlan
patternsAllocated_	lef/lef/lefiArray.hpp	/^  int patternsAllocated_;$/;"	m	class:lefiArray
patternsAllocated_	lef/lef/lefiArray.hpp	/^  int patternsAllocated_;$/;"	m	class:lefiArrayFloorPlan
patterns_	lef/include/lefiArray.hpp	/^  lefiSitePattern** patterns_;$/;"	m	class:lefiArrayFloorPlan
patterns_	lef/lef/lefiArray.hpp	/^  lefiSitePattern** patterns_;$/;"	m	class:lefiArrayFloorPlan
perim	def/def/defiGroup.cpp	/^int defiGroup::perim() const {$/;"	f	class:defiGroup
perim_	def/def/defiGroup.hpp	/^  int perim_;$/;"	m	class:defiGroup
pin	def/def/def.y	/^pin: '-' {defData->dumb_mode = 1; defData->no_num = 1; } T_STRING '+' K_NET$/;"	l
pin	def/def/defiIOTiming.cpp	/^const char* defiIOTiming::pin() const {$/;"	f	class:defiIOTiming
pin	def/def/defiNet.cpp	/^const char* defiNet::pin(int index) const {$/;"	f	class:defiNet
pin	def/def/defiNet.cpp	/^const char* defiSubnet::pin(int index) const {$/;"	f	class:defiSubnet
pin	def/def/defiPartition.cpp	/^const char* defiPartition::pin(int index) const {$/;"	f	class:defiPartition
pin	def/def/defiPinCap.cpp	/^int defiPinCap::pin() const {$/;"	f	class:defiPinCap
pinCB	def/defwrite/defwriteCbs.cpp	/^int pinCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
pinCB	lef/lefdiff/diffLefRW.cpp	/^int pinCB(lefrCallbackType_e c, lefiPin* pin, lefiUserData ud) {$/;"	f
pinCB	lef/lefrw/lefrw.cpp	/^int pinCB(lefrCallbackType_e c, lefiPin* pin, lefiUserData) {$/;"	f
pinDef	lef/include/lefrData.hpp	/^    int  pinDef; $/;"	m	class:lefrData
pinDef	lef/lef/lefrData.hpp	/^    int  pinDef; $/;"	m	class:lefrData
pinExtWarnings	def/def/defrData.hpp	/^    int  pinExtWarnings; $/;"	m	class:defrData
pinIsMustJoin	def/def/defiNet.cpp	/^int defiNet::pinIsMustJoin(int index) const {$/;"	f	class:defiNet
pinIsMustJoin	def/def/defiNet.cpp	/^int defiSubnet::pinIsMustJoin(int index) const {$/;"	f	class:defiSubnet
pinIsSynthesized	def/def/defiNet.cpp	/^int defiNet::pinIsSynthesized(int index) const {$/;"	f	class:defiNet
pinIsSynthesized	def/def/defiNet.cpp	/^int defiSubnet::pinIsSynthesized(int index) const {$/;"	f	class:defiSubnet
pinLength_	def/def/defiIOTiming.hpp	/^  int pinLength_;$/;"	m	class:defiIOTiming
pinLength_	def/def/defiPartition.hpp	/^  int pinLength_;$/;"	m	class:defiPartition
pinName	def/def/defiPartition.cpp	/^const char* defiPartition::pinName() const {$/;"	f	class:defiPartition
pinName	def/def/defiPinCap.cpp	/^const char* defiPin::pinName() const {$/;"	f	class:defiPin
pinName	def/def/defiPinProp.cpp	/^const char* defiPinProp::pinName() const {$/;"	f	class:defiPinProp
pinName	lef/include/lefrData.hpp	/^    char*  pinName; $/;"	m	class:lefrData
pinName	lef/lef/lefrData.hpp	/^    char*  pinName; $/;"	m	class:lefrData
pinNameLength_	def/def/defiPinCap.hpp	/^  int pinNameLength_;    \/\/ allocated size of pin name$/;"	m	class:defiPin
pinNameSize_	def/def/defiPinProp.hpp	/^  int pinNameSize_;$/;"	m	class:defiPinProp
pinName_	def/def/defiPinCap.hpp	/^  char* pinName_;$/;"	m	class:defiPin
pinName_	def/def/defiPinProp.hpp	/^  char* pinName_;$/;"	m	class:defiPinProp
pinPort	def/def/defiPinCap.cpp	/^defiPinPort* defiPin::pinPort(int index) const {$/;"	f	class:defiPin
pinPort_	def/def/defiPinCap.hpp	/^  defiPinPort ** pinPort_;          \/\/ 5.7$/;"	m	class:defiPin
pinWarnings	def/def/defrData.hpp	/^    int  pinWarnings; $/;"	m	class:defrData
pinWarnings	lef/include/lefrData.hpp	/^    int  pinWarnings; $/;"	m	class:lefrData
pinWarnings	lef/lef/lefrData.hpp	/^    int  pinWarnings; $/;"	m	class:lefrData
pin_	def/def/defiIOTiming.hpp	/^  char* pin_;$/;"	m	class:defiIOTiming
pin_	def/def/defiPartition.hpp	/^  char* pin_;$/;"	m	class:defiPartition
pin_	def/def/defiPinCap.hpp	/^  int pin_;        \/\/ pin num$/;"	m	class:defiPinCap
pin_cap	def/def/def.y	/^pin_cap: K_MINPINS NUMBER K_WIRECAP NUMBER ';'$/;"	l
pin_cap_rule	def/def/def.y	/^pin_cap_rule: start_def_cap pin_caps end_def_cap$/;"	l
pin_caps	def/def/def.y	/^pin_caps: \/\/ empty $/;"	l
pin_layer_mask_opt	def/def/def.y	/^pin_layer_mask_opt: \/\/ empty $/;"	l
pin_layer_opt	def/def/def.y	/^pin_layer_opt:$/;"	l
pin_layer_oxide	lef/lef/lef.y	/^pin_layer_oxide:$/;"	l
pin_layer_spacing_opt	def/def/def.y	/^pin_layer_spacing_opt: \/\/ empty $/;"	l
pin_list	def/def/def.y	/^pin_list: \/\/ empty $/;"	l
pin_name_value_pair	lef/lef/lef.y	/^pin_name_value_pair:$/;"	l
pin_option	def/def/def.y	/^pin_option: '+' K_SPECIAL$/;"	l
pin_options	def/def/def.y	/^pin_options: \/\/ empty $/;"	l
pin_oxide	def/def/def.y	/^pin_oxide: K_OXIDE1$/;"	l
pin_poly_mask_opt	def/def/def.y	/^pin_poly_mask_opt: \/\/ empty $/;"	l
pin_poly_spacing_opt	def/def/def.y	/^pin_poly_spacing_opt: \/\/ empty $/;"	l
pin_prop	def/def/def.y	/^pin_prop: '+' K_PROPERTY { defData->dumb_mode = DEF_MAX_INT; }$/;"	l
pin_prop_list	def/def/def.y	/^pin_prop_list: \/\/ empty $/;"	l
pin_prop_list	lef/lef/lef.y	/^pin_prop_list:$/;"	l
pin_prop_name_value	def/def/def.y	/^pin_prop_name_value : T_STRING NUMBER$/;"	l
pin_prop_name_value_list	def/def/def.y	/^pin_prop_name_value_list : \/\/ empty $/;"	l
pin_prop_options	def/def/def.y	/^pin_prop_options : \/\/ empty $/;"	l
pin_prop_terminal	def/def/def.y	/^pin_prop_terminal: '-' { defData->dumb_mode = 2; defData->no_num = 2; } T_STRING T_STRING$/;"	l
pin_props_section	def/def/def.y	/^pin_props_section: begin_pin_props pin_prop_list end_pin_props ;$/;"	l
pin_rule	def/def/def.y	/^pin_rule: start_pins pins end_pins$/;"	l
pin_shape	lef/lef/lef.y	/^pin_shape:$/;"	l
pin_via_mask_opt	def/def/def.y	/^pin_via_mask_opt: $/;"	l
pinpropCB	def/defwrite/defwriteCbs.cpp	/^int pinpropCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
pins	def/def/def.y	/^pins: \/\/ empty $/;"	l
pinsAllocated_	def/def/defiNet.hpp	/^  long long     pinsAllocated_;     \/\/ number of pins allocated in array.$/;"	m	class:defiSubnet
pinsAllocated_	def/def/defiNet.hpp	/^  long long pinsAllocated_; \/\/ number of pins allocated in array.$/;"	m	class:defiNet
pinsAllocated_	def/def/defiPartition.hpp	/^  int pinsAllocated_;$/;"	m	class:defiPartition
pins_	def/def/defiNet.hpp	/^  char**        pins_;           \/\/ pin names for connections$/;"	m	class:defiSubnet
pins_	def/def/defiNet.hpp	/^  char**    pins_;          \/\/ pin names for connections$/;"	m	class:defiNet
pins_	def/def/defiPartition.hpp	/^  char** pins_;$/;"	m	class:defiPartition
pitch	lef/lef/lefiLayer.cpp	/^lefiLayer::pitch() const$/;"	f	class:lefiLayer
pitchX	lef/lef/lefiLayer.cpp	/^lefiLayer::pitchX() const$/;"	f	class:lefiLayer
pitchX_	lef/include/lefiLayer.hpp	/^  double pitchX_;                     \/\/ 5.6$/;"	m	class:lefiLayer
pitchX_	lef/lef/lefiLayer.hpp	/^  double pitchX_;                     \/\/ 5.6$/;"	m	class:lefiLayer
pitchY	lef/lef/lefiLayer.cpp	/^lefiLayer::pitchY() const$/;"	f	class:lefiLayer
pitchY_	lef/include/lefiLayer.hpp	/^  double pitchY_;                     \/\/ 5.6$/;"	m	class:lefiLayer
pitchY_	lef/lef/lefiLayer.hpp	/^  double pitchY_;                     \/\/ 5.6$/;"	m	class:lefiLayer
placeType_	def/def/defiPinCap.hpp	/^  char   placeType_;$/;"	m	class:defiPinPort
placeType_	def/def/defiPinCap.hpp	/^  char placeType_;$/;"	m	class:defiPin
placementComponentName	def/def/defiBlockage.cpp	/^const char* defiBlockage::placementComponentName() const {$/;"	f	class:defiBlockage
placementMaxDensity	def/def/defiBlockage.cpp	/^double defiBlockage::placementMaxDensity() const {$/;"	f	class:defiBlockage
placementOrient	def/def/defiComponent.cpp	/^int defiComponent::placementOrient() const {$/;"	f	class:defiComponent
placementOrientStr	def/def/defiComponent.cpp	/^const char* defiComponent::placementOrientStr() const {$/;"	f	class:defiComponent
placementStatus	def/def/defiComponent.cpp	/^int defiComponent::placementStatus() const {$/;"	f	class:defiComponent
placementX	def/def/defiComponent.cpp	/^int defiComponent::placementX() const {$/;"	f	class:defiComponent
placementX	def/def/defiPinCap.cpp	/^int defiPin::placementX() const {$/;"	f	class:defiPin
placementX	def/def/defiPinCap.cpp	/^int defiPinPort::placementX() const {$/;"	f	class:defiPinPort
placementY	def/def/defiComponent.cpp	/^int defiComponent::placementY() const {$/;"	f	class:defiComponent
placementY	def/def/defiPinCap.cpp	/^int defiPin::placementY() const {$/;"	f	class:defiPin
placementY	def/def/defiPinCap.cpp	/^int defiPinPort::placementY() const {$/;"	f	class:defiPinPort
placement_comp_rule	def/def/def.y	/^placement_comp_rule: \/\/ empty $/;"	l
placement_comp_rules	def/def/def.y	/^placement_comp_rules: \/\/ empty $/;"	l
placement_status	def/def/def.y	/^placement_status: '+' K_FIXED $/;"	l
point	lef/include/lefiDefs.hpp	/^struct point {$/;"	s
point	lef/lef/lefiDefs.hpp	/^struct point {$/;"	s
pointer_	def/def/defiPath.hpp	/^  int* pointer_;        \/\/ traversal pointer, allocated because used$/;"	m	class:defiPath
points	def/def/defiMisc.cpp	/^void defiGeometries::points(int index, int* x, int* y) const {$/;"	f	class:defiGeometries
pointsAllocated_	def/def/defiMisc.hpp	/^  int pointsAllocated_;$/;"	m	class:defiGeometries
pointsAllocated_	lef/include/lefiMisc.hpp	/^  int pointsAllocated_;$/;"	m	class:lefiGeometries
pointsAllocated_	lef/lef/lefiMisc.hpp	/^  int pointsAllocated_;$/;"	m	class:lefiGeometries
points_	def/def/defiSite.hpp	/^  defiPoints* points_;    \/\/ 5.6$/;"	m	class:defiBox
polyColorMask	lef/lef/lefiVia.cpp	/^lefiVia::polyColorMask(int  layerNum,$/;"	f	class:lefiVia
polyColorMask	lef/lef/lefiVia.cpp	/^lefiViaLayer::polyColorMask(int index)$/;"	f	class:lefiViaLayer
polyColorMask_	lef/include/lefiVia.hpp	/^  int* polyColorMask_;$/;"	m	class:lefiViaLayer
polyColorMask_	lef/lef/lefiVia.hpp	/^  int* polyColorMask_;$/;"	m	class:lefiViaLayer
polyEffectiveWidth_	def/def/defiPinCap.hpp	/^  int    *polyEffectiveWidth_;$/;"	m	class:defiPinPort
polyEffectiveWidth_	def/def/defiPinCap.hpp	/^  int *polyEffectiveWidth_;         \/\/ 5.6, DESIGNRULEWIDTH in POLYGON$/;"	m	class:defiPin
polyMask	def/def/defiNet.cpp	/^int defiNet::polyMask(int index) const {$/;"	f	class:defiNet
polyMask	def/def/defiVia.cpp	/^int defiVia::polyMask(int index) const {$/;"	f	class:defiVia
polyMask_	def/def/defiPinCap.hpp	/^  int    *polyMask_;$/;"	m	class:defiPinPort
polyMask_	def/def/defiPinCap.hpp	/^  int *polyMask_;                   \/\/ 5.8$/;"	m	class:defiPin
polyMask_	def/def/defiVia.hpp	/^  int*  polyMask_;          \/\/ 5.8$/;"	m	class:defiVia
polyMasks_	def/def/defiNet.hpp	/^  int*         polyMasks_;$/;"	m	class:defiNet
polyMinSpacing_	def/def/defiPinCap.hpp	/^  int    *polyMinSpacing_;$/;"	m	class:defiPinPort
polyMinSpacing_	def/def/defiPinCap.hpp	/^  int *polyMinSpacing_;             \/\/ 5.6, SPACING in POLYGON$/;"	m	class:defiPin
polyRouteStatus	def/def/defiNet.cpp	/^const char* defiNet::polyRouteStatus(int index) const {$/;"	f	class:defiNet
polyRouteStatusShieldName	def/def/defiNet.cpp	/^const char* defiNet::polyRouteStatusShieldName(int index) const {$/;"	f	class:defiNet
polyRouteStatusShieldNames_	def/def/defiNet.hpp	/^  char** polyRouteStatusShieldNames_;$/;"	m	class:defiNet
polyRouteStatus_	def/def/defiNet.hpp	/^  char** polyRouteStatus_;$/;"	m	class:defiNet
polyShapeType	def/def/defiNet.cpp	/^const char* defiNet::polyShapeType(int index) const {$/;"	f	class:defiNet
polyShapeTypes_	def/def/defiNet.hpp	/^  char** polyShapeTypes_;$/;"	m	class:defiNet
polygonDesignRuleWidth	def/def/defiPinCap.cpp	/^int defiPin::polygonDesignRuleWidth(int index) const {$/;"	f	class:defiPin
polygonDesignRuleWidth	def/def/defiPinCap.cpp	/^int defiPinPort::polygonDesignRuleWidth(int index) const {$/;"	f	class:defiPinPort
polygonMask	def/def/defiPinCap.cpp	/^int defiPin::polygonMask(int index) const {$/;"	f	class:defiPin
polygonMask	def/def/defiPinCap.cpp	/^int defiPinPort::polygonMask(int index) const {$/;"	f	class:defiPinPort
polygonName	def/def/defiNet.cpp	/^const char* defiNet::polygonName(int index) const {$/;"	f	class:defiNet
polygonName	def/def/defiPinCap.cpp	/^const char* defiPin::polygonName(int index) const {$/;"	f	class:defiPin
polygonName	def/def/defiPinCap.cpp	/^const char* defiPinPort::polygonName(int index) const {$/;"	f	class:defiPinPort
polygonName	def/def/defiVia.cpp	/^const char* defiVia::polygonName(int index) const {$/;"	f	class:defiVia
polygonNames_	def/def/defiNet.hpp	/^  char**       polygonNames_;          \/\/ 5.6 layerName for POLYGON$/;"	m	class:defiNet
polygonNames_	def/def/defiPinCap.hpp	/^  char** polygonNames_;             \/\/ 5.6 layerName for POLYGON$/;"	m	class:defiPin
polygonNames_	def/def/defiPinCap.hpp	/^  char** polygonNames_;$/;"	m	class:defiPinPort
polygonNames_	def/def/defiVia.hpp	/^  char** polygonNames_;     \/\/ 5.6 layerName for POLYGON$/;"	m	class:defiVia
polygonSpacing	def/def/defiPinCap.cpp	/^int defiPin::polygonSpacing(int index) const {$/;"	f	class:defiPin
polygonSpacing	def/def/defiPinCap.cpp	/^int defiPinPort::polygonSpacing(int index) const {$/;"	f	class:defiPinPort
polygon_	def/def/defiMisc.hpp	/^    struct defiPoints* polygon_;$/;"	m	class:defiStyles	typeref:struct:defiStyles::defiPoints
polygons_	def/def/defiBlockage.hpp	/^  struct defiPoints** polygons_;         \/\/ 5.6$/;"	m	class:defiBlockage	typeref:struct:defiBlockage::defiPoints
polygons_	def/def/defiFill.hpp	/^  struct defiPoints** polygons_;    \/\/ 5.6$/;"	m	class:defiFill	typeref:struct:defiFill::defiPoints
polygons_	def/def/defiNet.hpp	/^  struct defiPoints** polygons_;       \/\/ 5.6$/;"	m	class:defiNet	typeref:struct:defiNet::defiPoints
polygons_	def/def/defiPinCap.hpp	/^  defiPoints** polygons_;    \/\/ 5.6 $/;"	m	class:defiPin
polygons_	def/def/defiPinCap.hpp	/^  defiPoints** polygons_;$/;"	m	class:defiPinPort
polygons_	def/def/defiSlot.hpp	/^  defiPoints** polygons_;    \/\/ 5.6$/;"	m	class:defiSlot
polygons_	def/def/defiVia.hpp	/^  defiPoints** polygons_; \/\/ 5.6$/;"	m	class:defiVia
polygons_	lef/include/lefiVia.hpp	/^  lefiGeomPolygon** polygons_;$/;"	m	class:lefiViaLayer
polygons_	lef/lef/lefiVia.hpp	/^  lefiGeomPolygon** polygons_;$/;"	m	class:lefiViaLayer
polysAllocated_	def/def/defiBlockage.hpp	/^  int    polysAllocated_;                \/\/ 5.6$/;"	m	class:defiBlockage
polysAllocated_	def/def/defiFill.hpp	/^  int   polysAllocated_;            \/\/ 5.6$/;"	m	class:defiFill
polysAllocated_	def/def/defiNet.hpp	/^  long long    polysAllocated_;        \/\/ 5.6$/;"	m	class:defiNet
polysAllocated_	def/def/defiPinCap.hpp	/^  int    polysAllocated_;$/;"	m	class:defiPinPort
polysAllocated_	def/def/defiPinCap.hpp	/^  int polysAllocated_;              \/\/ 5.6$/;"	m	class:defiPin
polysAllocated_	def/def/defiSlot.hpp	/^  int   polysAllocated_;            \/\/ 5.6$/;"	m	class:defiSlot
polysAllocated_	def/def/defiVia.hpp	/^  int polysAllocated_;      \/\/ 5.6$/;"	m	class:defiVia
polysAllocated_	lef/include/lefiVia.hpp	/^  int polysAllocated_;$/;"	m	class:lefiViaLayer
polysAllocated_	lef/lef/lefiVia.hpp	/^  int polysAllocated_;$/;"	m	class:lefiViaLayer
port	lef/lef/lefiMacro.cpp	/^lefiPin::port(int index) const$/;"	f	class:lefiPin
portsAllocated_	def/def/defiPinCap.hpp	/^  int portsAllocated_;              \/\/ 5.7$/;"	m	class:defiPin
portsAllocated_	lef/include/lefiMacro.hpp	/^  int portsAllocated_;$/;"	m	class:lefiPin
portsAllocated_	lef/lef/lefiMacro.hpp	/^  int portsAllocated_;$/;"	m	class:lefiPin
ports_	lef/include/lefiMacro.hpp	/^  lefiGeometries** ports_;$/;"	m	class:lefiPin
ports_	lef/lef/lefiMacro.hpp	/^  lefiGeometries** ports_;$/;"	m	class:lefiPin
power	lef/lef/lefiMacro.cpp	/^lefiMacro::power() const$/;"	f	class:lefiMacro
power	lef/lef/lefiMacro.cpp	/^lefiPin::power() const$/;"	f	class:lefiPin
power	lef/lef/lefiUnits.cpp	/^lefiUnits::power() const$/;"	f	class:lefiUnits
power_	lef/include/lefiMacro.hpp	/^  double power_;$/;"	m	class:lefiMacro
power_	lef/include/lefiMacro.hpp	/^  double power_;$/;"	m	class:lefiPin
power_	lef/include/lefiUnits.hpp	/^  double power_;$/;"	m	class:lefiUnits
power_	lef/lef/lefiMacro.hpp	/^  double power_;$/;"	m	class:lefiMacro
power_	lef/lef/lefiMacro.hpp	/^  double power_;$/;"	m	class:lefiPin
power_	lef/lef/lefiUnits.hpp	/^  double power_;$/;"	m	class:lefiUnits
preferEnclosureAllocated_	lef/include/lefiLayer.hpp	/^  int preferEnclosureAllocated_;$/;"	m	class:lefiLayer
preferEnclosureAllocated_	lef/lef/lefiLayer.hpp	/^  int preferEnclosureAllocated_;$/;"	m	class:lefiLayer
preferEnclosureMinWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::preferEnclosureMinWidth(int index) const$/;"	f	class:lefiLayer
preferEnclosureOverhang1	lef/lef/lefiLayer.cpp	/^lefiLayer::preferEnclosureOverhang1(int index) const$/;"	f	class:lefiLayer
preferEnclosureOverhang2	lef/lef/lefiLayer.cpp	/^lefiLayer::preferEnclosureOverhang2(int index) const$/;"	f	class:lefiLayer
preferEnclosureRule	lef/lef/lefiLayer.cpp	/^lefiLayer::preferEnclosureRule(int index)$/;"	f	class:lefiLayer
preferEnclosureRules_	lef/include/lefiLayer.hpp	/^  char** preferEnclosureRules_;$/;"	m	class:lefiLayer
preferEnclosureRules_	lef/lef/lefiLayer.hpp	/^  char** preferEnclosureRules_;$/;"	m	class:lefiLayer
preferMinWidth_	lef/include/lefiLayer.hpp	/^  double* preferMinWidth_;$/;"	m	class:lefiLayer
preferMinWidth_	lef/lef/lefiLayer.hpp	/^  double* preferMinWidth_;$/;"	m	class:lefiLayer
preferOverhang1_	lef/include/lefiLayer.hpp	/^  double* preferOverhang1_;$/;"	m	class:lefiLayer
preferOverhang1_	lef/lef/lefiLayer.hpp	/^  double* preferOverhang1_;$/;"	m	class:lefiLayer
preferOverhang2_	lef/include/lefiLayer.hpp	/^  double* preferOverhang2_;$/;"	m	class:lefiLayer
preferOverhang2_	lef/lef/lefiLayer.hpp	/^  double* preferOverhang2_;$/;"	m	class:lefiLayer
prev	def/def/defiPath.cpp	/^int defiPath::prev()  const{$/;"	f	class:defiPath
print	def/def/defiAssertion.cpp	/^void defiAssertion::print(FILE* f) const {$/;"	f	class:defiAssertion
print	def/def/defiBlockage.cpp	/^void defiBlockage::print(FILE* f) const {$/;"	f	class:defiBlockage
print	def/def/defiComponent.cpp	/^void defiComponent::print(FILE* fout) const {$/;"	f	class:defiComponent
print	def/def/defiFPC.cpp	/^void defiFPC::print(FILE* f) const {$/;"	f	class:defiFPC
print	def/def/defiFill.cpp	/^void defiFill::print(FILE* f) const {$/;"	f	class:defiFill
print	def/def/defiGroup.cpp	/^void defiGroup::print(FILE* f) const {$/;"	f	class:defiGroup
print	def/def/defiIOTiming.cpp	/^void defiIOTiming::print(FILE* f) const {$/;"	f	class:defiIOTiming
print	def/def/defiNet.cpp	/^void defiNet::print(FILE* f) const {$/;"	f	class:defiNet
print	def/def/defiNet.cpp	/^void defiSubnet::print(FILE* f) const {$/;"	f	class:defiSubnet
print	def/def/defiNonDefault.cpp	/^void defiNonDefault::print(FILE* f) const { $/;"	f	class:defiNonDefault
print	def/def/defiPartition.cpp	/^void defiPartition::print(FILE* f) const {$/;"	f	class:defiPartition
print	def/def/defiPath.cpp	/^void defiPath::print(FILE* fout) const {$/;"	f	class:defiPath
print	def/def/defiPinCap.cpp	/^void defiPin::print(FILE* f) const {$/;"	f	class:defiPin
print	def/def/defiPinCap.cpp	/^void defiPinCap::print(FILE* f) const {$/;"	f	class:defiPinCap
print	def/def/defiPinProp.cpp	/^void defiPinProp::print(FILE* f) const {$/;"	f	class:defiPinProp
print	def/def/defiProp.cpp	/^void defiProp::print(FILE* f) const {$/;"	f	class:defiProp
print	def/def/defiRegion.cpp	/^void defiRegion::print(FILE* f) const {$/;"	f	class:defiRegion
print	def/def/defiRowTrack.cpp	/^void defiGcellGrid::print(FILE* f) const {$/;"	f	class:defiGcellGrid
print	def/def/defiRowTrack.cpp	/^void defiRow::print(FILE* f) const {$/;"	f	class:defiRow
print	def/def/defiRowTrack.cpp	/^void defiTrack::print(FILE* f) const {$/;"	f	class:defiTrack
print	def/def/defiScanchain.cpp	/^void defiScanchain::print(FILE* f) const {$/;"	f	class:defiScanchain
print	def/def/defiSite.cpp	/^void defiBox::print(FILE* f) const {$/;"	f	class:defiBox
print	def/def/defiSite.cpp	/^void defiSite::print(FILE* f) const {$/;"	f	class:defiSite
print	def/def/defiSlot.cpp	/^void defiSlot::print(FILE* f) const {$/;"	f	class:defiSlot
print	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::print(FILE* f) const {$/;"	f	class:defiTimingDisable
print	def/def/defiVia.cpp	/^void defiVia::print(FILE* f) const {$/;"	f	class:defiVia
print	lef/lef/lefiArray.cpp	/^lefiArray::print(FILE *f) const$/;"	f	class:lefiArray
print	lef/lef/lefiLayer.cpp	/^lefiLayer::print(FILE *f) const$/;"	f	class:lefiLayer
print	lef/lef/lefiMacro.cpp	/^lefiDensity::print(FILE *f) const$/;"	f	class:lefiDensity
print	lef/lef/lefiMacro.cpp	/^lefiMacro::print(FILE *f) const$/;"	f	class:lefiMacro
print	lef/lef/lefiMacro.cpp	/^lefiObstruction::print(FILE *f) const$/;"	f	class:lefiObstruction
print	lef/lef/lefiMacro.cpp	/^lefiPin::print(FILE *f) const$/;"	f	class:lefiPin
print	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::print(FILE *f) const$/;"	f	class:lefiGcellPattern
print	lef/lef/lefiMisc.cpp	/^lefiGeometries::print(FILE *f) const$/;"	f	class:lefiGeometries
print	lef/lef/lefiMisc.cpp	/^lefiIRDrop::print(FILE *f) const$/;"	f	class:lefiIRDrop
print	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::print(FILE *f) const$/;"	f	class:lefiMaxStackVia
print	lef/lef/lefiMisc.cpp	/^lefiMinFeature::print(FILE *f) const$/;"	f	class:lefiMinFeature
print	lef/lef/lefiMisc.cpp	/^lefiSite::print(FILE *f) const$/;"	f	class:lefiSite
print	lef/lef/lefiMisc.cpp	/^lefiSitePattern::print(FILE *f) const$/;"	f	class:lefiSitePattern
print	lef/lef/lefiMisc.cpp	/^lefiSpacing::print(FILE *f) const$/;"	f	class:lefiSpacing
print	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::print(FILE *f) const$/;"	f	class:lefiTrackPattern
print	lef/lef/lefiMisc.cpp	/^lefiUseMinSpacing::print(FILE *f) const$/;"	f	class:lefiUseMinSpacing
print	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::print(FILE *f)$/;"	f	class:lefiNonDefault
print	lef/lef/lefiProp.cpp	/^lefiProp::print(FILE *f) const$/;"	f	class:lefiProp
print	lef/lef/lefiUnits.cpp	/^lefiUnits::print(FILE *f) const$/;"	f	class:lefiUnits
print	lef/lef/lefiVia.cpp	/^lefiVia::print(FILE *f) const$/;"	f	class:lefiVia
print	lef/lef/lefiViaRule.cpp	/^lefiViaRule::print(FILE *f) const$/;"	f	class:lefiViaRule
print	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::print(FILE *f) const$/;"	f	class:lefiViaRuleLayer
printPoints	def/def/defwWriter.cpp	/^static void printPoints(FILE *file, double x, double y, $/;"	f	file:
printPointsNum	def/def/defwWriter.cpp	/^static int printPointsNum = 0;$/;"	v	file:
printWarning	def/defrw/defrw.cpp	/^void printWarning(const char *str)$/;"	f
printWarning	lef/lefrw/lefrw.cpp	/^void printWarning(const char *str)$/;"	f
print_lines	def/def/def_keywords.cpp	/^defrData::print_lines(long long lines) $/;"	f	class:defrData
print_nlines	lef/lef/lef_keywords.cpp	/^print_nlines(int lineNum)$/;"	f	file:
printing	lef/lefdiff/diffLefRW.cpp	/^int     printing = 0;     \/\/ Printing the output.$/;"	v
printing	lef/lefrw/lefrw.cpp	/^int printing = 0;     \/\/ Printing the output.$/;"	v
prl_	lef/include/lefiLayer.hpp	/^  double* prl_;$/;"	m	class:lefiTwoWidths
prl_	lef/lef/lefiLayer.hpp	/^  double* prl_;$/;"	m	class:lefiTwoWidths
prop	def/defdiff/diffDefRW.cpp	/^int prop(defrCallbackType_e c, defiProp* p, defiUserData ud) {$/;"	f
prop	def/defrw/defrw.cpp	/^int prop(defrCallbackType_e c, defiProp* p, defiUserData ud) {$/;"	f
propDValue_	lef/include/lefiVia.hpp	/^  double* propDValue_;$/;"	m	class:lefiVia
propDValue_	lef/lef/lefiVia.hpp	/^  double* propDValue_;$/;"	m	class:lefiVia
propDValues_	def/def/defiGroup.hpp	/^  double* propDValues_;$/;"	m	class:defiGroup
propDValues_	def/def/defiNet.hpp	/^  double* propDValues_; \/\/ Prop values in numbers!$/;"	m	class:defiNet
propDValues_	def/def/defiPinProp.hpp	/^  double* propDValues_;$/;"	m	class:defiPinProp
propDValues_	def/def/defiRegion.hpp	/^  double* propDValues_;$/;"	m	class:defiRegion
propDValues_	def/def/defiRowTrack.hpp	/^  double* propDValues_;$/;"	m	class:defiRow
propDefBeginCB	lef/lefrw/lefrw.cpp	/^int propDefBeginCB(lefrCallbackType_e c, void*, lefiUserData) {$/;"	f
propDefCB	lef/lefdiff/diffLefRW.cpp	/^int propDefCB(lefrCallbackType_e c, lefiProp* prop, lefiUserData ud) {$/;"	f
propDefCB	lef/lefrw/lefrw.cpp	/^int propDefCB(lefrCallbackType_e c, lefiProp* prop, lefiUserData) {$/;"	f
propDefCB	lef/lefwrite/lefwriteCbs.cpp	/^int propDefCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
propDefEndCB	lef/lefrw/lefrw.cpp	/^int propDefEndCB(lefrCallbackType_e c, void*, lefiUserData) {$/;"	f
propIsNumber	def/def/defiComponent.cpp	/^int defiComponent::propIsNumber(int index) const {$/;"	f	class:defiComponent
propIsNumber	def/def/defiGroup.cpp	/^int defiGroup::propIsNumber(int index) const {$/;"	f	class:defiGroup
propIsNumber	def/def/defiNet.cpp	/^int defiNet::propIsNumber(int index) const {$/;"	f	class:defiNet
propIsNumber	def/def/defiNonDefault.cpp	/^int defiNonDefault::propIsNumber(int index) const {$/;"	f	class:defiNonDefault
propIsNumber	def/def/defiPinProp.cpp	/^int defiPinProp::propIsNumber(int index) const {$/;"	f	class:defiPinProp
propIsNumber	def/def/defiRegion.cpp	/^int defiRegion::propIsNumber(int index) const {$/;"	f	class:defiRegion
propIsNumber	def/def/defiRowTrack.cpp	/^int defiRow::propIsNumber(int index) const {$/;"	f	class:defiRow
propIsNumber	lef/lef/lefiLayer.cpp	/^lefiLayer::propIsNumber(int i) const$/;"	f	class:lefiLayer
propIsNumber	lef/lef/lefiMacro.cpp	/^lefiMacro::propIsNumber(int index) const$/;"	f	class:lefiMacro
propIsNumber	lef/lef/lefiMacro.cpp	/^lefiPin::propIsNumber(int index) const$/;"	f	class:lefiPin
propIsNumber	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::propIsNumber(int index) const$/;"	f	class:lefiNonDefault
propIsNumber	lef/lef/lefiVia.cpp	/^lefiVia::propIsNumber(int index) const$/;"	f	class:lefiVia
propIsNumber	lef/lef/lefiViaRule.cpp	/^lefiViaRule::propIsNumber(int i) const$/;"	f	class:lefiViaRule
propIsString	def/def/defiComponent.cpp	/^int defiComponent::propIsString(int index) const {$/;"	f	class:defiComponent
propIsString	def/def/defiGroup.cpp	/^int defiGroup::propIsString(int index) const {$/;"	f	class:defiGroup
propIsString	def/def/defiNet.cpp	/^int defiNet::propIsString(int index) const {$/;"	f	class:defiNet
propIsString	def/def/defiNonDefault.cpp	/^int defiNonDefault::propIsString(int index) const {$/;"	f	class:defiNonDefault
propIsString	def/def/defiPinProp.cpp	/^int defiPinProp::propIsString(int index) const {$/;"	f	class:defiPinProp
propIsString	def/def/defiRegion.cpp	/^int defiRegion::propIsString(int index) const {$/;"	f	class:defiRegion
propIsString	def/def/defiRowTrack.cpp	/^int defiRow::propIsString(int index) const {$/;"	f	class:defiRow
propIsString	lef/lef/lefiLayer.cpp	/^lefiLayer::propIsString(int i) const$/;"	f	class:lefiLayer
propIsString	lef/lef/lefiMacro.cpp	/^lefiMacro::propIsString(int index) const$/;"	f	class:lefiMacro
propIsString	lef/lef/lefiMacro.cpp	/^lefiPin::propIsString(int index) const$/;"	f	class:lefiPin
propIsString	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::propIsString(int index) const$/;"	f	class:lefiNonDefault
propIsString	lef/lef/lefiVia.cpp	/^lefiVia::propIsString(int index) const$/;"	f	class:lefiVia
propIsString	lef/lef/lefiViaRule.cpp	/^lefiViaRule::propIsString(int i) const$/;"	f	class:lefiViaRule
propName	def/def/defiComponent.cpp	/^char* defiComponent::propName(int index) const {$/;"	f	class:defiComponent
propName	def/def/defiGroup.cpp	/^const char* defiGroup::propName(int index) const {$/;"	f	class:defiGroup
propName	def/def/defiNet.cpp	/^const char* defiNet::propName(int index) const {$/;"	f	class:defiNet
propName	def/def/defiNonDefault.cpp	/^const char* defiNonDefault::propName(int index) const {$/;"	f	class:defiNonDefault
propName	def/def/defiPinProp.cpp	/^const char* defiPinProp::propName(int index) const {$/;"	f	class:defiPinProp
propName	def/def/defiProp.cpp	/^const char* defiProp::propName() const {$/;"	f	class:defiProp
propName	def/def/defiRegion.cpp	/^const char* defiRegion::propName(int index) const {$/;"	f	class:defiRegion
propName	def/def/defiRowTrack.cpp	/^const char* defiRow::propName(int index) const {$/;"	f	class:defiRow
propName	lef/lef/lefiLayer.cpp	/^lefiLayer::propName(int i) const$/;"	f	class:lefiLayer
propName	lef/lef/lefiMacro.cpp	/^lefiMacro::propName(int index) const$/;"	f	class:lefiMacro
propName	lef/lef/lefiMacro.cpp	/^lefiPin::propName(int index) const$/;"	f	class:lefiPin
propName	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::propName(int index) const$/;"	f	class:lefiNonDefault
propName	lef/lef/lefiProp.cpp	/^lefiProp::propName() const$/;"	f	class:lefiProp
propName	lef/lef/lefiVia.cpp	/^lefiVia::propName(int index) const$/;"	f	class:lefiVia
propName	lef/lef/lefiViaRule.cpp	/^lefiViaRule::propName(int i) const$/;"	f	class:lefiViaRule
propName_	def/def/defiProp.hpp	/^  char* propName_;      \/\/ name.$/;"	m	class:defiProp
propName_	lef/include/lefiProp.hpp	/^  char* propName_;      \/\/ name.$/;"	m	class:lefiProp
propName_	lef/include/lefiVia.hpp	/^  char** propName_;$/;"	m	class:lefiVia
propName_	lef/lef/lefiProp.hpp	/^  char* propName_;      \/\/ name.$/;"	m	class:lefiProp
propName_	lef/lef/lefiVia.hpp	/^  char** propName_;$/;"	m	class:lefiVia
propNames_	def/def/defiGroup.hpp	/^  char**  propNames_;$/;"	m	class:defiGroup
propNames_	def/def/defiNet.hpp	/^  char**  propNames_;   \/\/ Prop names$/;"	m	class:defiNet
propNames_	def/def/defiPinProp.hpp	/^  char**  propNames_;$/;"	m	class:defiPinProp
propNames_	def/def/defiPropType.hpp	/^  char** propNames_;      \/\/ name.$/;"	m	class:defiPropType
propNames_	def/def/defiRegion.hpp	/^  char**  propNames_;$/;"	m	class:defiRegion
propNames_	def/def/defiRowTrack.hpp	/^  char**  propNames_;$/;"	m	class:defiRow
propNames_	lef/include/lefiMacro.hpp	/^  char** propNames_;$/;"	m	class:lefiMacro
propNames_	lef/include/lefiMacro.hpp	/^  char** propNames_;$/;"	m	class:lefiPin
propNames_	lef/include/lefiPropType.hpp	/^  char** propNames_;      \/\/ name.$/;"	m	class:lefiPropType
propNames_	lef/lef/lefiMacro.hpp	/^  char** propNames_;$/;"	m	class:lefiMacro
propNames_	lef/lef/lefiMacro.hpp	/^  char** propNames_;$/;"	m	class:lefiPin
propNames_	lef/lef/lefiPropType.hpp	/^  char** propNames_;      \/\/ name.$/;"	m	class:lefiPropType
propNum	lef/lef/lefiMacro.cpp	/^lefiMacro::propNum(int index) const$/;"	f	class:lefiMacro
propNum	lef/lef/lefiMacro.cpp	/^lefiPin::propNum(int index) const$/;"	f	class:lefiPin
propNumber	def/def/defiComponent.cpp	/^double defiComponent::propNumber(int index) const {$/;"	f	class:defiComponent
propNumber	def/def/defiGroup.cpp	/^double defiGroup::propNumber(int index) const {$/;"	f	class:defiGroup
propNumber	def/def/defiNet.cpp	/^double defiNet::propNumber(int index) const {$/;"	f	class:defiNet
propNumber	def/def/defiNonDefault.cpp	/^double defiNonDefault::propNumber(int index) const {$/;"	f	class:defiNonDefault
propNumber	def/def/defiPinProp.cpp	/^double defiPinProp::propNumber(int index) const {$/;"	f	class:defiPinProp
propNumber	def/def/defiRegion.cpp	/^double defiRegion::propNumber(int index) const {$/;"	f	class:defiRegion
propNumber	def/def/defiRowTrack.cpp	/^double defiRow::propNumber(int index) const {$/;"	f	class:defiRow
propNumber	lef/lef/lefiLayer.cpp	/^lefiLayer::propNumber(int i) const$/;"	f	class:lefiLayer
propNumber	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::propNumber(int index) const$/;"	f	class:lefiNonDefault
propNumber	lef/lef/lefiVia.cpp	/^lefiVia::propNumber(int index) const$/;"	f	class:lefiVia
propNumber	lef/lef/lefiViaRule.cpp	/^lefiViaRule::propNumber(int i) const$/;"	f	class:lefiViaRule
propNums_	lef/include/lefiMacro.hpp	/^  double* propNums_;$/;"	m	class:lefiMacro
propNums_	lef/include/lefiMacro.hpp	/^  double* propNums_;$/;"	m	class:lefiPin
propNums_	lef/lef/lefiMacro.hpp	/^  double* propNums_;$/;"	m	class:lefiMacro
propNums_	lef/lef/lefiMacro.hpp	/^  double* propNums_;$/;"	m	class:lefiPin
propType	def/def/defiComponent.cpp	/^char defiComponent::propType(int index) const {$/;"	f	class:defiComponent
propType	def/def/defiGroup.cpp	/^const char defiGroup::propType(int index) const {$/;"	f	class:defiGroup
propType	def/def/defiNet.cpp	/^const char defiNet::propType(int index) const {$/;"	f	class:defiNet
propType	def/def/defiNonDefault.cpp	/^const char defiNonDefault::propType(int index) const {$/;"	f	class:defiNonDefault
propType	def/def/defiPinProp.cpp	/^const char defiPinProp::propType(int index) const {$/;"	f	class:defiPinProp
propType	def/def/defiProp.cpp	/^const char* defiProp::propType() const {$/;"	f	class:defiProp
propType	def/def/defiPropType.cpp	/^const char defiPropType::propType(char* name) const {$/;"	f	class:defiPropType
propType	def/def/defiRegion.cpp	/^const char defiRegion::propType(int index) const {$/;"	f	class:defiRegion
propType	def/def/defiRowTrack.cpp	/^const char defiRow::propType(int index) const {$/;"	f	class:defiRow
propType	lef/lef/lefiLayer.cpp	/^lefiLayer::propType(int i) const$/;"	f	class:lefiLayer
propType	lef/lef/lefiMacro.cpp	/^lefiMacro::propType(int index) const$/;"	f	class:lefiMacro
propType	lef/lef/lefiMacro.cpp	/^lefiPin::propType(int index) const$/;"	f	class:lefiPin
propType	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::propType(int index) const$/;"	f	class:lefiNonDefault
propType	lef/lef/lefiProp.cpp	/^lefiProp::propType() const$/;"	f	class:lefiProp
propType	lef/lef/lefiPropType.cpp	/^lefiPropType::propType(char *name) const$/;"	f	class:lefiPropType
propType	lef/lef/lefiVia.cpp	/^lefiVia::propType(int index) const$/;"	f	class:lefiVia
propType	lef/lef/lefiViaRule.cpp	/^lefiViaRule::propType(int i) const$/;"	f	class:lefiViaRule
propType_	def/def/defiProp.hpp	/^  char* propType_;      \/\/ "design" ...$/;"	m	class:defiProp
propType_	lef/include/lefiProp.hpp	/^  char* propType_;      \/\/ "design" "net" "macro" ...$/;"	m	class:lefiProp
propType_	lef/include/lefiVia.hpp	/^  char*   propType_;$/;"	m	class:lefiVia
propType_	lef/lef/lefiProp.hpp	/^  char* propType_;      \/\/ "design" "net" "macro" ...$/;"	m	class:lefiProp
propType_	lef/lef/lefiVia.hpp	/^  char*   propType_;$/;"	m	class:lefiVia
propTypes_	def/def/defiGroup.hpp	/^  char*   propTypes_;$/;"	m	class:defiGroup
propTypes_	def/def/defiNet.hpp	/^  char*   propTypes_;   \/\/ Prop types, 'I' - Integer, 'R' - Real, 'S' - String$/;"	m	class:defiNet
propTypes_	def/def/defiPinProp.hpp	/^  char*   propTypes_;$/;"	m	class:defiPinProp
propTypes_	def/def/defiPropType.hpp	/^  char*  propTypes_;      \/\/ 'R' == "REAL", 'I' == "INTEGER"$/;"	m	class:defiPropType
propTypes_	def/def/defiRegion.hpp	/^  char*   propTypes_;$/;"	m	class:defiRegion
propTypes_	def/def/defiRowTrack.hpp	/^  char*   propTypes_;$/;"	m	class:defiRow
propTypes_	lef/include/lefiMacro.hpp	/^  char*  propTypes_;$/;"	m	class:lefiMacro
propTypes_	lef/include/lefiMacro.hpp	/^  char*  propTypes_;$/;"	m	class:lefiPin
propTypes_	lef/include/lefiPropType.hpp	/^  char*  propTypes_;      \/\/ 'R' == "REAL", 'I' == "INTEGER"$/;"	m	class:lefiPropType
propTypes_	lef/lef/lefiMacro.hpp	/^  char*  propTypes_;$/;"	m	class:lefiMacro
propTypes_	lef/lef/lefiMacro.hpp	/^  char*  propTypes_;$/;"	m	class:lefiPin
propTypes_	lef/lef/lefiPropType.hpp	/^  char*  propTypes_;      \/\/ 'R' == "REAL", 'I' == "INTEGER"$/;"	m	class:lefiPropType
propValue	def/def/defiComponent.cpp	/^char* defiComponent::propValue(int index) const {$/;"	f	class:defiComponent
propValue	def/def/defiGroup.cpp	/^const char* defiGroup::propValue(int index) const {$/;"	f	class:defiGroup
propValue	def/def/defiNet.cpp	/^const char* defiNet::propValue(int index) const {$/;"	f	class:defiNet
propValue	def/def/defiNonDefault.cpp	/^const char* defiNonDefault::propValue(int index) const {$/;"	f	class:defiNonDefault
propValue	def/def/defiPinProp.cpp	/^const char* defiPinProp::propValue(int index) const {$/;"	f	class:defiPinProp
propValue	def/def/defiRegion.cpp	/^const char* defiRegion::propValue(int index) const {$/;"	f	class:defiRegion
propValue	def/def/defiRowTrack.cpp	/^const char* defiRow::propValue(int index) const {$/;"	f	class:defiRow
propValue	lef/lef/lefiLayer.cpp	/^lefiLayer::propValue(int i) const$/;"	f	class:lefiLayer
propValue	lef/lef/lefiMacro.cpp	/^lefiMacro::propValue(int index) const$/;"	f	class:lefiMacro
propValue	lef/lef/lefiMacro.cpp	/^lefiPin::propValue(int index) const$/;"	f	class:lefiPin
propValue	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::propValue(int index) const$/;"	f	class:lefiNonDefault
propValue	lef/lef/lefiVia.cpp	/^lefiVia::propValue(int index) const$/;"	f	class:lefiVia
propValue	lef/lef/lefiViaRule.cpp	/^lefiViaRule::propValue(int i) const$/;"	f	class:lefiViaRule
propValue_	lef/include/lefiVia.hpp	/^  char** propValue_;$/;"	m	class:lefiVia
propValue_	lef/lef/lefiVia.hpp	/^  char** propValue_;$/;"	m	class:lefiVia
propValues_	def/def/defiGroup.hpp	/^  char**  propValues_;$/;"	m	class:defiGroup
propValues_	def/def/defiNet.hpp	/^  char**  propValues_;  \/\/ Prop values All in strings!$/;"	m	class:defiNet
propValues_	def/def/defiPinProp.hpp	/^  char**  propValues_;$/;"	m	class:defiPinProp
propValues_	def/def/defiRegion.hpp	/^  char**  propValues_;$/;"	m	class:defiRegion
propValues_	def/def/defiRowTrack.hpp	/^  char**  propValues_;$/;"	m	class:defiRow
propValues_	lef/include/lefiMacro.hpp	/^  char** propValues_;$/;"	m	class:lefiMacro
propValues_	lef/include/lefiMacro.hpp	/^  char** propValues_;$/;"	m	class:lefiPin
propValues_	lef/lef/lefiMacro.hpp	/^  char** propValues_;$/;"	m	class:lefiMacro
propValues_	lef/lef/lefiMacro.hpp	/^  char** propValues_;$/;"	m	class:lefiPin
prop_def_section	def/def/def.y	/^prop_def_section: K_PROPERTYDEFINITIONS$/;"	l
prop_def_section	lef/lef/lef.y	/^prop_def_section: K_PROPDEF$/;"	l
prop_define	lef/lef/lef.y	/^prop_define:$/;"	l
prop_stmt	lef/lef/lef.y	/^prop_stmt:$/;"	l
prop_stmts	lef/lef/lef.y	/^prop_stmts:$/;"	l
propdefCB	def/defwrite/defwriteCbs.cpp	/^int propdefCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
propend	def/defrw/defrw.cpp	/^int propend(defrCallbackType_e c, void*, defiUserData) {$/;"	f
propertiesAllocated_	def/def/defiPropType.hpp	/^  int    propertiesAllocated_;$/;"	m	class:defiPropType
propertiesAllocated_	lef/include/lefiMacro.hpp	/^  int propertiesAllocated_;$/;"	m	class:lefiMacro
propertiesAllocated_	lef/include/lefiMacro.hpp	/^  int propertiesAllocated_;$/;"	m	class:lefiPin
propertiesAllocated_	lef/include/lefiPropType.hpp	/^  int    propertiesAllocated_;$/;"	m	class:lefiPropType
propertiesAllocated_	lef/lef/lefiMacro.hpp	/^  int propertiesAllocated_;$/;"	m	class:lefiMacro
propertiesAllocated_	lef/lef/lefiMacro.hpp	/^  int propertiesAllocated_;$/;"	m	class:lefiPin
propertiesAllocated_	lef/lef/lefiPropType.hpp	/^  int    propertiesAllocated_;$/;"	m	class:lefiPropType
property_def	def/def/def.y	/^property_def: K_DESIGN {defData->dumb_mode = 1; defData->no_num = 1; defData->Prop.clear(); }$/;"	l
property_defs	def/def/def.y	/^property_defs: \/\/ empty $/;"	l
property_type_and_val	def/def/def.y	/^property_type_and_val: K_INTEGER { defData->real_num = 0;} opt_range opt_num_val$/;"	l
propsAllocated_	def/def/defiComponent.hpp	/^  int propsAllocated_;$/;"	m	class:defiComponent
propsAllocated_	def/def/defiGroup.hpp	/^  int propsAllocated_;$/;"	m	class:defiGroup
propsAllocated_	def/def/defiNet.hpp	/^  long long    propsAllocated_;   \/\/ allocated size of props array$/;"	m	class:defiNet
propsAllocated_	def/def/defiNonDefault.hpp	/^  int     propsAllocated_;$/;"	m	class:defiNonDefault
propsAllocated_	def/def/defiPinProp.hpp	/^  int propsAllocated_;$/;"	m	class:defiPinProp
propsAllocated_	def/def/defiRegion.hpp	/^  int propsAllocated_;$/;"	m	class:defiRegion
propsAllocated_	def/def/defiRowTrack.hpp	/^  int propsAllocated_;$/;"	m	class:defiRow
propsAllocated_	lef/include/lefiLayer.hpp	/^  int propsAllocated_;$/;"	m	class:lefiLayer
propsAllocated_	lef/include/lefiNonDefault.hpp	/^  int propsAllocated_;$/;"	m	class:lefiNonDefault
propsAllocated_	lef/include/lefiVia.hpp	/^  int propsAllocated_;$/;"	m	class:lefiVia
propsAllocated_	lef/include/lefiViaRule.hpp	/^  int propsAllocated_;$/;"	m	class:lefiViaRule
propsAllocated_	lef/lef/lefiLayer.hpp	/^  int propsAllocated_;$/;"	m	class:lefiLayer
propsAllocated_	lef/lef/lefiNonDefault.hpp	/^  int propsAllocated_;$/;"	m	class:lefiNonDefault
propsAllocated_	lef/lef/lefiVia.hpp	/^  int propsAllocated_;$/;"	m	class:lefiVia
propsAllocated_	lef/lef/lefiViaRule.hpp	/^  int propsAllocated_;$/;"	m	class:lefiViaRule
propstart	def/defrw/defrw.cpp	/^int propstart(defrCallbackType_e c, void*, defiUserData) {$/;"	f
protrusionLength	lef/lef/lefiLayer.cpp	/^lefiLayer::protrusionLength() const$/;"	f	class:lefiLayer
protrusionLength_	lef/include/lefiLayer.hpp	/^  double  protrusionLength_;                  \/\/ 5.5$/;"	m	class:lefiLayer
protrusionLength_	lef/lef/lefiLayer.hpp	/^  double  protrusionLength_;                  \/\/ 5.5$/;"	m	class:lefiLayer
protrusionWidth1	lef/lef/lefiLayer.cpp	/^lefiLayer::protrusionWidth1() const$/;"	f	class:lefiLayer
protrusionWidth1_	lef/include/lefiLayer.hpp	/^  double  protrusionWidth1_;                  \/\/ 5.5$/;"	m	class:lefiLayer
protrusionWidth1_	lef/lef/lefiLayer.hpp	/^  double  protrusionWidth1_;                  \/\/ 5.5$/;"	m	class:lefiLayer
protrusionWidth2	lef/lef/lefiLayer.cpp	/^lefiLayer::protrusionWidth2() const$/;"	f	class:lefiLayer
protrusionWidth2_	lef/include/lefiLayer.hpp	/^  double  protrusionWidth2_;                  \/\/ 5.5$/;"	m	class:lefiLayer
protrusionWidth2_	lef/lef/lefiLayer.hpp	/^  double  protrusionWidth2_;                  \/\/ 5.5$/;"	m	class:lefiLayer
prtGeometry	lef/lefdiff/diffLefRW.cpp	/^void prtGeometry(lefiGeometries* geometry, char* inName) {$/;"	f
prtGeometry	lef/lefrw/lefrw.cpp	/^void prtGeometry(lefiGeometries *geometry) {$/;"	f
prtNewLine	lef/include/lefrData.hpp	/^    int  prtNewLine; \/\/ sometimes need to print a new line$/;"	m	class:lefrData
prtNewLine	lef/lef/lefrData.hpp	/^    int  prtNewLine; \/\/ sometimes need to print a new line$/;"	m	class:lefrData
prtNewLine	lef/lef/lefwWriter.cpp	/^static int prtNewLine = 0;  \/\/ sometimes need to print a new line$/;"	v	file:
prtSemiColon	lef/include/lefrData.hpp	/^    int  prtSemiColon; \/\/ sometimes ; is not printed yet$/;"	m	class:lefrData
prtSemiColon	lef/lef/lefrData.hpp	/^    int  prtSemiColon; \/\/ sometimes ; is not printed yet$/;"	m	class:lefrData
prtSemiColon	lef/lef/lefwWriter.cpp	/^static int prtSemiColon = 0;  \/\/ sometimes ; is not printed yet$/;"	v	file:
pt	def/def/def.y	/^pt: '(' NUMBER NUMBER ')'$/;"	l
pt	def/def/defiDefs.hpp	/^    defPOINT pt;$/;"	m	struct:deftoken
pt	def/def/defrData.hpp	/^        struct defpoint pt;$/;"	m	union:__anon17	typeref:struct:__anon17::defpoint
pt	lef/include/lefiDefs.hpp	/^    lefPOINT pt;$/;"	m	struct:token
pt	lef/lef/lef.tab.cpp	/^        LefDefParser::lefPOINT  pt;$/;"	m	union:YYSTYPE	file:
pt	lef/lef/lef.tab.h	/^        LefDefParser::lefPOINT  pt;$/;"	m	union:YYSTYPE
pt	lef/lef/lef.y	/^pt:$/;"	l
pt	lef/lef/lefiDefs.hpp	/^    lefPOINT pt;$/;"	m	struct:token
ptsAllocated_	def/def/defiFill.hpp	/^  int   ptsAllocated_;              \/\/ 5.7$/;"	m	class:defiFill
ptsAllocated_	def/def/defiNet.hpp	/^  long long           ptsAllocated_;$/;"	m	class:defiNet
pulldownres	lef/lef/lefiMacro.cpp	/^lefiPin::pulldownres() const$/;"	f	class:lefiPin
pulldownres_	lef/include/lefiMacro.hpp	/^  double pulldownres_;$/;"	m	class:lefiPin
pulldownres_	lef/lef/lefiMacro.hpp	/^  double pulldownres_;$/;"	m	class:lefiPin
pv_deftoken	def/def/defrData.hpp	/^    char*  pv_deftoken; $/;"	m	class:defrData
pv_token	lef/include/lefrData.hpp	/^    char       *pv_token; $/;"	m	class:lefrData
pv_token	lef/lef/lefrData.hpp	/^    char       *pv_token; $/;"	m	class:lefrData
px	lef/lef/lefiMacro.cpp	/^lefiMacroForeign::px() const$/;"	f	class:lefiMacroForeign
px_	lef/include/lefiMacro.hpp	/^  double     px_;$/;"	m	class:lefiMacroForeign
px_	lef/lef/lefiMacro.hpp	/^  double     px_;$/;"	m	class:lefiMacroForeign
py	lef/lef/lefiMacro.cpp	/^lefiMacroForeign::py() const$/;"	f	class:lefiMacroForeign
py_	lef/include/lefiMacro.hpp	/^  double     py_;$/;"	m	class:lefiMacroForeign
py_	lef/lef/lefiMacro.hpp	/^  double     py_;$/;"	m	class:lefiMacroForeign
qStrCopy	lef/lef/lef_keywords.cpp	/^qStrCopy(char *string)$/;"	f
rVal	def/def/defrData.hpp	/^    double rVal;$/;"	m	class:defrData
r_	lef/include/lefiLayer.hpp	/^  double* r_;$/;"	m	class:lefiAntennaPWL
r_	lef/lef/lefiLayer.hpp	/^  double* r_;$/;"	m	class:lefiAntennaPWL
rangeInfluenceRangeMax_	lef/include/lefiLayer.hpp	/^  double* rangeInfluenceRangeMax_;          \/\/ pcr 388183 & 408930$/;"	m	class:lefiLayer
rangeInfluenceRangeMax_	lef/lef/lefiLayer.hpp	/^  double* rangeInfluenceRangeMax_;          \/\/ pcr 388183 & 408930$/;"	m	class:lefiLayer
rangeInfluenceRangeMin_	lef/include/lefiLayer.hpp	/^  double* rangeInfluenceRangeMin_;          \/\/ pcr 388183 & 408930$/;"	m	class:lefiLayer
rangeInfluenceRangeMin_	lef/lef/lefiLayer.hpp	/^  double* rangeInfluenceRangeMin_;          \/\/ pcr 388183 & 408930$/;"	m	class:lefiLayer
rangeInfluence_	lef/include/lefiLayer.hpp	/^  double* rangeInfluence_;   \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeInfluence_	lef/lef/lefiLayer.hpp	/^  double* rangeInfluence_;   \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeMax_	lef/include/lefiLayer.hpp	/^  double* rangeMax_;         \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeMax_	lef/lef/lefiLayer.hpp	/^  double* rangeMax_;         \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeMin_	lef/include/lefiLayer.hpp	/^  double* rangeMin_;         \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeMin_	lef/lef/lefiLayer.hpp	/^  double* rangeMin_;         \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeRangeMax_	lef/include/lefiLayer.hpp	/^  double* rangeRangeMax_;                   \/\/ pcr 408930$/;"	m	class:lefiLayer
rangeRangeMax_	lef/lef/lefiLayer.hpp	/^  double* rangeRangeMax_;                   \/\/ pcr 408930$/;"	m	class:lefiLayer
rangeRangeMin_	lef/include/lefiLayer.hpp	/^  double* rangeRangeMin_;                   \/\/ pcr 408930$/;"	m	class:lefiLayer
rangeRangeMin_	lef/lef/lefiLayer.hpp	/^  double* rangeRangeMin_;                   \/\/ pcr 408930$/;"	m	class:lefiLayer
reader_case_sensitive	def/def/defrSettings.hpp	/^    int             reader_case_sensitive;$/;"	m	class:defrSession
reader_case_sensitive_set	def/def/defrSettings.hpp	/^    int reader_case_sensitive_set;$/;"	m	class:defrSettings
real_num	def/def/defrData.hpp	/^    int  real_num; $/;"	m	class:defrData
reallocCB	def/defrw/defrw.cpp	/^void* reallocCB(void* name, size_t size) {$/;"	f
reallocCB	lef/lefrw/lefrw.cpp	/^void* reallocCB(void* name, int size) {$/;"	f
rect	lef/include/lefiDefs.hpp	/^struct rect {$/;"	s
rect	lef/lef/lefiDefs.hpp	/^struct rect {$/;"	s
rectColorMask	lef/lef/lefiVia.cpp	/^lefiVia::rectColorMask(int  layerNum,$/;"	f	class:lefiVia
rectColorMask	lef/lef/lefiVia.cpp	/^lefiViaLayer::rectColorMask(int index)$/;"	f	class:lefiViaLayer
rectColorMask_	lef/include/lefiVia.hpp	/^  int* rectColorMask_;$/;"	m	class:lefiViaLayer
rectColorMask_	lef/lef/lefiVia.hpp	/^  int* rectColorMask_;$/;"	m	class:lefiViaLayer
rectMask	def/def/defiNet.cpp	/^int defiNet::rectMask(int index) const {$/;"	f	class:defiNet
rectMask	def/def/defiVia.cpp	/^int defiVia::rectMask(int index) const {$/;"	f	class:defiVia
rectMask_	def/def/defiVia.hpp	/^  int*  rectMask_;          \/\/ 5.8$/;"	m	class:defiVia
rectMasks_	def/def/defiNet.hpp	/^  int* rectMasks_;$/;"	m	class:defiNet
rectName	def/def/defiNet.cpp	/^const char* defiNet::rectName(int index) const {$/;"	f	class:defiNet
rectNames_	def/def/defiNet.hpp	/^  char**     rectNames_;                   \/\/ 5.6$/;"	m	class:defiNet
rectPoly_blockage	def/def/def.y	/^rectPoly_blockage: K_RECT pt pt$/;"	l
rectPoly_blockage_rules	def/def/def.y	/^rectPoly_blockage_rules: \/\/ empty $/;"	l
rectRouteStatus	def/def/defiNet.cpp	/^const char* defiNet::rectRouteStatus(int index) const {$/;"	f	class:defiNet
rectRouteStatusShieldName	def/def/defiNet.cpp	/^const char* defiNet::rectRouteStatusShieldName(int index) const {$/;"	f	class:defiNet
rectRouteStatusShieldNames_	def/def/defiNet.hpp	/^  char** rectRouteStatusShieldNames_;$/;"	m	class:defiNet
rectRouteStatus_	def/def/defiNet.hpp	/^  char** rectRouteStatus_;$/;"	m	class:defiNet
rectShapeType	def/def/defiNet.cpp	/^const char* defiNet::rectShapeType(int index) const {$/;"	f	class:defiNet
rectShapeTypes_	def/def/defiNet.hpp	/^  char** rectShapeTypes_;$/;"	m	class:defiNet
rectXh_	def/def/defiComponent.hpp	/^  int* rectXh_;$/;"	m	class:defiComponent
rectXl_	def/def/defiComponent.hpp	/^  int* rectXl_;       \/\/ region points$/;"	m	class:defiComponent
rectYh_	def/def/defiComponent.hpp	/^  int* rectYh_;$/;"	m	class:defiComponent
rectYl_	def/def/defiComponent.hpp	/^  int* rectYl_;$/;"	m	class:defiComponent
rect_is_keyword	def/def/defrData.hpp	/^    int  rect_is_keyword; $/;"	m	class:defrData
rect_list	def/def/def.y	/^rect_list :$/;"	l
rect_pts	def/def/def.y	/^rect_pts :$/;"	l
rect_statement	def/def/def.y	/^rect_statement : $/;"	l
rectanglesAllocated_	def/def/defiRegion.hpp	/^  int rectanglesAllocated_;$/;"	m	class:defiRegion
rectsAllocated_	def/def/defiBlockage.hpp	/^  int    rectsAllocated_;$/;"	m	class:defiBlockage
rectsAllocated_	def/def/defiComponent.hpp	/^  int rectsAllocated_;$/;"	m	class:defiComponent
rectsAllocated_	def/def/defiFill.hpp	/^  int   rectsAllocated_;$/;"	m	class:defiFill
rectsAllocated_	def/def/defiGroup.hpp	/^  int rectsAllocated_;$/;"	m	class:defiGroup
rectsAllocated_	def/def/defiNet.hpp	/^  long long  rectsAllocated_;              \/\/ 5.6$/;"	m	class:defiNet
rectsAllocated_	def/def/defiSlot.hpp	/^  int   rectsAllocated_;$/;"	m	class:defiSlot
rectsAllocated_	lef/include/lefiMacro.hpp	/^  int*   rectsAllocated_;$/;"	m	class:lefiDensity
rectsAllocated_	lef/include/lefiVia.hpp	/^  int rectsAllocated_;$/;"	m	class:lefiViaLayer
rectsAllocated_	lef/lef/lefiMacro.hpp	/^  int*   rectsAllocated_;$/;"	m	class:lefiDensity
rectsAllocated_	lef/lef/lefiVia.hpp	/^  int rectsAllocated_;$/;"	m	class:lefiViaLayer
rects_	lef/include/lefiMacro.hpp	/^  struct lefiGeomRect** rects_;$/;"	m	class:lefiDensity	typeref:struct:lefiDensity::lefiGeomRect
rects_	lef/lef/lefiMacro.hpp	/^  struct lefiGeomRect** rects_;$/;"	m	class:lefiDensity	typeref:struct:lefiDensity::lefiGeomRect
regTypeDef	def/def/defrData.hpp	/^    int  regTypeDef; \/\/ keep track that region type is defined $/;"	m	class:defrData
regionBounds	def/def/defiComponent.cpp	/^void defiComponent::regionBounds(int* size,$/;"	f	class:defiComponent
regionCB	def/defwrite/defwriteCbs.cpp	/^int regionCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
regionLength_	def/def/defiGroup.hpp	/^  int regionLength_;$/;"	m	class:defiGroup
regionName	def/def/defiComponent.cpp	/^const char* defiComponent::regionName() const {$/;"	f	class:defiComponent
regionName	def/def/defiGroup.cpp	/^const char* defiGroup::regionName() const {$/;"	f	class:defiGroup
regionNameSize_	def/def/defiComponent.hpp	/^  int regionNameSize_;  \/\/ allocated size of region name$/;"	m	class:defiComponent
regionName_	def/def/defiComponent.hpp	/^  char* regionName_;    \/\/ name.$/;"	m	class:defiComponent
regionRects	def/def/defiGroup.cpp	/^void defiGroup::regionRects(int* size, int** xl,$/;"	f	class:defiGroup
regionWarnings	def/def/defrData.hpp	/^    int  regionWarnings; $/;"	m	class:defrData
region_	def/def/defiGroup.hpp	/^  char* region_;$/;"	m	class:defiGroup
region_option	def/def/def.y	/^region_option : '+' K_PROPERTY {defData->dumb_mode = DEF_MAX_INT; }$/;"	l
region_options	def/def/def.y	/^region_options: \/\/ empty $/;"	l
region_prop	def/def/def.y	/^region_prop : T_STRING NUMBER$/;"	l
region_prop_list	def/def/def.y	/^region_prop_list : \/\/ empty $/;"	l
region_type	def/def/def.y	/^region_type: K_FENCE$/;"	l
regions_section	def/def/def.y	/^regions_section: regions_start regions_stmts K_END K_REGIONS$/;"	l
regions_start	def/def/def.y	/^regions_start: K_REGIONS NUMBER ';'$/;"	l
regions_stmt	def/def/def.y	/^regions_stmt: '-' { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING$/;"	l
regions_stmts	def/def/def.y	/^regions_stmts: \/\/ empty $/;"	l
reload_buffer	def/def/def_keywords.cpp	/^defrData::reload_buffer() {$/;"	f	class:defrData
relop	lef/lef/lef.y	/^relop:$/;"	l
req_layer_name	lef/lef/lef.y	/^req_layer_name:$/;"	l
resPerCut_	lef/include/lefiLayer.hpp	/^  double  resPerCut_;$/;"	m	class:lefiLayer
resPerCut_	lef/lef/lefiLayer.hpp	/^  double  resPerCut_;$/;"	m	class:lefiLayer
res_point	lef/lef/lef.y	/^res_point: '(' int_number int_number ')'$/;"	l
res_points	lef/lef/lef.y	/^res_points :$/;"	l
reset	lef/lef/lefrCallbacks.cpp	/^lefrCallbacks::reset()$/;"	f	class:lefrCallbacks
reset	lef/lef/lefrData.cpp	/^lefrData::reset()$/;"	f	class:lefrData
reset	lef/lef/lefrSettings.cpp	/^lefrSettings::reset()$/;"	f	class:lefrSettings
resistance	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::resistance(int index)$/;"	f	class:lefiCorrectionEdge
resistance	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::resistance(int index)$/;"	f	class:lefiNoiseEdge
resistance	lef/lef/lefiLayer.cpp	/^lefiLayer::resistance() const$/;"	f	class:lefiLayer
resistance	lef/lef/lefiMacro.cpp	/^lefiPin::resistance() const$/;"	f	class:lefiPin
resistance	lef/lef/lefiUnits.cpp	/^lefiUnits::resistance() const$/;"	f	class:lefiUnits
resistance	lef/lef/lefiVia.cpp	/^lefiVia::resistance() const$/;"	f	class:lefiVia
resistance	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::resistance() const$/;"	f	class:lefiViaRuleLayer
resistanceArray	lef/lef/lefiLayer.cpp	/^lefiLayer::resistanceArray(int      *numPoints,$/;"	f	class:lefiLayer
resistancePerCut	lef/lef/lefiLayer.cpp	/^lefiLayer::resistancePerCut() const$/;"	f	class:lefiLayer
resistancePointsAllocated_	lef/include/lefiLayer.hpp	/^  int resistancePointsAllocated_;$/;"	m	class:lefiLayer
resistancePointsAllocated_	lef/lef/lefiLayer.hpp	/^  int resistancePointsAllocated_;$/;"	m	class:lefiLayer
resistanceWidths_	lef/include/lefiLayer.hpp	/^  double* resistanceWidths_;$/;"	m	class:lefiLayer
resistanceWidths_	lef/lef/lefiLayer.hpp	/^  double* resistanceWidths_;$/;"	m	class:lefiLayer
resistance_	lef/include/lefiLayer.hpp	/^  double resistance_;$/;"	m	class:lefiLayer
resistance_	lef/include/lefiMacro.hpp	/^  double resistance_;$/;"	m	class:lefiPin
resistance_	lef/include/lefiNonDefault.hpp	/^  double* resistance_;$/;"	m	class:lefiNonDefault
resistance_	lef/include/lefiUnits.hpp	/^  double resistance_;$/;"	m	class:lefiUnits
resistance_	lef/include/lefiVia.hpp	/^  double resistance_;$/;"	m	class:lefiVia
resistance_	lef/include/lefiViaRule.hpp	/^  double resistance_;$/;"	m	class:lefiViaRuleLayer
resistance_	lef/lef/lefiLayer.hpp	/^  double resistance_;$/;"	m	class:lefiLayer
resistance_	lef/lef/lefiMacro.hpp	/^  double resistance_;$/;"	m	class:lefiPin
resistance_	lef/lef/lefiNonDefault.hpp	/^  double* resistance_;$/;"	m	class:lefiNonDefault
resistance_	lef/lef/lefiUnits.hpp	/^  double resistance_;$/;"	m	class:lefiUnits
resistance_	lef/lef/lefiVia.hpp	/^  double resistance_;$/;"	m	class:lefiVia
resistance_	lef/lef/lefiViaRule.hpp	/^  double resistance_;$/;"	m	class:lefiViaRuleLayer
resistancesAllocated_	lef/include/lefiCrossTalk.hpp	/^  int resistancesAllocated_;$/;"	m	class:lefiCorrectionEdge
resistancesAllocated_	lef/include/lefiCrossTalk.hpp	/^  int resistancesAllocated_;$/;"	m	class:lefiNoiseEdge
resistancesAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int resistancesAllocated_;$/;"	m	class:lefiCorrectionEdge
resistancesAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int resistancesAllocated_;$/;"	m	class:lefiNoiseEdge
resistances_	lef/include/lefiCrossTalk.hpp	/^  lefiCorrectionResistance** resistances_;$/;"	m	class:lefiCorrectionEdge
resistances_	lef/include/lefiCrossTalk.hpp	/^  lefiNoiseResistance** resistances_;$/;"	m	class:lefiNoiseEdge
resistances_	lef/include/lefiLayer.hpp	/^  double* resistances_;$/;"	m	class:lefiLayer
resistances_	lef/lef/lefiCrossTalk.hpp	/^  lefiCorrectionResistance** resistances_;$/;"	m	class:lefiCorrectionEdge
resistances_	lef/lef/lefiCrossTalk.hpp	/^  lefiNoiseResistance** resistances_;$/;"	m	class:lefiNoiseEdge
resistances_	lef/lef/lefiLayer.hpp	/^  double* resistances_;$/;"	m	class:lefiLayer
reverseNetOrder	def/def/defiComponent.cpp	/^void defiComponent::reverseNetOrder() {$/;"	f	class:defiComponent
reverseOrder	def/def/defiPath.cpp	/^void defiPath::reverseOrder() {$/;"	f	class:defiPath
right	def/def/defiProp.cpp	/^double defiProp::right() const {$/;"	f	class:defiProp
right	lef/lef/lefiProp.cpp	/^lefiProp::right() const$/;"	f	class:lefiProp
rightHalo_	def/def/defiComponent.hpp	/^  int rightHalo_;$/;"	m	class:defiComponent
right_	def/def/defiProp.hpp	/^  double left_, right_; \/\/ if it has a range the numbers are here.$/;"	m	class:defiProp
right_	lef/include/lefiProp.hpp	/^  double right_; \/\/ if it has a range the numbers are here.$/;"	m	class:lefiProp
right_	lef/lef/lefiProp.hpp	/^  double right_; \/\/ if it has a range the numbers are here.$/;"	m	class:lefiProp
ring	def/def/defrData.hpp	/^    char* ring[RING_SIZE];$/;"	m	class:defrData
ring	lef/include/lefrData.hpp	/^    char       *ring[RING_SIZE];$/;"	m	class:lefrData
ring	lef/lef/lefrData.hpp	/^    char       *ring[RING_SIZE];$/;"	m	class:lefrData
ringCopy	def/def/def_keywords.cpp	/^defrData::ringCopy(const char* string) $/;"	f	class:defrData
ringCopy	lef/lef/lef_keywords.cpp	/^ringCopy(const char *string)$/;"	f	file:
ringPlace	def/def/defrData.hpp	/^    int  ringPlace; $/;"	m	class:defrData
ringPlace	lef/include/lefrData.hpp	/^    int  ringPlace; $/;"	m	class:lefrData
ringPlace	lef/lef/lefrData.hpp	/^    int  ringPlace; $/;"	m	class:lefrData
ringSizes	def/def/defrData.hpp	/^    int ringSizes[RING_SIZE];$/;"	m	class:defrData
ringSizes	lef/include/lefrData.hpp	/^    int         ringSizes[RING_SIZE];$/;"	m	class:lefrData
ringSizes	lef/lef/lefrData.hpp	/^    int         ringSizes[RING_SIZE];$/;"	m	class:lefrData
riseAtt1One	lef/lef/lefiMacro.cpp	/^lefiTiming::riseAtt1One()$/;"	f	class:lefiTiming
riseAtt1One_	lef/include/lefiMacro.hpp	/^  double riseAtt1One_;$/;"	m	class:lefiTiming
riseAtt1One_	lef/lef/lefiMacro.hpp	/^  double riseAtt1One_;$/;"	m	class:lefiTiming
riseAtt1Two	lef/lef/lefiMacro.cpp	/^lefiTiming::riseAtt1Two()$/;"	f	class:lefiTiming
riseAtt1Two_	lef/include/lefiMacro.hpp	/^  double riseAtt1Two_;$/;"	m	class:lefiTiming
riseAtt1Two_	lef/lef/lefiMacro.hpp	/^  double riseAtt1Two_;$/;"	m	class:lefiTiming
riseCSOne	lef/lef/lefiMacro.cpp	/^lefiTiming::riseCSOne()$/;"	f	class:lefiTiming
riseCSOne_	lef/include/lefiMacro.hpp	/^  double riseCSOne_;$/;"	m	class:lefiTiming
riseCSOne_	lef/lef/lefiMacro.hpp	/^  double riseCSOne_;$/;"	m	class:lefiTiming
riseCSTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::riseCSTwo()$/;"	f	class:lefiTiming
riseCSTwo_	lef/include/lefiMacro.hpp	/^  double riseCSTwo_;$/;"	m	class:lefiTiming
riseCSTwo_	lef/lef/lefiMacro.hpp	/^  double riseCSTwo_;$/;"	m	class:lefiTiming
riseIntrinsicFour	lef/lef/lefiMacro.cpp	/^lefiTiming::riseIntrinsicFour()$/;"	f	class:lefiTiming
riseIntrinsicFour_	lef/include/lefiMacro.hpp	/^  double riseIntrinsicFour_;$/;"	m	class:lefiTiming
riseIntrinsicFour_	lef/lef/lefiMacro.hpp	/^  double riseIntrinsicFour_;$/;"	m	class:lefiTiming
riseIntrinsicOne	lef/lef/lefiMacro.cpp	/^lefiTiming::riseIntrinsicOne()$/;"	f	class:lefiTiming
riseIntrinsicOne_	lef/include/lefiMacro.hpp	/^  double riseIntrinsicOne_;$/;"	m	class:lefiTiming
riseIntrinsicOne_	lef/lef/lefiMacro.hpp	/^  double riseIntrinsicOne_;$/;"	m	class:lefiTiming
riseIntrinsicThree	lef/lef/lefiMacro.cpp	/^lefiTiming::riseIntrinsicThree()$/;"	f	class:lefiTiming
riseIntrinsicThree_	lef/include/lefiMacro.hpp	/^  double riseIntrinsicThree_;$/;"	m	class:lefiTiming
riseIntrinsicThree_	lef/lef/lefiMacro.hpp	/^  double riseIntrinsicThree_;$/;"	m	class:lefiTiming
riseIntrinsicTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::riseIntrinsicTwo()$/;"	f	class:lefiTiming
riseIntrinsicTwo_	lef/include/lefiMacro.hpp	/^  double riseIntrinsicTwo_;$/;"	m	class:lefiTiming
riseIntrinsicTwo_	lef/lef/lefiMacro.hpp	/^  double riseIntrinsicTwo_;$/;"	m	class:lefiTiming
riseMax	def/def/defiAssertion.cpp	/^double defiAssertion::riseMax() const {$/;"	f	class:defiAssertion
riseMax	def/def/defiPartition.cpp	/^double defiPartition::riseMax() const {$/;"	f	class:defiPartition
riseMaxLeft	def/def/defiPartition.cpp	/^double defiPartition::riseMaxLeft() const {$/;"	f	class:defiPartition
riseMaxLeft_	def/def/defiPartition.hpp	/^  double riseMaxLeft_;$/;"	m	class:defiPartition
riseMaxRight	def/def/defiPartition.cpp	/^double defiPartition::riseMaxRight() const {$/;"	f	class:defiPartition
riseMaxRight_	def/def/defiPartition.hpp	/^  double riseMaxRight_;$/;"	m	class:defiPartition
riseMax_	def/def/defiAssertion.hpp	/^  double riseMax_;$/;"	m	class:defiAssertion
riseMax_	def/def/defiPartition.hpp	/^  double riseMax_;$/;"	m	class:defiPartition
riseMin	def/def/defiAssertion.cpp	/^double defiAssertion::riseMin() const {$/;"	f	class:defiAssertion
riseMin	def/def/defiPartition.cpp	/^double defiPartition::riseMin() const {$/;"	f	class:defiPartition
riseMinLeft	def/def/defiPartition.cpp	/^double defiPartition::riseMinLeft() const {$/;"	f	class:defiPartition
riseMinLeft_	def/def/defiPartition.hpp	/^  double riseMinLeft_;$/;"	m	class:defiPartition
riseMinRight	def/def/defiPartition.cpp	/^double defiPartition::riseMinRight() const {$/;"	f	class:defiPartition
riseMinRight_	def/def/defiPartition.hpp	/^  double riseMinRight_;$/;"	m	class:defiPartition
riseMin_	def/def/defiAssertion.hpp	/^  double riseMin_;$/;"	m	class:defiAssertion
riseMin_	def/def/defiPartition.hpp	/^  double riseMin_;$/;"	m	class:defiPartition
riseRSOne	lef/lef/lefiMacro.cpp	/^lefiTiming::riseRSOne()$/;"	f	class:lefiTiming
riseRSOne_	lef/include/lefiMacro.hpp	/^  double riseRSOne_;$/;"	m	class:lefiTiming
riseRSOne_	lef/lef/lefiMacro.hpp	/^  double riseRSOne_;$/;"	m	class:lefiTiming
riseRSTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::riseRSTwo()$/;"	f	class:lefiTiming
riseRSTwo_	lef/include/lefiMacro.hpp	/^  double riseRSTwo_;$/;"	m	class:lefiTiming
riseRSTwo_	lef/lef/lefiMacro.hpp	/^  double riseRSTwo_;$/;"	m	class:lefiTiming
riseSatcur	lef/lef/lefiMacro.cpp	/^lefiPin::riseSatcur() const$/;"	f	class:lefiPin
riseSatcur_	lef/include/lefiMacro.hpp	/^  double riseSatcur_;$/;"	m	class:lefiPin
riseSatcur_	lef/lef/lefiMacro.hpp	/^  double riseSatcur_;$/;"	m	class:lefiPin
riseSlewFive	lef/lef/lefiMacro.cpp	/^lefiTiming::riseSlewFive()$/;"	f	class:lefiTiming
riseSlewFive_	lef/include/lefiMacro.hpp	/^  double riseSlewFive_;$/;"	m	class:lefiTiming
riseSlewFive_	lef/lef/lefiMacro.hpp	/^  double riseSlewFive_;$/;"	m	class:lefiTiming
riseSlewFour	lef/lef/lefiMacro.cpp	/^lefiTiming::riseSlewFour()$/;"	f	class:lefiTiming
riseSlewFour_	lef/include/lefiMacro.hpp	/^  double riseSlewFour_;$/;"	m	class:lefiTiming
riseSlewFour_	lef/lef/lefiMacro.hpp	/^  double riseSlewFour_;$/;"	m	class:lefiTiming
riseSlewLimit	lef/lef/lefiMacro.cpp	/^lefiPin::riseSlewLimit() const$/;"	f	class:lefiPin
riseSlewLimit_	lef/include/lefiMacro.hpp	/^  double riseSlewLimit_;$/;"	m	class:lefiPin
riseSlewLimit_	lef/lef/lefiMacro.hpp	/^  double riseSlewLimit_;$/;"	m	class:lefiPin
riseSlewOne	lef/lef/lefiMacro.cpp	/^lefiTiming::riseSlewOne()$/;"	f	class:lefiTiming
riseSlewOne_	lef/include/lefiMacro.hpp	/^  double riseSlewOne_;$/;"	m	class:lefiTiming
riseSlewOne_	lef/lef/lefiMacro.hpp	/^  double riseSlewOne_;$/;"	m	class:lefiTiming
riseSlewSeven	lef/lef/lefiMacro.cpp	/^lefiTiming::riseSlewSeven()$/;"	f	class:lefiTiming
riseSlewSeven_	lef/include/lefiMacro.hpp	/^  double riseSlewSeven_;$/;"	m	class:lefiTiming
riseSlewSeven_	lef/lef/lefiMacro.hpp	/^  double riseSlewSeven_;$/;"	m	class:lefiTiming
riseSlewSix	lef/lef/lefiMacro.cpp	/^lefiTiming::riseSlewSix()$/;"	f	class:lefiTiming
riseSlewSix_	lef/include/lefiMacro.hpp	/^  double riseSlewSix_;$/;"	m	class:lefiTiming
riseSlewSix_	lef/lef/lefiMacro.hpp	/^  double riseSlewSix_;$/;"	m	class:lefiTiming
riseSlewThree	lef/lef/lefiMacro.cpp	/^lefiTiming::riseSlewThree()$/;"	f	class:lefiTiming
riseSlewThree_	lef/include/lefiMacro.hpp	/^  double riseSlewThree_;$/;"	m	class:lefiTiming
riseSlewThree_	lef/lef/lefiMacro.hpp	/^  double riseSlewThree_;$/;"	m	class:lefiTiming
riseSlewTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::riseSlewTwo()$/;"	f	class:lefiTiming
riseSlewTwo_	lef/include/lefiMacro.hpp	/^  double riseSlewTwo_;$/;"	m	class:lefiTiming
riseSlewTwo_	lef/lef/lefiMacro.hpp	/^  double riseSlewTwo_;$/;"	m	class:lefiTiming
riseThresh	lef/lef/lefiMacro.cpp	/^lefiPin::riseThresh() const$/;"	f	class:lefiPin
riseThresh_	lef/include/lefiMacro.hpp	/^  double riseThresh_;$/;"	m	class:lefiPin
riseThresh_	lef/lef/lefiMacro.hpp	/^  double riseThresh_;$/;"	m	class:lefiPin
riseToOne	lef/lef/lefiMacro.cpp	/^lefiTiming::riseToOne()$/;"	f	class:lefiTiming
riseToOne_	lef/include/lefiMacro.hpp	/^  double riseToOne_;$/;"	m	class:lefiTiming
riseToOne_	lef/lef/lefiMacro.hpp	/^  double riseToOne_;$/;"	m	class:lefiTiming
riseToTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::riseToTwo()$/;"	f	class:lefiTiming
riseToTwo_	lef/include/lefiMacro.hpp	/^  double riseToTwo_;$/;"	m	class:lefiTiming
riseToTwo_	lef/lef/lefiMacro.hpp	/^  double riseToTwo_;$/;"	m	class:lefiTiming
riseVoltage	lef/lef/lefiMacro.cpp	/^lefiPin::riseVoltage() const$/;"	f	class:lefiPin
riseVoltage_	lef/include/lefiMacro.hpp	/^  double riseVoltage_;$/;"	m	class:lefiPin
riseVoltage_	lef/lef/lefiMacro.hpp	/^  double riseVoltage_;$/;"	m	class:lefiPin
risefall	def/def/def.y	/^risefall: K_RISE { $$ = (char*)"RISE"; } | K_FALL { $$ = (char*)"FALL"; }$/;"	l
risefall	lef/lef/lef.y	/^risefall:$/;"	l
risefallminmax1	def/def/def.y	/^risefallminmax1: K_RISEMIN NUMBER$/;"	l
risefallminmax1_list	def/def/def.y	/^risefallminmax1_list: \/\/ empty $/;"	l
risefallminmax2	def/def/def.y	/^risefallminmax2: K_RISEMIN NUMBER NUMBER$/;"	l
risefallminmax2_list	def/def/def.y	/^risefallminmax2_list:$/;"	l
routed_is_keyword	def/def/defrData.hpp	/^    int  routed_is_keyword; $/;"	m	class:defrData
rowCB	def/defwrite/defwriteCbs.cpp	/^int rowCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
rowCol	def/def/defiVia.cpp	/^void defiVia::rowCol(int* numCutRows, int* numCutCols) const {$/;"	f	class:defiVia
rowName	def/def/defrData.hpp	/^    char*  rowName; \/\/ to hold the rowName for message$/;"	m	class:defrData
rowOrComp_	def/def/defiFPC.hpp	/^  char* rowOrComp_;$/;"	m	class:defiFPC
rowPatternAllocated_	lef/include/lefiMisc.hpp	/^  int    rowPatternAllocated_;$/;"	m	class:lefiSite
rowPatternAllocated_	lef/lef/lefiMisc.hpp	/^  int    rowPatternAllocated_;$/;"	m	class:lefiSite
rowWarnings	def/def/defrData.hpp	/^    int  rowWarnings; $/;"	m	class:defrData
row_do_option	def/def/def.y	/^row_do_option: \/\/ empty $/;"	l
row_option	def/def/def.y	/^row_option : '+' K_PROPERTY {defData->dumb_mode = DEF_MAX_INT; }$/;"	l
row_options	def/def/def.y	/^row_options: \/\/ empty $/;"	l
row_or_comp	def/def/def.y	/^row_or_comp: '(' K_ROWS  {defData->dumb_mode = 1; defData->no_num = 1; } T_STRING ')'$/;"	l
row_or_comp_list	def/def/def.y	/^row_or_comp_list: \/\/ empty $/;"	l
row_prop	def/def/def.y	/^row_prop : T_STRING NUMBER$/;"	l
row_prop_list	def/def/def.y	/^row_prop_list : \/\/ empty $/;"	l
row_rule	def/def/def.y	/^row_rule: K_ROW {defData->dumb_mode = 2; defData->no_num = 2; } T_STRING T_STRING NUMBER NUMBER$/;"	l
row_step_option	def/def/def.y	/^row_step_option: \/\/ empty $/;"	l
rows_	def/def/defiVia.hpp	/^  int   rows_;              \/\/ 5.6$/;"	m	class:defiVia
rule	def/def/def.y	/^rule: design_section | assertions_section | blockage_section | comps_section$/;"	l
rule	lef/lef/lef.y	/^rule:  version | busbitchars | case_sensitivity | units_section$/;"	l
rules	def/def/def.y	/^rules: \/\/ empty $/;"	l
rules	lef/lef/lef.y	/^rules:$/;"	l
sNetWarnings	def/def/defrData.hpp	/^    int  sNetWarnings; $/;"	m	class:defrData
s_expr	lef/lef/lef.y	/^s_expr:$/;"	l
sameMask	def/def/defiRowTrack.cpp	/^int defiTrack::sameMask() const {$/;"	f	class:defiTrack
same_mask	def/def/def.y	/^same_mask: $/;"	l
samemask_	def/def/defiRowTrack.hpp	/^  int samemask_;$/;"	m	class:defiTrack
samenet_keyword	lef/lef/lef.y	/^samenet_keyword: K_SAMENET$/;"	l
save_x	def/def/defrData.hpp	/^    double save_x; $/;"	m	class:defrData
save_y	def/def/defrData.hpp	/^    double save_y; $/;"	m	class:defrData
scan_member	def/def/def.y	/^scan_member: '+' K_START {defData->dumb_mode = 2; defData->no_num = 2;} T_STRING opt_pin$/;"	l
scan_members	def/def/def.y	/^scan_members: $/;"	l
scan_rule	def/def/def.y	/^scan_rule: start_scan scan_members ';' $/;"	l
scanchainWarnings	def/def/defrData.hpp	/^    int  scanchainWarnings; $/;"	m	class:defrData
scanchain_end	def/def/def.y	/^scanchain_end: K_END K_SCANCHAINS$/;"	l
scanchain_rules	def/def/def.y	/^scanchain_rules: \/\/ empty $/;"	l
scanchain_start	def/def/def.y	/^scanchain_start: K_SCANCHAINS NUMBER ';'$/;"	l
scanchains_section	def/def/def.y	/^scanchains_section: scanchain_start scanchain_rules scanchain_end$/;"	l
sdist_	def/def/defiNet.hpp	/^  double*     sdist_;$/;"	m	class:defiNet
session	def/def/defrData.hpp	/^    defrSession           *session;$/;"	m	class:defrContext
session	def/def/defrData.hpp	/^    defrSession         *session;$/;"	m	class:defrData
set	def/def/defiPartition.cpp	/^void defiPartition::set(char dir, char typ, const char* inst, const char* pin) {$/;"	f	class:defiPartition
set	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::set(const char    *name,$/;"	f	class:lefiGcellPattern
set	lef/lef/lefiMisc.cpp	/^lefiMinFeature::set(double  one,$/;"	f	class:lefiMinFeature
set	lef/lef/lefiMisc.cpp	/^lefiSitePattern::set(const char *name,$/;"	f	class:lefiSitePattern
set	lef/lef/lefiMisc.cpp	/^lefiSpacing::set(const char *name1,$/;"	f	class:lefiSpacing
set	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::set(const char    *name,$/;"	f	class:lefiTrackPattern
set	lef/lef/lefiMisc.cpp	/^lefiUseMinSpacing::set(const char   *name,$/;"	f	class:lefiUseMinSpacing
set90Symmetry	lef/lef/lefiMacro.cpp	/^lefiMacro::set90Symmetry()$/;"	f	class:lefiMacro
set90Symmetry	lef/lef/lefiMisc.cpp	/^lefiSite::set90Symmetry()$/;"	f	class:lefiSite
setAcOneEntry	lef/lef/lefiLayer.cpp	/^lefiLayer::setAcOneEntry(double num)$/;"	f	class:lefiLayer
setAlign	def/def/defiFPC.cpp	/^void defiFPC::setAlign() {$/;"	f	class:defiFPC
setAntennaArea	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaArea(double num)$/;"	f	class:lefiLayer
setAntennaAreaFactor	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaAreaFactor(double value)$/;"	f	class:lefiAntennaModel
setAntennaAreaFactor	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaAreaFactor(double value)$/;"	f	class:lefiLayer
setAntennaAreaMinusDiff	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaAreaMinusDiff(double value)$/;"	f	class:lefiAntennaModel
setAntennaAreaMinusDiff	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaAreaMinusDiff(double value)$/;"	f	class:lefiLayer
setAntennaAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaAreaRatio(double value)$/;"	f	class:lefiAntennaModel
setAntennaAreaRatio	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaAreaRatio(double value)$/;"	f	class:lefiLayer
setAntennaCumAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaCumAreaRatio(double value)$/;"	f	class:lefiAntennaModel
setAntennaCumAreaRatio	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaCumAreaRatio(double value)$/;"	f	class:lefiLayer
setAntennaCumRoutingPlusCut	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaCumRoutingPlusCut()$/;"	f	class:lefiAntennaModel
setAntennaCumRoutingPlusCut	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaCumRoutingPlusCut()$/;"	f	class:lefiLayer
setAntennaCumSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaCumSideAreaRatio(double value)$/;"	f	class:lefiAntennaModel
setAntennaCumSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaCumSideAreaRatio(double value)$/;"	f	class:lefiLayer
setAntennaDUO	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaDUO(lefiAntennaEnum antennaType)$/;"	f	class:lefiAntennaModel
setAntennaDUO	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaDUO(lefiAntennaEnum antennaType)$/;"	f	class:lefiLayer
setAntennaGatePlusDiff	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaGatePlusDiff(double value)$/;"	f	class:lefiAntennaModel
setAntennaGatePlusDiff	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaGatePlusDiff(double value)$/;"	f	class:lefiLayer
setAntennaLength	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaLength(double num)$/;"	f	class:lefiLayer
setAntennaModel	def/def/defiPinCap.cpp	/^void defiPinAntennaModel::setAntennaModel(int aOxide) {$/;"	f	class:defiPinAntennaModel
setAntennaModel	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaModel(int aOxide)$/;"	f	class:lefiAntennaModel
setAntennaModel	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::setAntennaModel(int aOxide)$/;"	f	class:lefiPinAntennaModel
setAntennaPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaPWL(lefiAntennaEnum antennaType,$/;"	f	class:lefiAntennaModel
setAntennaPWL	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaPWL(lefiAntennaEnum    antennaType,$/;"	f	class:lefiLayer
setAntennaReturnFlag	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::setAntennaReturnFlag(int flag)$/;"	f	class:lefiPinAntennaModel
setAntennaSideAreaFactor	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaSideAreaFactor(double value)$/;"	f	class:lefiAntennaModel
setAntennaSideAreaFactor	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaSideAreaFactor(double value)$/;"	f	class:lefiLayer
setAntennaSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaSideAreaRatio(double value)$/;"	f	class:lefiAntennaModel
setAntennaSideAreaRatio	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaSideAreaRatio(double value)$/;"	f	class:lefiLayer
setAntennaValue	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaValue(lefiAntennaEnum   antennaType,$/;"	f	class:lefiAntennaModel
setAntennaValue	lef/lef/lefiLayer.cpp	/^lefiLayer::setAntennaValue(lefiAntennaEnum  antennaType,$/;"	f	class:lefiLayer
setArea	lef/lef/lefiLayer.cpp	/^lefiLayer::setArea(double num)$/;"	f	class:lefiLayer
setArraySpacingCut	lef/lef/lefiLayer.cpp	/^lefiLayer::setArraySpacingCut(double cutSpacing)$/;"	f	class:lefiLayer
setArraySpacingLongArray	lef/lef/lefiLayer.cpp	/^lefiLayer::setArraySpacingLongArray()$/;"	f	class:lefiLayer
setArraySpacingWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setArraySpacingWidth(double viaWidth)$/;"	f	class:lefiLayer
setAssertionMode	def/def/defiAssertion.cpp	/^void defiAssertion::setAssertionMode() {$/;"	f	class:defiAssertion
setBounds	def/def/defiNet.cpp	/^void defiVpin::setBounds(int xl, int yl, int xh, int yh) {$/;"	f	class:defiVpin
setBuffer	lef/lef/lefiMacro.cpp	/^lefiMacro::setBuffer()$/;"	f	class:lefiMacro
setCap	def/def/defiNet.cpp	/^void defiNet::setCap(double w) {$/;"	f	class:defiNet
setCap	def/def/defiPinCap.cpp	/^void defiPinCap::setCap(double d) {$/;"	f	class:defiPinCap
setCapMultiplier	lef/lef/lefiLayer.cpp	/^lefiLayer::setCapMultiplier(double num)$/;"	f	class:lefiLayer
setCapacitance	def/def/defiIOTiming.cpp	/^void defiIOTiming::setCapacitance(double num) {$/;"	f	class:defiIOTiming
setCapacitance	lef/lef/lefiLayer.cpp	/^lefiLayer::setCapacitance(double num)$/;"	f	class:lefiLayer
setCapacitance	lef/lef/lefiMacro.cpp	/^lefiPin::setCapacitance(double capacitance)$/;"	f	class:lefiPin
setCapacitance	lef/lef/lefiUnits.cpp	/^lefiUnits::setCapacitance(double num)$/;"	f	class:lefiUnits
setCapacitancePoint	lef/lef/lefiLayer.cpp	/^lefiLayer::setCapacitancePoint(double   width,$/;"	f	class:lefiLayer
setClass	lef/lef/lefiMacro.cpp	/^lefiMacro::setClass(const char *name)$/;"	f	class:lefiMacro
setClass	lef/lef/lefiMisc.cpp	/^lefiSite::setClass(const char *cls)$/;"	f	class:lefiSite
setClockType	lef/lef/lefiMacro.cpp	/^lefiMacro::setClockType(const char *name)$/;"	f	class:lefiMacro
setCommonIn	def/def/defiScanchain.cpp	/^void defiScanchain::setCommonIn(const char* pin) {$/;"	f	class:defiScanchain
setCommonOut	def/def/defiScanchain.cpp	/^void defiScanchain::setCommonOut(const char* pin) {$/;"	f	class:defiScanchain
setComponent	def/def/defiBlockage.cpp	/^void defiBlockage::setComponent(const char* name) {$/;"	f	class:defiBlockage
setConstraintMode	def/def/defiAssertion.cpp	/^void defiAssertion::setConstraintMode() {$/;"	f	class:defiAssertion
setCurrent	lef/lef/lefiUnits.cpp	/^lefiUnits::setCurrent(double num)$/;"	f	class:lefiUnits
setCurrentDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::setCurrentDensity(double num)$/;"	f	class:lefiLayer
setCurrentPoint	lef/lef/lefiLayer.cpp	/^lefiLayer::setCurrentPoint(double   width,$/;"	f	class:lefiLayer
setCurrentSource	lef/lef/lefiMacro.cpp	/^lefiPin::setCurrentSource(const char *name)$/;"	f	class:lefiPin
setDatabase	lef/lef/lefiUnits.cpp	/^lefiUnits::setDatabase(const char   *name,$/;"	f	class:lefiUnits
setDcOneEntry	lef/lef/lefiLayer.cpp	/^lefiLayer::setDcOneEntry(double num)$/;"	f	class:lefiLayer
setDefault	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setDefault()$/;"	f	class:lefiViaRule
setDelay	def/def/defiAssertion.cpp	/^void defiAssertion::setDelay() {$/;"	f	class:defiAssertion
setDensityCheckStep	lef/lef/lefiLayer.cpp	/^lefiLayer::setDensityCheckStep(double num)$/;"	f	class:lefiLayer
setDensityCheckWindow	lef/lef/lefiLayer.cpp	/^lefiLayer::setDensityCheckWindow(double length,$/;"	f	class:lefiLayer
setDesignRuleWidth	def/def/defiBlockage.cpp	/^void defiBlockage::setDesignRuleWidth(int width) {$/;"	f	class:defiBlockage
setDiagMinEdgeLength	lef/lef/lefiLayer.cpp	/^lefiLayer::setDiagMinEdgeLength(double value)$/;"	f	class:lefiLayer
setDiagPitch	lef/lef/lefiLayer.cpp	/^lefiLayer::setDiagPitch(double dist)$/;"	f	class:lefiLayer
setDiagPitchXY	lef/lef/lefiLayer.cpp	/^lefiLayer::setDiagPitchXY(double    xdist,$/;"	f	class:lefiLayer
setDiagSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::setDiagSpacing(double spacing)$/;"	f	class:lefiLayer
setDiagWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setDiagWidth(double width)$/;"	f	class:lefiLayer
setDiff	def/def/defiAssertion.cpp	/^void defiAssertion::setDiff() {$/;"	f	class:defiAssertion
setDirection	def/def/defiPinCap.cpp	/^void defiPin::setDirection(const char* dir) {$/;"	f	class:defiPin
setDirection	lef/lef/lefiLayer.cpp	/^lefiLayer::setDirection(const char *dir)$/;"	f	class:lefiLayer
setDirection	lef/lef/lefiMacro.cpp	/^lefiPin::setDirection(const char *name)$/;"	f	class:lefiPin
setDo	def/def/defiRowTrack.cpp	/^void defiRow::setDo(double x_num, double y_num,$/;"	f	class:defiRow
setDo	def/def/defiRowTrack.cpp	/^void defiTrack::setDo(double x, double x_num, double x_step) {$/;"	f	class:defiTrack
setDo	def/def/defiSite.cpp	/^void defiSite::setDo(double x_num, double y_num, double x_step, double y_step) {$/;"	f	class:defiSite
setDoingBottomLeft	def/def/defiFPC.cpp	/^void defiFPC::setDoingBottomLeft() {$/;"	f	class:defiFPC
setDoingTopRight	def/def/defiFPC.cpp	/^void defiFPC::setDoingTopRight() {$/;"	f	class:defiFPC
setDriveCell	def/def/defiIOTiming.cpp	/^void defiIOTiming::setDriveCell(const char* name) {$/;"	f	class:defiIOTiming
setEEQ	def/def/defiComponent.cpp	/^void defiComponent::setEEQ(const char* name) {$/;"	f	class:defiComponent
setEEQ	lef/lef/lefiMacro.cpp	/^lefiMacro::setEEQ(const char *name)$/;"	f	class:lefiMacro
setEdgeCap	lef/lef/lefiLayer.cpp	/^lefiLayer::setEdgeCap(double num)$/;"	f	class:lefiLayer
setEnclosure	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setEnclosure(double    overhang1,$/;"	f	class:lefiViaRule
setEnclosure	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setEnclosure(double   overhang1,$/;"	f	class:lefiViaRuleLayer
setEqual	def/def/defiFPC.cpp	/^void defiFPC::setEqual(double num) {$/;"	f	class:defiFPC
setExceptpgnet	def/def/defiBlockage.cpp	/^void defiBlockage::setExceptpgnet() {$/;"	f	class:defiBlockage
setFallAtt1	lef/lef/lefiMacro.cpp	/^lefiTiming::setFallAtt1(double  one,$/;"	f	class:lefiTiming
setFallCS	lef/lef/lefiMacro.cpp	/^lefiTiming::setFallCS(double    one,$/;"	f	class:lefiTiming
setFallMax	def/def/defiAssertion.cpp	/^void defiAssertion::setFallMax(double d) {$/;"	f	class:defiAssertion
setFallMin	def/def/defiAssertion.cpp	/^void defiAssertion::setFallMin(double d) {$/;"	f	class:defiAssertion
setFallRS	lef/lef/lefiMacro.cpp	/^lefiTiming::setFallRS(double    one,$/;"	f	class:lefiTiming
setFallSatcur	lef/lef/lefiMacro.cpp	/^lefiPin::setFallSatcur(double current)$/;"	f	class:lefiPin
setFallSlewLimit	lef/lef/lefiMacro.cpp	/^lefiPin::setFallSlewLimit(double num)$/;"	f	class:lefiPin
setFallThresh	lef/lef/lefiMacro.cpp	/^lefiPin::setFallThresh(double capacitance)$/;"	f	class:lefiPin
setFallTo	lef/lef/lefiMacro.cpp	/^lefiTiming::setFallTo(double    one,$/;"	f	class:lefiTiming
setFallVoltage	lef/lef/lefiMacro.cpp	/^lefiPin::setFallVoltage(double voltage)$/;"	f	class:lefiPin
setFillActiveSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::setFillActiveSpacing(double num)$/;"	f	class:lefiLayer
setFills	def/def/defiBlockage.cpp	/^void defiBlockage::setFills() {$/;"	f	class:defiBlockage
setFixedMask	lef/lef/lefiMacro.cpp	/^lefiMacro::setFixedMask(int isFixedMask)$/;"	f	class:lefiMacro
setFixedbump	def/def/defiNet.cpp	/^void defiNet::setFixedbump() {$/;"	f	class:defiNet
setFloatingBits	def/def/defiScanchain.cpp	/^void defiScanchain::setFloatingBits(int bits) {$/;"	f	class:defiScanchain
setForeign	lef/lef/lefiVia.cpp	/^lefiVia::setForeign(const char  *name,$/;"	f	class:lefiVia
setForeignLocation	def/def/defiComponent.cpp	/^void defiComponent::setForeignLocation(int x, int y, int orient) {$/;"	f	class:defiComponent
setForeignName	def/def/defiComponent.cpp	/^void defiComponent::setForeignName(const char* name) {$/;"	f	class:defiComponent
setFrequency	def/def/defiNet.cpp	/^void defiNet::setFrequency(double frequency) {$/;"	f	class:defiNet
setFrequency	lef/lef/lefiUnits.cpp	/^lefiUnits::setFrequency(double num)$/;"	f	class:lefiUnits
setFrom	def/def/defiIOTiming.cpp	/^void defiIOTiming::setFrom(const char* name) {$/;"	f	class:defiIOTiming
setFromClockPin	def/def/defiPartition.cpp	/^void defiPartition::setFromClockPin(const char* inst, const char* pin) {$/;"	f	class:defiPartition
setFromCompPin	def/def/defiPartition.cpp	/^void defiPartition::setFromCompPin(const char* inst, const char* pin) {$/;"	f	class:defiPartition
setFromIOPin	def/def/defiPartition.cpp	/^void defiPartition::setFromIOPin(const char* pin) {$/;"	f	class:defiPartition
setFromTo	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::setFromTo(const char* fromInst, const char* fromPin,$/;"	f	class:defiTimingDisable
setGenerate	def/def/defiComponent.cpp	/^void defiComponent::setGenerate(const char* newName, const char* macroName) {$/;"	f	class:defiComponent
setGenerate	lef/lef/lefiMacro.cpp	/^lefiMacro::setGenerate(const char   *name,$/;"	f	class:lefiMacro
setGenerate	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setGenerate()$/;"	f	class:lefiViaRule
setGenerator	lef/lef/lefiMacro.cpp	/^lefiMacro::setGenerator(const char *name)$/;"	f	class:lefiMacro
setGeometries	lef/lef/lefiMacro.cpp	/^lefiObstruction::setGeometries(lefiGeometries *g)$/;"	f	class:lefiObstruction
setGroundSens	def/def/defiPinCap.cpp	/^void defiPin::setGroundSens(const char* name) {$/;"	f	class:defiPin
setGroundSensitivity	lef/lef/lefiMacro.cpp	/^lefiPin::setGroundSensitivity(const char *pinName)$/;"	f	class:lefiPin
setHalo	def/def/defiComponent.cpp	/^void defiComponent::setHalo(int left, int bottom, int right, int top) {$/;"	f	class:defiComponent
setHaloSoft	def/def/defiComponent.cpp	/^void defiComponent::setHaloSoft() {$/;"	f	class:defiComponent
setHardspacing	def/def/defiNonDefault.cpp	/^void defiNonDefault::setHardspacing() {$/;"	f	class:defiNonDefault
setHardspacing	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::setHardspacing()$/;"	f	class:lefiNonDefault
setHasDoStep	def/def/defiRowTrack.cpp	/^void defiRow::setHasDoStep() {$/;"	f	class:defiRow
setHeight	lef/lef/lefiLayer.cpp	/^lefiLayer::setHeight(double num)$/;"	f	class:lefiLayer
setHorizontal	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setHorizontal()$/;"	f	class:lefiViaRule
setHorizontal	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setHorizontal()$/;"	f	class:lefiViaRuleLayer
setInMargin	lef/lef/lefiMacro.cpp	/^lefiPin::setInMargin(double high,$/;"	f	class:lefiPin
setInfluence	lef/lef/lefiLayer.cpp	/^lefiLayer::setInfluence()$/;"	f	class:lefiLayer
setInfluence	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::setInfluence()$/;"	f	class:lefiSpacingTable
setInverter	lef/lef/lefiMacro.cpp	/^lefiMacro::setInverter()$/;"	f	class:lefiMacro
setLEQ	lef/lef/lefiMacro.cpp	/^lefiMacro::setLEQ(const char *name)$/;"	f	class:lefiMacro
setLEQ	lef/lef/lefiMacro.cpp	/^lefiPin::setLEQ(const char *name)$/;"	f	class:lefiPin
setLayer	def/def/defiBlockage.cpp	/^void defiBlockage::setLayer(const char* name) {$/;"	f	class:defiBlockage
setLayer	def/def/defiFill.cpp	/^void defiFill::setLayer(const char* name) {$/;"	f	class:defiFill
setLayer	def/def/defiNet.cpp	/^void defiVpin::setLayer(const char* lay) {$/;"	f	class:defiVpin
setLayer	def/def/defiSlot.cpp	/^void defiSlot::setLayer(const char* name) {$/;"	f	class:defiSlot
setLayer	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setLayer(const char *name)$/;"	f	class:lefiViaRule
setLayerOpc	def/def/defiFill.cpp	/^void defiFill::setLayerOpc() {$/;"	f	class:defiFill
setLayerType	lef/lef/lefiLayer.cpp	/^lefiLayer::setLayerType(const char *layerType)$/;"	f	class:lefiLayer
setLeakage	lef/lef/lefiMacro.cpp	/^lefiPin::setLeakage(double current)$/;"	f	class:lefiPin
setLoc	def/def/defiNet.cpp	/^void defiVpin::setLoc(int x, int y) {$/;"	f	class:defiVpin
setLocation	def/def/defiSite.cpp	/^void defiSite::setLocation(double xorg, double yorg) {$/;"	f	class:defiSite
setMacro	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::setMacro(const char* name) {$/;"	f	class:defiTimingDisable
setMacroFromTo	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::setMacroFromTo(const char* fromPin, const char* toPin) {$/;"	f	class:defiTimingDisable
setMacroThru	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::setMacroThru(const char* thru) {$/;"	f	class:defiTimingDisable
setMask	def/def/defiBlockage.cpp	/^void defiBlockage::setMask(int colorMask) {$/;"	f	class:defiBlockage
setMask	def/def/defiFill.cpp	/^void defiFill::setMask(int colorMask) {$/;"	f	class:defiFill
setMask	lef/lef/lefiLayer.cpp	/^lefiLayer::setMask(int num)$/;"	f	class:lefiLayer
setMaskShift	def/def/defiComponent.cpp	/^void defiComponent::setMaskShift(const char *shiftMask) {$/;"	f	class:defiComponent
setMax	def/def/defiFPC.cpp	/^void defiFPC::setMax(double num) {$/;"	f	class:defiFPC
setMax	def/def/defiPartition.cpp	/^void defiPartition::setMax(double min, double max) {$/;"	f	class:defiPartition
setMaxAdjacentSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::setMaxAdjacentSlotSpacing(double num)$/;"	f	class:lefiLayer
setMaxCoaxialSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::setMaxCoaxialSlotSpacing(double num)$/;"	f	class:lefiLayer
setMaxEdgeSlotSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::setMaxEdgeSlotSpacing(double num)$/;"	f	class:lefiLayer
setMaxFloatingArea	lef/lef/lefiLayer.cpp	/^lefiLayer::setMaxFloatingArea(double num)$/;"	f	class:lefiLayer
setMaxStackVia	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::setMaxStackVia(int value)$/;"	f	class:lefiMaxStackVia
setMaxStackViaRange	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::setMaxStackViaRange(const char *bottomLayer,$/;"	f	class:lefiMaxStackVia
setMaxX	def/def/defiGroup.cpp	/^void defiGroup::setMaxX(int x) {$/;"	f	class:defiGroup
setMaxY	def/def/defiGroup.cpp	/^void defiGroup::setMaxY(int y) {$/;"	f	class:defiGroup
setMaxdelay	lef/lef/lefiMacro.cpp	/^lefiPin::setMaxdelay(double dtime)$/;"	f	class:lefiPin
setMaximumDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::setMaximumDensity(double num)$/;"	f	class:lefiLayer
setMaxload	lef/lef/lefiMacro.cpp	/^lefiPin::setMaxload(double capacitance)$/;"	f	class:lefiPin
setMaxwidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setMaxwidth(double width)$/;"	f	class:lefiLayer
setMetalOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setMetalOverhang(double d)$/;"	f	class:lefiViaRule
setMetalOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setMetalOverhang(double d)$/;"	f	class:lefiViaRuleLayer
setMin	def/def/defiFPC.cpp	/^void defiFPC::setMin(double num) {$/;"	f	class:defiFPC
setMin	def/def/defiPartition.cpp	/^void defiPartition::setMin(double min, double max) {$/;"	f	class:defiPartition
setMinSize	lef/lef/lefiLayer.cpp	/^lefiLayer::setMinSize(lefiGeometries *geom)$/;"	f	class:lefiLayer
setMinimumDensity	lef/lef/lefiLayer.cpp	/^lefiLayer::setMinimumDensity(double num)$/;"	f	class:lefiLayer
setMinwidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setMinwidth(double width)$/;"	f	class:lefiLayer
setMustjoin	lef/lef/lefiMacro.cpp	/^lefiPin::setMustjoin(const char *name)$/;"	f	class:lefiPin
setName	def/def/defiFPC.cpp	/^void defiFPC::setName(const char* name, const char* direction) {$/;"	f	class:defiFPC
setName	def/def/defiIOTiming.cpp	/^void defiIOTiming::setName(const char* inst, const char* pin) {$/;"	f	class:defiIOTiming
setName	def/def/defiNet.cpp	/^void defiNet::setName(const char* name) {$/;"	f	class:defiNet
setName	def/def/defiNet.cpp	/^void defiSubnet::setName(const char* name) {$/;"	f	class:defiSubnet
setName	def/def/defiNonDefault.cpp	/^void defiNonDefault::setName(const char* name) { $/;"	f	class:defiNonDefault
setName	def/def/defiPartition.cpp	/^void defiPartition::setName(const char* name) {$/;"	f	class:defiPartition
setName	def/def/defiPinProp.cpp	/^void defiPinProp::setName(const char* inst, const char* pin) {$/;"	f	class:defiPinProp
setName	def/def/defiScanchain.cpp	/^void defiScanchain::setName(const char* name) {$/;"	f	class:defiScanchain
setName	def/def/defiSite.cpp	/^void defiSite::setName(const char* name) {$/;"	f	class:defiSite
setName	lef/lef/lefiArray.cpp	/^lefiArray::setName(const char *name)$/;"	f	class:lefiArray
setName	lef/lef/lefiLayer.cpp	/^lefiLayer::setName(const char *name)$/;"	f	class:lefiLayer
setName	lef/lef/lefiMacro.cpp	/^lefiMacro::setName(const char *name)$/;"	f	class:lefiMacro
setName	lef/lef/lefiMacro.cpp	/^lefiPin::setName(const char *name)$/;"	f	class:lefiPin
setName	lef/lef/lefiMisc.cpp	/^lefiSite::setName(const char *name)$/;"	f	class:lefiSite
setName	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::setName(const char *name)$/;"	f	class:lefiNonDefault
setName	lef/lef/lefiVia.cpp	/^lefiVia::setName(const char *name,$/;"	f	class:lefiVia
setName	lef/lef/lefiVia.cpp	/^lefiViaLayer::setName(const char *name)$/;"	f	class:lefiViaLayer
setName	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setName(const char *name)$/;"	f	class:lefiViaRule
setName	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setName(const char *name)$/;"	f	class:lefiViaRuleLayer
setNetExpr	def/def/defiPinCap.cpp	/^void defiPin::setNetExpr(const char* name) {$/;"	f	class:defiPin
setNetExpr	lef/lef/lefiMacro.cpp	/^lefiPin::setNetExpr(const char *name)$/;"	f	class:lefiPin
setNetName	def/def/defiAssertion.cpp	/^void defiAssertion::setNetName(const char* name) {$/;"	f	class:defiAssertion
setNonDefault	def/def/defiNet.cpp	/^void defiSubnet::setNonDefault(const char* name) {$/;"	f	class:defiSubnet
setNonDefaultRule	def/def/defiNet.cpp	/^void defiNet::setNonDefaultRule(const char* typ) {$/;"	f	class:defiNet
setNumProperty	lef/lef/lefiMacro.cpp	/^lefiMacro::setNumProperty(const char    *name,$/;"	f	class:lefiMacro
setNumProperty	lef/lef/lefiMacro.cpp	/^lefiPin::setNumProperty(const char  *name,$/;"	f	class:lefiPin
setNumber	def/def/defiProp.cpp	/^void defiProp::setNumber(double d) {$/;"	f	class:defiProp
setNumber	lef/lef/lefiProp.cpp	/^lefiProp::setNumber(double d)$/;"	f	class:lefiProp
setOffset	lef/lef/lefiLayer.cpp	/^lefiLayer::setOffset(double num)$/;"	f	class:lefiLayer
setOffset	lef/lef/lefiVia.cpp	/^lefiVia::setOffset(double   xBot,$/;"	f	class:lefiVia
setOffsetXY	lef/lef/lefiLayer.cpp	/^lefiLayer::setOffsetXY(double   xdist,$/;"	f	class:lefiLayer
setOneEntry	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::setOneEntry(double entry)$/;"	f	class:lefiLayerDensity
setOrderedBits	def/def/defiScanchain.cpp	/^void defiOrdered::setOrderedBits(int bits) {$/;"	f	class:defiOrdered
setOrderedBits	def/def/defiScanchain.cpp	/^void defiScanchain::setOrderedBits(int bits) {$/;"	f	class:defiScanchain
setOrient	def/def/defiNet.cpp	/^void defiVpin::setOrient(int orient) {$/;"	f	class:defiVpin
setOrient	def/def/defiSite.cpp	/^void defiSite::setOrient(int orient) {$/;"	f	class:defiSite
setOrigin	lef/lef/lefiMacro.cpp	/^lefiMacro::setOrigin(double x,$/;"	f	class:lefiMacro
setOrigin	lef/lef/lefiVia.cpp	/^lefiVia::setOrigin(double   xOffset,$/;"	f	class:lefiVia
setOriginal	def/def/defiNet.cpp	/^void defiNet::setOriginal(const char* typ) {$/;"	f	class:defiNet
setOutMargin	lef/lef/lefiMacro.cpp	/^lefiPin::setOutMargin(double    high,$/;"	f	class:lefiPin
setOutResistance	lef/lef/lefiMacro.cpp	/^lefiPin::setOutResistance(double    high,$/;"	f	class:lefiPin
setOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setOverhang(double d)$/;"	f	class:lefiViaRule
setOverhang	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setOverhang(double d)$/;"	f	class:lefiViaRuleLayer
setOverhangToEnclosure	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setOverhangToEnclosure(double d)$/;"	f	class:lefiViaRule
setOverhangToEnclosure	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setOverhangToEnclosure(double d)$/;"	f	class:lefiViaRuleLayer
setParallel	def/def/defiIOTiming.cpp	/^void defiIOTiming::setParallel(double num) {$/;"	f	class:defiIOTiming
setPartial	def/def/defiBlockage.cpp	/^void defiBlockage::setPartial(double maxDensity) {$/;"	f	class:defiBlockage
setPartition	def/def/defiScanchain.cpp	/^void defiScanchain::setPartition(const char* partName, int maxBits) {$/;"	f	class:defiScanchain
setPattern	def/def/defiNet.cpp	/^void defiNet::setPattern(const char* typ) {$/;"	f	class:defiNet
setPattern	lef/lef/lefiVia.cpp	/^lefiVia::setPattern(const char *cutPattern)$/;"	f	class:lefiVia
setPerim	def/def/defiGroup.cpp	/^void defiGroup::setPerim(int p) {$/;"	f	class:defiGroup
setPin	def/def/defiPinCap.cpp	/^void defiPinCap::setPin(int p) {$/;"	f	class:defiPinCap
setPitch	lef/lef/lefiLayer.cpp	/^lefiLayer::setPitch(double num)$/;"	f	class:lefiLayer
setPitchXY	lef/lef/lefiLayer.cpp	/^lefiLayer::setPitchXY(double    xdist,$/;"	f	class:lefiLayer
setPlacement	def/def/defiBlockage.cpp	/^void defiBlockage::setPlacement() {$/;"	f	class:defiBlockage
setPlacement	def/def/defiPinCap.cpp	/^void defiPin::setPlacement(int typ, int x, int y, int orient) {$/;"	f	class:defiPin
setPlacement	def/def/defiPinCap.cpp	/^void defiPinPort::setPlacement(int typ, int x, int y, int orient) {$/;"	f	class:defiPinPort
setPlacementLocation	def/def/defiComponent.cpp	/^void defiComponent::setPlacementLocation(int x, int y, int orient) {$/;"	f	class:defiComponent
setPlacementStatus	def/def/defiComponent.cpp	/^void defiComponent::setPlacementStatus(int n) {$/;"	f	class:defiComponent
setPolygon	def/def/defiMisc.cpp	/^void defiStyles::setPolygon(defiGeometries* geom) {$/;"	f	class:defiStyles
setPortPlacement	def/def/defiPinCap.cpp	/^void defiPin::setPortPlacement(int typ, int x, int y, int orient) {$/;"	f	class:defiPin
setPower	lef/lef/lefiMacro.cpp	/^lefiMacro::setPower(double p)$/;"	f	class:lefiMacro
setPower	lef/lef/lefiMacro.cpp	/^lefiPin::setPower(double power)$/;"	f	class:lefiPin
setPower	lef/lef/lefiUnits.cpp	/^lefiUnits::setPower(double num)$/;"	f	class:lefiUnits
setPropInteger	def/def/defiProp.cpp	/^void defiProp::setPropInteger() {$/;"	f	class:defiProp
setPropInteger	lef/lef/lefiProp.cpp	/^lefiProp::setPropInteger()$/;"	f	class:lefiProp
setPropNameMapString	def/def/defiProp.cpp	/^void defiProp::setPropNameMapString(const char* string) {$/;"	f	class:defiProp
setPropNameMapString	lef/lef/lefiProp.cpp	/^lefiProp::setPropNameMapString(const char *string)$/;"	f	class:lefiProp
setPropQString	def/def/defiProp.cpp	/^void defiProp::setPropQString(const char* string) {$/;"	f	class:defiProp
setPropQString	lef/lef/lefiProp.cpp	/^lefiProp::setPropQString(const char *string)$/;"	f	class:lefiProp
setPropReal	def/def/defiProp.cpp	/^void defiProp::setPropReal() {$/;"	f	class:defiProp
setPropReal	lef/lef/lefiProp.cpp	/^lefiProp::setPropReal()$/;"	f	class:lefiProp
setPropString	def/def/defiProp.cpp	/^void defiProp::setPropString() {$/;"	f	class:defiProp
setPropString	lef/lef/lefiProp.cpp	/^lefiProp::setPropString()$/;"	f	class:lefiProp
setPropType	def/def/defiProp.cpp	/^void defiProp::setPropType(const char* typ, const char* string) {$/;"	f	class:defiProp
setPropType	def/def/defiPropType.cpp	/^void defiPropType::setPropType(const char* name, const char type) {$/;"	f	class:defiPropType
setPropType	lef/lef/lefiProp.cpp	/^lefiProp::setPropType(const char    *typ,$/;"	f	class:lefiProp
setPropType	lef/lef/lefiPropType.cpp	/^lefiPropType::setPropType(const char    *name,$/;"	f	class:lefiPropType
setProperty	lef/lef/lefiMacro.cpp	/^lefiMacro::setProperty(const char   *name,$/;"	f	class:lefiMacro
setProperty	lef/lef/lefiMacro.cpp	/^lefiPin::setProperty(const char *name,$/;"	f	class:lefiPin
setProtrusion	lef/lef/lefiLayer.cpp	/^lefiLayer::setProtrusion(double width1,$/;"	f	class:lefiLayer
setPulldownres	lef/lef/lefiMacro.cpp	/^lefiPin::setPulldownres(double resistance)$/;"	f	class:lefiPin
setPushdown	def/def/defiBlockage.cpp	/^void defiBlockage::setPushdown() {$/;"	f	class:defiBlockage
setRange	def/def/defiNet.cpp	/^void defiNet::setRange(double left, double right) {$/;"	f	class:defiNet
setRange	def/def/defiProp.cpp	/^void defiProp::setRange(double left, double right) {$/;"	f	class:defiProp
setRange	lef/lef/lefiProp.cpp	/^lefiProp::setRange(double   left,$/;"	f	class:lefiProp
setRect	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setRect(double xl,$/;"	f	class:lefiViaRule
setRect	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setRect(double    xl,$/;"	f	class:lefiViaRuleLayer
setReentrantPathsFlag	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::setReentrantPathsFlag() {$/;"	f	class:defiTimingDisable
setRegionBounds	def/def/defiComponent.cpp	/^void defiComponent::setRegionBounds(int xl, int yl, int xh, int yh) {$/;"	f	class:defiComponent
setRegionName	def/def/defiComponent.cpp	/^void defiComponent::setRegionName(const char* name) {$/;"	f	class:defiComponent
setRegionName	def/def/defiGroup.cpp	/^void defiGroup::setRegionName(const char* region) {$/;"	f	class:defiGroup
setResPerCut	lef/lef/lefiLayer.cpp	/^lefiLayer::setResPerCut(double value)$/;"	f	class:lefiLayer
setResistance	lef/lef/lefiLayer.cpp	/^lefiLayer::setResistance(double num)$/;"	f	class:lefiLayer
setResistance	lef/lef/lefiMacro.cpp	/^lefiPin::setResistance(double resistance)$/;"	f	class:lefiPin
setResistance	lef/lef/lefiUnits.cpp	/^lefiUnits::setResistance(double num)$/;"	f	class:lefiUnits
setResistance	lef/lef/lefiVia.cpp	/^lefiVia::setResistance(double num)$/;"	f	class:lefiVia
setResistance	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setResistance(double d)$/;"	f	class:lefiViaRule
setResistance	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setResistance(double d)$/;"	f	class:lefiViaRuleLayer
setResistancePoint	lef/lef/lefiLayer.cpp	/^lefiLayer::setResistancePoint(double    width,$/;"	f	class:lefiLayer
setRiseAtt1	lef/lef/lefiMacro.cpp	/^lefiTiming::setRiseAtt1(double  one,$/;"	f	class:lefiTiming
setRiseCS	lef/lef/lefiMacro.cpp	/^lefiTiming::setRiseCS(double    one,$/;"	f	class:lefiTiming
setRiseMax	def/def/defiAssertion.cpp	/^void defiAssertion::setRiseMax(double d) {$/;"	f	class:defiAssertion
setRiseMin	def/def/defiAssertion.cpp	/^void defiAssertion::setRiseMin(double d) {$/;"	f	class:defiAssertion
setRiseRS	lef/lef/lefiMacro.cpp	/^lefiTiming::setRiseRS(double    one,$/;"	f	class:lefiTiming
setRiseSatcur	lef/lef/lefiMacro.cpp	/^lefiPin::setRiseSatcur(double current)$/;"	f	class:lefiPin
setRiseSlewLimit	lef/lef/lefiMacro.cpp	/^lefiPin::setRiseSlewLimit(double num)$/;"	f	class:lefiPin
setRiseThresh	lef/lef/lefiMacro.cpp	/^lefiPin::setRiseThresh(double capacitance)$/;"	f	class:lefiPin
setRiseTo	lef/lef/lefiMacro.cpp	/^lefiTiming::setRiseTo(double    one,$/;"	f	class:lefiTiming
setRiseVoltage	lef/lef/lefiMacro.cpp	/^lefiPin::setRiseVoltage(double voltage)$/;"	f	class:lefiPin
setRouteHalo	def/def/defiComponent.cpp	/^void defiComponent::setRouteHalo(int haloDist, const char* minLayer,$/;"	f	class:defiComponent
setRowCol	lef/lef/lefiVia.cpp	/^lefiVia::setRowCol(int  numRows,$/;"	f	class:lefiVia
setSDFcond	lef/lef/lefiMacro.cpp	/^lefiTiming::setSDFcond(const char *cond)$/;"	f	class:lefiTiming
setSDFcondEnd	lef/lef/lefiMacro.cpp	/^lefiTiming::setSDFcondEnd(const char *condEnd)$/;"	f	class:lefiTiming
setSDFcondStart	lef/lef/lefiMacro.cpp	/^lefiTiming::setSDFcondStart(const char *condStart)$/;"	f	class:lefiTiming
setSNetWireCbk	def/defrw/defrw.cpp	/^static int setSNetWireCbk = 0;$/;"	v	file:
setShape	lef/lef/lefiMacro.cpp	/^lefiPin::setShape(const char *name)$/;"	f	class:lefiPin
setShrinkage	lef/lef/lefiLayer.cpp	/^lefiLayer::setShrinkage(double num)$/;"	f	class:lefiLayer
setSiteName	lef/lef/lefiMacro.cpp	/^lefiMacro::setSiteName(const char *name)$/;"	f	class:lefiMacro
setSitePattern	lef/lef/lefiMacro.cpp	/^lefiMacro::setSitePattern(lefiSitePattern *p)$/;"	f	class:lefiMacro
setSize	lef/lef/lefiMacro.cpp	/^lefiMacro::setSize(double   x,$/;"	f	class:lefiMacro
setSize	lef/lef/lefiMisc.cpp	/^lefiSite::setSize(double    x,$/;"	f	class:lefiSite
setSlewRate	def/def/defiIOTiming.cpp	/^void defiIOTiming::setSlewRate(const char* riseFall, double min, double max) {$/;"	f	class:defiIOTiming
setSlotLength	lef/lef/lefiLayer.cpp	/^lefiLayer::setSlotLength(double num)$/;"	f	class:lefiLayer
setSlotWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setSlotWidth(double num)$/;"	f	class:lefiLayer
setSlotWireLength	lef/lef/lefiLayer.cpp	/^lefiLayer::setSlotWireLength(double num)$/;"	f	class:lefiLayer
setSlotWireWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setSlotWireWidth(double num)$/;"	f	class:lefiLayer
setSlots	def/def/defiBlockage.cpp	/^void defiBlockage::setSlots() {$/;"	f	class:defiBlockage
setSoft	def/def/defiBlockage.cpp	/^void defiBlockage::setSoft() {$/;"	f	class:defiBlockage
setSource	def/def/defiComponent.cpp	/^void defiComponent::setSource(const char* name) {$/;"	f	class:defiComponent
setSource	def/def/defiNet.cpp	/^void defiNet::setSource(const char* typ) {$/;"	f	class:defiNet
setSource	lef/lef/lefiMacro.cpp	/^lefiMacro::setSource(const char *name)$/;"	f	class:lefiMacro
setSpTwoWidthsHasPRL	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpTwoWidthsHasPRL(int hasPRL)$/;"	f	class:lefiLayer
setSpacing	def/def/defiBlockage.cpp	/^void defiBlockage::setSpacing(int minSpacing) {$/;"	f	class:defiBlockage
setSpacing	def/def/defiNet.cpp	/^void defiNet::setSpacing(const char* layer, double d) {$/;"	f	class:defiNet
setSpacing	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setSpacing(double  x,$/;"	f	class:lefiViaRule
setSpacing	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setSpacing(double x,$/;"	f	class:lefiViaRuleLayer
setSpacingAdjacent	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingAdjacent(int       numCuts,$/;"	f	class:lefiLayer
setSpacingAdjacentExcept	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingAdjacentExcept()$/;"	f	class:lefiLayer
setSpacingArea	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingArea(double cutArea)$/;"	f	class:lefiLayer
setSpacingCenterToCenter	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingCenterToCenter()$/;"	f	class:lefiLayer
setSpacingEndOfNotchWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingEndOfNotchWidth(double eonWidth,$/;"	f	class:lefiLayer
setSpacingEol	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingEol(double width,$/;"	f	class:lefiLayer
setSpacingLayerStack	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingLayerStack()$/;"	f	class:lefiLayer
setSpacingLength	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingLength(double num)$/;"	f	class:lefiLayer
setSpacingLengthRange	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingLengthRange(double min,$/;"	f	class:lefiLayer
setSpacingMin	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingMin(double dist)$/;"	f	class:lefiLayer
setSpacingName	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingName(const char *spacingName)$/;"	f	class:lefiLayer
setSpacingNotchLength	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingNotchLength(double notchLength)$/;"	f	class:lefiLayer
setSpacingParSW	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingParSW(double   space,$/;"	f	class:lefiLayer
setSpacingParTwoEdges	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingParTwoEdges()$/;"	f	class:lefiLayer
setSpacingParallelOverlap	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingParallelOverlap()$/;"	f	class:lefiLayer
setSpacingRange	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingRange(double   left,$/;"	f	class:lefiLayer
setSpacingRangeInfluence	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingRangeInfluence(double infLength)$/;"	f	class:lefiLayer
setSpacingRangeInfluenceRange	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingRangeInfluenceRange(double min,$/;"	f	class:lefiLayer
setSpacingRangeRange	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingRangeRange(double  min,$/;"	f	class:lefiLayer
setSpacingRangeUseLength	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingRangeUseLength()$/;"	f	class:lefiLayer
setSpacingSamenet	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingSamenet()$/;"	f	class:lefiLayer
setSpacingSamenetPGonly	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingSamenetPGonly()$/;"	f	class:lefiLayer
setSpacingTableOrtho	lef/lef/lefiLayer.cpp	/^lefiLayer::setSpacingTableOrtho()$/;"	f	class:lefiLayer
setSpecial	def/def/defiPinCap.cpp	/^void defiPin::setSpecial() {$/;"	f	class:defiPin
setSplitWireWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setSplitWireWidth(double num)$/;"	f	class:lefiLayer
setStable	lef/lef/lefiMacro.cpp	/^lefiTiming::setStable(double        one,$/;"	f	class:lefiTiming
setStart	def/def/defiScanchain.cpp	/^void defiScanchain::setStart(const char* inst, const char* pin) {$/;"	f	class:defiScanchain
setStatus	def/def/defiNet.cpp	/^void defiVpin::setStatus(char st) {$/;"	f	class:defiVpin
setStop	def/def/defiScanchain.cpp	/^void defiScanchain::setStop(const char* inst, const char* pin) {$/;"	f	class:defiScanchain
setStyle	def/def/defiMisc.cpp	/^void defiStyles::setStyle(int styleNum) {$/;"	f	class:defiStyles
setStyle	def/def/defiNet.cpp	/^void defiNet::setStyle(int style) {$/;"	f	class:defiNet
setSum	def/def/defiAssertion.cpp	/^void defiAssertion::setSum() {$/;"	f	class:defiAssertion
setSupplySens	def/def/defiPinCap.cpp	/^void defiPin::setSupplySens(const char* name) {$/;"	f	class:defiPin
setSupplySensitivity	lef/lef/lefiMacro.cpp	/^lefiPin::setSupplySensitivity(const char *pinName)$/;"	f	class:lefiPin
setTableName	lef/lef/lefiMisc.cpp	/^lefiIRDrop::setTableName(const char *name)$/;"	f	class:lefiIRDrop
setTableSize	lef/lef/lefiArray.cpp	/^lefiArray::setTableSize(int tsize)$/;"	f	class:lefiArray
setTables	lef/lef/lefiMacro.cpp	/^lefiPin::setTables(const char   *highName,$/;"	f	class:lefiPin
setTaper	def/def/defiPath.cpp	/^void defiPath::setTaper() {$/;"	f	class:defiPath
setTaperRule	lef/lef/lefiMacro.cpp	/^lefiPin::setTaperRule(const char *name)$/;"	f	class:lefiPin
setThickness	lef/lef/lefiLayer.cpp	/^lefiLayer::setThickness(double num)$/;"	f	class:lefiLayer
setThru	def/def/defiTimingDisable.cpp	/^void defiTimingDisable::setThru(const char* fromInst, const char* fromPin) {$/;"	f	class:defiTimingDisable
setTieoffr	lef/lef/lefiMacro.cpp	/^lefiPin::setTieoffr(double resistance)$/;"	f	class:lefiPin
setTime	lef/lef/lefiUnits.cpp	/^lefiUnits::setTime(double num)$/;"	f	class:lefiUnits
setTo	def/def/defiIOTiming.cpp	/^void defiIOTiming::setTo(const char* name) {$/;"	f	class:defiIOTiming
setToClockPin	def/def/defiPartition.cpp	/^void defiPartition::setToClockPin(const char* inst, const char* pin) {$/;"	f	class:defiPartition
setToCompPin	def/def/defiPartition.cpp	/^void defiPartition::setToCompPin(const char* inst, const char* pin) {$/;"	f	class:defiPartition
setToIOPin	def/def/defiPartition.cpp	/^void defiPartition::setToIOPin(const char* pin) {$/;"	f	class:defiPartition
setTopOfStack	lef/lef/lefiVia.cpp	/^lefiVia::setTopOfStack()$/;"	f	class:lefiVia
setType	def/def/defiNet.cpp	/^void defiNet::setType(const char* typ) {$/;"	f	class:defiNet
setType	def/def/defiNet.cpp	/^void defiSubnet::setType(const char* typ) {$/;"	f	class:defiSubnet
setType	def/def/defiRegion.cpp	/^void defiRegion::setType(const char* type) {$/;"	f	class:defiRegion
setType	lef/lef/lefiLayer.cpp	/^lefiLayer::setType(const char *typ)$/;"	f	class:lefiLayer
setUse	def/def/defiNet.cpp	/^void defiNet::setUse(const char* typ) {$/;"	f	class:defiNet
setUse	def/def/defiPinCap.cpp	/^void defiPin::setUse(const char* use) {$/;"	f	class:defiPin
setUse	lef/lef/lefiMacro.cpp	/^lefiPin::setUse(const char *name)$/;"	f	class:lefiPin
setVHI	lef/lef/lefiMacro.cpp	/^lefiPin::setVHI(double voltage)$/;"	f	class:lefiPin
setVLO	lef/lef/lefiMacro.cpp	/^lefiPin::setVLO(double voltage)$/;"	f	class:lefiPin
setValues	lef/lef/lefiMisc.cpp	/^lefiIRDrop::setValues(double    value1,$/;"	f	class:lefiIRDrop
setVariable	def/def/defiIOTiming.cpp	/^void defiIOTiming::setVariable(const char* riseFall, double min, double max) {$/;"	f	class:defiIOTiming
setVertical	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setVertical()$/;"	f	class:lefiViaRule
setVertical	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setVertical()$/;"	f	class:lefiViaRuleLayer
setVia	def/def/defiFill.cpp	/^void defiFill::setVia(const char* name) {$/;"	f	class:defiFill
setViaOpc	def/def/defiFill.cpp	/^void defiFill::setViaOpc() {$/;"	f	class:defiFill
setViaRule	lef/lef/lefiVia.cpp	/^lefiVia::setViaRule(const char  *viaRuleName,$/;"	f	class:lefiVia
setVoltage	def/def/defiNet.cpp	/^void defiNet::setVoltage(double v) {$/;"	f	class:defiNet
setVoltage	lef/lef/lefiUnits.cpp	/^lefiUnits::setVoltage(double num)$/;"	f	class:lefiUnits
setWeight	def/def/defiComponent.cpp	/^void defiComponent::setWeight(int w) {$/;"	f	class:defiComponent
setWeight	def/def/defiNet.cpp	/^void defiNet::setWeight(int w) {$/;"	f	class:defiNet
setWidth	def/def/defiNet.cpp	/^void defiNet::setWidth(const char* layer, double d) {$/;"	f	class:defiNet
setWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::setWidth(double num)$/;"	f	class:lefiLayer
setWidth	lef/lef/lefiViaRule.cpp	/^lefiViaRule::setWidth(double    x,$/;"	f	class:lefiViaRule
setWidth	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setWidth(double   minW,$/;"	f	class:lefiViaRuleLayer
setWireExtension	lef/lef/lefiLayer.cpp	/^lefiLayer::setWireExtension(double num)$/;"	f	class:lefiLayer
setWiredlogic	def/def/defiAssertion.cpp	/^void defiAssertion::setWiredlogic(const char* name, double dist) {$/;"	f	class:defiAssertion
setWiredlogicMode	def/def/defiAssertion.cpp	/^void defiAssertion::setWiredlogicMode() {$/;"	f	class:defiAssertion
setXSymmetry	lef/lef/lefiMacro.cpp	/^lefiMacro::setXSymmetry()$/;"	f	class:lefiMacro
setXSymmetry	lef/lef/lefiMisc.cpp	/^lefiSite::setXSymmetry()$/;"	f	class:lefiSite
setXTalk	def/def/defiNet.cpp	/^void defiNet::setXTalk(int i) {$/;"	f	class:defiNet
setYSymmetry	lef/lef/lefiMacro.cpp	/^lefiMacro::setYSymmetry()$/;"	f	class:lefiMacro
setYSymmetry	lef/lef/lefiMisc.cpp	/^lefiSite::setYSymmetry()$/;"	f	class:lefiSite
settings	def/def/defrData.hpp	/^    const defrSettings  *settings;$/;"	m	class:defrData
settings	def/def/defrData.hpp	/^    defrSettings          *settings;$/;"	m	class:defrContext
setup	def/def/defiGroup.cpp	/^void defiGroup::setup(const char* name) {$/;"	f	class:defiGroup
setup	def/def/defiRegion.cpp	/^void defiRegion::setup(const char* name) {$/;"	f	class:defiRegion
setup	def/def/defiRowTrack.cpp	/^void defiGcellGrid::setup(const char* macro, int x, int xNum, double xStep) {$/;"	f	class:defiGcellGrid
setup	def/def/defiRowTrack.cpp	/^void defiRow::setup(const char* name, const char* macro, double x, double y,$/;"	f	class:defiRow
setup	def/def/defiRowTrack.cpp	/^void defiTrack::setup(const char* macro) {$/;"	f	class:defiTrack
setup	def/def/defiVia.cpp	/^void defiVia::setup(const char* name) {$/;"	f	class:defiVia
setup	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::setup(int i)$/;"	f	class:lefiCorrectionTable
setup	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::setup(int i)$/;"	f	class:lefiNoiseTable
setup_	def/def/defiPartition.hpp	/^  char setup_;$/;"	m	class:defiPartition
shape	lef/lef/lefiMacro.cpp	/^lefiPin::shape() const$/;"	f	class:lefiPin
shape_	lef/include/lefiMacro.hpp	/^  char shape_[12];$/;"	m	class:lefiPin
shape_	lef/lef/lefiMacro.hpp	/^  char shape_[12];$/;"	m	class:lefiPin
shape_type	def/def/def.y	/^shape_type: K_RING$/;"	l
shield	def/def/defiNet.cpp	/^const defiShield* defiNet::shield(int index) const {$/;"	f	class:defiNet
shield	def/def/defiNet.cpp	/^defiShield* defiNet::shield(int index) {$/;"	f	class:defiNet
shield	def/def/defrData.hpp	/^    int  shield; \/\/ To identify if the path is shield for 5.3$/;"	m	class:defrData
shieldName	def/def/defiNet.cpp	/^const char* defiShield::shieldName() const {$/;"	f	class:defiShield
shieldName	def/def/defrData.hpp	/^    char*  shieldName; \/\/ to hold the shieldNetName$/;"	m	class:defrData
shieldNet	def/def/defiNet.cpp	/^const char* defiNet::shieldNet(int index) const {$/;"	f	class:defiNet
shieldNet_	def/def/defiNet.hpp	/^  char**       shieldNet_;             \/\/ name of the SHIELDNET$/;"	m	class:defiNet
shieldNetsAllocated_	def/def/defiNet.hpp	/^  long long    shieldNetsAllocated_;   \/\/ number of SHIELDNETS allocated in array.$/;"	m	class:defiNet
shield_layer	def/def/def.y	/^shield_layer: \/\/ PCR 902306 $/;"	l
shieldsAllocated_	def/def/defiNet.hpp	/^  long long    shieldsAllocated_;      \/\/ allocated size of SHIELD paths array$/;"	m	class:defiNet
shields_	def/def/defiNet.hpp	/^  defiShield** shields_;               \/\/ SHIELD data $/;"	m	class:defiNet
shiftBuf	def/def/defrData.hpp	/^    char*  shiftBuf; $/;"	m	class:defrData
shiftBuf	lef/include/lefrData.hpp	/^    char*  shiftBuf; $/;"	m	class:lefrData
shiftBuf	lef/lef/lefrData.hpp	/^    char*  shiftBuf; $/;"	m	class:lefrData
shiftBufLength	def/def/defrData.hpp	/^    int  shiftBufLength; $/;"	m	class:defrData
shiftBufLength	lef/include/lefrData.hpp	/^    int  shiftBufLength; $/;"	m	class:lefrData
shiftBufLength	lef/lef/lefrData.hpp	/^    int  shiftBufLength; $/;"	m	class:lefrData
short	lef/lef/lef.tab.cpp	710;"	d	file:
shrinkage	lef/lef/lefiLayer.cpp	/^lefiLayer::shrinkage() const$/;"	f	class:lefiLayer
shrinkage_	lef/include/lefiLayer.hpp	/^  double shrinkage_;$/;"	m	class:lefiLayer
shrinkage_	lef/lef/lefiLayer.hpp	/^  double shrinkage_;$/;"	m	class:lefiLayer
site	lef/lef/lef.y	/^site: start_site site_options end_site$/;"	l
site	lef/lef/lefiArray.cpp	/^lefiArray::site(int index,$/;"	f	class:lefiArray
siteCB	lef/lefdiff/diffLefRW.cpp	/^int siteCB(lefrCallbackType_e c, lefiSite* site, lefiUserData ud) {$/;"	f
siteCB	lef/lefrw/lefrw.cpp	/^int siteCB(lefrCallbackType_e c, lefiSite* site, lefiUserData) {$/;"	f
siteCB	lef/lefwrite/lefwriteCbs.cpp	/^int siteCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
siteClass	lef/lef/lefiMisc.cpp	/^lefiSite::siteClass() const$/;"	f	class:lefiSite
siteClass_	lef/include/lefiMisc.hpp	/^  char   siteClass_[8];$/;"	m	class:lefiSite
siteClass_	lef/lef/lefiMisc.hpp	/^  char   siteClass_[8];$/;"	m	class:lefiSite
siteDef	lef/include/lefrData.hpp	/^    int  siteDef; $/;"	m	class:lefrData
siteDef	lef/lef/lefrData.hpp	/^    int  siteDef; $/;"	m	class:lefrData
siteName	lef/include/lefrData.hpp	/^    char*  siteName; $/;"	m	class:lefrData
siteName	lef/lef/lefiMacro.cpp	/^lefiMacro::siteName() const$/;"	f	class:lefiMacro
siteName	lef/lef/lefiMacro.cpp	/^lefiMacroSite::siteName() const$/;"	f	class:lefiMacroSite
siteName	lef/lef/lefiMisc.cpp	/^lefiSite::siteName(int index) const$/;"	f	class:lefiSite
siteName	lef/lef/lefrData.hpp	/^    char*  siteName; $/;"	m	class:lefrData
siteNameSize_	lef/include/lefiMacro.hpp	/^  int siteNameSize_;$/;"	m	class:lefiMacro
siteNameSize_	lef/lef/lefiMacro.hpp	/^  int siteNameSize_;$/;"	m	class:lefiMacro
siteName_	def/def/defiSite.hpp	/^  char* siteName_;     \/\/ Name of this.$/;"	m	class:defiSite
siteName_	lef/include/lefiMacro.hpp	/^  char* siteName_;$/;"	m	class:lefiMacro
siteName_	lef/include/lefiMacro.hpp	/^  const char            *siteName_;$/;"	m	class:lefiMacroSite
siteName_	lef/lef/lefiMacro.hpp	/^  char* siteName_;$/;"	m	class:lefiMacro
siteName_	lef/lef/lefiMacro.hpp	/^  const char            *siteName_;$/;"	m	class:lefiMacroSite
siteNames_	lef/include/lefiMisc.hpp	/^  char** siteNames_;$/;"	m	class:lefiSite
siteNames_	lef/lef/lefiMisc.hpp	/^  char** siteNames_;$/;"	m	class:lefiSite
siteOrient	lef/lef/lefiMisc.cpp	/^lefiSite::siteOrient(int index) const$/;"	f	class:lefiSite
siteOrientStr	lef/lef/lefiMisc.cpp	/^lefiSite::siteOrientStr(int index) const$/;"	f	class:lefiSite
siteOrients_	lef/include/lefiMisc.hpp	/^  int*   siteOrients_;$/;"	m	class:lefiSite
siteOrients_	lef/lef/lefiMisc.hpp	/^  int*   siteOrients_;$/;"	m	class:lefiSite
sitePattern	lef/lef/lef.y	/^sitePattern: T_STRING int_number int_number orientation$/;"	l
sitePattern	lef/lef/lefiArray.cpp	/^lefiArray::sitePattern(int index) const$/;"	f	class:lefiArray
sitePattern	lef/lef/lefiMacro.cpp	/^lefiMacro::sitePattern(int index) const$/;"	f	class:lefiMacro
sitePattern	lef/lef/lefiMacro.cpp	/^lefiMacroSite::sitePattern() const$/;"	f	class:lefiMacroSite
sitePattern_	lef/include/lefiMacro.hpp	/^  const lefiSitePattern *sitePattern_;$/;"	m	class:lefiMacroSite
sitePattern_	lef/lef/lefiMacro.hpp	/^  const lefiSitePattern *sitePattern_;$/;"	m	class:lefiMacroSite
siteType	lef/lef/lefiArray.cpp	/^lefiArray::siteType(int index,$/;"	f	class:lefiArray
siteWarnings	lef/include/lefrData.hpp	/^    int  siteWarnings; $/;"	m	class:lefrData
siteWarnings	lef/lef/lefrData.hpp	/^    int  siteWarnings; $/;"	m	class:lefrData
site_class	lef/lef/lef.y	/^site_class:$/;"	l
site_option	lef/lef/lef.y	/^site_option:$/;"	l
site_options	lef/lef/lef.y	/^site_options:$/;"	l
site_rowpattern	lef/lef/lef.y	/^site_rowpattern: T_STRING orientation {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;}$/;"	l
site_rowpattern_statement	lef/lef/lef.y	/^site_rowpattern_statement: K_ROWPATTERN {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;}$/;"	l
site_rowpatterns	lef/lef/lef.y	/^site_rowpatterns:$/;"	l
site_symmetries	lef/lef/lef.y	/^site_symmetries:$/;"	l
site_symmetry	lef/lef/lef.y	/^site_symmetry:$/;"	l
site_symmetry_statement	lef/lef/lef.y	/^site_symmetry_statement: K_SYMMETRY site_symmetries ';'$/;"	l
site_word	lef/lef/lef.y	/^site_word: K_SITE$/;"	l
sitesAllocated_	lef/include/lefiMacro.hpp	/^  int sitesAllocated_;$/;"	m	class:lefiMacro
sitesAllocated_	lef/lef/lefiMacro.hpp	/^  int sitesAllocated_;$/;"	m	class:lefiMacro
sizeDef	lef/include/lefrData.hpp	/^    int  sizeDef; $/;"	m	class:lefrData
sizeDef	lef/lef/lefrData.hpp	/^    int  sizeDef; $/;"	m	class:lefrData
sizeX	lef/lef/lefiMacro.cpp	/^lefiMacro::sizeX() const$/;"	f	class:lefiMacro
sizeX	lef/lef/lefiMisc.cpp	/^lefiSite::sizeX() const$/;"	f	class:lefiSite
sizeX_	lef/include/lefiMacro.hpp	/^  double sizeX_;$/;"	m	class:lefiMacro
sizeX_	lef/include/lefiMisc.hpp	/^  double sizeX_;$/;"	m	class:lefiSite
sizeX_	lef/lef/lefiMacro.hpp	/^  double sizeX_;$/;"	m	class:lefiMacro
sizeX_	lef/lef/lefiMisc.hpp	/^  double sizeX_;$/;"	m	class:lefiSite
sizeY	lef/lef/lefiMacro.cpp	/^lefiMacro::sizeY() const$/;"	f	class:lefiMacro
sizeY	lef/lef/lefiMisc.cpp	/^lefiSite::sizeY() const$/;"	f	class:lefiSite
sizeY_	lef/include/lefiMacro.hpp	/^  double sizeY_;$/;"	m	class:lefiMacro
sizeY_	lef/include/lefiMisc.hpp	/^  double sizeY_;$/;"	m	class:lefiSite
sizeY_	lef/lef/lefiMacro.hpp	/^  double sizeY_;$/;"	m	class:lefiMacro
sizeY_	lef/lef/lefiMisc.hpp	/^  double sizeY_;$/;"	m	class:lefiSite
slayers_	def/def/defiNet.hpp	/^  char**      slayers_;$/;"	m	class:defiNet
sleft_	def/def/defiNet.hpp	/^  double*     sleft_;$/;"	m	class:defiNet
slewFallMax	def/def/defiIOTiming.cpp	/^double defiIOTiming::slewFallMax() const {$/;"	f	class:defiIOTiming
slewFallMax_	def/def/defiIOTiming.hpp	/^  double slewFallMax_;$/;"	m	class:defiIOTiming
slewFallMin	def/def/defiIOTiming.cpp	/^double defiIOTiming::slewFallMin() const {$/;"	f	class:defiIOTiming
slewFallMin_	def/def/defiIOTiming.hpp	/^  double slewFallMin_;$/;"	m	class:defiIOTiming
slewRiseMax	def/def/defiIOTiming.cpp	/^double defiIOTiming::slewRiseMax() const {$/;"	f	class:defiIOTiming
slewRiseMax_	def/def/defiIOTiming.hpp	/^  double slewRiseMax_;$/;"	m	class:defiIOTiming
slewRiseMin	def/def/defiIOTiming.cpp	/^double defiIOTiming::slewRiseMin() const {$/;"	f	class:defiIOTiming
slewRiseMin_	def/def/defiIOTiming.hpp	/^  double slewRiseMin_;$/;"	m	class:defiIOTiming
slew_spec	lef/lef/lef.y	/^slew_spec:$/;"	l
slotLength	lef/lef/lefiLayer.cpp	/^lefiLayer::slotLength() const$/;"	f	class:lefiLayer
slotLength_	lef/include/lefiLayer.hpp	/^  double slotLength_; $/;"	m	class:lefiLayer
slotLength_	lef/lef/lefiLayer.hpp	/^  double slotLength_; $/;"	m	class:lefiLayer
slotWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::slotWidth() const$/;"	f	class:lefiLayer
slotWidth_	lef/include/lefiLayer.hpp	/^  double slotWidth_; $/;"	m	class:lefiLayer
slotWidth_	lef/lef/lefiLayer.hpp	/^  double slotWidth_; $/;"	m	class:lefiLayer
slotWireLength	lef/lef/lefiLayer.cpp	/^lefiLayer::slotWireLength() const$/;"	f	class:lefiLayer
slotWireLength_	lef/include/lefiLayer.hpp	/^  double slotWireLength_; $/;"	m	class:lefiLayer
slotWireLength_	lef/lef/lefiLayer.hpp	/^  double slotWireLength_; $/;"	m	class:lefiLayer
slotWireWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::slotWireWidth() const$/;"	f	class:lefiLayer
slotWireWidth_	lef/include/lefiLayer.hpp	/^  double slotWireWidth_; $/;"	m	class:lefiLayer
slotWireWidth_	lef/lef/lefiLayer.hpp	/^  double slotWireWidth_; $/;"	m	class:lefiLayer
slot_def	def/def/def.y	/^slot_def: slot_rule geom_slot_rules ';'$/;"	l
slot_defs	def/def/def.y	/^slot_defs: \/\/ empty $/;"	l
slot_end	def/def/def.y	/^slot_end: K_END K_SLOTS$/;"	l
slot_rule	def/def/def.y	/^slot_rule: '-' K_LAYER { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING $/;"	l
slot_section	def/def/def.y	/^slot_section: slot_start slot_defs slot_end ;$/;"	l
slot_start	def/def/def.y	/^slot_start: K_SLOTS NUMBER ';'$/;"	l
snetCB	def/defwrite/defwriteCbs.cpp	/^int snetCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
snet_option	def/def/def.y	/^snet_option: snet_width | snet_voltage | $/;"	l
snet_options	def/def/def.y	/^snet_options: \/\/ empty $/;"	l
snet_other_option	def/def/def.y	/^snet_other_option: '+' net_type$/;"	l
snet_prop	def/def/def.y	/^snet_prop: T_STRING NUMBER$/;"	l
snet_prop_list	def/def/def.y	/^snet_prop_list: snet_prop$/;"	l
snet_rule	def/def/def.y	/^snet_rule: net_and_connections snet_options ';'$/;"	l
snet_rules	def/def/def.y	/^snet_rules: \/\/ empty $/;"	l
snet_spacing	def/def/def.y	/^snet_spacing: '+' K_SPACING { defData->dumb_mode = 1; } T_STRING NUMBER$/;"	l
snet_voltage	def/def/def.y	/^snet_voltage: '+' K_VOLTAGE  { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING$/;"	l
snet_width	def/def/def.y	/^snet_width: '+' K_WIDTH { defData->dumb_mode = 1; } T_STRING NUMBER$/;"	l
snetf	def/defdiff/diffDefRW.cpp	/^int snetf(defrCallbackType_e c, defiNet* net, defiUserData ud) {$/;"	f
snetf	def/defrw/defrw.cpp	/^int snetf(defrCallbackType_e c, defiNet* net, defiUserData ud) {$/;"	f
snetpath	def/defrw/defrw.cpp	/^int snetpath(defrCallbackType_e c, defiNet* ppath, defiUserData ud) {$/;"	f
snets_section	def/def/def.y	/^snets_section :  start_snets snet_rules end_snets$/;"	l
snetwire	def/defrw/defrw.cpp	/^int snetwire(defrCallbackType_e c, defiNet* ppath, defiUserData ud) {$/;"	f
snew_path	def/def/def.y	/^snew_path: K_NEW { defData->dumb_mode = 1; } spath$/;"	l
source	def/def/defiComponent.cpp	/^const char* defiComponent::source() const {$/;"	f	class:defiComponent
source	def/def/defiNet.cpp	/^const char* defiNet::source() const {$/;"	f	class:defiNet
source	lef/lef/lefiMacro.cpp	/^lefiMacro::source() const$/;"	f	class:lefiMacro
source_	def/def/defiComponent.hpp	/^  char* source_;$/;"	m	class:defiComponent
source_	def/def/defiNet.hpp	/^  char*        source_;$/;"	m	class:defiNet
source_	lef/include/lefiMacro.hpp	/^  char source_[12];$/;"	m	class:lefiMacro
source_	lef/lef/lefiMacro.hpp	/^  char source_[12];$/;"	m	class:lefiMacro
source_type	def/def/def.y	/^source_type: K_NETLIST$/;"	l
spParallelLength	lef/include/lefrData.hpp	/^    int  spParallelLength; $/;"	m	class:lefrData
spParallelLength	lef/lef/lefrData.hpp	/^    int  spParallelLength; $/;"	m	class:lefrData
sp_options	lef/lef/lef.y	/^sp_options:$/;"	l
space	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::space() const$/;"	f	class:lefiGcellPattern
space	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::space() const$/;"	f	class:lefiTrackPattern
spaceMissing	lef/include/lefrData.hpp	/^    int  spaceMissing; $/;"	m	class:lefrData
spaceMissing	lef/lef/lefrData.hpp	/^    int  spaceMissing; $/;"	m	class:lefrData
space_	lef/include/lefiMisc.hpp	/^  double space_;$/;"	m	class:lefiGcellPattern
space_	lef/include/lefiMisc.hpp	/^  double space_;$/;"	m	class:lefiTrackPattern
space_	lef/lef/lefiMisc.hpp	/^  double space_;$/;"	m	class:lefiGcellPattern
space_	lef/lef/lefiMisc.hpp	/^  double space_;$/;"	m	class:lefiTrackPattern
spacing	lef/lef/lef.y	/^spacing:  samenet_keyword T_STRING T_STRING int_number ';'$/;"	l
spacing	lef/lef/lefiLayer.cpp	/^lefiInfluence::spacing(int index) const$/;"	f	class:lefiInfluence
spacing	lef/lef/lefiLayer.cpp	/^lefiLayer::spacing(int index) const$/;"	f	class:lefiLayer
spacingAdjacentCuts	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingAdjacentCuts(int index) const$/;"	f	class:lefiLayer
spacingAdjacentCuts_	lef/include/lefiLayer.hpp	/^  int*    spacingAdjacentCuts_;    \/\/ 5.5$/;"	m	class:lefiLayer
spacingAdjacentCuts_	lef/lef/lefiLayer.hpp	/^  int*    spacingAdjacentCuts_;    \/\/ 5.5$/;"	m	class:lefiLayer
spacingAdjacentWithin	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingAdjacentWithin(int index) const$/;"	f	class:lefiLayer
spacingAdjacentWithin_	lef/include/lefiLayer.hpp	/^  double* spacingAdjacentWithin_;  \/\/ 5.5$/;"	m	class:lefiLayer
spacingAdjacentWithin_	lef/lef/lefiLayer.hpp	/^  double* spacingAdjacentWithin_;  \/\/ 5.5$/;"	m	class:lefiLayer
spacingAllocated_	def/def/defiNet.hpp	/^  long long   spacingAllocated_;$/;"	m	class:defiNet
spacingArea	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingArea(int index) const$/;"	f	class:lefiLayer
spacingBeginCB	lef/lefrw/lefrw.cpp	/^int spacingBeginCB(lefrCallbackType_e c, void*, lefiUserData){$/;"	f
spacingCB	lef/lefdiff/diffLefRW.cpp	/^int spacingCB(lefrCallbackType_e c, lefiSpacing* spacing, lefiUserData ud) {$/;"	f
spacingCB	lef/lefrw/lefrw.cpp	/^int spacingCB(lefrCallbackType_e c, lefiSpacing* spacing, lefiUserData) {$/;"	f
spacingCutArea_	lef/include/lefiLayer.hpp	/^  double* spacingCutArea_;         \/\/ 5.7$/;"	m	class:lefiLayer
spacingCutArea_	lef/lef/lefiLayer.hpp	/^  double* spacingCutArea_;         \/\/ 5.7$/;"	m	class:lefiLayer
spacingEndCB	lef/lefrw/lefrw.cpp	/^int spacingEndCB(lefrCallbackType_e c, void*, lefiUserData){$/;"	f
spacingEndOfNotchLength	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingEndOfNotchLength(int index) const$/;"	f	class:lefiLayer
spacingEndOfNotchSpacing	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingEndOfNotchSpacing(int index) const$/;"	f	class:lefiLayer
spacingEndOfNotchWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingEndOfNotchWidth(int index) const$/;"	f	class:lefiLayer
spacingEolWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingEolWidth(int index) const$/;"	f	class:lefiLayer
spacingEolWithin	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingEolWithin(int index) const$/;"	f	class:lefiLayer
spacingLengthThreshold	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingLengthThreshold(int index) const$/;"	f	class:lefiLayer
spacingLengthThresholdRangeMax	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingLengthThresholdRangeMax(int index) const$/;"	f	class:lefiLayer
spacingLengthThresholdRangeMin	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingLengthThresholdRangeMin(int index) const$/;"	f	class:lefiLayer
spacingName	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingName(int index) const$/;"	f	class:lefiLayer
spacingName_	lef/include/lefiLayer.hpp	/^  char**  spacingName_;$/;"	m	class:lefiLayer
spacingName_	lef/lef/lefiLayer.hpp	/^  char**  spacingName_;$/;"	m	class:lefiLayer
spacingNotchLength	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingNotchLength(int index) const$/;"	f	class:lefiLayer
spacingParSpace	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingParSpace(int index) const$/;"	f	class:lefiLayer
spacingParWithin	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingParWithin(int index) const$/;"	f	class:lefiLayer
spacingRangeInfluence	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingRangeInfluence(int index) const$/;"	f	class:lefiLayer
spacingRangeInfluenceMax	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingRangeInfluenceMax(int index) const$/;"	f	class:lefiLayer
spacingRangeInfluenceMin	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingRangeInfluenceMin(int index) const$/;"	f	class:lefiLayer
spacingRangeMax	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingRangeMax(int index) const$/;"	f	class:lefiLayer
spacingRangeMin	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingRangeMin(int index) const$/;"	f	class:lefiLayer
spacingRangeRangeMax	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingRangeRangeMax(int index) const$/;"	f	class:lefiLayer
spacingRangeRangeMin	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingRangeRangeMin(int index) const$/;"	f	class:lefiLayer
spacingRule	def/def/defiNet.cpp	/^void defiNet::spacingRule(int index, char** layer, double* dist,$/;"	f	class:defiNet
spacingRule	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::spacingRule(int index) const$/;"	f	class:lefiNonDefault
spacingRules_	lef/include/lefiNonDefault.hpp	/^  lefiSpacing** spacingRules_;$/;"	m	class:lefiNonDefault
spacingRules_	lef/lef/lefiNonDefault.hpp	/^  lefiSpacing** spacingRules_;$/;"	m	class:lefiNonDefault
spacingStepX	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::spacingStepX() const$/;"	f	class:lefiViaRuleLayer
spacingStepX_	lef/include/lefiViaRule.hpp	/^  double spacingStepX_;$/;"	m	class:lefiViaRuleLayer
spacingStepX_	lef/lef/lefiViaRule.hpp	/^  double spacingStepX_;$/;"	m	class:lefiViaRuleLayer
spacingStepY	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::spacingStepY() const$/;"	f	class:lefiViaRuleLayer
spacingStepY_	lef/include/lefiViaRule.hpp	/^  double spacingStepY_;$/;"	m	class:lefiViaRuleLayer
spacingStepY_	lef/lef/lefiViaRule.hpp	/^  double spacingStepY_;$/;"	m	class:lefiViaRuleLayer
spacingTable	lef/lef/lefiLayer.cpp	/^lefiLayer::spacingTable(int index)$/;"	f	class:lefiLayer
spacingTableAllocated_	lef/include/lefiLayer.hpp	/^  int spacingTableAllocated_;$/;"	m	class:lefiLayer
spacingTableAllocated_	lef/lef/lefiLayer.hpp	/^  int spacingTableAllocated_;$/;"	m	class:lefiLayer
spacingTableOrtho_	lef/include/lefiLayer.hpp	/^  lefiOrthogonal* spacingTableOrtho_;$/;"	m	class:lefiLayer
spacingTableOrtho_	lef/lef/lefiLayer.hpp	/^  lefiOrthogonal* spacingTableOrtho_;$/;"	m	class:lefiLayer
spacingTable_	lef/include/lefiLayer.hpp	/^  lefiSpacingTable** spacingTable_;$/;"	m	class:lefiLayer
spacingTable_	lef/lef/lefiLayer.hpp	/^  lefiSpacingTable** spacingTable_;$/;"	m	class:lefiLayer
spacingWarnings	lef/include/lefrData.hpp	/^    int  spacingWarnings; $/;"	m	class:lefrData
spacingWarnings	lef/lef/lefrData.hpp	/^    int  spacingWarnings; $/;"	m	class:lefrData
spacing_	def/def/defiNonDefault.hpp	/^  double* spacing_;$/;"	m	class:defiNonDefault
spacing_	lef/include/lefiLayer.hpp	/^  double* spacing_;          \/\/ for Cut & routing Layer, spacing is multiple$/;"	m	class:lefiLayer
spacing_	lef/include/lefiLayer.hpp	/^  double* spacing_;$/;"	m	class:lefiInfluence
spacing_	lef/include/lefiNonDefault.hpp	/^  double* spacing_;$/;"	m	class:lefiNonDefault
spacing_	lef/lef/lefiLayer.hpp	/^  double* spacing_;          \/\/ for Cut & routing Layer, spacing is multiple$/;"	m	class:lefiLayer
spacing_	lef/lef/lefiLayer.hpp	/^  double* spacing_;$/;"	m	class:lefiInfluence
spacing_	lef/lef/lefiNonDefault.hpp	/^  double* spacing_;$/;"	m	class:lefiNonDefault
spacing_cut_layer_opt	lef/lef/lef.y	/^spacing_cut_layer_opt:                      \/\/ 5.7 $/;"	l
spacing_rule	lef/lef/lef.y	/^spacing_rule: start_spacing spacings end_spacing $/;"	l
spacing_type	lef/lef/lef.y	/^spacing_type:$/;"	l
spacing_value	lef/lef/lef.y	/^spacing_value:$/;"	l
spacings	lef/lef/lef.y	/^spacings:$/;"	l
spacingsAllocated_	lef/include/lefiLayer.hpp	/^  int spacingsAllocated_;$/;"	m	class:lefiLayer
spacingsAllocated_	lef/lef/lefiLayer.hpp	/^  int spacingsAllocated_;$/;"	m	class:lefiLayer
spath	def/def/def.y	/^spath:  T_STRING$/;"	l
spaths	def/def/def.y	/^spaths:$/;"	l
specialWire_mask	def/def/defrData.hpp	/^    int  specialWire_mask; $/;"	m	class:defrData
specialWire_routeStatus	def/def/defrData.hpp	/^    char*  specialWire_routeStatus;$/;"	m	class:defrData
specialWire_routeStatusName	def/def/defrData.hpp	/^    char*  specialWire_routeStatusName;$/;"	m	class:defrData
specialWire_shapeType	def/def/defrData.hpp	/^    char*  specialWire_shapeType;$/;"	m	class:defrData
splitWireWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::splitWireWidth() const$/;"	f	class:lefiLayer
splitWireWidth_	lef/include/lefiLayer.hpp	/^  double splitWireWidth_; $/;"	m	class:lefiLayer
splitWireWidth_	lef/lef/lefiLayer.hpp	/^  double splitWireWidth_; $/;"	m	class:lefiLayer
sright_	def/def/defiNet.hpp	/^  double*     sright_;$/;"	m	class:defiNet
ssPinName_	lef/include/lefiMacro.hpp	/^  char* ssPinName_;$/;"	m	class:lefiPin
ssPinName_	lef/lef/lefiMacro.hpp	/^  char* ssPinName_;$/;"	m	class:lefiPin
stableHold	lef/lef/lefiMacro.cpp	/^lefiTiming::stableHold()$/;"	f	class:lefiTiming
stableHold_	lef/include/lefiMacro.hpp	/^  double stableHold_;$/;"	m	class:lefiTiming
stableHold_	lef/lef/lefiMacro.hpp	/^  double stableHold_;$/;"	m	class:lefiTiming
stableRiseFall	lef/lef/lefiMacro.cpp	/^lefiTiming::stableRiseFall()$/;"	f	class:lefiTiming
stableRiseFall_	lef/include/lefiMacro.hpp	/^  char* stableRiseFall_;$/;"	m	class:lefiTiming
stableRiseFall_	lef/lef/lefiMacro.hpp	/^  char* stableRiseFall_;$/;"	m	class:lefiTiming
stableSetup	lef/lef/lefiMacro.cpp	/^lefiTiming::stableSetup()$/;"	f	class:lefiTiming
stableSetup_	lef/include/lefiMacro.hpp	/^  double stableSetup_;$/;"	m	class:lefiTiming
stableSetup_	lef/lef/lefiMacro.hpp	/^  double stableSetup_;$/;"	m	class:lefiTiming
stack	def/def/defrData.hpp	/^    std::string stack[20];  \/* the stack itself *\/$/;"	m	class:defrData
start	def/def/defiScanchain.cpp	/^void defiScanchain::start(char** inst, char** pin) const {$/;"	f	class:defiScanchain
start	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::start() const$/;"	f	class:lefiGcellPattern
start	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::start() const$/;"	f	class:lefiTrackPattern
startInst_	def/def/defiScanchain.hpp	/^  char* startInst_;$/;"	m	class:defiScanchain
startList	def/def/defiMisc.cpp	/^void defiGeometries::startList(int x, int y) {$/;"	f	class:defiGeometries
startList	lef/lef/lefiMisc.cpp	/^lefiGeometries::startList(double    x,$/;"	f	class:lefiGeometries
startPin_	def/def/defiScanchain.hpp	/^  char* startPin_;$/;"	m	class:defiScanchain
start_	lef/include/lefiMisc.hpp	/^  double start_;$/;"	m	class:lefiGcellPattern
start_	lef/include/lefiMisc.hpp	/^  double start_;$/;"	m	class:lefiTrackPattern
start_	lef/lef/lefiMisc.hpp	/^  double start_;$/;"	m	class:lefiGcellPattern
start_	lef/lef/lefiMisc.hpp	/^  double start_;$/;"	m	class:lefiTrackPattern
start_array	lef/lef/lef.y	/^start_array: K_ARRAY {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
start_comps	def/def/def.y	/^start_comps: K_COMPS NUMBER ';'$/;"	l
start_def_cap	def/def/def.y	/^start_def_cap: K_DEFAULTCAP NUMBER $/;"	l
start_foreign	lef/lef/lef.y	/^start_foreign:        K_FOREIGN {lefData->lefDumbMode = 1; lefData->lefNoNum= 1;} T_STRING$/;"	l
start_group	def/def/def.y	/^start_group: '-' { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING $/;"	l
start_iotiming	def/def/def.y	/^start_iotiming: '-' '(' {defData->dumb_mode = 2; defData->no_num = 2; } T_STRING T_STRING ')'$/;"	l
start_irdrop	lef/lef/lef.y	/^start_irdrop: K_IRDROP$/;"	l
start_layer	lef/lef/lef.y	/^start_layer: K_LAYER {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING$/;"	l
start_macro	lef/lef/lef.y	/^start_macro: K_MACRO {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING $/;"	l
start_macro_obs	lef/lef/lef.y	/^start_macro_obs: K_OBS$/;"	l
start_macro_pin	lef/lef/lef.y	/^start_macro_pin: K_PIN {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; lefData->pinDef = 1;} T_STRING $/;"	l
start_macro_port	lef/lef/lef.y	/^start_macro_port: K_PORT$/;"	l
start_nets	def/def/def.y	/^start_nets: K_NETS NUMBER ';'$/;"	l
start_partition	def/def/def.y	/^start_partition: '-' { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING turnoff$/;"	l
start_pins	def/def/def.y	/^start_pins: K_PINS NUMBER ';'$/;"	l
start_scan	def/def/def.y	/^start_scan: '-' {defData->dumb_mode = 1; defData->no_num = 1;} T_STRING $/;"	l
start_site	lef/lef/lef.y	/^start_site: K_SITE {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING $/;"	l
start_snets	def/def/def.y	/^start_snets: K_SNETS NUMBER ';'$/;"	l
start_spacing	lef/lef/lef.y	/^start_spacing: K_SPACING$/;"	l
start_timing	lef/lef/lef.y	/^start_timing: K_TIMING $/;"	l
start_units	lef/lef/lef.y	/^start_units: K_UNITS$/;"	l
start_via	lef/lef/lef.y	/^start_via: via_keyword T_STRING $/;"	l
status	def/def/defiNet.cpp	/^char defiVpin::status() const {$/;"	f	class:defiVpin
status_	def/def/defiComponent.hpp	/^  int status_;          \/\/ placement status$/;"	m	class:defiComponent
status_	def/def/defiNet.hpp	/^  char status_; \/* P-placed  F-fixed  C-cover  ' '- none *\/$/;"	m	class:defiVpin
stepPattern	lef/lef/lef.y	/^stepPattern: K_DO int_number K_BY int_number K_STEP int_number int_number$/;"	l
stepX	def/cdef/defiTypedefs.h	/^  int stepX;$/;"	m	struct:defiViaData
stepX	def/def/defiPath.hpp	/^  int stepX;$/;"	m	struct:defiViaData
stepX_	def/def/defiPath.hpp	/^  int stepX_;$/;"	m	class:defiPath
stepY	def/cdef/defiTypedefs.h	/^  int stepY;$/;"	m	struct:defiViaData
stepY	def/def/defiPath.hpp	/^  int stepY;$/;"	m	struct:defiViaData
stepY_	def/def/defiPath.hpp	/^  int stepY_;$/;"	m	class:defiPath
step_is_keyword	def/def/defrData.hpp	/^    int  step_is_keyword; $/;"	m	class:defrData
stop	def/def/defiScanchain.cpp	/^void defiScanchain::stop(char** inst, char** pin) const {$/;"	f	class:defiScanchain
stopInst_	def/def/defiScanchain.hpp	/^  char* stopInst_;$/;"	m	class:defiScanchain
stopPin_	def/def/defiScanchain.hpp	/^  char* stopPin_;$/;"	m	class:defiScanchain
strdup	def/def/defiDefs.hpp	175;"	d
strdup	lef/include/lefiDefs.hpp	177;"	d
strdup	lef/lef/lefiDefs.hpp	177;"	d
string	def/def/defiProp.cpp	/^const char* defiProp::string() const {$/;"	f	class:defiProp
string	def/def/defrData.hpp	/^        char * string ;$/;"	m	union:__anon17
string	lef/lef/lef.tab.cpp	/^        char *    string ;$/;"	m	union:YYSTYPE	file:
string	lef/lef/lef.tab.h	/^        char *    string ;$/;"	m	union:YYSTYPE
string	lef/lef/lefiProp.cpp	/^lefiProp::string() const$/;"	f	class:lefiProp
stringData_	def/def/defiProp.hpp	/^  char* stringData_;    \/\/ if it is a string the data is here.$/;"	m	class:defiProp
stringData_	lef/include/lefiProp.hpp	/^  char* stringData_;    \/\/ if it is a string the data is here.$/;"	m	class:lefiProp
stringData_	lef/lef/lefiProp.hpp	/^  char* stringData_;    \/\/ if it is a string the data is here.$/;"	m	class:lefiProp
stringLength_	def/def/defiProp.hpp	/^  int stringLength_;    \/\/ allocated size of stringData.$/;"	m	class:defiProp
stringLength_	lef/include/lefiProp.hpp	/^  int stringLength_;    \/\/ allocated size of stringData.$/;"	m	class:lefiProp
stringLength_	lef/lef/lefiProp.hpp	/^  int stringLength_;    \/\/ allocated size of stringData.$/;"	m	class:lefiProp
strip_case	lef/lef/lef_keywords.cpp	/^strip_case(const char *str)$/;"	f
style	def/def/defiMisc.cpp	/^int defiStyles::style() const {$/;"	f	class:defiStyles
style	def/def/defiNet.cpp	/^int defiNet::style() const {$/;"	f	class:defiNet
styleNum_	def/def/defiMisc.hpp	/^    int    styleNum_;$/;"	m	class:defiStyles
style_	def/def/defiNet.hpp	/^  int   style_;$/;"	m	class:defiNet
stylesWarnings	def/def/defrData.hpp	/^    int  stylesWarnings; $/;"	m	class:defrData
styles_end	def/def/def.y	/^styles_end: K_END K_STYLES$/;"	l
styles_rule	def/def/def.y	/^styles_rule: '-' K_STYLE NUMBER$/;"	l
styles_rules	def/def/def.y	/^styles_rules: \/\/ empty $/;"	l
styles_section	def/def/def.y	/^styles_section: styles_start styles_rules styles_end ;$/;"	l
styles_start	def/def/def.y	/^styles_start: K_STYLES NUMBER ';'$/;"	l
sublex	def/def/def_keywords.cpp	/^defrData::sublex(YYSTYPE *pYylval)$/;"	f	class:defrData
subnet	def/def/defiNet.cpp	/^const defiSubnet* defiNet::subnet(int index) const {$/;"	f	class:defiNet
subnet	def/def/defiNet.cpp	/^defiSubnet* defiNet::subnet(int index) {$/;"	f	class:defiNet
subnetNamef	def/defrw/defrw.cpp	/^int subnetNamef(defrCallbackType_e c, const char* subnetName, defiUserData ud) {$/;"	f
subnet_opt_syn	def/def/def.y	/^subnet_opt_syn: \/\/ empty $/;"	l
subnet_option	def/def/def.y	/^subnet_option: subnet_type$/;"	l
subnet_options	def/def/def.y	/^subnet_options: \/\/ empty $/;"	l
subnet_type	def/def/def.y	/^subnet_type: K_FIXED$/;"	l
subnetsAllocated_	def/def/defiNet.hpp	/^  long long    subnetsAllocated_; \/\/ allocated size of props array$/;"	m	class:defiNet
subnets_	def/def/defiNet.hpp	/^  defiSubnet** subnets_;          \/\/ Prop names$/;"	m	class:defiNet
supplySensLength_	def/def/defiPinCap.hpp	/^  int supplySensLength_;                 \/\/ 5.6$/;"	m	class:defiPin
supplySens_	def/def/defiPinCap.hpp	/^  char* supplySens_;                     \/\/ 5.6$/;"	m	class:defiPin
supplySensitivity	def/def/defiPinCap.cpp	/^const char* defiPin::supplySensitivity() const {$/;"	f	class:defiPin
supplySensitivity	lef/lef/lefiMacro.cpp	/^lefiPin::supplySensitivity() const$/;"	f	class:lefiPin
suppresMsg	lef/lef/lefrSettings.cpp	/^lefrSettings::suppresMsg(int msgId)$/;"	f	class:lefrSettings
symDef	lef/include/lefrData.hpp	/^    int  symDef; $/;"	m	class:lefrData
symDef	lef/lef/lefrData.hpp	/^    int  symDef; $/;"	m	class:lefrData
symmetry_	lef/include/lefiMisc.hpp	/^  int    symmetry_;   \/\/ bit 0-x   bit 1-y   bit 2-90$/;"	m	class:lefiSite
symmetry_	lef/lef/lefiMisc.hpp	/^  int    symmetry_;   \/\/ bit 0-x   bit 1-y   bit 2-90$/;"	m	class:lefiSite
synthesized_	def/def/defiNet.hpp	/^  char*         synthesized_;     \/\/ synthesized flags for pins$/;"	m	class:defiSubnet
synthesized_	def/def/defiNet.hpp	/^  char*     synthesized_;   \/\/ synthesized flags for pins$/;"	m	class:defiNet
tableEntriesAllocated_	lef/include/lefiMacro.hpp	/^  int tableEntriesAllocated_;$/;"	m	class:lefiTiming
tableEntriesAllocated_	lef/lef/lefiMacro.hpp	/^  int tableEntriesAllocated_;$/;"	m	class:lefiTiming
tableEntries_	lef/include/lefiLayer.hpp	/^  double* tableEntries_;$/;"	m	class:lefiLayerDensity
tableEntries_	lef/lef/lefiLayer.hpp	/^  double* tableEntries_;$/;"	m	class:lefiLayerDensity
tableEntry	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::tableEntry(int index) const$/;"	f	class:lefiLayerDensity
tableEntry	lef/lef/lefiMacro.cpp	/^lefiTiming::tableEntry(int      num,$/;"	f	class:lefiTiming
tableHighName	lef/lef/lefiMacro.cpp	/^lefiPin::tableHighName() const$/;"	f	class:lefiPin
tableLowName	lef/lef/lefiMacro.cpp	/^lefiPin::tableLowName() const$/;"	f	class:lefiPin
tableSize	lef/lef/lefiArray.cpp	/^lefiArray::tableSize() const$/;"	f	class:lefiArray
tableSize_	lef/include/lefiArray.hpp	/^  int tableSize_;$/;"	m	class:lefiArray
tableSize_	lef/lef/lefiArray.hpp	/^  int tableSize_;$/;"	m	class:lefiArray
table_	lef/include/lefiMacro.hpp	/^  double* table_;  \/\/ three numbers per entry $/;"	m	class:lefiTiming
table_	lef/lef/lefiMacro.hpp	/^  double* table_;  \/\/ three numbers per entry $/;"	m	class:lefiTiming
table_entry	lef/lef/lef.y	/^table_entry: '(' int_number int_number int_number ')'$/;"	l
tagName	lef/lef/lefiTBExt.cpp	/^static char tagName[200] = "CDNDESYS";$/;"	v	file:
tagNum	lef/lef/lefiTBExt.cpp	/^static char tagNum[24] = "CDNCHKSM";$/;"	v	file:
taperRule	lef/lef/lefiMacro.cpp	/^lefiPin::taperRule() const$/;"	f	class:lefiPin
taperRule_	lef/include/lefiMacro.hpp	/^  char* taperRule_;$/;"	m	class:lefiPin
taperRule_	lef/lef/lefiMacro.hpp	/^  char* taperRule_;$/;"	m	class:lefiPin
td_macro_option	def/def/def.y	/^td_macro_option: K_FROMPIN {defData->dumb_mode = 1; defData->no_num = 1;} T_STRING K_TOPIN$/;"	l
tech_name	def/def/def.y	/^tech_name: K_TECH { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING ';'$/;"	l
technologyCB	def/defwrite/defwriteCbs.cpp	/^int technologyCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
temp_name	lef/include/lefrData.hpp	/^    char       temp_name[258];$/;"	m	class:lefrData
temp_name	lef/lef/lefrData.hpp	/^    char       temp_name[258];$/;"	m	class:lefrData
testDebugPrint	def/defrw/defrw.cpp	/^static int testDebugPrint = 0;  \/\/ test for ccr1488696$/;"	v	file:
then	lef/lef/lef.y	/^then:$/;"	l
thickness	lef/lef/lefiLayer.cpp	/^lefiLayer::thickness() const$/;"	f	class:lefiLayer
thickness_	lef/include/lefiLayer.hpp	/^  double thickness_;$/;"	m	class:lefiLayer
thickness_	lef/lef/lefiLayer.hpp	/^  double thickness_;$/;"	m	class:lefiLayer
thruInst	def/def/defiTimingDisable.cpp	/^const char* defiTimingDisable::thruInst() const {$/;"	f	class:defiTimingDisable
thruPin	def/def/defiTimingDisable.cpp	/^const char* defiTimingDisable::thruPin() const {$/;"	f	class:defiTimingDisable
tieoffr	lef/lef/lefiMacro.cpp	/^lefiPin::tieoffr() const$/;"	f	class:lefiPin
tieoffr_	lef/include/lefiMacro.hpp	/^  double tieoffr_;$/;"	m	class:lefiPin
tieoffr_	lef/lef/lefiMacro.hpp	/^  double tieoffr_;$/;"	m	class:lefiPin
time	lef/lef/lefiUnits.cpp	/^lefiUnits::time() const$/;"	f	class:lefiUnits
time_	lef/include/lefiUnits.hpp	/^  double time_;$/;"	m	class:lefiUnits
time_	lef/lef/lefiUnits.hpp	/^  double time_;$/;"	m	class:lefiUnits
timing	lef/lef/lef.y	/^timing: start_timing timing_options end_timing$/;"	l
timingCB	lef/lefdiff/diffLefRW.cpp	/^int timingCB(lefrCallbackType_e c, lefiTiming* timing, lefiUserData ud) {$/;"	f
timingCB	lef/lefrw/lefrw.cpp	/^int timingCB(lefrCallbackType_e c, lefiTiming* timing, lefiUserData) {$/;"	f
timingWarnings	lef/include/lefrData.hpp	/^    int  timingWarnings; $/;"	m	class:lefrData
timingWarnings	lef/lef/lefrData.hpp	/^    int  timingWarnings; $/;"	m	class:lefrData
timing_option	lef/lef/lef.y	/^timing_option:$/;"	l
timing_options	lef/lef/lef.y	/^timing_options:$/;"	l
timingdisables_end	def/def/def.y	/^timingdisables_end: K_END K_TIMINGDISABLES$/;"	l
timingdisables_rule	def/def/def.y	/^timingdisables_rule: '-' K_FROMPIN { defData->dumb_mode = 2; defData->no_num = 2;  } T_STRING$/;"	l
timingdisables_rules	def/def/def.y	/^timingdisables_rules: \/\/ empty $/;"	l
timingdisables_section	def/def/def.y	/^timingdisables_section: timingdisables_start timingdisables_rules$/;"	l
timingdisables_start	def/def/def.y	/^timingdisables_start: K_TIMINGDISABLES NUMBER ';'$/;"	l
tk	def/def/defrData.hpp	/^        defTOKEN *tk;$/;"	m	union:__anon17
tname	def/defdiff/diffDefRW.cpp	/^int tname(defrCallbackType_e c, const char* string, defiUserData ud) {$/;"	f
tname	def/defrw/defrw.cpp	/^int tname(defrCallbackType_e c, const char* string, defiUserData ud) {$/;"	f
to	def/def/defiIOTiming.cpp	/^const char* defiIOTiming::to() const {$/;"	f	class:defiIOTiming
toAllocated_	lef/include/lefiMacro.hpp	/^  int toAllocated_;$/;"	m	class:lefiTiming
toAllocated_	lef/lef/lefiMacro.hpp	/^  int toAllocated_;$/;"	m	class:lefiTiming
toInst	def/def/defiTimingDisable.cpp	/^const char* defiTimingDisable::toInst() const {$/;"	f	class:defiTimingDisable
toInstLength_	def/def/defiTimingDisable.hpp	/^  int toInstLength_;$/;"	m	class:defiTimingDisable
toInst_	def/def/defiAssertion.cpp	/^  char* toInst_;$/;"	m	struct:defiAssertPath	file:
toInst_	def/def/defiTimingDisable.hpp	/^  char* toInst_;$/;"	m	class:defiTimingDisable
toLength_	def/def/defiIOTiming.hpp	/^  int toLength_;$/;"	m	class:defiIOTiming
toPin	def/def/defiTimingDisable.cpp	/^const char* defiTimingDisable::toPin() const {$/;"	f	class:defiTimingDisable
toPin	lef/lef/lefiMacro.cpp	/^lefiTiming::toPin(int index)$/;"	f	class:lefiTiming
toPinLength_	def/def/defiTimingDisable.hpp	/^  int toPinLength_;$/;"	m	class:defiTimingDisable
toPin_	def/def/defiAssertion.cpp	/^  char* toPin_;$/;"	m	struct:defiAssertPath	file:
toPin_	def/def/defiTimingDisable.hpp	/^  char* toPin_;$/;"	m	class:defiTimingDisable
to_	def/def/defiIOTiming.hpp	/^  char* to_;$/;"	m	class:defiIOTiming
to_	lef/include/lefiMacro.hpp	/^  char** to_;$/;"	m	class:lefiTiming
to_	lef/lef/lefiMacro.hpp	/^  char** to_;$/;"	m	class:lefiTiming
to_pin_trigger	lef/lef/lef.y	/^to_pin_trigger:$/;"	l
token	lef/include/lefiDefs.hpp	/^struct token {$/;"	s
token	lef/lef/lefiDefs.hpp	/^struct token {$/;"	s
tokenSize	lef/include/lefrData.hpp	/^    int                 tokenSize;$/;"	m	class:lefrData
tokenSize	lef/lef/lefrData.hpp	/^    int                 tokenSize;$/;"	m	class:lefrData
topHalo_	def/def/defiComponent.hpp	/^  int topHalo_;$/;"	m	class:defiComponent
topLayerLength_	def/def/defiVia.hpp	/^  int   topLayerLength_;    \/\/ 5.6$/;"	m	class:defiVia
topLayer_	def/def/defiVia.hpp	/^  char* topLayer_;          \/\/ 5.6$/;"	m	class:defiVia
topLayer_	lef/include/lefiMisc.hpp	/^  char* topLayer_;$/;"	m	class:lefiMaxStackVia
topLayer_	lef/include/lefiVia.hpp	/^  char* topLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
topLayer_	lef/lef/lefiMisc.hpp	/^  char* topLayer_;$/;"	m	class:lefiMaxStackVia
topLayer_	lef/lef/lefiVia.hpp	/^  char* topLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
topMaskNum	def/def/defiNet.cpp	/^const int defiNet::topMaskNum(int index) const {$/;"	f	class:defiNet
topMaskNum	lef/clef/lefiTypedefs.h	/^  int    topMaskNum;$/;"	m	struct:lefiGeomVia
topMaskNum	lef/clef/lefiTypedefs.h	/^  int    topMaskNum;$/;"	m	struct:lefiGeomViaIter
topMaskNum	lef/include/lefiMisc.hpp	/^  int    topMaskNum;$/;"	m	struct:lefiGeomVia
topMaskNum	lef/include/lefiMisc.hpp	/^  int    topMaskNum;$/;"	m	struct:lefiGeomViaIter
topMaskNum	lef/include/lefiTypedefs.h	/^  int    topMaskNum;$/;"	m	struct:lefiGeomVia
topMaskNum	lef/include/lefiTypedefs.h	/^  int    topMaskNum;$/;"	m	struct:lefiGeomViaIter
topMaskNum	lef/lef/lefiMisc.hpp	/^  int    topMaskNum;$/;"	m	struct:lefiGeomVia
topMaskNum	lef/lef/lefiMisc.hpp	/^  int    topMaskNum;$/;"	m	struct:lefiGeomViaIter
topMetalLayer	lef/lef/lefiVia.cpp	/^lefiVia::topMetalLayer() const$/;"	f	class:lefiVia
totalDefMsgLimit	def/def/defrSettings.hpp	/^    int  totalDefMsgLimit; \/\/ to save the user set total msg limit to output$/;"	m	class:defrSettings
track	lef/lef/lefiArray.cpp	/^lefiArray::track(int index) const$/;"	f	class:lefiArray
trackCB	def/defwrite/defwriteCbs.cpp	/^int trackCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
trackLayers	lef/lef/lef.y	/^trackLayers:$/;"	l
trackPattern	lef/lef/lef.y	/^trackPattern:$/;"	l
trackWarnings	def/def/defrData.hpp	/^    int  trackWarnings; $/;"	m	class:defrData
track_	lef/include/lefiArray.hpp	/^  lefiTrackPattern** track_;$/;"	m	class:lefiArray
track_	lef/lef/lefiArray.hpp	/^  lefiTrackPattern** track_;$/;"	m	class:lefiArray
track_layer	def/def/def.y	/^track_layer: T_STRING$/;"	l
track_layer_statement	def/def/def.y	/^track_layer_statement: \/\/ empty $/;"	l
track_layers	def/def/def.y	/^track_layers: \/\/ empty $/;"	l
track_mask_statement	def/def/def.y	/^track_mask_statement: \/\/ empty $/;"	l
track_opts	def/def/def.y	/^track_opts: track_mask_statement track_layer_statement$/;"	l
track_start	def/def/def.y	/^track_start: K_TRACKS track_type$/;"	l
track_type	def/def/def.y	/^track_type: K_X$/;"	l
tracksAllocated_	lef/include/lefiArray.hpp	/^  int tracksAllocated_;$/;"	m	class:lefiArray
tracksAllocated_	lef/lef/lefiArray.hpp	/^  int tracksAllocated_;$/;"	m	class:lefiArray
tracks_rule	def/def/def.y	/^tracks_rule: track_start NUMBER$/;"	l
transitionRiseOrFall	lef/lef/lefiMacro.cpp	/^lefiTiming::transitionRiseOrFall()$/;"	f	class:lefiTiming
transitionRiseOrFall_	lef/include/lefiMacro.hpp	/^  char* transitionRiseOrFall_;$/;"	m	class:lefiTiming
transitionRiseOrFall_	lef/lef/lefiMacro.hpp	/^  char* transitionRiseOrFall_;$/;"	m	class:lefiTiming
transitionTableOne	lef/lef/lefiMacro.cpp	/^lefiTiming::transitionTableOne()$/;"	f	class:lefiTiming
transitionTableOne_	lef/include/lefiMacro.hpp	/^  double transitionTableOne_;$/;"	m	class:lefiTiming
transitionTableOne_	lef/lef/lefiMacro.hpp	/^  double transitionTableOne_;$/;"	m	class:lefiTiming
transitionTableThree	lef/lef/lefiMacro.cpp	/^lefiTiming::transitionTableThree()$/;"	f	class:lefiTiming
transitionTableThree_	lef/include/lefiMacro.hpp	/^  double transitionTableThree_;$/;"	m	class:lefiTiming
transitionTableThree_	lef/lef/lefiMacro.hpp	/^  double transitionTableThree_;$/;"	m	class:lefiTiming
transitionTableTwo	lef/lef/lefiMacro.cpp	/^lefiTiming::transitionTableTwo()$/;"	f	class:lefiTiming
transitionTableTwo_	lef/include/lefiMacro.hpp	/^  double transitionTableTwo_;$/;"	m	class:lefiTiming
transitionTableTwo_	lef/lef/lefiMacro.hpp	/^  double transitionTableTwo_;$/;"	m	class:lefiTiming
transitionUnateness	lef/lef/lefiMacro.cpp	/^lefiTiming::transitionUnateness()$/;"	f	class:lefiTiming
transitionUnateness_	lef/include/lefiMacro.hpp	/^  char* transitionUnateness_;$/;"	m	class:lefiTiming
transitionUnateness_	lef/lef/lefiMacro.hpp	/^  char* transitionUnateness_;$/;"	m	class:lefiTiming
turnoff	def/def/def.y	/^turnoff: \/\/ empty $/;"	l
turnoff_hold	def/def/def.y	/^turnoff_hold: \/\/ empty $/;"	l
turnoff_setup	def/def/def.y	/^turnoff_setup: \/\/ empty $/;"	l
two	lef/lef/lefiMisc.cpp	/^lefiMinFeature::two() const$/;"	f	class:lefiMinFeature
twoWidths	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::twoWidths() const$/;"	f	class:lefiSpacingTable
twoWidths_	lef/include/lefiLayer.hpp	/^  lefiTwoWidths*   twoWidths_;               \/\/ 5.7$/;"	m	class:lefiSpacingTable
twoWidths_	lef/lef/lefiLayer.hpp	/^  lefiTwoWidths*   twoWidths_;               \/\/ 5.7$/;"	m	class:lefiSpacingTable
two_	lef/include/lefiMisc.hpp	/^  double two_;$/;"	m	class:lefiMinFeature
two_	lef/lef/lefiMisc.hpp	/^  double two_;$/;"	m	class:lefiMinFeature
two_pin_trigger	lef/lef/lef.y	/^two_pin_trigger :$/;"	l
typ	lef/lef/lefiArray.cpp	/^lefiArrayFloorPlan::typ(int index) const$/;"	f	class:lefiArrayFloorPlan
type	def/def/defiRegion.cpp	/^const char* defiRegion::type() const {$/;"	f	class:defiRegion
type	lef/lef/lefiLayer.cpp	/^lefiLayer::type() const$/;"	f	class:lefiLayer
type	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::type() const$/;"	f	class:lefiLayerDensity
typeSize_	lef/include/lefiLayer.hpp	/^  int typeSize_;$/;"	m	class:lefiLayer
typeSize_	lef/lef/lefiLayer.hpp	/^  int typeSize_;$/;"	m	class:lefiLayer
typeToString	def/def/defrReader.cpp	/^typeToString(defrCallbackType_e num)$/;"	f
type_	def/def/defiNet.hpp	/^  char*      type_;$/;"	m	class:defiWire
type_	def/def/defiPartition.hpp	/^  char type_;        \/\/ 'L'-clock   'I'-IO  'C'-comp$/;"	m	class:defiPartition
type_	def/def/defiRegion.hpp	/^  char* type_;$/;"	m	class:defiRegion
type_	lef/include/lefiLayer.hpp	/^  char* type_;$/;"	m	class:lefiLayer
type_	lef/include/lefiLayer.hpp	/^  char* type_;$/;"	m	class:lefiLayerDensity
type_	lef/lef/lefiLayer.hpp	/^  char* type_;$/;"	m	class:lefiLayer
type_	lef/lef/lefiLayer.hpp	/^  char* type_;$/;"	m	class:lefiLayerDensity
types_	def/def/defiComponent.hpp	/^  char*   types_;$/;"	m	class:defiComponent
types_	def/def/defiNonDefault.hpp	/^  char*   types_;$/;"	m	class:defiNonDefault
types_	lef/include/lefiArray.hpp	/^  char** types_;$/;"	m	class:lefiArrayFloorPlan
types_	lef/include/lefiLayer.hpp	/^  char*   types_;                     \/\/ I: integer, R: real, S:string$/;"	m	class:lefiLayer
types_	lef/include/lefiNonDefault.hpp	/^  char*   types_;$/;"	m	class:lefiNonDefault
types_	lef/include/lefiViaRule.hpp	/^  char*   types_;$/;"	m	class:lefiViaRule
types_	lef/lef/lefiArray.hpp	/^  char** types_;$/;"	m	class:lefiArrayFloorPlan
types_	lef/lef/lefiLayer.hpp	/^  char*   types_;                     \/\/ I: integer, R: real, S:string$/;"	m	class:lefiLayer
types_	lef/lef/lefiNonDefault.hpp	/^  char*   types_;$/;"	m	class:lefiNonDefault
types_	lef/lef/lefiViaRule.hpp	/^  char*   types_;$/;"	m	class:lefiViaRule
uc_array	def/def/def_keywords.cpp	/^defrData::uc_array(char *source, char *dest)$/;"	f	class:defrData
uc_token	def/def/defrData.hpp	/^    char*  uc_token;$/;"	m	class:defrData
uc_token	lef/include/lefrData.hpp	/^    char       *uc_token; $/;"	m	class:lefrData
uc_token	lef/lef/lefrData.hpp	/^    char       *uc_token; $/;"	m	class:lefrData
unUsedCB	def/defrw/defrw.cpp	/^int unUsedCB(defrCallbackType_e, void*, defiUserData) {$/;"	f
unateness	lef/lef/lef.y	/^unateness:$/;"	l
unateness	lef/lef/lefiMacro.cpp	/^lefiTiming::unateness()$/;"	f	class:lefiTiming
unateness_	lef/include/lefiMacro.hpp	/^  char* unateness_;$/;"	m	class:lefiTiming
unateness_	lef/lef/lefiMacro.hpp	/^  char* unateness_;$/;"	m	class:lefiTiming
units	def/def/def.y	/^units: K_UNITS K_DISTANCE K_MICRONS NUMBER ';'$/;"	l
units	def/defdiff/diffDefRW.cpp	/^int units(defrCallbackType_e c, double d, defiUserData ud) {$/;"	f
units	def/defrw/defrw.cpp	/^int units(defrCallbackType_e c, double d, defiUserData ud) {$/;"	f
unitsCB	def/defwrite/defwriteCbs.cpp	/^int unitsCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
unitsCB	lef/lefdiff/diffLefRW.cpp	/^int unitsCB(lefrCallbackType_e c, lefiUnits* unit, lefiUserData ud) {$/;"	f
unitsCB	lef/lefrw/lefrw.cpp	/^int unitsCB(lefrCallbackType_e c, lefiUnits* unit, lefiUserData) {$/;"	f
unitsCB	lef/lefwrite/lefwriteCbs.cpp	/^int unitsCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
unitsWarnings	def/def/defrData.hpp	/^    int  unitsWarnings; $/;"	m	class:defrData
unitsWarnings	lef/include/lefrData.hpp	/^    int  unitsWarnings; $/;"	m	class:lefrData
unitsWarnings	lef/lef/lefrData.hpp	/^    int  unitsWarnings; $/;"	m	class:lefrData
units_rule	lef/lef/lef.y	/^units_rule: K_TIME K_NANOSECONDS int_number ';'$/;"	l
units_rules	lef/lef/lef.y	/^units_rules: $/;"	l
units_section	lef/lef/lef.y	/^units_section: start_units units_rules K_END K_UNITS$/;"	l
universalnoisemargin	lef/lef/lef.y	/^universalnoisemargin: K_UNIVERSALNOISEMARGIN int_number int_number ';'$/;"	l
unsetSum	def/def/defiAssertion.cpp	/^void defiAssertion::unsetSum() {$/;"	f	class:defiAssertion
upperCase	def/cdef/xdefiDebug.cpp	/^const char* upperCase (const char*  c) {$/;"	f
upperCase	def/def/defiDebug.cpp	/^const char* upperCase(const char* str, defrData *defData) {$/;"	f
upperCase	def/def/defrData.cpp	/^defrData::upperCase(const char* str) $/;"	f	class:defrData
ur	def/def/defiDefs.hpp	/^    defPOINT ll,ur;$/;"	m	struct:defrect
ur	lef/include/lefiDefs.hpp	/^    lefPOINT ll,ur;$/;"	m	struct:rect
ur	lef/lef/lefiDefs.hpp	/^    lefPOINT ll,ur;$/;"	m	struct:rect
use	def/def/defiNet.cpp	/^const char* defiNet::use() const {$/;"	f	class:defiNet
use	def/def/defiPinCap.cpp	/^const char* defiPin::use() const {$/;"	f	class:defiPin
use	lef/lef/lefiMacro.cpp	/^lefiPin::use() const$/;"	f	class:lefiPin
use5_3	lef/include/lefrData.hpp	/^    int  use5_3; $/;"	m	class:lefrData
use5_3	lef/lef/lefrData.hpp	/^    int  use5_3; $/;"	m	class:lefrData
use5_4	lef/include/lefrData.hpp	/^    int  use5_4; $/;"	m	class:lefrData
use5_4	lef/lef/lefrData.hpp	/^    int  use5_4; $/;"	m	class:lefrData
useLenThr	lef/include/lefrData.hpp	/^    int  useLenThr; $/;"	m	class:lefrData
useLenThr	lef/lef/lefrData.hpp	/^    int  useLenThr; $/;"	m	class:lefrData
useLength_	def/def/defiPinCap.hpp	/^  int useLength_;        \/\/ allocated size of length$/;"	m	class:defiPin
useMinSpacingCB	lef/lefdiff/diffLefRW.cpp	/^int useMinSpacingCB(lefrCallbackType_e c, lefiUseMinSpacing* spacing,$/;"	f
useMinSpacingCB	lef/lefrw/lefrw.cpp	/^int useMinSpacingCB(lefrCallbackType_e c, lefiUseMinSpacing* spacing,$/;"	f
useMinSpacingWarnings	lef/include/lefrData.hpp	/^    int  useMinSpacingWarnings; $/;"	m	class:lefrData
useMinSpacingWarnings	lef/lef/lefrData.hpp	/^    int  useMinSpacingWarnings; $/;"	m	class:lefrData
useViaName_	lef/include/lefiNonDefault.hpp	/^  char** useViaName_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
useViaName_	lef/lef/lefiNonDefault.hpp	/^  char** useViaName_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
useViaRuleName_	lef/include/lefiNonDefault.hpp	/^  char** useViaRuleName_;          \/\/ 5.6$/;"	m	class:lefiNonDefault
useViaRuleName_	lef/lef/lefiNonDefault.hpp	/^  char** useViaRuleName_;          \/\/ 5.6$/;"	m	class:lefiNonDefault
use_	def/def/defiNet.hpp	/^  char* use_;$/;"	m	class:defiNet
use_	def/def/defiPinCap.hpp	/^  char* use_;$/;"	m	class:defiPin
use_	lef/include/lefiMacro.hpp	/^  char use_[12];$/;"	m	class:lefiPin
use_	lef/lef/lefiMacro.hpp	/^  char use_[12];$/;"	m	class:lefiPin
use_type	def/def/def.y	/^use_type: K_SIGNAL$/;"	l
useminspacing	lef/lef/lef.y	/^useminspacing: K_USEMINSPACING spacing_type spacing_value ';'$/;"	l
userData	def/defdiff/diffDefRW.cpp	/^void  *userData;$/;"	v
userData	def/defrw/defrw.cpp	/^void* userData;$/;"	v
userData	def/defwrite/defwriteCbs.cpp	/^int   userData;$/;"	v
userData	lef/lefdiff/diffLefRW.cpp	/^void*   userData;$/;"	v
userData	lef/lefwrite/lefwriteCbs.cpp	/^int   userData;$/;"	v
usevia	lef/lef/lef.y	/^usevia: K_USEVIA T_STRING ';'$/;"	l
useviarule	lef/lef/lef.y	/^useviarule:  K_USEVIARULE T_STRING ';'$/;"	l
validNum	lef/lef/lef.tab.cpp	/^int validNum(int values) {$/;"	f
validateMaskInput	def/def/defrData.cpp	/^defrData::validateMaskInput(int input, int warningIndex, int getWarningsIndex) $/;"	f	class:defrData
validateMaskNumber	lef/clef/xlefiUtil.cpp	/^bool  validateMaskNumber (int  num) {$/;"	f
validateMaskNumber	lef/lef/lefrReader.cpp	/^validateMaskNumber(int num)$/;"	f
validateMaskShiftInput	def/def/defrData.cpp	/^defrData::validateMaskShiftInput(const char* shiftMask, int warningIndex, int getWarningsIndex) $/;"	f	class:defrData
value	lef/lef/lefiMisc.cpp	/^lefiUseMinSpacing::value() const$/;"	f	class:lefiUseMinSpacing
value1	lef/lef/lefiMisc.cpp	/^lefiIRDrop::value1(int index) const$/;"	f	class:lefiIRDrop
value1Size_	lef/include/lefiMisc.hpp	/^  int     value1Size_;$/;"	m	class:lefiIRDrop
value1Size_	lef/lef/lefiMisc.hpp	/^  int     value1Size_;$/;"	m	class:lefiIRDrop
value1_	lef/include/lefiMisc.hpp	/^  double* value1_;$/;"	m	class:lefiIRDrop
value1_	lef/lef/lefiMisc.hpp	/^  double* value1_;$/;"	m	class:lefiIRDrop
value2	lef/lef/lefiMisc.cpp	/^lefiIRDrop::value2(int index) const$/;"	f	class:lefiIRDrop
value2Size_	lef/include/lefiMisc.hpp	/^  int     value2Size_;$/;"	m	class:lefiIRDrop
value2Size_	lef/lef/lefiMisc.hpp	/^  int     value2Size_;$/;"	m	class:lefiIRDrop
value2_	lef/include/lefiMisc.hpp	/^  double* value2_;$/;"	m	class:lefiIRDrop
value2_	lef/lef/lefiMisc.hpp	/^  double* value2_;$/;"	m	class:lefiIRDrop
value_	lef/include/lefiMisc.hpp	/^  int   value_;$/;"	m	class:lefiMaxStackVia
value_	lef/include/lefiMisc.hpp	/^  int   value_;$/;"	m	class:lefiUseMinSpacing
value_	lef/lef/lefiMisc.hpp	/^  int   value_;$/;"	m	class:lefiMaxStackVia
value_	lef/lef/lefiMisc.hpp	/^  int   value_;$/;"	m	class:lefiUseMinSpacing
valuesAllocated_	lef/include/lefiMisc.hpp	/^  int     valuesAllocated_;$/;"	m	class:lefiIRDrop
valuesAllocated_	lef/lef/lefiMisc.hpp	/^  int     valuesAllocated_;$/;"	m	class:lefiIRDrop
values_	def/def/defiComponent.hpp	/^  char**  values_;$/;"	m	class:defiComponent
values_	def/def/defiNonDefault.hpp	/^  char**  values_;$/;"	m	class:defiNonDefault
values_	lef/include/lefiLayer.hpp	/^  char**  values_;$/;"	m	class:lefiLayer
values_	lef/include/lefiNonDefault.hpp	/^  char**  values_;$/;"	m	class:lefiNonDefault
values_	lef/include/lefiViaRule.hpp	/^  char**  values_;$/;"	m	class:lefiViaRule
values_	lef/lef/lefiLayer.hpp	/^  char**  values_;$/;"	m	class:lefiLayer
values_	lef/lef/lefiNonDefault.hpp	/^  char**  values_;$/;"	m	class:lefiNonDefault
values_	lef/lef/lefiViaRule.hpp	/^  char**  values_;$/;"	m	class:lefiViaRule
variableFallMax	def/def/defiIOTiming.cpp	/^double defiIOTiming::variableFallMax() const {$/;"	f	class:defiIOTiming
variableFallMax_	def/def/defiIOTiming.hpp	/^  double variableFallMax_;$/;"	m	class:defiIOTiming
variableFallMin	def/def/defiIOTiming.cpp	/^double defiIOTiming::variableFallMin() const {$/;"	f	class:defiIOTiming
variableFallMin_	def/def/defiIOTiming.hpp	/^  double variableFallMin_;$/;"	m	class:defiIOTiming
variableRiseMax	def/def/defiIOTiming.cpp	/^double defiIOTiming::variableRiseMax() const {$/;"	f	class:defiIOTiming
variableRiseMax_	def/def/defiIOTiming.hpp	/^  double variableRiseMax_;$/;"	m	class:defiIOTiming
variableRiseMin	def/def/defiIOTiming.cpp	/^double defiIOTiming::variableRiseMin() const {$/;"	f	class:defiIOTiming
variableRiseMin_	def/def/defiIOTiming.hpp	/^  double variableRiseMin_;$/;"	m	class:defiIOTiming
vers	def/defdiff/diffDefRW.cpp	/^int vers(defrCallbackType_e c, double d, defiUserData ud) {$/;"	f
vers	def/defrw/defrw.cpp	/^int vers(defrCallbackType_e c, double d, defiUserData ud) {$/;"	f
versStr	def/defrw/defrw.cpp	/^int versStr(defrCallbackType_e c, const char* versionName, defiUserData ud) {$/;"	f
version	lef/lef/lef.y	/^version: K_VERSION { lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING ';'$/;"	l
versionCB	def/defwrite/defwriteCbs.cpp	/^int versionCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
versionCB	lef/lefdiff/diffLefRW.cpp	/^int versionCB(lefrCallbackType_e c, double num, lefiUserData ud) {$/;"	f
versionCB	lef/lefrw/lefrw.cpp	/^int versionCB(lefrCallbackType_e c, double num, lefiUserData) {$/;"	f
versionCB	lef/lefwrite/lefwriteCbs.cpp	/^int versionCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
versionNum	lef/include/lefrData.hpp	/^    double  versionNum; $/;"	m	class:lefrData
versionNum	lef/lef/lefrData.hpp	/^    double  versionNum; $/;"	m	class:lefrData
versionNum	lef/lef/lefwWriter.cpp	/^static double versionNum = 5.7;  \/\/ default to 5.7$/;"	v	file:
versionStrCB	lef/lefrw/lefrw.cpp	/^int versionStrCB(lefrCallbackType_e c, const char* versionName, lefiUserData) {$/;"	f
versionWarnings	def/def/defrData.hpp	/^    int  versionWarnings; $/;"	m	class:defrData
version_stmt	def/def/def.y	/^version_stmt:  \/\/ empty $/;"	l
via	def/def/def.y	/^via: K_VIAS NUMBER ';' $/;"	l
via	lef/lef/lef.y	/^via: start_via  { lefData->hasViaRule_layer = 0; } via_option end_via$/;"	l
viaBottomMask	def/def/defiFill.cpp	/^int defiFill::viaBottomMask() const {$/;"	f	class:defiFill
viaBottomMask	def/def/defiPinCap.cpp	/^int defiPin::viaBottomMask(int index) const {$/;"	f	class:defiPin
viaBottomMask	def/def/defiPinCap.cpp	/^int defiPinPort::viaBottomMask(int index) const {$/;"	f	class:defiPinPort
viaCB	def/defwrite/defwriteCbs.cpp	/^int viaCB(defwCallbackType_e c, defiUserData ud) {$/;"	f
viaCB	lef/lefdiff/diffLefRW.cpp	/^int viaCB(lefrCallbackType_e c, lefiVia* via, lefiUserData ud) {$/;"	f
viaCB	lef/lefrw/lefrw.cpp	/^int viaCB(lefrCallbackType_e c, lefiVia* via, lefiUserData) {$/;"	f
viaCB	lef/lefwrite/lefwriteCbs.cpp	/^int viaCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
viaCutMask	def/def/defiFill.cpp	/^int defiFill::viaCutMask() const {$/;"	f	class:defiFill
viaCutMask	def/def/defiPinCap.cpp	/^int defiPin::viaCutMask(int index) const {$/;"	f	class:defiPin
viaCutMask	def/def/defiPinCap.cpp	/^int defiPinPort::viaCutMask(int index) const {$/;"	f	class:defiPinPort
viaLayer	lef/include/lefrData.hpp	/^    int  viaLayer; $/;"	m	class:lefrData
viaLayer	lef/lef/lefrData.hpp	/^    int  viaLayer; $/;"	m	class:lefrData
viaMask_	def/def/defiPinCap.hpp	/^  int    *viaMask_;$/;"	m	class:defiPinPort
viaMask_	def/def/defiPinCap.hpp	/^  int *viaMask_;                    \/\/ 5.8$/;"	m	class:defiPin
viaMasks_	def/def/defiNet.hpp	/^  int*                viaMasks_;$/;"	m	class:defiNet
viaName	def/def/defiFill.cpp	/^const char* defiFill::viaName() const {$/;"	f	class:defiFill
viaName	def/def/defiNet.cpp	/^const char* defiNet::viaName(int index) const {$/;"	f	class:defiNet
viaName	def/def/defiNonDefault.cpp	/^const char* defiNonDefault::viaName(int index) const {$/;"	f	class:defiNonDefault
viaName	def/def/defiPinCap.cpp	/^const char* defiPin::viaName(int index) const {$/;"	f	class:defiPin
viaName	def/def/defiPinCap.cpp	/^const char* defiPinPort::viaName(int index) const {$/;"	f	class:defiPinPort
viaName	lef/include/lefrData.hpp	/^    char*  viaName; $/;"	m	class:lefrData
viaName	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::viaName(int index) const$/;"	f	class:lefiNonDefault
viaName	lef/lef/lefiViaRule.cpp	/^lefiViaRule::viaName(int index) const$/;"	f	class:lefiViaRule
viaName	lef/lef/lefrData.hpp	/^    char*  viaName; $/;"	m	class:lefrData
viaNameLength_	def/def/defiFill.hpp	/^  int   viaNameLength_;             \/\/ 5.7$/;"	m	class:defiFill
viaName_	def/def/defiFill.hpp	/^  char* viaName_;                   \/\/ 5.7$/;"	m	class:defiFill
viaNames_	def/def/defiNet.hpp	/^  char**              viaNames_;                   $/;"	m	class:defiNet
viaNames_	def/def/defiNonDefault.hpp	/^  char**  viaNames_;$/;"	m	class:defiNonDefault
viaNames_	def/def/defiPinCap.hpp	/^  char** viaNames_;                 \/\/ 5.7$/;"	m	class:defiPin
viaNames_	def/def/defiPinCap.hpp	/^  char** viaNames_;$/;"	m	class:defiPinPort
viaOpc_	def/def/defiFill.hpp	/^  int   viaOpc_;                    \/\/ 5.7$/;"	m	class:defiFill
viaOrient	def/def/defiNet.cpp	/^const int defiNet::viaOrient(int index) const {$/;"	f	class:defiNet
viaOrientStr	def/def/defiNet.cpp	/^const char* defiNet::viaOrientStr(int index) const  {$/;"	f	class:defiNet
viaOrients_	def/def/defiNet.hpp	/^  int*                viaOrients_;$/;"	m	class:defiNet
viaPtX	def/def/defiPinCap.cpp	/^int defiPin::viaPtX(int index) const {$/;"	f	class:defiPin
viaPtX	def/def/defiPinCap.cpp	/^int defiPinPort::viaPtX(int index) const {$/;"	f	class:defiPinPort
viaPtY	def/def/defiPinCap.cpp	/^int defiPin::viaPtY(int index) const {$/;"	f	class:defiPin
viaPtY	def/def/defiPinCap.cpp	/^int defiPinPort::viaPtY(int index) const {$/;"	f	class:defiPinPort
viaPts_	def/def/defiFill.hpp	/^  struct defiPoints** viaPts_;      \/\/ 5.7$/;"	m	class:defiFill	typeref:struct:defiFill::defiPoints
viaPts_	def/def/defiNet.hpp	/^  struct defiPoints** viaPts_;      \/\/ 5.8                  $/;"	m	class:defiNet	typeref:struct:defiNet::defiPoints
viaRouteStatus	def/def/defiNet.cpp	/^const char* defiNet::viaRouteStatus(int index) const {$/;"	f	class:defiNet
viaRouteStatusShieldName	def/def/defiNet.cpp	/^const char* defiNet::viaRouteStatusShieldName(int index) const {$/;"	f	class:defiNet
viaRouteStatusShieldNames_	def/def/defiNet.hpp	/^  char**              viaRouteStatusShieldNames_;$/;"	m	class:defiNet
viaRouteStatus_	def/def/defiNet.hpp	/^  char**              viaRouteStatus_;$/;"	m	class:defiNet
viaRule	def/def/defiVia.cpp	/^void defiVia::viaRule(char** viaRuleName, int* xSize, int* ySize,$/;"	f	class:defiVia
viaRule	def/def/defrData.hpp	/^    int  viaRule; \/\/ keep track the viarule has called first$/;"	m	class:defrData
viaRule	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::viaRule(int index) const$/;"	f	class:lefiNonDefault
viaRuleCB	lef/lefdiff/diffLefRW.cpp	/^int viaRuleCB(lefrCallbackType_e c, lefiViaRule* viaRule, lefiUserData ud) {$/;"	f
viaRuleCB	lef/lefrw/lefrw.cpp	/^int viaRuleCB(lefrCallbackType_e c, lefiViaRule* viaRule, lefiUserData) {$/;"	f
viaRuleCB	lef/lefwrite/lefwriteCbs.cpp	/^int viaRuleCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
viaRuleHasDir	lef/include/lefrData.hpp	/^    int  viaRuleHasDir; $/;"	m	class:lefrData
viaRuleHasDir	lef/lef/lefrData.hpp	/^    int  viaRuleHasDir; $/;"	m	class:lefrData
viaRuleHasEnc	lef/include/lefrData.hpp	/^    int  viaRuleHasEnc; $/;"	m	class:lefrData
viaRuleHasEnc	lef/lef/lefrData.hpp	/^    int  viaRuleHasEnc; $/;"	m	class:lefrData
viaRuleLayer	lef/include/lefrData.hpp	/^    int  viaRuleLayer; $/;"	m	class:lefrData
viaRuleLayer	lef/lef/lefrData.hpp	/^    int  viaRuleLayer; $/;"	m	class:lefrData
viaRuleLength_	def/def/defiVia.hpp	/^  int   viaRuleLength_;     \/\/ 5.6$/;"	m	class:defiVia
viaRuleName	def/def/defiNonDefault.cpp	/^const char* defiNonDefault::viaRuleName(int index) const {$/;"	f	class:defiNonDefault
viaRuleName	lef/include/lefrData.hpp	/^    char*  viaRuleName; $/;"	m	class:lefrData
viaRuleName	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::viaRuleName(int index) const$/;"	f	class:lefiNonDefault
viaRuleName	lef/lef/lefiVia.cpp	/^lefiVia::viaRuleName() const$/;"	f	class:lefiVia
viaRuleName	lef/lef/lefrData.hpp	/^    char*  viaRuleName; $/;"	m	class:lefrData
viaRuleName_	lef/include/lefiVia.hpp	/^  char* viaRuleName_;          \/\/ 5.6$/;"	m	class:lefiVia
viaRuleName_	lef/lef/lefiVia.hpp	/^  char* viaRuleName_;          \/\/ 5.6$/;"	m	class:lefiVia
viaRuleNames_	def/def/defiNonDefault.hpp	/^  char**  viaRuleNames_;$/;"	m	class:defiNonDefault
viaRuleWarnings	lef/include/lefrData.hpp	/^    int  viaRuleWarnings; $/;"	m	class:lefrData
viaRuleWarnings	lef/lef/lefrData.hpp	/^    int  viaRuleWarnings; $/;"	m	class:lefrData
viaRule_	def/def/defiVia.hpp	/^  char* viaRule_;           \/\/ 5.6$/;"	m	class:defiVia
viaRulesAllocated_	def/def/defiNonDefault.hpp	/^  int     viaRulesAllocated_;$/;"	m	class:defiNonDefault
viaRules_	lef/include/lefiNonDefault.hpp	/^  lefiVia** viaRules_;$/;"	m	class:lefiNonDefault
viaRules_	lef/lef/lefiNonDefault.hpp	/^  lefiVia** viaRules_;$/;"	m	class:lefiNonDefault
viaShapeType	def/def/defiNet.cpp	/^const char* defiNet::viaShapeType(int index) const {$/;"	f	class:defiNet
viaShapeTypes_	def/def/defiNet.hpp	/^  char**              viaShapeTypes_;$/;"	m	class:defiNet
viaTopMask	def/def/defiFill.cpp	/^int defiFill::viaTopMask() const {$/;"	f	class:defiFill
viaTopMask	def/def/defiPinCap.cpp	/^int defiPin::viaTopMask(int index) const {$/;"	f	class:defiPin
viaTopMask	def/def/defiPinCap.cpp	/^int defiPinPort::viaTopMask(int index) const {$/;"	f	class:defiPinPort
viaWarnings	def/def/defrData.hpp	/^    int  viaWarnings; $/;"	m	class:defrData
viaWarnings	lef/include/lefrData.hpp	/^    int  viaWarnings; $/;"	m	class:lefrData
viaWarnings	lef/lef/lefrData.hpp	/^    int  viaWarnings; $/;"	m	class:lefrData
viaWidth	lef/lef/lefiLayer.cpp	/^lefiLayer::viaWidth() const$/;"	f	class:lefiLayer
viaWidth_	lef/include/lefiLayer.hpp	/^  double  viaWidth_;$/;"	m	class:lefiLayer
viaWidth_	lef/lef/lefiLayer.hpp	/^  double  viaWidth_;$/;"	m	class:lefiLayer
viaX_	def/def/defiPinCap.hpp	/^  int    *viaX_;$/;"	m	class:defiPinPort
viaX_	def/def/defiPinCap.hpp	/^  int *viaX_;                       \/\/ 5.7$/;"	m	class:defiPin
viaY_	def/def/defiPinCap.hpp	/^  int    *viaY_;$/;"	m	class:defiPinPort
viaY_	def/def/defiPinCap.hpp	/^  int *viaY_;                       \/\/ 5.7$/;"	m	class:defiPin
via_declaration	def/def/def.y	/^via_declaration: '-' {defData->dumb_mode = 1;defData->no_num = 1; } T_STRING$/;"	l
via_declarations	def/def/def.y	/^via_declarations: \/\/ empty $/;"	l
via_end	def/def/def.y	/^via_end: K_END K_VIAS$/;"	l
via_foreign	lef/lef/lef.y	/^via_foreign:$/;"	l
via_geometries	lef/lef/lef.y	/^via_geometries:$/;"	l
via_geometry	lef/lef/lef.y	/^via_geometry:$/;"	l
via_keyword	lef/lef/lef.y	/^via_keyword : K_VIA                 \/\/needed to have a VIA named via$/;"	l
via_layer	lef/lef/lef.y	/^via_layer: K_LAYER {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
via_layer_rule	lef/lef/lef.y	/^via_layer_rule: via_layer via_geometries$/;"	l
via_more_options	lef/lef/lef.y	/^via_more_options: \/\/ empty $/;"	l
via_name	lef/lef/lef.y	/^via_name: via_keyword T_STRING ';'$/;"	l
via_name_value_pair	lef/lef/lef.y	/^via_name_value_pair:$/;"	l
via_names	lef/lef/lef.y	/^via_names:$/;"	l
via_option	lef/lef/lef.y	/^via_option: via_viarule$/;"	l
via_other_option	lef/lef/lef.y	/^via_other_option:$/;"	l
via_other_options	lef/lef/lef.y	/^via_other_options: via_other_option$/;"	l
via_placement	lef/lef/lef.y	/^via_placement:$/;"	l
via_prop_list	lef/lef/lef.y	/^via_prop_list:$/;"	l
via_section	def/def/def.y	/^via_section: via via_declarations via_end$/;"	l
via_viarule	lef/lef/lef.y	/^via_viarule: K_VIARULE {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
via_viarule_option	lef/lef/lef.y	/^via_viarule_option: K_ROWCOL int_number int_number ';'$/;"	l
via_viarule_options	lef/lef/lef.y	/^via_viarule_options: \/\/ empty $/;"	l
viarule	lef/lef/lef.y	/^viarule:$/;"	l
viarule_generate	lef/lef/lef.y	/^viarule_generate:$/;"	l
viarule_generate_default	lef/lef/lef.y	/^viarule_generate_default:  \/\/ optional $/;"	l
viarule_keyword	lef/lef/lef.y	/^viarule_keyword : K_VIARULE { lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
viarule_layer	lef/lef/lef.y	/^viarule_layer: viarule_layer_name viarule_layer_options$/;"	l
viarule_layer_list	lef/lef/lef.y	/^viarule_layer_list :$/;"	l
viarule_layer_name	lef/lef/lef.y	/^viarule_layer_name: K_LAYER {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
viarule_layer_option	lef/lef/lef.y	/^viarule_layer_option:$/;"	l
viarule_layer_options	lef/lef/lef.y	/^viarule_layer_options:$/;"	l
viarule_prop	lef/lef/lef.y	/^viarule_prop: K_PROPERTY { lefData->lefDumbMode = 10000000;} viarule_prop_list ';'$/;"	l
viarule_prop	lef/lef/lef.y	/^viarule_prop:$/;"	l
viarule_prop_list	lef/lef/lef.y	/^viarule_prop_list:$/;"	l
viarule_props	lef/lef/lef.y	/^viarule_props:$/;"	l
viasAllocated_	def/def/defiNonDefault.hpp	/^  int     viasAllocated_;$/;"	m	class:defiNonDefault
viasAllocated_	def/def/defiPinCap.hpp	/^  int    viasAllocated_;$/;"	m	class:defiPinPort
viasAllocated_	def/def/defiPinCap.hpp	/^  int viasAllocated_;               \/\/ 5.7$/;"	m	class:defiPin
viasAllocated_	lef/include/lefiViaRule.hpp	/^  int viasAllocated_;$/;"	m	class:lefiViaRule
viasAllocated_	lef/lef/lefiViaRule.hpp	/^  int viasAllocated_;$/;"	m	class:lefiViaRule
vias_	lef/include/lefiViaRule.hpp	/^  char** vias_;$/;"	m	class:lefiViaRule
vias_	lef/lef/lefiViaRule.hpp	/^  char** vias_;$/;"	m	class:lefiViaRule
victim	lef/lef/lef.y	/^victim: K_VICTIMLENGTH int_number ';'$/;"	l
victim	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::victim(int index)$/;"	f	class:lefiCorrectionResistance
victim	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::victim(int index) const$/;"	f	class:lefiNoiseResistance
victim_list	lef/lef/lef.y	/^victim_list:$/;"	l
victimsAllocated_	lef/include/lefiCrossTalk.hpp	/^  int victimsAllocated_;$/;"	m	class:lefiCorrectionResistance
victimsAllocated_	lef/include/lefiCrossTalk.hpp	/^  int victimsAllocated_;$/;"	m	class:lefiNoiseResistance
victimsAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int victimsAllocated_;$/;"	m	class:lefiCorrectionResistance
victimsAllocated_	lef/lef/lefiCrossTalk.hpp	/^  int victimsAllocated_;$/;"	m	class:lefiNoiseResistance
victims_	lef/include/lefiCrossTalk.hpp	/^  lefiCorrectionVictim** victims_;$/;"	m	class:lefiCorrectionResistance
victims_	lef/include/lefiCrossTalk.hpp	/^  lefiNoiseVictim** victims_;$/;"	m	class:lefiNoiseResistance
victims_	lef/lef/lefiCrossTalk.hpp	/^  lefiCorrectionVictim** victims_;$/;"	m	class:lefiCorrectionResistance
victims_	lef/lef/lefiCrossTalk.hpp	/^  lefiNoiseVictim** victims_;$/;"	m	class:lefiNoiseResistance
virtual_is_keyword	def/def/defrData.hpp	/^    int  virtual_is_keyword; $/;"	m	class:defrData
virtual_pt	def/def/def.y	/^virtual_pt :$/;"	l
virtual_statement	def/def/def.y	/^virtual_statement :$/;"	l
vnoiselist	lef/lef/lef.y	/^vnoiselist:$/;"	l
voltage	def/def/defiNet.cpp	/^double defiNet::voltage() const {$/;"	f	class:defiNet
voltage	lef/lef/lefiUnits.cpp	/^lefiUnits::voltage() const$/;"	f	class:lefiUnits
voltage_	def/def/defiNet.hpp	/^  double voltage_;$/;"	m	class:defiNet
voltage_	lef/include/lefiUnits.hpp	/^  double voltage_;$/;"	m	class:lefiUnits
voltage_	lef/lef/lefiUnits.hpp	/^  double voltage_;$/;"	m	class:lefiUnits
vpin	def/def/defiNet.cpp	/^const defiVpin* defiNet::vpin(int index) const {$/;"	f	class:defiNet
vpin	def/def/defiNet.cpp	/^defiVpin* defiNet::vpin(int index) {$/;"	f	class:defiNet
vpin_begin	def/def/def.y	/^vpin_begin: '+' K_VPIN {defData->dumb_mode = 1; defData->no_num = 1;} T_STRING$/;"	l
vpin_layer_opt	def/def/def.y	/^vpin_layer_opt: \/\/ empty $/;"	l
vpin_options	def/def/def.y	/^vpin_options: \/\/ empty $/;"	l
vpin_status	def/def/def.y	/^vpin_status: K_PLACED $/;"	l
vpin_stmt	def/def/def.y	/^vpin_stmt: vpin_begin vpin_layer_opt pt pt $/;"	l
vpinsAllocated_	def/def/defiNet.hpp	/^  long long   vpinsAllocated_;$/;"	m	class:defiNet
vpins_	def/def/defiNet.hpp	/^  defiVpin**  vpins_;$/;"	m	class:defiNet
warningCB	lef/lefrw/lefrw.cpp	/^void warningCB(const char* msg) {$/;"	f
warningMsg	def/def/defrData.hpp	/^    char*  warningMsg; $/;"	m	class:defrData
wdist_	def/def/defiNet.hpp	/^  double*     wdist_;$/;"	m	class:defiNet
weight	def/def/def.y	/^weight: '+' K_WEIGHT NUMBER $/;"	l
weight	def/def/defiComponent.cpp	/^int defiComponent::weight() const {$/;"	f	class:defiComponent
weight	def/def/defiNet.cpp	/^int defiNet::weight() const {$/;"	f	class:defiNet
weight_	def/def/defiComponent.hpp	/^  int weight_;$/;"	m	class:defiComponent
weight_	def/def/defiNet.hpp	/^  int       weight_;        \/\/ net weight$/;"	m	class:defiNet
what	def/def/defiDefs.hpp	/^    int what;$/;"	m	struct:deftoken
what	lef/include/lefiDefs.hpp	/^    int what;$/;"	m	struct:token
what	lef/lef/lefiDefs.hpp	/^    int what;$/;"	m	struct:token
width	def/def/def.y	/^width: NUMBER$/;"	l
width	lef/lef/lefiLayer.cpp	/^lefiInfluence::width(int index) const$/;"	f	class:lefiInfluence
width	lef/lef/lefiLayer.cpp	/^lefiLayer::width() const$/;"	f	class:lefiLayer
width	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::width(int index) const$/;"	f	class:lefiLayerDensity
width	lef/lef/lefiLayer.cpp	/^lefiParallel::width(int index) const$/;"	f	class:lefiParallel
width	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::width(int index) const$/;"	f	class:lefiTwoWidths
widthMax	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::widthMax() const$/;"	f	class:lefiViaRuleLayer
widthMax_	lef/include/lefiViaRule.hpp	/^  double widthMax_;$/;"	m	class:lefiViaRuleLayer
widthMax_	lef/lef/lefiViaRule.hpp	/^  double widthMax_;$/;"	m	class:lefiViaRuleLayer
widthMin	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::widthMin() const$/;"	f	class:lefiViaRuleLayer
widthMin_	lef/include/lefiViaRule.hpp	/^  double widthMin_;$/;"	m	class:lefiViaRuleLayer
widthMin_	lef/lef/lefiViaRule.hpp	/^  double widthMin_;$/;"	m	class:lefiViaRuleLayer
widthPRL	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::widthPRL(int index) const$/;"	f	class:lefiTwoWidths
widthRule	def/def/defiNet.cpp	/^void defiNet::widthRule(int index, char** layer, double* dist) const {$/;"	f	class:defiNet
widthSpacing	lef/lef/lefiLayer.cpp	/^lefiParallel::widthSpacing(int  iWidth,$/;"	f	class:lefiParallel
widthSpacing	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::widthSpacing(int iWidth,$/;"	f	class:lefiTwoWidths
widthSpacing_	lef/include/lefiLayer.hpp	/^  double* widthSpacing_;$/;"	m	class:lefiParallel
widthSpacing_	lef/include/lefiLayer.hpp	/^  double* widthSpacing_;$/;"	m	class:lefiTwoWidths
widthSpacing_	lef/lef/lefiLayer.hpp	/^  double* widthSpacing_;$/;"	m	class:lefiParallel
widthSpacing_	lef/lef/lefiLayer.hpp	/^  double* widthSpacing_;$/;"	m	class:lefiTwoWidths
width_	def/def/defiBlockage.hpp	/^  int    width_;$/;"	m	class:defiBlockage
width_	def/def/defiNonDefault.hpp	/^  double* width_;$/;"	m	class:defiNonDefault
width_	lef/include/lefiLayer.hpp	/^  double width_;$/;"	m	class:lefiLayer
width_	lef/include/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiInfluence
width_	lef/include/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiParallel
width_	lef/include/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiTwoWidths
width_	lef/include/lefiNonDefault.hpp	/^  double* width_;$/;"	m	class:lefiNonDefault
width_	lef/lef/lefiLayer.hpp	/^  double width_;$/;"	m	class:lefiLayer
width_	lef/lef/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiInfluence
width_	lef/lef/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiParallel
width_	lef/lef/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiTwoWidths
width_	lef/lef/lefiNonDefault.hpp	/^  double* width_;$/;"	m	class:lefiNonDefault
widthsAllocated_	def/def/defiNet.hpp	/^  long long   widthsAllocated_;$/;"	m	class:defiNet
widths_	lef/include/lefiLayer.hpp	/^  double* widths_;$/;"	m	class:lefiLayerDensity
widths_	lef/lef/lefiLayer.hpp	/^  double* widths_;$/;"	m	class:lefiLayerDensity
wire	def/def/defiNet.cpp	/^const defiWire* defiNet::wire(int index) const {$/;"	f	class:defiNet
wire	def/def/defiNet.cpp	/^const defiWire* defiSubnet::wire(int index) const {$/;"	f	class:defiSubnet
wire	def/def/defiNet.cpp	/^defiWire* defiNet::wire(int index) {$/;"	f	class:defiNet
wire	def/def/defiNet.cpp	/^defiWire* defiSubnet::wire(int index) {$/;"	f	class:defiSubnet
wireExt_	def/def/defiNonDefault.hpp	/^  double* wireExt_;$/;"	m	class:defiNonDefault
wireExtension	lef/lef/lefiLayer.cpp	/^lefiLayer::wireExtension() const$/;"	f	class:lefiLayer
wireExtension_	lef/include/lefiLayer.hpp	/^  double wireExtension_;$/;"	m	class:lefiLayer
wireExtension_	lef/include/lefiNonDefault.hpp	/^  double* wireExtension_;$/;"	m	class:lefiNonDefault
wireExtension_	lef/lef/lefiLayer.hpp	/^  double wireExtension_;$/;"	m	class:lefiLayer
wireExtension_	lef/lef/lefiNonDefault.hpp	/^  double* wireExtension_;$/;"	m	class:lefiNonDefault
wireShieldName_	def/def/defiNet.hpp	/^  char*      wireShieldName_;    \/\/ It only set from specialnet SHIELD, 5.4$/;"	m	class:defiWire
wireShieldNetName	def/def/defiNet.cpp	/^const char* defiWire::wireShieldNetName() const {$/;"	f	class:defiWire
wireType	def/def/defiNet.cpp	/^const char* defiWire::wireType() const {$/;"	f	class:defiWire
wiredlogic_rule	def/def/def.y	/^wiredlogic_rule: '-' K_WIREDLOGIC { defData->dumb_mode = 1; defData->no_num = 1; } T_STRING$/;"	l
wireextension	lef/lef/lef.y	/^wireextension: K_NOWIREEXTENSIONATPIN K_ON ';'$/;"	l
wiresAllocated_	def/def/defiNet.hpp	/^  long long   wiresAllocated_;   \/\/ allocated size of wire paths array$/;"	m	class:defiNet
wiresAllocated_	def/def/defiNet.hpp	/^  long long  wiresAllocated_;    \/\/ number of wires allocated in the subnet$/;"	m	class:defiSubnet
wires_	def/def/defiNet.hpp	/^  defiWire**  wires_;            \/\/ this replace the paths$/;"	m	class:defiNet
wires_	def/def/defiNet.hpp	/^  defiWire** wires_;             \/\/ this replace the paths$/;"	m	class:defiSubnet
wlayers_	def/def/defiNet.hpp	/^  char**      wlayers_;$/;"	m	class:defiNet
x	def/cdef/defiTypedefs.h	/^  int x;$/;"	m	struct:defiPnt
x	def/cdef/defiTypedefs.h	/^  int* x;$/;"	m	struct:defiPoints
x	def/def/defiDefs.hpp	/^    int x;$/;"	m	struct:defpoint
x	def/def/defiMisc.hpp	/^  int* x;$/;"	m	struct:defiPoints
x	def/def/defiPath.hpp	/^  int x;$/;"	m	struct:defiPnt
x	def/def/defiRowTrack.cpp	/^double defiRow::x() const {$/;"	f	class:defiRow
x	def/def/defiRowTrack.cpp	/^double defiTrack::x() const {$/;"	f	class:defiTrack
x	def/def/defiRowTrack.cpp	/^int defiGcellGrid::x() const {$/;"	f	class:defiGcellGrid
x	lef/clef/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiGeomVia
x	lef/clef/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiGeomViaIter
x	lef/clef/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiPoints
x	lef/clef/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPath
x	lef/clef/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPathIter
x	lef/clef/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPolygon
x	lef/clef/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPolygonIter
x	lef/include/lefiDefs.hpp	/^    double x;$/;"	m	struct:point
x	lef/include/lefiMisc.hpp	/^  double x;$/;"	m	struct:lefiGeomVia
x	lef/include/lefiMisc.hpp	/^  double x;$/;"	m	struct:lefiGeomViaIter
x	lef/include/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPath
x	lef/include/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPathIter
x	lef/include/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPolygon
x	lef/include/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPolygonIter
x	lef/include/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiGeomVia
x	lef/include/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiGeomViaIter
x	lef/include/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiPoints
x	lef/include/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPath
x	lef/include/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPathIter
x	lef/include/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPolygon
x	lef/include/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPolygonIter
x	lef/include/lefiUtil.hpp	/^  double x;$/;"	m	struct:lefiPoints
x	lef/lef/lefiDefs.hpp	/^    double x;$/;"	m	struct:point
x	lef/lef/lefiMisc.cpp	/^lefiSitePattern::x() const$/;"	f	class:lefiSitePattern
x	lef/lef/lefiMisc.hpp	/^  double x;$/;"	m	struct:lefiGeomVia
x	lef/lef/lefiMisc.hpp	/^  double x;$/;"	m	struct:lefiGeomViaIter
x	lef/lef/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPath
x	lef/lef/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPathIter
x	lef/lef/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPolygon
x	lef/lef/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPolygonIter
x	lef/lef/lefiUtil.hpp	/^  double x;$/;"	m	struct:lefiPoints
xBotEnc	lef/lef/lefiVia.cpp	/^lefiVia::xBotEnc() const$/;"	f	class:lefiVia
xBotEnc_	def/def/defiVia.hpp	/^  int   xBotEnc_;           \/\/ 5.6$/;"	m	class:defiVia
xBotEnc_	lef/include/lefiVia.hpp	/^  double xBotEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
xBotEnc_	lef/lef/lefiVia.hpp	/^  double xBotEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
xBotOffset	lef/lef/lefiVia.cpp	/^lefiVia::xBotOffset() const$/;"	f	class:lefiVia
xBotOffset_	def/def/defiVia.hpp	/^  int   xBotOffset_;        \/\/ 5.6$/;"	m	class:defiVia
xBotOs_	lef/include/lefiVia.hpp	/^  double xBotOs_;              \/\/ 5.6$/;"	m	class:lefiVia
xBotOs_	lef/lef/lefiVia.hpp	/^  double xBotOs_;              \/\/ 5.6$/;"	m	class:lefiVia
xCutSize	lef/lef/lefiVia.cpp	/^lefiVia::xCutSize() const$/;"	f	class:lefiVia
xCutSpacing	lef/lef/lefiVia.cpp	/^lefiVia::xCutSpacing() const$/;"	f	class:lefiVia
xCutSpacing_	def/def/defiVia.hpp	/^  int   xCutSpacing_;       \/\/ 5.6$/;"	m	class:defiVia
xLoc	def/def/defiNet.cpp	/^int defiVpin::xLoc() const {$/;"	f	class:defiVpin
xLoc_	def/def/defiNet.hpp	/^  int xLoc_;$/;"	m	class:defiVpin
xNum	def/def/defiRowTrack.cpp	/^double defiRow::xNum() const {$/;"	f	class:defiRow
xNum	def/def/defiRowTrack.cpp	/^double defiTrack::xNum() const {$/;"	f	class:defiTrack
xNum	def/def/defiRowTrack.cpp	/^int defiGcellGrid::xNum() const {$/;"	f	class:defiGcellGrid
xNum_	def/def/defiRowTrack.hpp	/^  double xNum_;$/;"	m	class:defiRow
xNum_	def/def/defiRowTrack.hpp	/^  double xNum_;$/;"	m	class:defiTrack
xNum_	def/def/defiRowTrack.hpp	/^  int xNum_;$/;"	m	class:defiGcellGrid
xOffset	lef/lef/lefiVia.cpp	/^lefiVia::xOffset() const$/;"	f	class:lefiVia
xOffset_	def/def/defiVia.hpp	/^  int   xOffset_;           \/\/ 5.6$/;"	m	class:defiVia
xOffset_	lef/include/lefiVia.hpp	/^  double xOffset_;             \/\/ 5.6$/;"	m	class:lefiVia
xOffset_	lef/lef/lefiVia.hpp	/^  double xOffset_;             \/\/ 5.6$/;"	m	class:lefiVia
xSize_	def/def/defiVia.hpp	/^  int xSize_;               \/\/ 5.6$/;"	m	class:defiVia
xSize_	lef/include/lefiVia.hpp	/^  double xSize_;               \/\/ 5.6$/;"	m	class:lefiVia
xSize_	lef/lef/lefiVia.hpp	/^  double xSize_;               \/\/ 5.6$/;"	m	class:lefiVia
xSpacing_	lef/include/lefiVia.hpp	/^  double xSpacing_;            \/\/ 5.6$/;"	m	class:lefiVia
xSpacing_	lef/lef/lefiVia.hpp	/^  double xSpacing_;            \/\/ 5.6$/;"	m	class:lefiVia
xStart	lef/clef/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomPathIter
xStart	lef/clef/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomPolygonIter
xStart	lef/clef/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomRectIter
xStart	lef/clef/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomViaIter
xStart	lef/include/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomPathIter
xStart	lef/include/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomPolygonIter
xStart	lef/include/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomRectIter
xStart	lef/include/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomViaIter
xStart	lef/include/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomPathIter
xStart	lef/include/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomPolygonIter
xStart	lef/include/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomRectIter
xStart	lef/include/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomViaIter
xStart	lef/lef/lefiMisc.cpp	/^lefiSitePattern::xStart() const$/;"	f	class:lefiSitePattern
xStart	lef/lef/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomPathIter
xStart	lef/lef/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomPolygonIter
xStart	lef/lef/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomRectIter
xStart	lef/lef/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomViaIter
xStart_	lef/include/lefiMisc.hpp	/^  double xStart_;$/;"	m	class:lefiGeometries
xStart_	lef/include/lefiMisc.hpp	/^  double xStart_;$/;"	m	class:lefiSitePattern
xStart_	lef/lef/lefiMisc.hpp	/^  double xStart_;$/;"	m	class:lefiGeometries
xStart_	lef/lef/lefiMisc.hpp	/^  double xStart_;$/;"	m	class:lefiSitePattern
xStep	def/def/defiRowTrack.cpp	/^double defiGcellGrid::xStep() const {$/;"	f	class:defiGcellGrid
xStep	def/def/defiRowTrack.cpp	/^double defiRow::xStep() const {$/;"	f	class:defiRow
xStep	def/def/defiRowTrack.cpp	/^double defiTrack::xStep() const {$/;"	f	class:defiTrack
xStep	def/def/defrData.hpp	/^    double xStep;$/;"	m	class:defrData
xStep	lef/clef/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomPathIter
xStep	lef/clef/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomPolygonIter
xStep	lef/clef/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomRectIter
xStep	lef/clef/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomViaIter
xStep	lef/include/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomPathIter
xStep	lef/include/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomPolygonIter
xStep	lef/include/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomRectIter
xStep	lef/include/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomViaIter
xStep	lef/include/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomPathIter
xStep	lef/include/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomPolygonIter
xStep	lef/include/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomRectIter
xStep	lef/include/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomViaIter
xStep	lef/lef/lefiMisc.cpp	/^lefiSitePattern::xStep() const$/;"	f	class:lefiSitePattern
xStep	lef/lef/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomPathIter
xStep	lef/lef/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomPolygonIter
xStep	lef/lef/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomRectIter
xStep	lef/lef/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomViaIter
xStep_	def/def/defiRowTrack.hpp	/^  double xStep_;$/;"	m	class:defiGcellGrid
xStep_	def/def/defiRowTrack.hpp	/^  double xStep_;$/;"	m	class:defiRow
xStep_	def/def/defiRowTrack.hpp	/^  double xStep_;$/;"	m	class:defiTrack
xStep_	lef/include/lefiMisc.hpp	/^  double xStep_;$/;"	m	class:lefiGeometries
xStep_	lef/include/lefiMisc.hpp	/^  double xStep_;$/;"	m	class:lefiSitePattern
xStep_	lef/lef/lefiMisc.hpp	/^  double xStep_;$/;"	m	class:lefiGeometries
xStep_	lef/lef/lefiMisc.hpp	/^  double xStep_;$/;"	m	class:lefiSitePattern
xTalk_	def/def/defiNet.hpp	/^  int         xTalk_;$/;"	m	class:defiNet
xTopEnc	lef/lef/lefiVia.cpp	/^lefiVia::xTopEnc() const$/;"	f	class:lefiVia
xTopEnc_	def/def/defiVia.hpp	/^  int   xTopEnc_;           \/\/ 5.6$/;"	m	class:defiVia
xTopEnc_	lef/include/lefiVia.hpp	/^  double xTopEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
xTopEnc_	lef/lef/lefiVia.hpp	/^  double xTopEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
xTopOffset	lef/lef/lefiVia.cpp	/^lefiVia::xTopOffset() const$/;"	f	class:lefiVia
xTopOffset_	def/def/defiVia.hpp	/^  int   xTopOffset_;        \/\/ 5.6$/;"	m	class:defiVia
xTopOs_	lef/include/lefiVia.hpp	/^  double xTopOs_;              \/\/ 5.6$/;"	m	class:lefiVia
xTopOs_	lef/lef/lefiVia.hpp	/^  double xTopOs_;              \/\/ 5.6$/;"	m	class:lefiVia
x_	def/def/defiComponent.hpp	/^  int x_, y_;           \/\/ placement loc$/;"	m	class:defiComponent
x_	def/def/defiMisc.hpp	/^  int* x_;$/;"	m	class:defiGeometries
x_	def/def/defiPinCap.hpp	/^  int    x_, y_;$/;"	m	class:defiPinPort
x_	def/def/defiPinCap.hpp	/^  int x_, y_;            \/\/ placement$/;"	m	class:defiPin
x_	def/def/defiRowTrack.hpp	/^  double x_;$/;"	m	class:defiRow
x_	def/def/defiRowTrack.hpp	/^  double x_;$/;"	m	class:defiTrack
x_	def/def/defiRowTrack.hpp	/^  int x_;$/;"	m	class:defiGcellGrid
x_	lef/include/lefiMisc.hpp	/^  double x_;$/;"	m	class:lefiSitePattern
x_	lef/include/lefiMisc.hpp	/^  double* x_;$/;"	m	class:lefiGeometries
x_	lef/lef/lefiMisc.hpp	/^  double x_;$/;"	m	class:lefiSitePattern
x_	lef/lef/lefiMisc.hpp	/^  double* x_;$/;"	m	class:lefiGeometries
x_num	def/def/defiSite.cpp	/^double defiSite::x_num() const {$/;"	f	class:defiSite
x_num_	def/def/defiSite.hpp	/^  double x_num_, y_num_; $/;"	m	class:defiSite
x_orig	def/def/defiSite.cpp	/^double defiSite::x_orig() const {$/;"	f	class:defiSite
x_orig_	def/def/defiSite.hpp	/^  double x_orig_, y_orig_;  \/\/ Origin$/;"	m	class:defiSite
x_step	def/def/defiSite.cpp	/^double defiSite::x_step() const {$/;"	f	class:defiSite
x_step_	def/def/defiSite.hpp	/^  double x_step_, y_step_;  \/\/ Array step size.$/;"	m	class:defiSite
xh	def/def/defiBlockage.cpp	/^int defiBlockage::xh(int index) const {$/;"	f	class:defiBlockage
xh	def/def/defiFill.cpp	/^int defiFill::xh(int index) const {$/;"	f	class:defiFill
xh	def/def/defiNet.cpp	/^int defiNet::xh(int index) const {$/;"	f	class:defiNet
xh	def/def/defiNet.cpp	/^int defiVpin::xh() const  {$/;"	f	class:defiVpin
xh	def/def/defiRegion.cpp	/^int defiRegion::xh(int index) const {$/;"	f	class:defiRegion
xh	def/def/defiSite.cpp	/^int defiBox::xh() const {$/;"	f	class:defiBox
xh	def/def/defiSlot.cpp	/^int defiSlot::xh(int index) const {$/;"	f	class:defiSlot
xh	lef/clef/lefiTypedefs.h	/^      double xh;$/;"	m	struct:lefiGeomRect
xh	lef/clef/lefiTypedefs.h	/^  double xh;$/;"	m	struct:lefiGeomRectIter
xh	lef/include/lefiMisc.hpp	/^      double xh;$/;"	m	struct:lefiGeomRect
xh	lef/include/lefiMisc.hpp	/^  double xh;$/;"	m	struct:lefiGeomRectIter
xh	lef/include/lefiTypedefs.h	/^      double xh;$/;"	m	struct:lefiGeomRect
xh	lef/include/lefiTypedefs.h	/^  double xh;$/;"	m	struct:lefiGeomRectIter
xh	lef/lef/lefiMisc.hpp	/^      double xh;$/;"	m	struct:lefiGeomRect
xh	lef/lef/lefiMisc.hpp	/^  double xh;$/;"	m	struct:lefiGeomRectIter
xh	lef/lef/lefiVia.cpp	/^lefiVia::xh(int layerNum,$/;"	f	class:lefiVia
xh	lef/lef/lefiVia.cpp	/^lefiViaLayer::xh(int index)$/;"	f	class:lefiViaLayer
xh	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::xh() const$/;"	f	class:lefiViaRuleLayer
xh_	def/def/defiBlockage.hpp	/^  int*   xh_;$/;"	m	class:defiBlockage
xh_	def/def/defiFill.hpp	/^  int*  xh_;$/;"	m	class:defiFill
xh_	def/def/defiGroup.hpp	/^  int* xh_;$/;"	m	class:defiGroup
xh_	def/def/defiNet.hpp	/^  int xh_;$/;"	m	class:defiVpin
xh_	def/def/defiNet.hpp	/^  int* xh_;$/;"	m	class:defiNet
xh_	def/def/defiPinCap.hpp	/^  int    *xl_, *yl_, *xh_, *yh_;$/;"	m	class:defiPinPort
xh_	def/def/defiPinCap.hpp	/^  int *xl_, *yl_, *xh_, *yh_;       \/\/ 5.6, changed to arrays$/;"	m	class:defiPin
xh_	def/def/defiRegion.hpp	/^  int* xh_;$/;"	m	class:defiRegion
xh_	def/def/defiSite.hpp	/^  int xh_, yh_;$/;"	m	class:defiBox
xh_	def/def/defiSlot.hpp	/^  int*  xh_;$/;"	m	class:defiSlot
xh_	def/def/defiVia.hpp	/^  int* xh_;$/;"	m	class:defiVia
xh_	lef/include/lefiVia.hpp	/^  double* xh_;$/;"	m	class:lefiViaLayer
xh_	lef/include/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
xh_	lef/lef/lefiVia.hpp	/^  double* xh_;$/;"	m	class:lefiViaLayer
xh_	lef/lef/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
xl	def/def/defiBlockage.cpp	/^int defiBlockage::xl(int index) const {$/;"	f	class:defiBlockage
xl	def/def/defiFill.cpp	/^int defiFill::xl(int index) const {$/;"	f	class:defiFill
xl	def/def/defiNet.cpp	/^int defiNet::xl(int index) const {$/;"	f	class:defiNet
xl	def/def/defiNet.cpp	/^int defiVpin::xl() const  {$/;"	f	class:defiVpin
xl	def/def/defiRegion.cpp	/^int defiRegion::xl(int index) const {$/;"	f	class:defiRegion
xl	def/def/defiSite.cpp	/^int defiBox::xl() const {$/;"	f	class:defiBox
xl	def/def/defiSlot.cpp	/^int defiSlot::xl(int index) const {$/;"	f	class:defiSlot
xl	lef/clef/lefiTypedefs.h	/^      double xl;$/;"	m	struct:lefiGeomRect
xl	lef/clef/lefiTypedefs.h	/^  double xl;$/;"	m	struct:lefiGeomRectIter
xl	lef/include/lefiMisc.hpp	/^      double xl;$/;"	m	struct:lefiGeomRect
xl	lef/include/lefiMisc.hpp	/^  double xl;$/;"	m	struct:lefiGeomRectIter
xl	lef/include/lefiTypedefs.h	/^      double xl;$/;"	m	struct:lefiGeomRect
xl	lef/include/lefiTypedefs.h	/^  double xl;$/;"	m	struct:lefiGeomRectIter
xl	lef/lef/lefiMisc.hpp	/^      double xl;$/;"	m	struct:lefiGeomRect
xl	lef/lef/lefiMisc.hpp	/^  double xl;$/;"	m	struct:lefiGeomRectIter
xl	lef/lef/lefiVia.cpp	/^lefiVia::xl(int layerNum,$/;"	f	class:lefiVia
xl	lef/lef/lefiVia.cpp	/^lefiViaLayer::xl(int index)$/;"	f	class:lefiViaLayer
xl	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::xl() const$/;"	f	class:lefiViaRuleLayer
xl_	def/def/defiBlockage.hpp	/^  int*   xl_;$/;"	m	class:defiBlockage
xl_	def/def/defiFill.hpp	/^  int*  xl_;$/;"	m	class:defiFill
xl_	def/def/defiGroup.hpp	/^  int* xl_;$/;"	m	class:defiGroup
xl_	def/def/defiNet.hpp	/^  int xl_;$/;"	m	class:defiVpin
xl_	def/def/defiNet.hpp	/^  int* xl_;$/;"	m	class:defiNet
xl_	def/def/defiPinCap.hpp	/^  int    *xl_, *yl_, *xh_, *yh_;$/;"	m	class:defiPinPort
xl_	def/def/defiPinCap.hpp	/^  int *xl_, *yl_, *xh_, *yh_;       \/\/ 5.6, changed to arrays$/;"	m	class:defiPin
xl_	def/def/defiRegion.hpp	/^  int* xl_;$/;"	m	class:defiRegion
xl_	def/def/defiSite.hpp	/^  int xl_, yl_;$/;"	m	class:defiBox
xl_	def/def/defiSlot.hpp	/^  int*  xl_;$/;"	m	class:defiSlot
xl_	def/def/defiVia.hpp	/^  int* xl_;$/;"	m	class:defiVia
xl_	lef/include/lefiVia.hpp	/^  double* xl_;$/;"	m	class:lefiViaLayer
xl_	lef/include/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
xl_	lef/lef/lefiVia.hpp	/^  double* xl_;$/;"	m	class:lefiViaLayer
xl_	lef/lef/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
y	def/cdef/defiTypedefs.h	/^  int y;$/;"	m	struct:defiPnt
y	def/cdef/defiTypedefs.h	/^  int* y;$/;"	m	struct:defiPoints
y	def/def/defiDefs.hpp	/^    int y;$/;"	m	struct:defpoint
y	def/def/defiMisc.hpp	/^  int* y;$/;"	m	struct:defiPoints
y	def/def/defiPath.hpp	/^  int y;$/;"	m	struct:defiPnt
y	def/def/defiRowTrack.cpp	/^double defiRow::y() const {$/;"	f	class:defiRow
y	lef/clef/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiGeomVia
y	lef/clef/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiGeomViaIter
y	lef/clef/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiPoints
y	lef/clef/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPath
y	lef/clef/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPathIter
y	lef/clef/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPolygon
y	lef/clef/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPolygonIter
y	lef/include/lefiDefs.hpp	/^    double y;$/;"	m	struct:point
y	lef/include/lefiMisc.hpp	/^  double y;$/;"	m	struct:lefiGeomVia
y	lef/include/lefiMisc.hpp	/^  double y;$/;"	m	struct:lefiGeomViaIter
y	lef/include/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPath
y	lef/include/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPathIter
y	lef/include/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPolygon
y	lef/include/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPolygonIter
y	lef/include/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiGeomVia
y	lef/include/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiGeomViaIter
y	lef/include/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiPoints
y	lef/include/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPath
y	lef/include/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPathIter
y	lef/include/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPolygon
y	lef/include/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPolygonIter
y	lef/include/lefiUtil.hpp	/^  double y;$/;"	m	struct:lefiPoints
y	lef/lef/lefiDefs.hpp	/^    double y;$/;"	m	struct:point
y	lef/lef/lefiMisc.cpp	/^lefiSitePattern::y() const$/;"	f	class:lefiSitePattern
y	lef/lef/lefiMisc.hpp	/^  double y;$/;"	m	struct:lefiGeomVia
y	lef/lef/lefiMisc.hpp	/^  double y;$/;"	m	struct:lefiGeomViaIter
y	lef/lef/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPath
y	lef/lef/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPathIter
y	lef/lef/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPolygon
y	lef/lef/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPolygonIter
y	lef/lef/lefiUtil.hpp	/^  double y;$/;"	m	struct:lefiPoints
yBotEnc	lef/lef/lefiVia.cpp	/^lefiVia::yBotEnc() const$/;"	f	class:lefiVia
yBotEnc_	def/def/defiVia.hpp	/^  int   yBotEnc_;           \/\/ 5.6$/;"	m	class:defiVia
yBotEnc_	lef/include/lefiVia.hpp	/^  double yBotEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
yBotEnc_	lef/lef/lefiVia.hpp	/^  double yBotEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
yBotOffset	lef/lef/lefiVia.cpp	/^lefiVia::yBotOffset() const$/;"	f	class:lefiVia
yBotOffset_	def/def/defiVia.hpp	/^  int   yBotOffset_;        \/\/ 5.6$/;"	m	class:defiVia
yBotOs_	lef/include/lefiVia.hpp	/^  double yBotOs_;              \/\/ 5.6$/;"	m	class:lefiVia
yBotOs_	lef/lef/lefiVia.hpp	/^  double yBotOs_;              \/\/ 5.6$/;"	m	class:lefiVia
yCutSize	lef/lef/lefiVia.cpp	/^lefiVia::yCutSize() const$/;"	f	class:lefiVia
yCutSpacing	lef/lef/lefiVia.cpp	/^lefiVia::yCutSpacing() const$/;"	f	class:lefiVia
yCutSpacing_	def/def/defiVia.hpp	/^  int   yCutSpacing_;       \/\/ 5.6$/;"	m	class:defiVia
yLoc	def/def/defiNet.cpp	/^int defiVpin::yLoc() const {$/;"	f	class:defiVpin
yLoc_	def/def/defiNet.hpp	/^  int yLoc_;$/;"	m	class:defiVpin
yNum	def/def/defiRowTrack.cpp	/^double defiRow::yNum() const {$/;"	f	class:defiRow
yNum_	def/def/defiRowTrack.hpp	/^  double yNum_;$/;"	m	class:defiRow
yOffset	lef/lef/lefiVia.cpp	/^lefiVia::yOffset() const$/;"	f	class:lefiVia
yOffset_	def/def/defiVia.hpp	/^  int   yOffset_;           \/\/ 5.6$/;"	m	class:defiVia
yOffset_	lef/include/lefiVia.hpp	/^  double yOffset_;             \/\/ 5.6$/;"	m	class:lefiVia
yOffset_	lef/lef/lefiVia.hpp	/^  double yOffset_;             \/\/ 5.6$/;"	m	class:lefiVia
ySize_	def/def/defiVia.hpp	/^  int ySize_;               \/\/ 5.6$/;"	m	class:defiVia
ySize_	lef/include/lefiVia.hpp	/^  double ySize_;               \/\/ 5.6$/;"	m	class:lefiVia
ySize_	lef/lef/lefiVia.hpp	/^  double ySize_;               \/\/ 5.6$/;"	m	class:lefiVia
ySpacing_	lef/include/lefiVia.hpp	/^  double ySpacing_;            \/\/ 5.6$/;"	m	class:lefiVia
ySpacing_	lef/lef/lefiVia.hpp	/^  double ySpacing_;            \/\/ 5.6$/;"	m	class:lefiVia
yStart	lef/clef/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomPathIter
yStart	lef/clef/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomPolygonIter
yStart	lef/clef/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomRectIter
yStart	lef/clef/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomViaIter
yStart	lef/include/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomPathIter
yStart	lef/include/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomPolygonIter
yStart	lef/include/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomRectIter
yStart	lef/include/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomViaIter
yStart	lef/include/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomPathIter
yStart	lef/include/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomPolygonIter
yStart	lef/include/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomRectIter
yStart	lef/include/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomViaIter
yStart	lef/lef/lefiMisc.cpp	/^lefiSitePattern::yStart() const$/;"	f	class:lefiSitePattern
yStart	lef/lef/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomPathIter
yStart	lef/lef/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomPolygonIter
yStart	lef/lef/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomRectIter
yStart	lef/lef/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomViaIter
yStart_	lef/include/lefiMisc.hpp	/^  double yStart_;$/;"	m	class:lefiGeometries
yStart_	lef/include/lefiMisc.hpp	/^  double yStart_;$/;"	m	class:lefiSitePattern
yStart_	lef/lef/lefiMisc.hpp	/^  double yStart_;$/;"	m	class:lefiGeometries
yStart_	lef/lef/lefiMisc.hpp	/^  double yStart_;$/;"	m	class:lefiSitePattern
yStep	def/def/defiRowTrack.cpp	/^double defiRow::yStep() const {$/;"	f	class:defiRow
yStep	def/def/defrData.hpp	/^    double yStep;$/;"	m	class:defrData
yStep	lef/clef/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomPathIter
yStep	lef/clef/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomPolygonIter
yStep	lef/clef/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomRectIter
yStep	lef/clef/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomViaIter
yStep	lef/include/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomPathIter
yStep	lef/include/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomPolygonIter
yStep	lef/include/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomRectIter
yStep	lef/include/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomViaIter
yStep	lef/include/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomPathIter
yStep	lef/include/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomPolygonIter
yStep	lef/include/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomRectIter
yStep	lef/include/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomViaIter
yStep	lef/lef/lefiMisc.cpp	/^lefiSitePattern::yStep() const$/;"	f	class:lefiSitePattern
yStep	lef/lef/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomPathIter
yStep	lef/lef/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomPolygonIter
yStep	lef/lef/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomRectIter
yStep	lef/lef/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomViaIter
yStep_	def/def/defiRowTrack.hpp	/^  double yStep_;$/;"	m	class:defiRow
yStep_	lef/include/lefiMisc.hpp	/^  double yStep_;$/;"	m	class:lefiGeometries
yStep_	lef/include/lefiMisc.hpp	/^  double yStep_;$/;"	m	class:lefiSitePattern
yStep_	lef/lef/lefiMisc.hpp	/^  double yStep_;$/;"	m	class:lefiGeometries
yStep_	lef/lef/lefiMisc.hpp	/^  double yStep_;$/;"	m	class:lefiSitePattern
yTopEnc	lef/lef/lefiVia.cpp	/^lefiVia::yTopEnc() const$/;"	f	class:lefiVia
yTopEnc_	def/def/defiVia.hpp	/^  int   yTopEnc_;           \/\/ 5.6$/;"	m	class:defiVia
yTopEnc_	lef/include/lefiVia.hpp	/^  double yTopEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
yTopEnc_	lef/lef/lefiVia.hpp	/^  double yTopEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
yTopOffset	lef/lef/lefiVia.cpp	/^lefiVia::yTopOffset() const$/;"	f	class:lefiVia
yTopOffset_	def/def/defiVia.hpp	/^  int   yTopOffset_;        \/\/ 5.6$/;"	m	class:defiVia
yTopOs_	lef/include/lefiVia.hpp	/^  double yTopOs_;              \/\/ 5.6$/;"	m	class:lefiVia
yTopOs_	lef/lef/lefiVia.hpp	/^  double yTopOs_;              \/\/ 5.6$/;"	m	class:lefiVia
y_	def/def/defiComponent.hpp	/^  int x_, y_;           \/\/ placement loc$/;"	m	class:defiComponent
y_	def/def/defiMisc.hpp	/^  int* y_;$/;"	m	class:defiGeometries
y_	def/def/defiPinCap.hpp	/^  int    x_, y_;$/;"	m	class:defiPinPort
y_	def/def/defiPinCap.hpp	/^  int x_, y_;            \/\/ placement$/;"	m	class:defiPin
y_	def/def/defiRowTrack.hpp	/^  double y_;$/;"	m	class:defiRow
y_	lef/include/lefiMisc.hpp	/^  double y_;$/;"	m	class:lefiSitePattern
y_	lef/include/lefiMisc.hpp	/^  double* y_;$/;"	m	class:lefiGeometries
y_	lef/lef/lefiMisc.hpp	/^  double y_;$/;"	m	class:lefiSitePattern
y_	lef/lef/lefiMisc.hpp	/^  double* y_;$/;"	m	class:lefiGeometries
y_num	def/def/defiSite.cpp	/^double defiSite::y_num() const {$/;"	f	class:defiSite
y_num_	def/def/defiSite.hpp	/^  double x_num_, y_num_; $/;"	m	class:defiSite
y_orig	def/def/defiSite.cpp	/^double defiSite::y_orig() const {$/;"	f	class:defiSite
y_orig_	def/def/defiSite.hpp	/^  double x_orig_, y_orig_;  \/\/ Origin$/;"	m	class:defiSite
y_step	def/def/defiSite.cpp	/^double defiSite::y_step() const {$/;"	f	class:defiSite
y_step_	def/def/defiSite.hpp	/^  double x_step_, y_step_;  \/\/ Array step size.$/;"	m	class:defiSite
yh	def/def/defiBlockage.cpp	/^int defiBlockage::yh(int index) const {$/;"	f	class:defiBlockage
yh	def/def/defiFill.cpp	/^int defiFill::yh(int index) const {$/;"	f	class:defiFill
yh	def/def/defiNet.cpp	/^int defiNet::yh(int index) const {$/;"	f	class:defiNet
yh	def/def/defiNet.cpp	/^int defiVpin::yh() const  {$/;"	f	class:defiVpin
yh	def/def/defiRegion.cpp	/^int defiRegion::yh(int index) const {$/;"	f	class:defiRegion
yh	def/def/defiSite.cpp	/^int defiBox::yh() const {$/;"	f	class:defiBox
yh	def/def/defiSlot.cpp	/^int defiSlot::yh(int index) const {$/;"	f	class:defiSlot
yh	lef/clef/lefiTypedefs.h	/^      double yh;$/;"	m	struct:lefiGeomRect
yh	lef/clef/lefiTypedefs.h	/^  double yh;$/;"	m	struct:lefiGeomRectIter
yh	lef/include/lefiMisc.hpp	/^      double yh;$/;"	m	struct:lefiGeomRect
yh	lef/include/lefiMisc.hpp	/^  double yh;$/;"	m	struct:lefiGeomRectIter
yh	lef/include/lefiTypedefs.h	/^      double yh;$/;"	m	struct:lefiGeomRect
yh	lef/include/lefiTypedefs.h	/^  double yh;$/;"	m	struct:lefiGeomRectIter
yh	lef/lef/lefiMisc.hpp	/^      double yh;$/;"	m	struct:lefiGeomRect
yh	lef/lef/lefiMisc.hpp	/^  double yh;$/;"	m	struct:lefiGeomRectIter
yh	lef/lef/lefiVia.cpp	/^lefiVia::yh(int layerNum,$/;"	f	class:lefiVia
yh	lef/lef/lefiVia.cpp	/^lefiViaLayer::yh(int index)$/;"	f	class:lefiViaLayer
yh	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::yh() const$/;"	f	class:lefiViaRuleLayer
yh_	def/def/defiBlockage.hpp	/^  int*   yh_;$/;"	m	class:defiBlockage
yh_	def/def/defiFill.hpp	/^  int*  yh_;$/;"	m	class:defiFill
yh_	def/def/defiGroup.hpp	/^  int* yh_;$/;"	m	class:defiGroup
yh_	def/def/defiNet.hpp	/^  int yh_;$/;"	m	class:defiVpin
yh_	def/def/defiNet.hpp	/^  int* yh_;$/;"	m	class:defiNet
yh_	def/def/defiPinCap.hpp	/^  int    *xl_, *yl_, *xh_, *yh_;$/;"	m	class:defiPinPort
yh_	def/def/defiPinCap.hpp	/^  int *xl_, *yl_, *xh_, *yh_;       \/\/ 5.6, changed to arrays$/;"	m	class:defiPin
yh_	def/def/defiRegion.hpp	/^  int* yh_;$/;"	m	class:defiRegion
yh_	def/def/defiSite.hpp	/^  int xh_, yh_;$/;"	m	class:defiBox
yh_	def/def/defiSlot.hpp	/^  int*  yh_;$/;"	m	class:defiSlot
yh_	def/def/defiVia.hpp	/^  int* yh_;$/;"	m	class:defiVia
yh_	lef/include/lefiVia.hpp	/^  double* yh_;$/;"	m	class:lefiViaLayer
yh_	lef/include/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
yh_	lef/lef/lefiVia.hpp	/^  double* yh_;$/;"	m	class:lefiViaLayer
yh_	lef/lef/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
yl	def/def/defiBlockage.cpp	/^int defiBlockage::yl(int index) const {$/;"	f	class:defiBlockage
yl	def/def/defiFill.cpp	/^int defiFill::yl(int index) const {$/;"	f	class:defiFill
yl	def/def/defiNet.cpp	/^int defiNet::yl(int index) const {$/;"	f	class:defiNet
yl	def/def/defiNet.cpp	/^int defiVpin::yl() const  {$/;"	f	class:defiVpin
yl	def/def/defiRegion.cpp	/^int defiRegion::yl(int index) const {$/;"	f	class:defiRegion
yl	def/def/defiSite.cpp	/^int defiBox::yl() const {$/;"	f	class:defiBox
yl	def/def/defiSlot.cpp	/^int defiSlot::yl(int index) const {$/;"	f	class:defiSlot
yl	lef/clef/lefiTypedefs.h	/^      double yl;$/;"	m	struct:lefiGeomRect
yl	lef/clef/lefiTypedefs.h	/^  double yl;$/;"	m	struct:lefiGeomRectIter
yl	lef/include/lefiMisc.hpp	/^      double yl;$/;"	m	struct:lefiGeomRect
yl	lef/include/lefiMisc.hpp	/^  double yl;$/;"	m	struct:lefiGeomRectIter
yl	lef/include/lefiTypedefs.h	/^      double yl;$/;"	m	struct:lefiGeomRect
yl	lef/include/lefiTypedefs.h	/^  double yl;$/;"	m	struct:lefiGeomRectIter
yl	lef/lef/lefiMisc.hpp	/^      double yl;$/;"	m	struct:lefiGeomRect
yl	lef/lef/lefiMisc.hpp	/^  double yl;$/;"	m	struct:lefiGeomRectIter
yl	lef/lef/lefiVia.cpp	/^lefiVia::yl(int layerNum,$/;"	f	class:lefiVia
yl	lef/lef/lefiVia.cpp	/^lefiViaLayer::yl(int index)$/;"	f	class:lefiViaLayer
yl	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::yl() const$/;"	f	class:lefiViaRuleLayer
yl_	def/def/defiBlockage.hpp	/^  int*   yl_;$/;"	m	class:defiBlockage
yl_	def/def/defiFill.hpp	/^  int*  yl_;$/;"	m	class:defiFill
yl_	def/def/defiGroup.hpp	/^  int* yl_;$/;"	m	class:defiGroup
yl_	def/def/defiNet.hpp	/^  int yl_;$/;"	m	class:defiVpin
yl_	def/def/defiNet.hpp	/^  int* yl_;$/;"	m	class:defiNet
yl_	def/def/defiPinCap.hpp	/^  int    *xl_, *yl_, *xh_, *yh_;$/;"	m	class:defiPinPort
yl_	def/def/defiPinCap.hpp	/^  int *xl_, *yl_, *xh_, *yh_;       \/\/ 5.6, changed to arrays$/;"	m	class:defiPin
yl_	def/def/defiRegion.hpp	/^  int* yl_;$/;"	m	class:defiRegion
yl_	def/def/defiSite.hpp	/^  int xl_, yl_;$/;"	m	class:defiBox
yl_	def/def/defiSlot.hpp	/^  int*  yl_;$/;"	m	class:defiSlot
yl_	def/def/defiVia.hpp	/^  int* yl_;$/;"	m	class:defiVia
yl_	lef/include/lefiVia.hpp	/^  double* yl_;$/;"	m	class:lefiViaLayer
yl_	lef/include/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
yl_	lef/lef/lefiVia.hpp	/^  double* yl_;$/;"	m	class:lefiViaLayer
yl_	lef/lef/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
yy_reduce_print	lef/lef/lef.tab.cpp	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_stack_print	lef/lef/lef.tab.cpp	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_symbol_print	lef/lef/lef.tab.cpp	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	lef/lef/lef.tab.cpp	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yyalloc	lef/lef/lef.tab.cpp	/^union yyalloc$/;"	u	file:
yychar	lef/lef/lef.tab.cpp	/^int yychar;$/;"	v
yychar	lef/lef/lef.tab.cpp	70;"	d	file:
yychar	lef/lef/lef_keywords.cpp	145;"	d	file:
yycheck	lef/lef/lef.tab.cpp	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yyclearin	lef/lef/lef.tab.cpp	2922;"	d	file:
yydebug	lef/lef/lef.tab.cpp	/^int yydebug;$/;"	v
yydebug	lef/lef/lef.tab.cpp	66;"	d	file:
yydebug	lef/lef/lef_keywords.cpp	146;"	d	file:
yydefact	lef/lef/lef.tab.cpp	/^static const yytype_uint16 yydefact[] =$/;"	v	file:
yydefgoto	lef/lef/lef.tab.cpp	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydestruct	lef/lef/lef.tab.cpp	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyerrok	lef/lef/lef.tab.cpp	2921;"	d	file:
yyerror	lef/lef/lef.tab.cpp	65;"	d	file:
yyerror	lef/lef/lef_keywords.cpp	/^yyerror(const char *s)$/;"	f
yyerror	lef/lef/lef_keywords.cpp	143;"	d	file:
yylex	lef/lef/lef.tab.cpp	64;"	d	file:
yylex	lef/lef/lef_keywords.cpp	/^yylex()$/;"	f
yylex	lef/lef/lef_keywords.cpp	142;"	d	file:
yylval	def/def/defrData.hpp	/^    YYSTYPE yylval;$/;"	m	class:defrData
yylval	lef/lef/lef.tab.cpp	/^YYSTYPE yylval;$/;"	v
yylval	lef/lef/lef.tab.cpp	69;"	d	file:
yylval	lef/lef/lef_keywords.cpp	144;"	d	file:
yynerrs	lef/lef/lef.tab.cpp	/^int yynerrs;$/;"	v
yynerrs	lef/lef/lef.tab.cpp	67;"	d	file:
yynerrs	lef/lef/lef_keywords.cpp	147;"	d	file:
yypact	lef/lef/lef.tab.cpp	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact_value_is_default	lef/lef/lef.tab.cpp	1411;"	d	file:
yyparse	lef/lef/lef.tab.cpp	/^yyparse (void)$/;"	f
yyparse	lef/lef/lef.tab.cpp	63;"	d	file:
yyparse	lef/lef/lef_keywords.cpp	141;"	d	file:
yypgoto	lef/lef/lef.tab.cpp	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yyr1	lef/lef/lef.tab.cpp	/^static const yytype_uint16 yyr1[] =$/;"	v	file:
yyr2	lef/lef/lef.tab.cpp	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrline	lef/lef/lef.tab.cpp	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyss_alloc	lef/lef/lef.tab.cpp	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	lef/lef/lef.tab.cpp	/^static const yytype_uint16 yystos[] =$/;"	v	file:
yystpcpy	lef/lef/lef.tab.cpp	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	lef/lef/lef.tab.cpp	3123;"	d	file:
yystrlen	lef/lef/lef.tab.cpp	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	lef/lef/lef.tab.cpp	3107;"	d	file:
yysyntax_error	lef/lef/lef.tab.cpp	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	lef/lef/lef.tab.cpp	/^static const yytype_int16 yytable[] =$/;"	v	file:
yytable_value_is_error	lef/lef/lef.tab.cpp	1416;"	d	file:
yytname	lef/lef/lef.tab.cpp	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	lef/lef/lef.tab.cpp	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	lef/lef/lef.tab.cpp	/^  enum yytokentype$/;"	g	file:
yytokentype	lef/lef/lef.tab.h	/^  enum yytokentype$/;"	g
yytoknum	lef/lef/lef.tab.cpp	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	lef/lef/lef.tab.cpp	/^static const yytype_uint16 yytranslate[] =$/;"	v	file:
yytype_int16	lef/lef/lef.tab.cpp	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	lef/lef/lef.tab.cpp	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	lef/lef/lef.tab.cpp	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	lef/lef/lef.tab.cpp	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	lef/lef/lef.tab.cpp	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	lef/lef/lef.tab.cpp	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	lef/lef/lef.tab.cpp	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	lef/lef/lef.tab.cpp	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyvs_alloc	lef/lef/lef.tab.cpp	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
zeroOrGt	lef/lef/lef.tab.cpp	/^int zeroOrGt(double values) {$/;"	f
~defiAlias_itr	def/def/defiAlias.cpp	/^defiAlias_itr::~defiAlias_itr() {$/;"	f	class:defiAlias_itr
~defiAssertion	def/def/defiAssertion.cpp	/^defiAssertion::~defiAssertion() {$/;"	f	class:defiAssertion
~defiBlockage	def/def/defiBlockage.cpp	/^defiBlockage::~defiBlockage() {$/;"	f	class:defiBlockage
~defiBox	def/def/defiSite.cpp	/^defiBox::~defiBox() {$/;"	f	class:defiBox
~defiComponent	def/def/defiComponent.cpp	/^defiComponent::~defiComponent() {$/;"	f	class:defiComponent
~defiComponentMaskShiftLayer	def/def/defiComponent.cpp	/^defiComponentMaskShiftLayer::~defiComponentMaskShiftLayer() {$/;"	f	class:defiComponentMaskShiftLayer
~defiFPC	def/def/defiFPC.cpp	/^defiFPC::~defiFPC() {$/;"	f	class:defiFPC
~defiFill	def/def/defiFill.cpp	/^defiFill::~defiFill() {$/;"	f	class:defiFill
~defiGcellGrid	def/def/defiRowTrack.cpp	/^defiGcellGrid::~defiGcellGrid() {$/;"	f	class:defiGcellGrid
~defiGeometries	def/def/defiMisc.cpp	/^defiGeometries::~defiGeometries() {$/;"	f	class:defiGeometries
~defiGroup	def/def/defiGroup.cpp	/^defiGroup::~defiGroup() {$/;"	f	class:defiGroup
~defiIOTiming	def/def/defiIOTiming.cpp	/^defiIOTiming::~defiIOTiming() {$/;"	f	class:defiIOTiming
~defiNet	def/def/defiNet.cpp	/^defiNet::~defiNet() {$/;"	f	class:defiNet
~defiNonDefault	def/def/defiNonDefault.cpp	/^defiNonDefault::~defiNonDefault() { $/;"	f	class:defiNonDefault
~defiOrdered	def/def/defiScanchain.cpp	/^defiOrdered::~defiOrdered()$/;"	f	class:defiOrdered
~defiPartition	def/def/defiPartition.cpp	/^defiPartition::~defiPartition() {$/;"	f	class:defiPartition
~defiPath	def/def/defiPath.cpp	/^defiPath::~defiPath() {$/;"	f	class:defiPath
~defiPin	def/def/defiPinCap.cpp	/^defiPin::~defiPin() {$/;"	f	class:defiPin
~defiPinAntennaModel	def/def/defiPinCap.cpp	/^defiPinAntennaModel::~defiPinAntennaModel() {$/;"	f	class:defiPinAntennaModel
~defiPinPort	def/def/defiPinCap.cpp	/^defiPinPort::~defiPinPort() {$/;"	f	class:defiPinPort
~defiPinProp	def/def/defiPinProp.cpp	/^defiPinProp::~defiPinProp() {$/;"	f	class:defiPinProp
~defiProp	def/def/defiProp.cpp	/^defiProp::~defiProp() {$/;"	f	class:defiProp
~defiPropType	def/def/defiPropType.cpp	/^defiPropType::~defiPropType() {$/;"	f	class:defiPropType
~defiRegion	def/def/defiRegion.cpp	/^defiRegion::~defiRegion() {$/;"	f	class:defiRegion
~defiRow	def/def/defiRowTrack.cpp	/^defiRow::~defiRow() {$/;"	f	class:defiRow
~defiScanchain	def/def/defiScanchain.cpp	/^defiScanchain::~defiScanchain() {$/;"	f	class:defiScanchain
~defiShield	def/def/defiNet.cpp	/^defiShield::~defiShield() {$/;"	f	class:defiShield
~defiSite	def/def/defiSite.cpp	/^defiSite::~defiSite() {$/;"	f	class:defiSite
~defiSlot	def/def/defiSlot.cpp	/^defiSlot::~defiSlot() {$/;"	f	class:defiSlot
~defiStyles	def/def/defiMisc.cpp	/^defiStyles::~defiStyles() {$/;"	f	class:defiStyles
~defiSubnet	def/def/defiNet.cpp	/^defiSubnet::~defiSubnet() {$/;"	f	class:defiSubnet
~defiTimingDisable	def/def/defiTimingDisable.cpp	/^defiTimingDisable::~defiTimingDisable() {$/;"	f	class:defiTimingDisable
~defiTrack	def/def/defiRowTrack.cpp	/^defiTrack::~defiTrack() {$/;"	f	class:defiTrack
~defiVia	def/def/defiVia.cpp	/^defiVia::~defiVia() {$/;"	f	class:defiVia
~defiVpin	def/def/defiNet.cpp	/^defiVpin::~defiVpin() {$/;"	f	class:defiVpin
~defiWire	def/def/defiNet.cpp	/^defiWire::~defiWire() {$/;"	f	class:defiWire
~defrData	def/def/defrData.cpp	/^defrData::~defrData()$/;"	f	class:defrData
~lefiAntennaModel	lef/lef/lefiLayer.cpp	/^lefiAntennaModel::~lefiAntennaModel()$/;"	f	class:lefiAntennaModel
~lefiAntennaPWL	lef/lef/lefiLayer.cpp	/^lefiAntennaPWL::~lefiAntennaPWL()$/;"	f	class:lefiAntennaPWL
~lefiArray	lef/lef/lefiArray.cpp	/^lefiArray::~lefiArray()$/;"	f	class:lefiArray
~lefiCorrectionEdge	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::~lefiCorrectionEdge()$/;"	f	class:lefiCorrectionEdge
~lefiCorrectionResistance	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::~lefiCorrectionResistance()$/;"	f	class:lefiCorrectionResistance
~lefiCorrectionTable	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::~lefiCorrectionTable()$/;"	f	class:lefiCorrectionTable
~lefiCorrectionVictim	lef/lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::~lefiCorrectionVictim()$/;"	f	class:lefiCorrectionVictim
~lefiDensity	lef/lef/lefiMacro.cpp	/^lefiDensity::~lefiDensity()$/;"	f	class:lefiDensity
~lefiGcellPattern	lef/lef/lefiMisc.cpp	/^lefiGcellPattern::~lefiGcellPattern()$/;"	f	class:lefiGcellPattern
~lefiGeometries	lef/lef/lefiMisc.cpp	/^lefiGeometries::~lefiGeometries()$/;"	f	class:lefiGeometries
~lefiIRDrop	lef/lef/lefiMisc.cpp	/^lefiIRDrop::~lefiIRDrop()$/;"	f	class:lefiIRDrop
~lefiInfluence	lef/lef/lefiLayer.cpp	/^lefiInfluence::~lefiInfluence()$/;"	f	class:lefiInfluence
~lefiLayer	lef/lef/lefiLayer.cpp	/^lefiLayer::~lefiLayer()$/;"	f	class:lefiLayer
~lefiLayerDensity	lef/lef/lefiLayer.cpp	/^lefiLayerDensity::~lefiLayerDensity()$/;"	f	class:lefiLayerDensity
~lefiMacro	lef/lef/lefiMacro.cpp	/^lefiMacro::~lefiMacro()$/;"	f	class:lefiMacro
~lefiMaxStackVia	lef/lef/lefiMisc.cpp	/^lefiMaxStackVia::~lefiMaxStackVia()$/;"	f	class:lefiMaxStackVia
~lefiMinFeature	lef/lef/lefiMisc.cpp	/^lefiMinFeature::~lefiMinFeature()$/;"	f	class:lefiMinFeature
~lefiNoiseEdge	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::~lefiNoiseEdge()$/;"	f	class:lefiNoiseEdge
~lefiNoiseResistance	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::~lefiNoiseResistance()$/;"	f	class:lefiNoiseResistance
~lefiNoiseTable	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseTable::~lefiNoiseTable()$/;"	f	class:lefiNoiseTable
~lefiNoiseVictim	lef/lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::~lefiNoiseVictim()$/;"	f	class:lefiNoiseVictim
~lefiNonDefault	lef/lef/lefiNonDefault.cpp	/^lefiNonDefault::~lefiNonDefault()$/;"	f	class:lefiNonDefault
~lefiObstruction	lef/lef/lefiMacro.cpp	/^lefiObstruction::~lefiObstruction()$/;"	f	class:lefiObstruction
~lefiOrthogonal	lef/lef/lefiLayer.cpp	/^lefiOrthogonal::~lefiOrthogonal()$/;"	f	class:lefiOrthogonal
~lefiParallel	lef/lef/lefiLayer.cpp	/^lefiParallel::~lefiParallel()$/;"	f	class:lefiParallel
~lefiPin	lef/lef/lefiMacro.cpp	/^lefiPin::~lefiPin()$/;"	f	class:lefiPin
~lefiPinAntennaModel	lef/lef/lefiMacro.cpp	/^lefiPinAntennaModel::~lefiPinAntennaModel()$/;"	f	class:lefiPinAntennaModel
~lefiProp	lef/lef/lefiProp.cpp	/^lefiProp::~lefiProp()$/;"	f	class:lefiProp
~lefiPropType	lef/lef/lefiPropType.cpp	/^lefiPropType::~lefiPropType()$/;"	f	class:lefiPropType
~lefiSite	lef/lef/lefiMisc.cpp	/^lefiSite::~lefiSite()$/;"	f	class:lefiSite
~lefiSitePattern	lef/lef/lefiMisc.cpp	/^lefiSitePattern::~lefiSitePattern()$/;"	f	class:lefiSitePattern
~lefiSpacing	lef/lef/lefiMisc.cpp	/^lefiSpacing::~lefiSpacing()$/;"	f	class:lefiSpacing
~lefiSpacingTable	lef/lef/lefiLayer.cpp	/^lefiSpacingTable::~lefiSpacingTable()$/;"	f	class:lefiSpacingTable
~lefiTiming	lef/lef/lefiMacro.cpp	/^lefiTiming::~lefiTiming()$/;"	f	class:lefiTiming
~lefiTrackPattern	lef/lef/lefiMisc.cpp	/^lefiTrackPattern::~lefiTrackPattern()$/;"	f	class:lefiTrackPattern
~lefiTwoWidths	lef/lef/lefiLayer.cpp	/^lefiTwoWidths::~lefiTwoWidths()$/;"	f	class:lefiTwoWidths
~lefiUnits	lef/lef/lefiUnits.cpp	/^lefiUnits::~lefiUnits()$/;"	f	class:lefiUnits
~lefiUseMinSpacing	lef/lef/lefiMisc.cpp	/^lefiUseMinSpacing::~lefiUseMinSpacing()$/;"	f	class:lefiUseMinSpacing
~lefiVia	lef/lef/lefiVia.cpp	/^lefiVia::~lefiVia()$/;"	f	class:lefiVia
~lefiViaLayer	lef/lef/lefiVia.cpp	/^lefiViaLayer::~lefiViaLayer()$/;"	f	class:lefiViaLayer
~lefiViaRule	lef/lef/lefiViaRule.cpp	/^lefiViaRule::~lefiViaRule()$/;"	f	class:lefiViaRule
~lefiViaRuleLayer	lef/lef/lefiViaRule.cpp	/^lefiViaRuleLayer::~lefiViaRuleLayer()$/;"	f	class:lefiViaRuleLayer
~lefrData	lef/lef/lefrData.cpp	/^lefrData::~lefrData()$/;"	f	class:lefrData
